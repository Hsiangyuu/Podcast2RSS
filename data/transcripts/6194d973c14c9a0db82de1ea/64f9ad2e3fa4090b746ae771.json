{
  "pid": "6194d973c14c9a0db82de1ea",
  "eid": "64f9ad2e3fa4090b746ae771",
  "title": "听众来信 #5 如何在业余时间学习技术",
  "task_id": "47z39vd5redm9edg",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "这一封信来自BBING ban我。他说我毕业自学编程，找了一个小公司的工作，但工作中学习到的东西不多。因为工作的东西一直是那些也没有什么新的提升，但业余时间学习看不下去。我想问下怎么学习新的技术，还有如何给自己定个目标，或是知道自己在什么，自己是在什么样的阶段感兴趣的东西会学得很投入，但工作上的技术自己学不下去。你们对编程学习是怎么样的看法？平时是怎么提升自己的专业能力的呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:45",
      "text": "感觉这里面有好多个小问题，就是它不是一个单个的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:50",
      "text": "第一是工作中学习到的东西不多，对吧？因为工作的东西一直是没什么新的提升，是觉得工作是重复的，所以没有什么新的提升，所以在工作里面学不到什么东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:07",
      "text": "我觉得这个太常见了。首先这个太常见，可能你工作中用到的是另一个技术。比如说我拍工作中用到的是python，然后我可能自己擅长的或者说感兴趣的是前端，我也有这种情况，但是我会做的事情就是我会把我的python可能不会没必要精通到一定程度，但是我会把它最起码掌握到能让我高效工作的程度。就是说一个工作我接到之后，我不会因为我不会这个技术耽误我的工作，这是最基本的底线。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:45",
      "text": "然后第二个层级就是比如说接到一些，这里就举例用python，接到一些python的工作，我就是最起码我会有更好的方式去实现它，然后以便于应对将来的一些新的需求。这个就是我已经觉得就是我的成就感来自于不是说更好的做工作，而是说我更好的怎么说work smart。就像Randy说的，我是更好的把工作更高效的用用一种更高效的方式完成了。所以本来这个工作可能要用一天，但是我的成就感来自于因为我学到了一个程度，然后我用半天就把这个事情解决了。所以我大概学习的动力来自于这里，而不是说怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:39",
      "text": "对，因为技术都是有限的，就是你无论怎再怎么学的技术也就那几个。总有一天你会也会觉得什么没有什么新的东西，一直是那样子。对，但是我们应该要做的是那种同一个东西，但是你做的更好或者做得更快。我之前在做咨询的时候，有也有人问过我。就这个问题后来我在博客里面写了，就是我我的那篇做我做程序员学到的十件十个东西里面，其实最后一条也提到了，我们不应该在工作的场景里面去寻找我们可以学到什么东西。因为不是每个人都有那么好的运气。对，因为我觉得你在工作中能学到东西是一种运气。所以我们应该换一个思路，就是说我们我就我自己我自己学学技术已经很久不是从公司里面的任务里面去发掘出来的，都是我业余的时间学习的，就是自己做一些产品什么的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:49",
      "text": "但是这位朋友他说业余时间学习看不下去，所以我觉得这这是这是这位朋友最大的问题。因为他说他他最后问到我们平时是怎么提升自己的专业的能力的那我觉得他这个所谓的专业能力，可能他有一个误区。就是说所谓的专业能力是你在某一个什么库，语言或者什么技术学习的很厉害，这是专业能力。但是我觉得这是一个误区，我觉得你能用业余时间，或者说你能在工作里面面对一些很乏善可陈的任务的时候，还能做一些改进。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:35",
      "text": "或者说你能在业余时间学习更多的东西，它这也是一种专业能力我自己的经验是我现在可能我在别人看来，我好像为什么Randy你你你知道那么多技术方面的这些事情，可能学的都不是很深，不是说真的很牛逼的地步。但是我可能会知道很多这些东西。不是因为我有一个什么很高效的方法去学这些，而是因为我每天都在看我，我花了很多时间都在这里看这些东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:05",
      "text": "我是觉得技术能力方面的提升，其实是我觉得还是就很多人之前有一种论调，论调是说程序员他不是他是一种青春饭，就不吃经验。如果一个新人来做同样的事情，他学的很快，然后做的事情有他学的东西就直接上来，就是学的新的，然后做事情年轻人又很快，所以可能老的人就没有什么优势。但是我不这么认为，我觉得提升技术是一件很难的事情，因为很多东西你学过之后，可能你现在用不上，然后很快就忘了。比如说很多人去学一些自己感兴趣的东西，然后在工作中又用不上。你既然用不上的话，那个熟练度就提升不起来，然后很快就忘了。但是你学它到底有没有用呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:55",
      "text": "我觉得还是有点用的，就是你至少你知道了他是一个什么东西，你可能你忘了他怎么写，或者说你忘了他甚至忘了它那个东西，你命令好像都不知道怎么敲了，然后完全忘了。但是你最起码知道一些google的那个key words是在哪里的。然后你将来毕竟你思考过了，毕竟你学过了。然后将来遇到同样的问题，你可能已经忘了怎么处理。但是你可能google一搜，你就能搜到自己想要的解决方案。然后我觉得这个也是一种经验。为什么很多程序员他很多大的公司他有一些很有经验的程序员，这些程序员他就是无所不知。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:35",
      "text": "也不是我觉得他在一个方面可能熟练度很高，然后在其他方面就是知道越来越多的keywords。你问他说，我们现在有一个这样的技术难题，你推荐什么样的架构，有什么best practice？他可能会说，你知道什么什么吗？你要不要去搜一下这个东西，然后你要不要学一下，看一下这个方案。可能他知道的就更多的是一些广度层面的东西，对吧？所以我觉得如果你想在技术层面深挖的话，就是从广度和深度都同时扩展。不一定要把自己局限在某一个特定的技术领域，然后多了解其他的技术，这个是一方面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:23",
      "text": "然后另一方面就是我觉得程序员专业能力，这个其实很难限定什么是专业能力。你说沟通我觉得也是程序员的一种能力，总结也是程序员一种能力。然后梳理需求，如何能把现实生活中的他的问题抽象成我们程序的代码，也是一种能力。那你说这些能力算不算专业能力呢？要不要提升呢？我觉得这些能力其实是更亟待提升的，而不是说你掌握了JS的一些语法堂，然后这个是专业能力。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:58",
      "text": "我觉得如何能保证自己写代码更高效，然后更成熟、更完善，这些都是围绕程序员的一个专业能力。所以我觉得这些能力也是值得提升的。而提升这些能力可能是比提升刚才说的那些专业的，那些技术方面的能力，更更简单的，更有迹可循的代码。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:27",
      "text": "之外的能力。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:28",
      "text": "对代码之外的能力。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:32",
      "text": "最后我想就是因为他提到了，他其实想知道我们他们说你们对编程学习是怎么看，怎么样的看法。我可以分享一下，我每天简单分享一下我每天所谓的学习有哪一些。我每天起床就会刷twitter，get up help a news, 这是我必刷的三个东西。我就这个东西我每天醒来刷完之后，我就会知道这个世界到底在这个程序员的世界到底在发生什么东西，是发生什么事情。然后在我浏览这一些资讯的时候，我就会看到有一些什么新的技术，什么新的库。大家在讨论什么新的，或者它不是新的，或者是什么新版本发布什么东西。就大家在讨论的东西是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:25",
      "text": "可能有一些我没见过的，我没见过的可能看到他关键字我是有兴趣的，我就会进去看一下。进去看的时候我不一定能够用得到。但是对我来说最重要的是我知道了这么一个东西，我知道了我我我想去看他这些东西他解决了什么问题。可能有一些问题是我从来没有遇到过的，但是最起码我可能用不到。但是我最起码可以知道这个世界有一些这样的问题的存在。另外一些更好的就是我也有一样的问题，然后他写了一些东西来解决这个问题，那我就可以学习到很多东西，就是为什么我没有想到怎么去解决，或者说他的解决方法有什么它独特的哲学在里面。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:09",
      "text": "可能很多人觉得我工作上用不了，用不到redux，我很快就会忘了，那怎么办？我觉得没有关系，一点关系都没有你你我学redux，我不是学他API怎么用，我看我当然会看的。但是我不是为了记他的API怎么用，而是看我而是想看这个redux到底解决了什么问题，他怎么去解决，他用他解决的思路是什么？这对我来说是最关键的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:39",
      "text": "就是redux代码就100行不够，但是它里面包含的这种想法，它的哲学是很大的一片东西。你在redux的官网你可以知道，但为什么要写这个？它是借鉴了L一个编程语言叫L它是借鉴了这个东西。所以我就说我以前没见过这个东西，他借鉴的东西我没见过，我就去了解。然后原来他是从这个地方去借鉴过来的那那个原始的东西到底是怎么样的呢？我就学会了。原来有一个javascript方言，就是从哈斯克编辑到JS的一个语言。然后我就觉得这挺有趣的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:23",
      "text": "然后你再深入redux，redux的主张是啊immutable。那你就会去想，可能我以前不知道immutable是什么，我就想什么叫immutable。原来这个是在程序里面，数据结构是有分immutable mutable的。然后他们两个的区别是什么？在什么样的环境下他们会有什么样不同的优势，那就学到了。然后再看原来reduce用的是什么reducer，去保持它的immutable able。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:54",
      "text": "我觉得这种各样各各种各样的这种跟redux本身无关的东西我都能学到，而且学着学到的这些东西他是不会忘记的。就比如说我看redux，然后他借鉴LM是一个方那个函数式编程，那我就会去想什么是函数式编程，那我就学到很多了。你看我单从一个redux就能学到这么多的东西。你说我最后我到现在我都没在工作中用过redux。说实话我还是比较幸运的，我就没有在工作中使用过redox，但是redux让我了解了这么多的东西，这些东西是不会忘掉的对对吧？我觉得这对我个人来说，这就是我去所谓的编程业余学习的一个方法。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:48",
      "text": "我稍微补充一下，就是其实很多，因为我们这个编程这个东西已经出现了几十年了，有很多东西沉淀下来的，它不一定是最新的技术。但一些概念，比如说KISS这些已经沉淀了几十年的概念，函数式编程这些是很值得学的。就是你可能学的这种东西，这种思想它不一定有用。但是你最起码知道当时这个东西是为了解决什么问题而出现。然后为什么它流传下来了，然后为什么现在还有人在用，就是很多东西是蛮值得学的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:25",
      "text": "另外就是学习编程的话，确实是需要额外投入时间的。它不是说你在工作中可能稍微学一学就会了，或者说你在业余中就看看一看东西，然后就很轻松就学会了。不是那样的，我觉得大部分时间还是要自己真的投资进去。你看书或者看一些大牛的博客，看一些最新的东西都是要花很久时间的。我记得有一篇不是有一篇就是我我我觉得每一篇英文的教程，或者说他的那种很有深度的技术文章，都是需要很长时间去理解的。不是说你看完好像很快就看完了，我记得我读单的文章好像也蛮深。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:15",
      "text": "我记得还有一个谁就是j query的作者，他之前写了一本书叫javascript engine，就是怎么翻译完忍者java supreme的编程，忍者忍术什么秘籍之类，是大概这样的，就他写的那本书，然后我记得当时读完，现在我已经忘了那本书讲了什么。但是我是花了很久很久时间读完那本书的。就是很多事情他可能简单的在书里就一段话，但是我读完那段话，我要想很久，为什么这个东西有这个东西为什么要这样写？就是要花很很长时间还是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:56",
      "text": "对我刚刚也想到一个比喻，就是这就像你可能学会了弹你你学会了弹吉他而且弹得不错，然后你去当吉他老师，你的工作是当吉他老师，然后你现在就开始觉得说我在教吉他的时候学习不到任何吉他的技能，这你听上去是很扯。你能学到新的吉他技术，或者说你能练习的更好，都是靠你下班之后自己去去练习的。而不是说你想要说你在教别人吉他这份工作里面，同时能学到一些什么新的东西。没有你能学到的，只有你怎么更好的教。我这个人就像代码一样，你在公司里面你的任务就是用你学到的东西，而不是说学到什么。当然有一些人可以学到什么，但我觉得大多数都是代码之外的这些技能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:00",
      "text": "感谢并。",
      "speaker": "发言人2"
    }
  ],
  "lab_info": {
    "summary": "在探讨编程学习与专业成长的过程中，分享者指出工作中学习的局限性，因工作内容往往重复且缺乏创新。他强调了业余时间学习的重要性，并提倡设定个人学习目标以促进专业发展。分享者建议，即便在工作环境不提供足够成长机会时，个人也应主动学习新技术，强调真正的专业能力不仅在于掌握技术，更在于解决问题的效率和持续学习的态度。分享的学习方法包括日常阅读技术新闻、深入探索新技术原理、理解编程概念等，以此促进个人成长。整体而言，这段对话凸显了终身学习的必要性，即使在看似无学习空间的工作环境中，也应通过多种途径实现自我提升。",
    "qa_pairs": [
      {
        "question": "这位BBING ban我遇到的问题是如何在工作中学习新技术，并且如何设定目标和找到自己感兴趣的东西来投入学习？针对这位朋友提到的业余时间看不下去书或学习的困扰，你们是如何提升自己的专业能力的呢？",
        "answer": "在工作中，由于工作内容可能相对固定，难以获取新技术，我们可以尝试将工作技术提升到足以高效完成工作的程度，例如能用Python完成工作而不是追求精通。学习的动力可以来源于通过学习新技术提高工作效率，解决工作中的问题。此外，不应只在工作中寻找学习机会，业余时间通过个人项目或产品开发来提升专业能力也是一个很好的方式。提升专业能力不仅仅是通过深入学习某一特定语言或技术，而是在面对乏味的任务时也能有所改进和创新，以及利用业余时间学习更多知识。提升技术能力是一个长期积累的过程，即使学到的技术短期内可能用不上，但能增加知识储备，提高面对问题时的解决能力，比如知道在哪里搜索相关资料。同时，沟通、总结和抽象现实问题成代码的能力也是程序员专业能力的重要组成部分，这些能力的提升往往更为关键且实用。",
        "time": "00:00:50"
      },
      {
        "question": "如何保证自己编写的代码更高效、成熟和完善，以及如何平衡技术能力和非技术能力的提升？",
        "answer": "提升代码质量的关键在于不断实践、总结经验和提高思考问题的能力。对于技术能力，可以通过广泛涉猎不同技术领域来扩展知识面，同时保持一定的深度挖掘；而对于非技术能力，如沟通、总结和需求抽象能力，也需要投入精力去锻炼。这两类能力的提升相辅相成，共同促进个人专业能力的全面发展。",
        "time": "00:07:23"
      },
      {
        "question": "你每天是如何进行编程学习的？",
        "answer": "我每天起床后会刷Twitter、Get Up帮助新闻等三个必刷的东西，了解程序员世界最新的资讯和技术动态。在浏览过程中，我会关注一些新技术、新库以及大家正在讨论的问题，即使有些内容当时用不到，但重要的是能知道世界中存在这些问题以及它们的解决方案，从而学习到不同的思路和哲学。",
        "time": "00:08:32"
      },
      {
        "question": "如何看待工作场景中可能用不到的学习内容，例如redux？",
        "answer": "我认为学习像redux这样的技术不只是为了记住API的使用方法，更重要的是理解它解决的问题和解决方案背后的思路。即使工作中没直接用到，通过深入学习，如理解其借鉴自L语言的函数式编程思想，可以拓展知识面，并学会一些新的概念和方法，如数据结构的 immutable 和 mutable 等。",
        "time": "00:11:54"
      },
      {
        "question": "在编程学习过程中，有哪些有价值且可能非最新的技术或概念？",
        "answer": "许多沉淀下来的编程原则和概念，比如KISS原则和函数式编程，是非常值得学习的。它们虽然不一定在最新的技术潮流中，但经过时间考验，对编程思维和理解系统的本质有很大帮助。",
        "time": "00:12:48"
      },
      {
        "question": "对于编程学习，是否需要投入较多时间和精力？",
        "answer": "是的，编程学习确实需要额外投入时间。不能期望仅通过工作或业余时间轻松掌握，需要阅读书籍、浏览大牛博客、研究最新的技术文章，这些都需要花费大量的时间和精力去理解和消化。比如阅读一篇深度的技术文章，可能需要很长时间来理解其中的关键点。",
        "time": "00:13:25"
      },
      {
        "question": "是否可以从教吉他中获取新的吉他技能？",
        "answer": "就像教吉他并不能直接学到新的吉他演奏技巧一样，工作中更多的是运用已掌握的知识来完成任务。虽然有些人可以从教学中获得新的技能，但大多数情况下，提升技能主要还是依靠工作之外的自我练习和不断探索学习。",
        "time": "00:14:56"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "应对工作技能停滞与自学编程的挑战",
        "summary": "讨论焦点在于一位自学编程的个人在工作中技术学习停滞的问题。他指出，虽然在工作中使用的技术有限且重复，难以带来新的提升，但他通过确保掌握足够的技能以高效完成工作，并寻求在业余时间学习新技术来突破这一困境。强调了自学的重要性，以及在没有工作挑战的情况下如何自我提升，提倡利用个人时间进行项目实践和技能深化，以达到更高的工作效率和满足感。"
      },
      {
        "time": "00:03:48",
        "title": "提升程序员专业能力的多维度思考",
        "summary": "讨论了关于如何在业余时间提升专业能力的问题，指出学习新技术不等于专业能力的提升，而是在面对乏味任务时寻求改进、广泛学习技术知识和不断实践是更为重要的。强调了专业能力不应仅限于特定技术领域的精通，还包括沟通、需求梳理和问题抽象等能力的提升。同时，认为经验积累和对技术广度与深度的探索对于程序员来说同样重要，批判了程序员工作是青春饭的论调，认为技术能力的提升是一项长期且艰难的任务。"
      },
      {
        "time": "00:07:57",
        "title": "通过编程学习提升专业能力的方法",
        "summary": "通过日常刷Twitter和关注新闻，了解编程世界的新技术和库，这种方法能够帮助程序员了解并学习到新的解决问题的方法和思路，即使某些技术可能在工作中暂时用不到。重点是理解这些技术和库解决了什么问题，它们的设计思路和背后的哲学，从而拓宽知识视野，提升编程学习的质量和效率。例如，通过学习Redux，不仅能了解其API，更能深入理解其背后的思想和原理，以及它所借鉴的其他编程语言和概念，如immutable数据和函数式编程，这种学习方法能够有效提升程序员的专业能力。"
      },
      {
        "time": "00:12:47",
        "title": "深入学习编程的价值与方法",
        "summary": "编程作为一门历史悠久的技能，其背后沉淀了众多值得学习的概念和技术，如KISS原则和函数式编程等。这些知识不仅帮助我们理解技术出现的背景，而且它们的持续使用证明了其价值。学习编程需要投入大量时间和精力，不能仅仅依靠工作中的实践或业余时间的浅尝辄止。通过阅读专业书籍、技术博客和深度技术文章，我们能够不断深化对编程的理解。学习编程的过程类似于学习音乐，需要在工作之外的时间进行深入练习和探索，以提升技能和理解。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "工作内容重复，无新挑战"
                },
                {
                  "children": [],
                  "content": "业余时间学习难以持续"
                }
              ],
              "content": "工作中学习有限"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "不确定自己处于哪个阶段"
                },
                {
                  "children": [],
                  "content": "难以找到投入学习的动力"
                }
              ],
              "content": "设定目标困难"
            }
          ],
          "content": "学习编程的挑战"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "把握工作技术基础，确保高效工作"
                },
                {
                  "children": [],
                  "content": "学习新技术，提高工作效率"
                },
                {
                  "children": [],
                  "content": "将工作和学习分开考虑，利用业余时间深入学习"
                }
              ],
              "content": "自我提升方法"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "不局限在单一技术栈，拓展广度和深度"
                },
                {
                  "children": [],
                  "content": "注重代码之外的能力，如沟通、需求分析等"
                },
                {
                  "children": [],
                  "content": "理解技术背后的哲学和解决问题的方法"
                }
              ],
              "content": "提升专业能力"
            }
          ],
          "content": "解决方案与建议"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "关注Twitter、GitHub等平台，了解最新动态"
                },
                {
                  "children": [],
                  "content": "学习新技术、新库，即使不直接使用也能拓宽视野"
                }
              ],
              "content": "利用网络资源"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "探索技术背后的原理和思想，如函数式编程、immutable等"
                },
                {
                  "children": [],
                  "content": "通过学习经典概念和技术沉淀，提高解决问题的能力"
                }
              ],
              "content": "深入理解概念"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "主动投资时间深入学习，包括阅读书籍、高质量博客等"
                },
                {
                  "children": [],
                  "content": "挑战深度技术文章，理解其中的复杂概念"
                }
              ],
              "content": "投入时间与精力"
            }
          ],
          "content": "学习资源与策略"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "不仅限于掌握特定技术，也包括对问题的抽象、解决能力"
                }
              ],
              "content": "专业能力的定义"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "编程是一场马拉松，不断学习是应对技术变化的关键"
                },
                {
                  "children": [],
                  "content": "学习不仅是技术本身，还包括学习方法和思维模式的培养"
                }
              ],
              "content": "持续学习的重要性"
            }
          ],
          "content": "学习态度与观念"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "通过个人项目或开源贡献，实践新学的技术"
                }
              ],
              "content": "将学习内容应用到实际项目中"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "与同行交流学习心得，分享自己的学习路径和成果"
                }
              ],
              "content": "交流与分享"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "对未知技术保持好奇，勇于尝试和探索新的领域"
                }
              ],
              "content": "保持好奇心和探索精神"
            }
          ],
          "content": "实践与应用"
        }
      ],
      "content": "编程学习讨论脑图摘要"
    }
  }
}