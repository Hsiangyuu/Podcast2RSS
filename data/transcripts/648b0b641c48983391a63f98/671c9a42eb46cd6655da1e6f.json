{
  "pid": "648b0b641c48983391a63f98",
  "eid": "671c9a42eb46cd6655da1e6f",
  "title": "Cursor 刷屏背后，复盘 AI Coding 的现状与发展｜对谈 Gru.ai 创始人张海龙",
  "task_id": "yg7k9wo5l7y2nxwd",
  "transcription": [
    {
      "time": "00:00:02",
      "text": "Do something there.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:17",
      "text": "最近我觉得大家在国内互联网圈能看到很多很火的跟AI coding相关的一些工具软件也好，一些讨论也好。包括典型的像cursor，可能之前是特别火，但这些火的其实主要还是美国的一些这种类型的东西，国内也还比较少。然后我们今天正好请到国内做这块，我觉得是最专业的创业者之一了，就是步入AI的创始人海龙。海龙可以简单介绍一下你自己的经历。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:46",
      "text": "我从小就是个程序员，我写程序大概从初中开始，算了算我可能写了二十多年程序了。所以一路以来都是跟这个软件工程，跟写程序都有一些渊源。包括大学研究生毕业以后做的几乎所有的工作，都跟代码跟程序员是有亲密关系的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:04",
      "text": "之前做过两件事情，大家可能是知道的。一个是开源中国，一个程序员的社区。另外一个是coding点net，是一个devo s的一个平台。这两件事情之前在国内也做了很长时间，后来就合并到腾讯，也做整个to b的这个dev ops工具。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:24",
      "text": "二三年开始我们在创业，做一个新的项目叫做咕噜AI本质上就是说觉得现在这个新的技术来了以后，可能产生了一些新的变量。就以前我们总是为程序员做工具，我们觉得AI这一波有可能第一次可以直接生产劳动力labor对吧？所谓的劳动力就是你不用再去做工具了。我觉得这个对于整个效率和生产力的提升应该是更大的，非常的令人激动。所以我们就积极的在做这件事情。总的来讲，它就是agent这个大赛道。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:56",
      "text": "你觉得国内之前几年不管是github还是什么的，好像没有特别做起来的耶。对你你总结一下这个原因是什么呢？但是coding可能它本来就是一个全球性的语言，对吧？你也许他就不需要一个中国版。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:10",
      "text": "对，这是一个很好的问题。我一直在反思其实国内不光是这个了，这里面讲的再大一点，就是整个国内的to b的生态。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:20",
      "text": "太大了，这个很容易聊，很悲观。其实我们可以聊两条线，一条是to b对吧？但你如果是真的to engineer，其实它是一个to b的。大家讲的是to developer，还有一点点小小的区别。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:33",
      "text": "to developer. 最后我觉得真正变现还是企业买单，虽然他最早可能是个PLG。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:39",
      "text": "在海外也是这样吗？我觉得国内确实是这样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:43",
      "text": "也是这样。OK对，你看我最近在硅谷，然后你就看这边买cursor的很多后面都是企业报销的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:49",
      "text": "对我之前听谁吐槽过，说这个developer是最不愿意花钱的一群人，他这里面肯定带有玩笑性质。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:57",
      "text": "那可能说的更多的是国内。我们以前做coding的，做到第三第四年的时候，其实在做开源中国的时候就有这样的感受，就是develop很难变现的。就是他想的是怎么薅你羊毛，你还想着怎么赚他钱，咋可能呢？对，不是一群很聪明的人，整个的这个思维习惯什么各方面其实都是精打细算的，本质上是跟他的工作的专业性是有关系的。所以你如果想在他身上去找这种冲动消费、情绪消费，就是你很难这么赚的生产力工具。我觉得最后买单的其实都是企业，它真的是很解决问题。就比如说jet bra，那个时候卖很多license什么的。我们也当时在开源中国参与过，就这些其实最后还是为企业买单的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:37",
      "text": "我最近在硅谷看到很多公司，然后我的一个深切的感受跟我之前是反直觉的。就是我们之前觉得国内卷同质化竞争很严重怎么的？我们觉得海外好像很多产品赛道上面没有那么卷，但其实这是个错误认知。我最近的认知是海外更卷，怎么卷？我们以前看到的海外不倦是海外卷完了你看到的是结果。OK对，你现在就比如说我举个例子，我们做agent有一个重要的一个infer的需求，就是那个observably所谓的可观测性，就是data dog那个赛道。但现在因为GAI这个agent是一个全新的这么一个东西，它需要一个新的可观测性的这么一个工具。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:14",
      "text": "我一开始以为海外这个赛道没有什么人做，就只有郎倩那个团队做了一个long smith，有一个开源的long fuse什么的。然后这次来了以后，遇到了至少五个团队在做这件事情，而且都融了很多钱，而且其实很多商业化的非常好，其实很卷在这个赛道里面。很有意思的是国内没有人做对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:33",
      "text": "但当然我们今天主要还是在聊I高地，所以我觉得这个问题可以落回来，就是我特别好奇的一件事情。我觉得美国当下最热门的赛道AI coding一定算其中一个了，对吧？我看至少有几十家创业公司在做，而且拿到上亿美金融资的公司都有好多家，国内与此同时几乎没有，对吧？这个是为什么呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:52",
      "text": "又我觉得国内不能说是没有，就是你看我们当时做coding的时候，当时说做devers，你会发现你去卖给客户的。客户要招投标什么，你会发现国内有很多人做，都是以传统ISV。因为get lab开源了，所以这件事情就变成了谁都能做，就是我贴着客户需求魔改一个开源的什么的。所以这件事情就不是不做，是很多人做。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:14",
      "text": "说到AI coding这件事情上可怕了的，现在有多少人做？我觉得国内可能大厂每个都在做。你如果去看AI coding的招投标，我觉得很多ISD它都能做。现在因为这东西已经没有秘密做cop已经是有大量开源的可以参考，对吧？有成熟的产品化的逻辑都是PMF被烫完的。所以我是觉得国内其实很多就是在卷这个PMF之后的事情，就海外可能更多的卷的是PMF之前的事情。PMF之后国内有一帮人杀进来，然后你说这东西好像已经看清楚了，大家都知道怎么做了会了，然后就开始卷。包括我们在做dev OPS的时候，我们都觉得dev OPS这个赛道没法做了，还有很多新公司成立了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:53",
      "text": "开始做对，我同意。对，所以得修正一下我刚才那个问题。我刚才想确实像自己什么的，其实都出了类似的工具，就大厂基本都有啊，确实有很多小的团队也都在做这样的事情。他只能说没有进入到国内主流资本的视线当中。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:09",
      "text": "对，大部分我觉得都做的太浅。说实话第一就是我们其实在去年5月份左右的时候有过一波纠结，说我们到底要不要做copilot，还是直接做agent。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:20",
      "text": "我觉得你还是先给大家解释一下这两个的区别。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:23",
      "text": "对，这是一个很重要的点。就是很多人可能会混淆所谓的AI coding的这里面的各种各样不同的形态。然后其实现在真正跑通商业模式的是copilot。Copal是个什么概念呢？就是说它还是个工具范畴，就是我需要一个人来用这个copilot去生产更多更好的代码。本质上copilot是减少你打字。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:45",
      "text": "就是国内讲的那个代码补全。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:48",
      "text": "对它就是各种代码补全的衍生品，这是核心。当然了，你看很多可怕的可爱，做什么问答什么的，这些东西都是不重要。对真正你去看科学为什么火，本质上就是那个补全补的特别好，这是可怕的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:58",
      "text": "Agent它是一个完全不一样的概念，是说它是一个独立完成任务的个体，就是它不用你管，它一旦领到任务以后，他会自己去想办法figure out怎么做做什么，怎么改，最后去完成这个任务，包括提交代码这些动作。也就是说agents跟人的工作是异步的，他人可以睡觉，人可以不在。这是很多人讲的，就是为什么in赛道叫digital worker呢？就是他是一个数字的员工，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:24",
      "text": "可拍的不是可拍的，这个同步的就是说你用的时候人必须在场。所以我一直把可拍的比作电钻，就是以前拧螺丝吧？我能把螺丝刀慢慢拧对吧？现在口拍的来了，它是个电钻，就哐哐就进去了，对吧？就很快。对，但是agent的逻辑是这个螺丝我已经拧了1万遍，我不想拧吧？我有个小弟帮我拧，那我就去干别的去了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:43",
      "text": "对，copilot里面典型的公司就是github co pilot和curse对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:47",
      "text": "其实不是可拍的，这个赛道其实国外卷了很多很多年。你说的github口拍的是最重要的一个，因为它最大的贡献是他找到了一个合适的PMF。这个PMF它是两个，一个是product market fit和product model fit。他找到了这个产品应该以什么样的形式出现，以及在什么场景下出现。就是他应该是寄生于IDE的一个插件。然后他在用户打字的时候润物细无声的出现。我觉得他把这个产品的形态真正的找出来了，包括收费方式也找出来了。这个是个PMF是给他跑通的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:21",
      "text": "第2个PMIP也是给它保存，就是说github口碑在GPT3的时候就已经有了，但他做的不好，那个时候大家用完了以后都弃用了。后来真正大规模的商业化被大家认识到。大家开始付费的是3.5出现以后，也就是说那个模型到了那个份上，它才能够使得这个设想的场景成立。所以我觉得github最大的贡献是找到了这两个点。但一旦这两个点找到，你就会发现做copy就变成了一个大家都会的东西了。所以很多人就开始做国外现在做国外的还有coda，以前做source graph，还有那个cloud sodium，做企业级的，还有argument。你说的那一批对吧？新的公司赚了很多钱的，但这些人他都是在to party的现有的形式上面做一点点改进，或者做一些垂直领域化的一些事情。然后咳嗽这个最大的贡献在于说他在cop的基础上面颠覆了它的交互形式。虽然它沿用了他的PMF，但是他在这个PMF上做了一个相对比较大的创新，是在产品体验上，所以他出来了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:18",
      "text": "这个怎么讲？因为我看他在讲科室，他至少表面上能看到的一个点是说他最早换的那个cloud 3.5。另外一个点就是他也是在很专注在做IDE，我觉得你可以展开讲一下你刚才说的他的产品上的创新。然后顺便可以给大家解释一下ID。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:35",
      "text": "先讲一下IDE，IDE有点像是程序员用的一个特别专业的一个word。普通打个字，你可能用个记事本就可以了。但是你要很专业的排版，你需要word或者更高级的这种排版工具。那么IDE就是叫integrated development environment，就是集成开发环境，给程序员用的这么一个很专业的编辑的工具。不光打字了，它还有各种什么运行、debug、调试，各种各样的功能在里面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:00",
      "text": "我其实觉得科sir不能够称之为一个IDE公司，我觉得这是个误解。因为curse r它99%的东西都是VS code，VS code把它开源的，然后大家就直接复用了。它。更多的为什么要去宣传自己是IDE呢？因为它没有在现有的VS code上做插件，它是folk了和VS code代码，魔改了一下，变成了一个自己的ID。但他IDE的所有的内核都不是他做的那他只是魔改了IDE的一些用户体验。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:28",
      "text": "对，因为VS code的那个IDE的插件机制比较受限，就是它限制了你一个插件能做什么，不能做什么。科是他想要做的那个事情，在这个插件机制上不能实现，就是他被束缚住了。所以他觉得我没办法，我必须去魔改你的代码，去实现我想要的这个效果。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:46",
      "text": "这条路其实非常大胆，在去年他们成立开始干这件事情的时候，很多人都不看好，包括我们也不看好。我们认为这条路太难了，但anyway人家跑出来了，这是巨大的非共识。但是这是创业的迷人之处，对吧？就这么不靠谱的项目也能跑出来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:00",
      "text": "对，因为我前几周也在美国，我们也见到了。然后有个朋友刚去面试过科技，然后说科sir一共好像就12个人，现在日以继日的在那儿加班，然后全球反正现在我看收入已经涨得非常高了，国内我相信也都有非常多的人贡献这个收入。对，所以就想回来。你觉得到底他做的好的是哪？就他打破的非共识是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:23",
      "text": "他打破非共识是说github和巨大的限制，说我只能往后补全，就是说我现在打字打到这一行这一列的时候，他会帮你往后补后面的一行或者几行。他当时有一个巨大的假设说这个不够，我们要做整个文件的全局补全。就是说OK当我打字打到这儿，或者我改了某个变量，改了某个函数的时候，我全局我这个文件相关的地方都得同时改掉。对，这是它的巨大的一个假设。这个假设当然扩展就是说我可能在整个项目的其他文件要同时改掉，他其实本质上在干这件事情。所以你用刻字很爽的一点，你会看到的是说OK。当你打字打了一半的时候，它会出现给你补全。然后你会发现它同时这个页面上面好几个地方都出现补全，你要做的事情就是tab，你tab一下它就股权现在这里，然后跳到下面一个就是type type type就是整个文件好几个地方都被你改掉了。这个体验是以前没有的，是给他up主拍的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:16",
      "text": "没有做出来的。他这个补全更多的是一种简单的参数替换，还是说他会自己debug，然后真的是做很多衔接或者修改的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:26",
      "text": "他不会做debug。他本质上还是个纯文本的修改。就是它只是根据你的上下文以及根据你当前修改的打的那几个字，他在猜测你要干什么。猜测你要干什么的时候，他把你要干的那个结果提前通过大模型给他生成出来了。他会把生成好的东西跟你当前正在编辑的文件做一个非常快速的diff就是差别。然后就告诉你哦啊第三行、第十八行、第57行、OK, 你是不是要改这些，然后这些改完是什么，他全都告诉你。他的体验好在就是说这个猜测的延迟非常低，他用了各种办法使得这个延迟可能在0.5秒之内，你感觉到好像是瞬时的。然后我要做的就是确认。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:08",
      "text": "明白了这个感觉。用在一些什么法律文件，律师的那些场景里面也挺适合的对，所以这个就很合理。为什么当时大家不信或者怎么样？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:17",
      "text": "不信有几个原因，第一是说OK，首先你不是自己的模型，你也是用的GPT或者用的anthropic。第二你没有IDE，你ID也是用的别人的。某种意义上讲，你在拿着微软的ID，然后用微软的模型，去PK微软的一个产品给他可怕的。而且这个产品已经非常成熟，大规模的商业化，所有开发者都在用。你觉得这个故事通吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:38",
      "text": "在国内肯定不通，但美国不知道，但听起来好像也不通是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:44",
      "text": "我就不是写了一篇文章，就是讲我觉得美国大厂反应慢是一个巨大的优势，对于创业者来讲。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:51",
      "text": "所以它核心就是这个点。然后让大家觉得特别好用。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:54",
      "text": "然后就传开了。对，他要的这个体验恰好就是GPT，你可能在四都做不出来的体验，要4o sonnet 3.5才能做出来。所以他恰好一直坚持说我要做这个体验，然后想各种各样的办法，然后等等终于等到花开就是3.5出来。然后这个模型非常合适在这个场景上。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:17",
      "text": "所以也有一定的运气的元素。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:20",
      "text": "对，但其实我觉得大家做AI什么的没有那么玄妙的。这个东西你扒开了transformer仔细看里面，就是告诉你原理了也没啥。一旦这个东西被证明是这样，其实谁都能做大模型已经不是什么秘密了。但是干的好是另外一件事情，就是科室那个也是一样的。不是说这里面有特别多玄妙的什么高科技，其实没有，都是工程。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:40",
      "text": "在这个事情上面我要去巩对吧？比如说我要把响应时间控制在0.5秒以内怎么办？当你面临这个问题的时候，就大的智商其实能够在这个赛道卷都不会太扯。你总能想到办法对吧？这个业界现在有什么能用的，去看论文各种这那的。我觉得最大的问题是你能不能提出这个正确的问题，对吧？就科是在二三年的时候，其实提出了一个正确的问题。这个问题等到了24年，有一个基础设施的改进，使得这个问题能够被解决。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:08",
      "text": "那与此同时give up copilot有做任何事情吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:12",
      "text": "这件事情就令人很困惑了，就是说科sir怎么做已经不是秘密的，同时get hub没有跟进。我大概跟微软开发者相关部门的人聊过一些，他们内部其实也不是很着急的，因为这东西不是很难，可是不是那么好的过的东西他们不做只有几个原因了。第一是说首先他是个插件做不出来的东西。也就是说他要做，他得把VS code的插件机制先完善一遍，他才可能在github coped现在的这个基础上面去做出科学的体验。这个事情可能是阻止他快速的去模仿去改进的一个点，但我是觉得他一定会做的反应慢一点，是反应慢对吧？但是他没有什么理由不做了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:50",
      "text": "然后最近的那个boat，这个也是偷拍的这个方向上的一个延伸。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:55",
      "text": "你说bot点new吗？对，那个可能还不能算copilot，这个有点像rapid那个agent就是相当于是说我告诉你我要做什么，他就帮我啪啪啪，各种代码什么的全给你整完，然后再把你一个开发环境也给你搭好。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:10",
      "text": "所以正好进入到agent这块了，就是刚才我们讲的两家典型的copy on公司。所以agent这块你觉得代表性的公司有啥？包括你们在内，对吧？你们也是要做agent.",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:20",
      "text": "我觉得没有严肃意义上，我认为agent的是没有跑通PMF的，2个PMF都没通。第一是product market fit，就是agent的在什么场景下面，以什么样的形式存在，怎么跟人交互，怎么定价，一切都不清楚。第2个PMF也没有，就是agent到底什么模型的出现，什么样的模型需要什么样的能力使得agent这件事情能够work。也不清楚。所以我觉得AG的现在虽然赛道无比的拥挤，但其实我目前看到的没有PMF的。所以如果他真的PMF了，你会看到大江南北有很多人在用像科尔特这样口碑传播特别好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:53",
      "text": "但是我们刚才提的那个bot点6，确实是有些人在传在用的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:57",
      "text": "但是是这样的，就是说这个赛道有很多PR当时。出来的时候也有很多都在传这东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:02",
      "text": "对，那个好夸张。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:03",
      "text": "对你要看留存，因为很多这种agent都是上来一波宣传，然后看起来特别炫酷。我感觉我现在已经麻了。什么叫麻了呢？就是你不要看这个事情表面上面今天有谁出来做了个东西，明天有谁出来这个东西。你本质上要看你要解的这个问题底层是不是already了。如果你要解的这个问题底层不ready，那所有解这个问题的人你都不用看，因为他不可能做出来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:27",
      "text": "对，当时那个David应该算是从PR层面是agent的代表了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:31",
      "text": "对他使得agent进入了大家的视野。但实际上目前也没有看到特别好的产品出来。所以总而言之，我是觉得A进的钱现在有很多拿了很多钱的，就包括augment。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:44",
      "text": "Augment其实在做copilot，做magic点def，做pull side，这两个是典型的是要开始搞模型的，而且我认为非常困难。不用OpenAI，你不用SO pic，你不用任何一家，然后你自己搞个东西，那这件事情本质上你就变成了你对整个AI到的格局的挑战。就是说我是不是做一个我自己的模型，说这个领域能够做的比通用大模型更好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:08",
      "text": "我对这件事情是持巨大的怀疑态度。因为我觉得智商这件事情或者intelligence这件事情，可能就是需要很大的模型，更通用的模型才能够实现。你在上面做各种AI的，无论是prom engineering还是rag，还是fine tuning，各种垂直化的应用。当然了他们的逻辑不一样，这也是为什么这个赛道还是很新，就是巨大的非共识对吧？就是他觉得我们得从头干，剩下的公司我基本上看到的都是不做retrain的，包括我们也是不做pretrail，都是做应用的很多很多。但目前我说实话，我觉得没有一个就像coping的那样，已经被证明说他这个做法是OK的。但这样的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:45",
      "text": "我们首先能不能说可拍到的这件事儿已经跑通了，应该可以，对吧？给tup可拍照的，我记得收入很高的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:51",
      "text": "一定跑通了。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:52",
      "text": "这个是100%跑通了。那在这个前提之下，为什么大家尤其是包括你们在内要去做agent的这件事情。而且我觉得听你的意思是agent的这个事儿目前还跑不通。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:03",
      "text": "因为copilot它还是个工具，但agent的是生产力，它自己就是个labor，对，这个是完全不一样的体验。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:09",
      "text": "就是我们现在可以做到的是在某些场景下面，就比如说我们有个论文，这个论文里面讲了一个算法，你想试一试这个算法，看看这个算法到底靠不靠谱，甚至实现出来这个代码可以直接移植到你的某个项目里面的某一段代码里面直接用，对吧？这件事情其实就可以assign给。比如说我们有个agent，你把这个PDF扔给他，然后你跟他说，我想要这个PDF里面有个算法，帮我弄一下，弄点测试数据，帮我看看执行结果。那这个可能是做不到的，就相当于是你给一个小弟安排了个任务，这种任务输入很明确，输出也很明确。其实小弟理论上是可以去通过自己的尝试去搜网站，无论是各自去编译运行、调试这个代码，它能够跑出来的。最后给你一个报告，这个是我们想要做的这个agent的逻辑。这里面细节有很多，不同的场景下面任务不一样，输入输出不一样，各种各样不一样。但是大逻辑是一样，就是说你给定一个job，你描述清楚要干什么，然后这个agent能够帮你自主的干嘛，不需要你的参与。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:11",
      "text": "当然human in the loop有另外一个故事，就是说一个好的agent在合适的时候会提出合适的问题，对吧？我觉得这个是重要的。但是总而言之，它的大逻辑就是说它能够自主的去端到端完成一个任。所以我觉得这个更吸引人。这是为什么美国在A级的赛道上有那么多人愿意投钱。他的最大的概念在于说，我不再是一个卖二十美金一个月的事，他可能就是个两千美金一个月的事了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:31",
      "text": "对。然后首先我是不是能理解成就是你现在有点像一年前两年前的curcio的一个状态。就是反正相信一个事情，然后就在等底层的技术成熟。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:41",
      "text": "有一点。对，当然我觉得每个人相信的还不一样。做A级的这个赛道有很多不同的切入点。不靠谱的切入点是我觉得David其实为这个赛道做了很大的贡献的。他讲了一个很大的愿景，让很多人认识到这个赛道。但他的那个不靠谱的地方在于是说他那个愿景基本上不可实现。也就是说我做一个A啥都能干。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:01",
      "text": "其实硅谷这边已经基本上把这个形成一个共识了。就是说你现在如果做个A级的，说什么啥都能干，基本上没有人相信你就是你啥也不能干。对，这就是为什么我不是特别看好alt replay agent这种就是看起来啥都能干的这种。可能说小白能够做一个看起来用的demo这有用。但是实际上你去真正去做软件工程，没有人怎么去写代码。所以这边的一个共识是说，你大概率的需要去找到一个细分切入点，让这个A就干这一件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:30",
      "text": "对于code agent这件事情上来讲，有的人觉得我做code review，有的人觉得我做些documents帮你补文档，有的人觉得我做reactor，就是我做重构这个需求量也很大。有的人觉得，比如说我们我们现在就在做unit test。我们觉得uni test可能是一个最容易去落地的，或者说准确率容易做的特别高，甚至比人都高的一个场景。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:53",
      "text": "我问一下，你刚刚说那个我是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:56",
      "text": "没太听懂。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:57",
      "text": "unit test单元测试，unit test OK。但你仍然再解释一下，对单词我听懂了事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:03",
      "text": "这是个什么事情？Unit什么意思呢？就是说你写了一段代码，对吧？你要确保这段代码是正确的，你要写另外一段代码去测这个代码的输入输出是符合预期的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:13",
      "text": "就比如说你写了一个算法是排序算法。那排序就是理论上讲我给你一串数字，你要把它按照1234567给我排出来。那这样的话我就可以写另外一段代码，说我输入13976，能不能给我排出来？什么13679，明白了。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:28",
      "text": "然后这个单元测试最大的作用是什么呢？就是叫防止regression。Regression的意思就是说我这段代码本来运行的好好的，但是由于系统复杂，在大量的开发过程中，这段代码被谁因为另外一个原因要做一些适当的修改。然后改完了以后，这段代码break了之前的某个功能，这是很常见的。因为一个系统特别大了以后，它可能有几十万个功能，每个功能之间有错综复杂的联系。所以unit test某种意义上讲是保证是OK你在改这个东西的时候，你要确原来的东西不被改坏。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:01",
      "text": "一个比较有效的一个手段。明白我们为什么觉得这个东西能做有价值，也有可能做的比较好。第一就是刚刚讲的防止agression，它是有价值的。当然这个对于小团队可能没有太大价值，只能做enterprise。因为小团队的这个产品质量功能都不复杂。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:16",
      "text": "第二个是说开发者不愿意写，因为这东西很无聊，但不像写功能代码可能还有一点成就感。我在实现一个什么新功能很炫酷。但是你去写unit test的时候，就是你在组织输入输出，在做各种各样的周边的这种配合工作，感觉就不太好玩。所以你会发现大部分团队的单元测试覆盖率都很低，基本上在30%以下，能不写的都不写。对，实在不行了再写。比如说变成这种，所以我们觉得就这种人不愿意干的活儿，是不是可以让agent去干呢？我不是抢你饭碗，你都不愿意干对吧，那我来干呗。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:50",
      "text": "另外就是说他对于整个软件工程的其他方面的这个信息的需求相对低。比如说对于你这个业务到底是做什么的，你到底是个抖音，你还是个美团外卖什么的，就相对来说关系没有那么大。另外因为unit test它是一个已经被实践了几十年的这么一个操作，它基本上有套路的。所以在不同的团队里面的工程实践上面也比较接近。所以这两个事情使得我们觉得他有可能能做一个相对通用的agent来解决一个问题，这是我们现在主攻的点。明白。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:22",
      "text": "我在听你刚才讲那个场景的时候，他改错代码有点像棵sr的那个场景就是上下不全的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:29",
      "text": "不一样。就是说你改代码，你很难保证你改了不影响之前。因为可能有1000个地方都在调用这个代码，你不知道别人是怎么调用这个代码的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:38",
      "text": "但我重点想问的是，如果按这个思路推演下去，你觉得copilot和agent是能够并存的东西吗？还是agent如果起来，其实后面copilot渐渐就会消失了？",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:49",
      "text": "我觉得这是两件完全不一样的事情，我觉得可怕的会一直存在，并且很重要。因为本质上它是解两个问题，就是你找了个小弟去拧这个地方的螺丝，不代表你不需要一把电钻去拧一个更复杂的螺丝。对他不取代，就是我依然坚信人很重要，软件工程师很重要。AI把什么程序员干下岗这种事情我是不信的，除非你本来的水平都很差。所以只要人还存在，copilot就很重要。然后大家就确实帮人解决问题，能够提高你的效率，就有点像科幻片对吧？我人需要一套很牛逼的装备来去打怪，但同时我还可以带一帮机器小弟。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:30",
      "text": "所以如果这么讲起来的话，就是你是不太相信AI coding的能力未来能变得非常的高级的对吧？比如说一个人在这说帮我搭一个tiktok，这个好像之前是谁啊在一个讲座举的那个例子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:44",
      "text": "这个你是不信的，我是不信的，就是我其实不信任何代码平民化的东西。这里面有几个逻辑就是第一，软件工程历史上面这件事情没有成功过，就是有很多人尝试过各种办法。最后你会发现所有的低代码产品或者无代码产品都只能局限在一个非常小的领域里面才能有商业价值。就是没有出现任何一个把软件工程门槛下降的产品大规模广泛使用的。没有几十年了没有过。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:15",
      "text": "第二是说普通人没有写代码的需求。这里面一个假设，我觉得这个假设是不成立的。就是很多人都觉得我如果把门槛降低，我有十亿人写代码，对吧？Which is rapid的vision，我其实以前对于这个微信深信不疑，但是从去年开始我就动摇了，我已经不相信这个微信了。因为我觉得普通人不想写代码，普通人可能想喝咖啡，想去拍美美的照片，想去兜风，没有人想写代码，甚至他连跟一个程序员说话都觉得累。所以我觉得这个事情最后不会是这样的，因为它不符合人性。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:46",
      "text": "我觉得写代码依然是小部分人创造大量的软件让大部分人用对。如果一个东西变得特别的common的需求，就会变成一个独立存在的软件。就跟现在的SARS1样。如果你的需求被大量的发现，那他就会有一个人做一个特别牛的工具，解决你一系列的这样的一个问题。那就只有非常小的，没有办法普世的这种很小的需求，你可能找一个朋友帮你弄一弄。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:11",
      "text": "那现有很多这种什么一句话做agent的这种东西我也不相信的，为什么呢？因为一个复杂的agent，比如说你写代码的agent真的要做这个agent，它的背后的工程复杂度远超你想象。不是说你说两句话，几个方块拖一拖就能够做出来，我不可能对吧？如果有需求被大量的发现，并且证实可行的时候，就会有专业团队做这个agent然后还有一个巨大的问题是，如果这件事情这么的common，这么的简单，那它就是ChatGPT的生意，它不是你的声音。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:43",
      "text": "对，这个也是我本来想问的一个问题。最终你觉得模型本身跟这些可怕的的A症的关系会怎么样？",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:51",
      "text": "你看ChatGPT现在也集成了开发环境，甚至anthropic也集成了artifacts。ChatGPT是搞了个叫canvas，它都是轻量级的。在某种办公白领场景下面，我做一些，就比如说你用notion，你也在里面插入片段代码，对吧？这种东西我觉得普通人可能到此为止就够了。所以就回过头来讲，就是我不是特别看好这种让普通人什么说两句话就生成一个什么应用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:16",
      "text": "对，但是我们踩过这个坑，我们去年做过一个这样的类似的产品，最后我们发现其实真的很难。因为我们从二三年5月份左右就开始琢磨AD的这个事儿。其实做过很多很多方向，最后发现就这也不work，那也不work。最后想明白了，说这东西你不要想的天花乱坠，不要有那么多幻想，不要想那么多科幻片，我们得想想商业片到底怎么商业化，到底怎么真的产生生产力价值。你往这个方向想你就会越来越窄，越来越窄你就会找到一个是OK agent。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:44",
      "text": "你作为一个劳动力，最重要的一个品质是可靠性。你招一个实习生不太能干可能可以忍，但他经常性不靠谱，给你瞎折腾，然后浪费你的时间，你可能就不能忍。所以我们最后觉得unit test现在跑下来，我们也有些客户在试了，我们自己也在用，每天就觉得这条路应该有可能能通了。对我再说一句说为什么我们觉得这个口述需求，然后什么做AB不？",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:08",
      "text": "因为你很多人都讲不清楚需求。对你你说做个抖音，其实没有人真的能讲清楚抖音的产品需求的。软件工程需求没有那么简单，OK就扯远了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:16",
      "text": "然后说模型，我去年的时候特别担心这个问题，就是说GPT5、GPT6、GPT8、GPT10会不会使得上面的应用都没有意义？我现在特别坚定的不会，除非所谓的AGI，真的AGI就是那个超人的出现，对吧？那如果那个出现，那大家就再说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:34",
      "text": "但我是觉得目前这个AI的进展看起来不太像，更多的还是他会在准确率上、在上下文长度上、在速度上、在聪明程度上面不断的有一些提升。但一个再聪明的应届毕业生，你也很难直接在公司里面产生价值。进入一个公司要去培训，要理解这个公司干什么，为什么？要理解这公司怎么干活。所以我是觉得软件工程有两个重大问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:03",
      "text": "为什么我说agent特别难做？就在于它有一个问题叫做业务上下文，有一个问题叫做工程上下文。这两个问题无论模型怎么进化，无论模型怎么training，它都不可能解决。因为这两个问题是domain specific或者company specific team specific，它每个公司都不一样的。所以我是觉得模型的进化只能给A型的带来的是正向促进。就是说我本来这个agent只有80个智商，我现在有100个智商。我把合适的信息给到这个agent的时候，它会更快的pick up起来。就能够更好的去解决我这个实际场景的问题。就是一个聪明的应届生和一个笨的应届生，他适应这个公司的过程不太一样。所以我觉得不用太担心什么模型的竞争，我觉得GPT5的出现。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:49",
      "text": "对我们绝对是利好。明白。所以其实你刚才讲了很多，就已经回答了一个问题。就是现在经常有人在讨论说，未来还要不要学编程？按你的这个讲法来讲。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:59",
      "text": "肯定还是要的，肯定要。对我不是很确定未来的编程教育会演进成什么样子，但我目前坚定程序员一定是一个依然会被需求的岗位。但是它的量有没有那么大，以及类型会不会发生变化，我觉得现在是不太好说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:18",
      "text": "我再明确一个点，就是你完全不相信未来会有C端用它来做些东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:22",
      "text": "我不相信，我觉得如果这件事情成立，那就是ChatGPT的事。ChatGPT直接就是那个超级agent，就是它能帮你干很多通用的事情，就比如说它能够帮你订机票这种事情。但是模型的什么能力的进化，使得你这个事情能够真正特别靠谱。我觉得我没有特别想清楚。所以我们花了很多的时间去build所谓的叫evaluation，就是说你如何评估你的agent，这个很重要，你制造了一堆所谓的数字员工。但是上岗之前你得有一个考核方式。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:56",
      "text": "能不能简单分享一两个你们现在在考核的一些指标。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:00",
      "text": "就比如说unit test这个事情，我觉得你要真正考核一个人，你不能够只问他一道题，对吧？所以我觉得很重要的一个点是你要build的这个题库。就是我们会拿比如说开源的仓库，我们自己的仓库和早期客户的商业仓库综合起来。然后在里面找不同的语言，不同的框架，不同的类型的写法整理。比如说一千道题，简单一点，你每次agent改进了一版，你要去run这个一千道题到底做对了多少道题？这个意外流行是一件非常耗时的，因为这个数据以前没有不存在。这就是硅谷特别强调的这个synthetic data合成数据。合成数据有两个作用，一个作用是find tuning，一个作用是evaluation h.",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:42",
      "text": "顺着你刚才讲的，我就想问一下，因为你这几个月都在硅谷，从你的视角来看整个硅谷那边的情况，包括你看起来整个AI发展情况是怎么样的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:52",
      "text": "我觉得硅谷这边目前看每一个层面上面都非常的欣欣向荣。我不说投资额多少或者投资case，但是我看到的项目的种类的多样性和数量的丰富程度，就各种奇怪的东西都有人做什么？AI鉴定假包的AI跟时尚AI跟玄学我们全都有，都是成立的公司拿了钱。都是正儿八经项目，不是什么抖音搞教程。更硬核的点就是info卷的非常严重。我觉得info这一层的投入比国内我不确定可能十倍以上。现在有很多做什么agent的Sandy box的，什么agent的数据合成的，反正info这一层是美国特别热衷的一个赛。当然aging的这一层对美国反而做模型的比较少。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:34",
      "text": "就剩那几家了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:35",
      "text": "主要是之前也没那么多，说实话。但。Anyway, 最后回到你最早的那个问题，为什么我们都在用海外的东西？人家投入的多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:44",
      "text": "投入的早。对，但又回到你那个答案，就是国内投入的to b市场也做不起来，闭环了。有个很有意思的现象。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:52",
      "text": "我跟你说我来了硅谷，在这边待的时间越长，我发现我买的各种各样的SARS越多。因为没有办法必须买。比如说我买link in，你在这边基本上在商业场合都是这样linked in，对吧？那你得买一个它的高级版，有些功能你得用好，要不要买room m你得跟人开会，你不能够一个会45分钟就上线了，对吧？你得买called里，你得跟人约会，约会一来二去邮件很累，你直接发个开了的链接，我发现这是一个这边的common practice？我也学会了？就是各种东西越多越买越多，全是SARS。但你被逼的，你没办法，就是你在国内已经啥也不买买啥SARS。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:28",
      "text": "而且其实我就觉得老美这边某种意义上讲的效率是比国内要高的。其实这种SaaS工具确实是带来提效的。然后没有免费可选项，所有人都收费，这个可能是跟国内卷的竞争的维度不一样。国内可能上来就给你整各种免费，然后就导致大家都收不着钱，但我觉得还是有一些文化习惯了。我也不知道，就是我来了以后就不自然而然的开始买这种东西，因为别人都在这么干你会依葫芦画瓢的学。对，就是生态。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:55",
      "text": "对我跟你说我现在要去买邮箱了，虽然我们买了那个微软的exchange outlook，我觉得那个不好用。很多人给我推荐那个superman，那个又要花钱。国内邮箱花钱，大家觉得你天方夜谭。为什么邮箱要花钱？",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:07",
      "text": "回过头来讲，就是为什么之前我们在国内做SaaS，做devo s产品真挺难的。但是在这边的生态可能是一个循环不太一样，整个的气候不太一样。这也是为什么我们产品的商业化也想在硅谷做的一个原因。就可能付费的意愿，付费能力，产品早期接受度都会高一些。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:26",
      "text": "OK好，我最后一个问题，如果给今年的AI里面的华人创业者一些建议，尤其是听你也讲，你们去年其实走过一些弯路，也踩过一些坑。对我想听听你现在会给他们一些什么样的建议。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:39",
      "text": "我可能没有足够的信息做所谓的给建议，因为找这个PMF的困难度比我想象中的高的太多了。好的事别人也没找到，坏的事我们也没找到。但是我为什么一直还有信心做？因为我不觉得我们的认知落后，或者我们的技术落后，所以我的感受是说对于底层的理解特别重要。你能自己去看论文的就自己看，能自己手写的就手写。然后直到一定程度上面，你可能再去用现成的工具，或者才会对你真正的带来价值。因为这是个新领域，它不是个软件工程，已经做了几十年，大家都熟门熟路，上来就应该这样那样。如果你上来就开始用各种各样帮你铺好的东西，你不理解底层很多东西，你以为你解不了，实际可以解。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:28",
      "text": "你自己做了以后，你有体感，然后那个体感会对你的认知产生很微妙的变化。你突然某天遇到一个问题的时候，那个体感给你带来微妙的变化就会起作用。但是这个可能只是说对agent这一波做比较底层的或者比较hard call的这个大模型应用有点关系。反正我们很大的收获就来源于说我们在去年开始大量的去做底层。所以我觉得这可能是我们的不能说是建议，我只是说我们的路径。明白，好好，那就这样，感谢海龙。好啊，拜拜。",
      "speaker": "发言人2"
    }
  ],
  "lab_info": {
    "summary": "在讨论中，专家强调了AI在软件开发领域的潜力，特别是AI编码工具如Copilot在提升编程效率方面的作用，以及Agent类工具（如AIGC）对未来生产力提升的潜在贡献。他指出，尽管国内AI编码领域有所探索，但与美国相比，创新和应用仍显不足。专家还讨论了模型进化对AI工具性能的影响，以及软件工程中的业务与工程上下文对AI工具效能的挑战。此外，分享了对当前AI发展趋势的观察，包括硅谷在AI领域的活跃投资和研发活动，对国内创业者的启示。最后，专家对华人AI创业者提出建议，强调深入理解底层技术和实际操作的重要性，以在AI编码领域找到合适的市场定位和产品市场匹配（PMF）。",
    "qa_pairs": [
      {
        "question": "海龙，你能否简单介绍一下自己的经历？",
        "answer": "我从小就开始写程序，至今已有二十多年经验，一直与软件工程和编程有着紧密联系。研究生毕业后，我参与过开源中国社区和coding.net平台的工作，后来这两者合并到腾讯，在那里负责TOB的DevOps工具。2023年开始，我投身创业，创建了一个名为咕噜AI的新项目，认为AI技术的到来带来了新的变量，可能直接生产劳动力，从而大幅提升效率和生产力。",
        "time": "00:01:04"
      },
      {
        "question": "国内之前为什么没有像GitHub这样的平台大获成功，而coding.net则具备全球性？",
        "answer": "这是一个很好的问题。我认为国内不仅在GitHub这类平台上，整个TOB生态都相对较大，存在一定的特殊性。真正变现的往往是企业买单，尽管最初可能是PLG模式。同时，在海外也有类似情况，很多企业也会为企业级产品付费，如购买Copilot等工具的license。",
        "time": "00:02:33"
      },
      {
        "question": "对于AI coding赛道，海外是否也存在激烈的竞争？",
        "answer": "是的，在硅谷看到许多公司在做AI coding相关产品，其中一些团队已经融资并取得很好的商业化效果，赛道非常卷。这与之前对海外市场竞争不激烈的认知有所不同。",
        "time": "00:03:37"
      },
      {
        "question": "为什么国内在AI coding领域的创业公司和投资现象相对较少？",
        "answer": "实际上国内并非没有公司在做AI coding，而是很多传统ISV因为开源项目的出现，如get lab等，使得这个领域变得容易进入，但并未引起主流资本市场的广泛关注。国内确实有一批人在做相关事情，只是尚未形成较大的影响力或进入主流视野。",
        "time": "00:04:52"
      },
      {
        "question": "Copilot和agent的区别是什么？",
        "answer": "区别在于Copilot仍属于工具范畴，它的核心功能是通过减少打字来提升代码编写效率，可以看作是代码补全的衍生品；而agent则是基于AI技术构建的更复杂的应用，能够实现可观测性等功能，在AI coding领域中扮演的角色更为多元和深入。",
        "time": "00:06:23"
      },
      {
        "question": "agent与人的工作方式有何不同？为什么称agent为digital worker？",
        "answer": "agent是一个独立完成任务的个体，它一旦领到任务会自行寻找方法完成，包括提交代码等动作，无需人工持续关注。而人的工作通常是同步、需要在场并实时互动的。因为agent如同数字员工，能够独立完成任务，无需人工干预，适合于自动化、异步的工作场景。",
        "time": "00:06:58"
      },
      {
        "question": "Copilot的主要贡献是什么？",
        "answer": "Copilot（以GitHub Copilot和Curren$y为例）找到了合适的市场契合点（PMF），即产品应该以插件形式存在于IDE中，并在用户打字时提供无缝协助。此外，它找到了合适的商业模式，在GPT-3模型升级后实现了大规模商业化，提供了出色的交互体验和对现有IDE形态的重大创新。",
        "time": "00:07:47"
      },
      {
        "question": "IDE是什么，以及Kite如何改进了IDE？",
        "answer": "IDE（集成开发环境）是一种专为程序员设计的专业编辑工具，包含运行、调试等功能。Kite并未完全开发一个新的IDE，而是通过魔改VS Code源代码，专注于优化IDE的用户体验，打破了原有插件机制限制，实现了全局补全等创新功能，从而提供了前所未有的便捷编程体验。",
        "time": "00:10:00"
      },
      {
        "question": "Kite是如何突破非共识并取得成功的？",
        "answer": "Kite突破非共识的关键在于它大胆假设并实施了超越GitHub Copilot的全局文件补全功能，当用户修改某部分代码时，能自动同步更新整个项目中相关的地方，显著提升了编程效率和体验。虽然初始阶段不被看好，但Kite团队凭借创新思维和不懈努力最终取得了成功。",
        "time": "00:11:23"
      },
      {
        "question": "Kite的补全功能是否涉及debug或复杂修改？",
        "answer": "Kite的补全功能主要是基于上下文和当前编辑的内容进行简单参数替换和快速预测，本质上是对文本的修改，并不会进行debug，而是通过生成预览内容让用户确认需要的修改结果。",
        "time": "00:12:16"
      },
      {
        "question": "在法律文件和律师场景中，为什么当时大家对使用AI模型持怀疑态度？",
        "answer": "大家不信的原因主要有两点：首先，所使用的模型并非自主研发，而是基于GPT或anthropic等第三方模型；其次，没有自己的集成开发环境（IDE），而是依赖于微软提供的平台，相当于用微软的产品去挑战其自家已经非常成熟且广泛应用于市场的同类产品。",
        "time": "00:13:17"
      },
      {
        "question": "那么在美国市场，这个情况是否也存在类似的问题呢？",
        "answer": "美国市场的情况听起来似乎也有类似的问题，但具体情况不明。不过，有观点认为美国大厂反应慢是一个巨大的优势，为创业者提供了机会。",
        "time": "00:13:44"
      },
      {
        "question": "您提到的科sir（可能指Copilot或类似产品）在面对现有技术时面临了什么挑战？",
        "answer": "科sir的核心点在于提供了一种GPT模型无法轻易实现的体验，而要实现这一目标需要投入大量努力和时间等待技术进步。当相应的基础设施改进后，科sir的问题得以解决，并最终取得了成功。",
        "time": "00:14:40"
      },
      {
        "question": "那么GitHub Copilot在这方面有何不足之处？",
        "answer": "GitHub Copilot在面对类似挑战时，并没有及时跟进和改进。虽然原理上大模型的构建并不玄妙，但实际做好并应用到具体场景中是另一回事。此外，由于Copilot插件机制的限制，以及内部对于快速模仿和改进的不着急态度，导致在面对一些复杂需求时反应相对较慢。",
        "time": "00:15:12"
      },
      {
        "question": "目前在agent领域有哪些代表性公司，以及它们的情况如何？那么为何仍有公司在做agent相关的业务，即使Copilot已经相对成熟呢？",
        "answer": "目前agent领域虽然赛道拥挤，但实际上还没有真正跑通产品市场契合度（PMF）的公司，无论是产品形态、交互方式还是定价策略都还在探索阶段。尽管有些公司如David等在PR上有较大影响力，但实际上尚未看到真正优秀且广泛应用的agent产品出现。Copilot作为一个工具，提供了便捷高效的代码生成能力，而agent则更进一步，作为生产力实体存在，能够提供完全不同的用户体验。尽管agent目前尚未跑通PMF，但其潜在的价值和挑战也吸引了众多公司投身其中。",
        "time": "00:16:20"
      },
      {
        "question": "在某些场景下，比如处理论文中的算法，能否通过agent来实现从指定PDF中获取算法、生成测试数据并反馈执行结果？",
        "answer": "是的，我们可以将这个具体的任务交给一个agent，例如提供一个PDF文件并指示其中包含一个算法，要求agent生成测试数据并报告运行结果。虽然具体任务的输入输出会有所不同，但大逻辑是通过清晰描述任务，让agent能够自主完成从端到端的任务。",
        "time": "00:19:09"
      },
      {
        "question": "对于A级赛道上的项目，它们的核心概念是什么？",
        "answer": "核心概念是创建能够自主完成端到端任务的智能体，而不仅仅是执行特定指令。例如，一个好的agent会在合适的时候提出合适的问题，并能够独立自主地完成任务，这使得它在商业上的价值大大提高，从售卖低价服务转变为提供更复杂且定制化的服务。",
        "time": "00:20:11"
      },
      {
        "question": "是否所有人都赞同David提出的A级愿景，即一个全能的A级项目？",
        "answer": "不是所有人都认同这个愿景。硅谷那边普遍认为全能型的A级项目很难实现，因为很难有一个系统能真正做到“啥都能干”。因此，共识是找到细分切入点，让A级项目专注于某一特定领域或功能。",
        "time": "00:21:01"
      },
      {
        "question": "单元测试的主要价值是什么？",
        "answer": "单元测试主要价值在于防止代码回归，即在系统复杂开发过程中保护原有功能不受新修改的代码所影响。此外，由于开发者对编写单元测试的积极性不高，而这类测试对于产品质量至关重要，因此通过agent来执行这部分工作具有一定的价值和可行性。",
        "time": "00:22:28"
      },
      {
        "question": "在code agent领域，有哪些切入点或应用场景？",
        "answer": "切入点包括代码审查、文档补充、重构以及单元测试等。其中，单元测试因其准确率容易做得很高且易于落地，被选作主攻方向，因为其作用是确保代码修改前后不出现回归问题，防止已修复的功能因系统复杂性而被其他改动影响。",
        "time": "00:22:28"
      },
      {
        "question": "agent是否能够与Copilot共存，还是会取代Copilot？",
        "answer": "agent与Copilot不会取代彼此，而是解决不同的问题。agent解决的是寻找“小弟”辅助程序员拧紧螺丝的问题，而Copilot则帮助程序员更高效地编写代码，两者相辅相成，共同促进软件开发效率的提升，而非相互替代。",
        "time": "00:24:49"
      },
      {
        "question": "你是否认为AI coding能力未来会变得非常高级，普通人通过简单指令就能创建复杂的软件应用？",
        "answer": "我并不相信AI coding能力会达到那种程度，即普通人能通过简单的对话或操作构建出像TikTok这样的复杂应用。基于软件工程历史上的经验，低代码或无代码产品虽然尝试过降低编程门槛，但大多只能在有限领域内实现商业价值，并未出现真正能大规模广泛应用的成功案例。",
        "time": "00:25:44"
      },
      {
        "question": "普通人是否有写代码的需求，从而推动代码平民化的发展？",
        "answer": "我认为普通人没有写代码的需求这个假设是不成立的。虽然有人设想大量人群会因降低门槛而开始编写代码，但实际上，大多数人更倾向于享受生活而非从事编程工作，甚至与程序员交流都会觉得疲惫。因此，代码平民化不太可能成为主流趋势。",
        "time": "00:26:15"
      },
      {
        "question": "对于模型（如ChatGPT）能否直接生成广泛应用的情况，你怎么看？",
        "answer": "我不太看好模型直接生成普通人在短时间内就能使用的复杂应用。例如，即使ChatGPT集成了开发环境，但对于像抖音这样复杂的产品需求，模型很难准确理解和满足。此外，模型的进化主要在准确率、上下文处理、速度和智能程度上提升，而解决特定业务场景问题需要深入理解业务逻辑和上下文背景，这是目前模型无法解决的，尤其是对于公司特定的业务需求。",
        "time": "00:30:03"
      },
      {
        "question": "在AI技术不断发展的背景下，未来是否还需要学习编程？",
        "answer": "尽管AI技术进步显著，但编程依然是必要的技能，程序员岗位在未来仍会被需求。虽然无法预知未来的编程教育会如何演变，但可以确定的是，即使模型能力增强，C端用户通过简单指令自行开发软件的情况不太可能发生，这更像是ChatGPT作为超级agent来完成通用任务的场景。未来程序员的角色可能发生变化，但依然会被需要。",
        "time": "00:30:59"
      },
      {
        "question": "unit test方面，如何有效地考核一个人的能力？",
        "answer": "要通过构建一个包含开源仓库、自有仓库和早期客户商业仓库等多种来源的题库，其中整合不同语言、框架和类型的题目。每次agent改进后，运行这个包含一千道题目的题库来评估其正确率，这种做法虽然耗时，但硅谷强调使用合成数据（synthetic data）进行find tuning和evaluation。",
        "time": "00:32:00"
      },
      {
        "question": "从你的视角看，硅谷目前的AI发展情况如何？",
        "answer": "硅谷目前各个层面都欣欣向荣，项目种类多样且数量丰富，从AI鉴定假包到时尚、玄学等领域均有涉及，并且在info层面上投入巨大，比国内至少大十倍以上。美国特别热衷于agent相关研究和数据合成技术，而在aging领域则相对较少。",
        "time": "00:32:52"
      },
      {
        "question": "国内和国外在SaaS工具使用上存在什么差异？",
        "answer": "在国内，由于竞争环境和文化习惯，很多SaaS工具免费提供，导致收入难以保障；而在硅谷，几乎所有SaaS工具都收费，且效率更高。国内用户可能较少付费购买SaaS工具，而在硅谷，由于生态不同，用户更愿意并有能力付费购买高效的SaaS工具。",
        "time": "00:34:28"
      },
      {
        "question": "对于今年AI领域的华人创业者，有什么建议？",
        "answer": "基于自身的经历，虽然很难找到产品市场契合（PMF），但他认为对底层理解至关重要。建议创业者能够自己阅读论文并动手实现，直到一定程度再使用现成工具，这样才能真正理解并有效利用这些工具。大量的底层实践有助于对产品认知产生微妙变化，从而在遇到问题时能发挥重要作用。因此，路径可能在于大量进行底层探索和实践。",
        "time": "00:35:39"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "探索AI编程领域的新机遇",
        "summary": "讨论集中在AI编程工具和平台在国内互联网圈的兴起，特别强调了美国在这一领域的领先位置，而中国尚处于初期阶段。一位专注于此领域的创业者分享了自己的经历和观点，提及了他从年轻时就开始的编程生涯，以及参与的开源中国和Coding.net项目，这些项目最终合并到腾讯。创业者介绍了他们最新的创业项目，咕噜AI，旨在利用AI技术直接产生劳动力，提高效率和生产力。"
      },
      {
        "time": "00:01:56",
        "title": "探讨国内to B生态及开发者变现难题",
        "summary": "对话深入分析了国内to B生态系统现状，特别是针对开发者（to developer）的变现难题。指出了开发者群体的消费习惯，即倾向于寻找免费资源，从而使得直接针对他们的商业变现变得困难。此外，还提到了在硅谷观察到的情况，企业往往愿意为员工使用的工具和服务买单，强调了企业级解决方案的市场需求。通过这些讨论，反映了国内外开发者生态的差异以及企业购买力的重要性。"
      },
      {
        "time": "00:03:37",
        "title": "海外科技赛道的激烈竞争与国内外差异",
        "summary": "发言者通过在硅谷的观察发现，原本认为海外市场不那么卷的印象是错误的，实际上海外市场在许多科技赛道上的竞争十分激烈。特别是在AI编程领域，美国有数十家创业公司获得上亿美金融资，而国内则几乎未见。此外，国内在某些领域，如DevOps，虽然大厂和一些团队有参与，但竞争主要集中在PMF（产品市场匹配）后的阶段，相比之下，海外竞争更多发生在PMF之前。这说明国内外在科技赛道的竞争上存在差异，海外在早期阶段的竞争更为激烈。"
      },
      {
        "time": "00:06:09",
        "title": "Copilot与Agent在AI编程中的角色区别",
        "summary": "去年5月，我们曾犹豫是否开发Copilot或Agent。Copilot作为工具，需要用户操作以提高代码生产效率，主要功能是代码补全，而Agent是能独立完成任务的实体，可以自主解决问题并提交代码，实现与人的异步工作。Copilot的使用需要人的在场，而Agent则像数字员工，可以独立工作，体现了两者在AI编程领域中的不同应用和商业模式。"
      },
      {
        "time": "00:07:42",
        "title": "GitHub Copilot的创新及其对编程领域的影响",
        "summary": "GitHub Copilot通过找到产品与市场、模式的契合点（PMF），实现了在编程辅助领域的突破。它作为IDE插件的形态，以及在用户输入时提供辅助的机制，开创了编程辅助的新范式。尽管之前有类似尝试，如GPT-3，但直到Copilot和更先进的模型出现，这一设想才得以实现并获得商业化成功。此外，Copilot不仅改进了现有技术，还在产品体验上进行了创新，特别是在集成开发环境（IDE）中，为程序员提供了一个更加智能、高效的编程辅助工具。"
      },
      {
        "time": "00:10:00",
        "title": "科sir的IDE创新与挑战",
        "summary": "科sir通过魔改VS Code实现独特功能，打破了现有IDE的非共识，尤其在代码补全方面提供全局文件补全，极大地提高了开发效率。尽管初期不被看好，科sir凭借其大胆的创新，成功吸引了全球用户的关注，证明了其路径的可行性和市场需求。科sir的这一做法，挑战了传统的IDE插件机制，展现了创业的迷人之处。"
      },
      {
        "time": "00:13:08",
        "title": "利用大型语言模型创新与挑战",
        "summary": "对话讨论了在一个特定的法律文件和律师工作场景中，如何利用像GPT或Anthropic这样的大型语言模型进行创新。提出者面临的不信挑战包括模型的版权问题和身份验证的争议，尤其是在挑战一个由微软提供的成熟产品时。讨论强调了美国大企业反应慢对创业者来说是一个优势，并以一个创业者坚持利用特定模型直至成功的故事为例，强调了创新的坚持和运气的元素。"
      },
      {
        "time": "00:14:20",
        "title": "探讨AI技术及应用的现实挑战与发展方向",
        "summary": "对话集中在AI技术，特别是transformer模型的实用性和挑战上。指出虽然AI大模型的原理并非秘密，但实际操作中的成功取决于能否正确地提出问题和解决工程难题，如响应时间的控制。同时，讨论了GitHub Copilot的进展缓慢可能是由于VS Code插件机制的限制，并预测未来在agent技术上的发展，询问代表性的公司。整体上，强调了在AI应用开发中，技术实现和问题提出的重要性，以及对未来AI技术发展方向的展望。"
      },
      {
        "time": "00:16:20",
        "title": "当前Agent赛道的PMF挑战与展望",
        "summary": "对话者表达了对当前Agent市场产品市场适应性（PMF）的担忧，指出在产品如何存在、与人交互、定价等方面存在模糊。同时，对于支持这些Agent的模型及其所需能力也缺乏清晰的认识。尽管Agent赛道竞争激烈，但缺乏真正解决市场需求的产品。讨论还提到了一些案例，如科尔特和bot点6的使用情况，但强调了留存和实际效用的重要性。总体而言，表达了对当前Agent技术应用和市场准备度的怀疑态度。"
      },
      {
        "time": "00:17:44",
        "title": "探讨AI模型开发与应用的挑战与前景",
        "summary": "对话集中在开发特定领域AI模型的挑战性与前景上。一方面，参与者对能否在不依赖通用大模型的情况下，开发出能比通用模型表现更佳的领域模型持怀疑态度，强调了开发高度专业化AI模型的难度。另一方面，讨论也涉及了AI代理（agent）的开发和应用，认为相较于传统的AI工具，AI代理能够自主完成任务，提高生产力，这代表了AI应用的一个重要发展方向。尽管目前AI代理的技术尚未完全成熟，但其潜力巨大，能显著改变AI服务的商业模式，吸引了大量投资。"
      },
      {
        "time": "00:20:31",
        "title": "探讨代码单元测试自动化的发展与挑战",
        "summary": "在软件开发领域，对代码单元测试自动化的讨论强调了寻找细分领域的重要性，以应对不同团队的具体需求。单元测试旨在确保代码的正确性，防止回归错误，是软件工程中的关键环节。然而，由于其过程相对枯燥，许多开发者缺乏动力去完成这一任务，导致大多数团队的单元测试覆盖率偏低。因此，探索利用AI技术自动生成单元测试成为了一个有价值的解决方案，不仅能提高效率，还能确保软件质量。对话中还提到，虽然完全通用的解决方案难以实现，但在特定细分领域内，如代码审查、文档生成、重构等，AI技术已经显示出其潜力和价值。特别地，开发能够自动编写单元测试的AI代理被认为是既具有可行性也具有实用价值的项目，因为这不仅解决了开发者不愿执行的枯燥任务，也对软件工程的整体质量控制有着重要作用。"
      },
      {
        "time": "00:24:22",
        "title": "探讨Copilot与Agent的并存可能性及AI在编程领域的未来",
        "summary": "对话中讨论了在编程领域内，Copilot和Agent能否并存的问题，以及AI编码能力的未来。观点认为，Copilot和Agent解决的是不同问题，它们的存在并不互相排斥。强调了即便AI技术进步，人类程序员的重要性依然不可替代，AI的作用在于辅助人类提升工作效率。此外，对于代码平民化的观点持怀疑态度，认为软件工程的历史证明了低代码或无代码产品只能在有限的领域内具有商业价值，而且普遍认为普通人对编写代码没有兴趣，真正的编码工作应由少数专业人员完成，满足大众需求。"
      },
      {
        "time": "00:27:11",
        "title": "探讨复杂Agent开发的现实挑战与未来方向",
        "summary": "对话者表达了对通过简单口述或轻量级操作就能创建复杂Agent的怀疑，强调了实际开发中遇到的困难及背后工程的复杂度远超预期。他们通过亲身经历，意识到将想法转化为实际可用的Agent充满了挑战。对话中也提到了对于ChatGPT和Anthropic等平台集成开发环境的看法，以及对普通人通过简单指令生成应用的不看好态度。最后，强调了在追求实用性与商业化的过程中，重要的是找到切实可行的解决方案，并确保产品的可靠性和生产力价值。"
      },
      {
        "time": "00:29:16",
        "title": "探讨AI模型进化对软件工程影响及编程教育未来",
        "summary": "讨论集中在AI模型（如GPT5及其后续版本）的进展对现有应用的意义、软件工程中agent的难点、以及编程教育的未来。观点认为，即使AI模型持续进化，仍无法解决业务上下文和工程上下文等特定领域的问题，强调了软件工程师岗位的持续需求。同时，提出了评估AI agent效能的重要性，包括通过合成数据进行测试和评估。对于编程教育，虽然未来形式可能变化，但编程学习仍将是必要的。"
      },
      {
        "time": "00:32:42",
        "title": "硅谷AI发展及SaaS工具的使用体验",
        "summary": "对话者分享了在硅谷的观察，指出AI领域的项目多样性与投资热度，特别是信息层面上的投入巨大。同时，他提及了硅谷对于SaaS工具的高接受度和付费意愿，以及这种文化如何影响了他的日常操作。最后，针对AI领域的华人创业者，他强调了深入理解技术底层的重要性。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "国外工具如cursor较为火热"
                },
                {
                  "children": [],
                  "content": "国内类似工具较少，需求待开发"
                }
              ],
              "content": "国内与国外的差异"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开源中国、Coding.net等社区对AI编程的讨论增多"
                }
              ],
              "content": "国内互联网对AI编程工具的关注度上升"
            }
          ],
          "content": "AI编程工具现状"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "20多年编程经验"
                },
                {
                  "children": [],
                  "content": "大学研究生毕业后主要工作与代码相关"
                }
              ],
              "content": "个人背景"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开源中国，程序员社区"
                },
                {
                  "children": [],
                  "content": "Coding.net，DevOps平台"
                },
                {
                  "children": [],
                  "content": "咕噜AI，基于AI的新项目"
                }
              ],
              "content": "创业项目"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "认为AI可能直接生产劳动力，提高效率和生产力"
                }
              ],
              "content": "对AI技术的看法"
            }
          ],
          "content": "海龙的创业经历"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "存在但未完全兴起"
                },
                {
                  "children": [],
                  "content": "to B生态不完善"
                }
              ],
              "content": "国内市场"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "投入多、种类多样"
                },
                {
                  "children": [],
                  "content": "社区和资本关注度高"
                }
              ],
              "content": "国外市场"
            }
          ],
          "content": "国内外AI编程工具的对比"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "Copilot：辅助工具，减少打字，代码补全"
                },
                {
                  "children": [],
                  "content": "Agent：独立完成任务，可以异步工作"
                }
              ],
              "content": "Copilot与Agent的区别"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "国内外对于to B和to Developer的不同看法"
                },
                {
                  "children": [],
                  "content": "国外市场付费意愿强，生态健全"
                }
              ],
              "content": "商业模式"
            }
          ],
          "content": "AI编程工具的商业化探索"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "国内外市场需求差异"
                },
                {
                  "children": [],
                  "content": "付费模式和产品接受度"
                }
              ],
              "content": "AI编程工具的挑战"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "理解底层技术至关重要"
                },
                {
                  "children": [],
                  "content": "实践中提升认知，解决实际问题"
                },
                {
                  "children": [],
                  "content": "对模型和工具的深度理解有助于找到正确的市场定位"
                }
              ],
              "content": "对创业者的建议"
            }
          ],
          "content": "对未来AI编程工具的展望"
        },
        {
          "children": [
            {
              "children": [],
              "content": "AI编程工具市场正处于发展初期，国内外存在明显差异"
            },
            {
              "children": [],
              "content": "商业化和市场接受度是当前的主要挑战"
            },
            {
              "children": [],
              "content": "对于创业者而言，深入了解底层技术和市场需求是成功的关键"
            }
          ],
          "content": "总结"
        }
      ],
      "content": "对话脑图摘要"
    }
  }
}