{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df93e",
  "title": "30. 没有主题的闲聊",
  "task_id": "2yjoqzbmwr43q68l",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "欢迎收听IP in podcast网络旗下的IT技术主题娱乐节目内核恐慌。我们号称扣，但是也没有干货，想听人听，不想听的人就别听。本节目的网址是kernel panic dot FM，我们推荐大家使用podcast客户端订阅节目，详情请访问IPN dot LI slash FAQ。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:19",
      "text": "欢迎你为节目捐款，捐款地址是kero panic dot FM flash donate。捐款金额随意，只要是八的正整数倍就可以。捐款不会为你带来什么，不捐也不会让你失去什么。我们的口号是show me a poor request or STFU。这个时候我在这个时候我今天早上在一个t shirt上看到的，你知道上面是大大的一行字，show me the poor rest or shut up.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:49",
      "text": "应该是similar poll .",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:52",
      "text": "request说的也是为什么不是send，还是我看错了。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:57",
      "text": "anyway有可能，好吧，我们进入这个听众反馈环节。上一期我们讲了那个叫windows上面的一些问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:10",
      "text": "对，我们只是随口提了一下这个min GW的问题，结果就收到了至少两两封棺相关的反馈。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:19",
      "text": "电台最喜欢用的词叫什么来着？什么什么听众反馈如雪片般飞来是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:26",
      "text": "我们是听众反馈如铁板般砸了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:30",
      "text": "我们选择性的念两个这个相关的事儿。但第一个不全是，有一小节。对，这个你来还是你我来念？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:40",
      "text": "行，我来念。一位叫饶敏华的朋友，那个字念什么？哪个字？",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:47",
      "text": "你是三个字都不是不中间那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:49",
      "text": "字上日下文，敏OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:52",
      "text": "因为我大学的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:53",
      "text": "第三个对华，这不是那个黄花不是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:58",
      "text": "念页一页吗？应该不念耶。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:01",
      "text": "火字旁那个念耶对流叶，但这个是华anyway，对，名字就是一个代号。他说real他你们好，用户反馈关于min GW的使用，NGW的使用场景。之前任职于国内某社交公司，开发环境是windows不允许装虚拟机，括号网管检测到虚拟机自动端口断网。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:28",
      "text": "这什么样的变态公司？",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:30",
      "text": "这是这这我我觉得B公司的IT已经非常龟毛了，但是这显然还有更规划。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:37",
      "text": "了不不这个理由是什么？但你想它它开发环境是windows，运行环境是linux，然后不准装虚拟机，那怎么测试？",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:50",
      "text": "就直接在服务器上。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:53",
      "text": "那那所以你要最近不是搞什么docker的那个movement.",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:01",
      "text": "我现在正在做对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:03",
      "text": "那你得在本质上用这个，windows上还没有docker，应该。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:09",
      "text": "我们我们只念了一句半话，我把它念完再说。对，反正是很奇怪就是了。然后它的开发语言是C加加运行环境是linux 5x eleven，对，这个很重要。就是我因为我刚才在想，我在公司其实也是不能在本机开发的，我是远程桌面到一个远程服务器上。但是我有x eleven，他没有OK，而且跳板机网络隔离，而且我不是wim党背景交代完毕，于是选用eclipse CDT作为windows上的IDE做开发。但是不可能使用windows的VC编译器。因为VC编译器能编译过，GCC不一定能过，而且引用的库也不一样。比如linux，linux的线程故事p thread VC加加没这玩意儿，于是最后的选择是eclipse CDT配NGW或者c one。另外一个例子是之前在实验室做图像算法，采用一个C加加的open CV的库，是open computer vision，应该是就视觉识别的，应该是开发环境，视觉开发环境也是windows加加eclipse CDT加m in GW现在回想用ubuntu u加eclipse CAT加GCC应该也可以。但是当时的机器跑不动虚拟机。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:30",
      "text": "我还是要吐槽一下这家公司实在是太奇怪了。为什么是这样呢？你开发一个在link上运行的C加加的东西，然后你开发环境是windows还不允许装虚拟机，这多的话是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:41",
      "text": "很病态。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:43",
      "text": "但然后问那个eclipse CDT是什么东西？",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:47",
      "text": "CDT是c developer c development什么什么的一个缩写，应该是是eclipse的一个版本。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:59",
      "text": "就针对C开发者用的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:00",
      "text": "因为对T代表什么我还真不记得了，还突然现场C是c .",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:05",
      "text": "development .",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:08",
      "text": "tooling，我靠，我真的没记错C所以不所以eclipse这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:15",
      "text": "破玩意儿不光写java也要用，现在写写C加加也要。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:19",
      "text": "用它了不不是也要用是你可以选择用。就因为做你写3加的可选的方案太多了，可以用什么excute，一时想不起来，就我第一想第一跳的脑海里居然是QT designer。对，但CC加的ID实在是太多了，所以选择用eclipse CDT，也许是公司的限制这种。对，总之他回报了一个非常小众的min GW的使用场景。我所以因为我们上期提到了说活人请回报一下。如果你明着GW的话，跟我们说一下到底是什么场景。所以现在就出现了一个这么奇葩的场景。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:04",
      "text": "然后这对这个场景左想右想还是太蛋疼了。如果我想想去这种公司工作，还是吃吃算了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:16",
      "text": "别这样。OK第二点反馈上期关于wifi取代网线布线的反馈，这个非常疼，不推荐对网络有要求的人，这样不行。因为2.1就真的是像维特根斯坦一样，每一个反馈点下面还要分子点2.1点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:40",
      "text": "办公室现在在一个类似于众创空间的地方创业，一栋楼有20到30家的公司，每家公司面积几平米到10来平米。每次打开wifi的时候，都可以搜到不下30个wifi信号源。Wifi 2.4G虽然有13个信道，但是要完全做到不干扰的信道有三个，可以想象2.4G信道空间会有多大的干扰。做过实验，千元左右的国际品牌路由器，2.4G的wifi信道调优距离不到2米。内网拼路由大概50到300MIX six不等，还会有大量的随机丢包。另外附带的是我们现在所有的无线键鼠都处于梦游状态。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:21",
      "text": "采用5G信号之后，wifi信号好了很多。但是随着各个公司的网管都在改用5G信号的路由，网络状况也是每况愈下。二点家里去年装修，小三房。什么是小三房？",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:40",
      "text": "给小三住就是三房，然后面积比较小。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:43",
      "text": "OK采用的是无线网络部署，在房间正中央放了一个小米路由器，带硬盘做做nas有几个结论，A五季信号穿墙比2.4G差。第一卧室需要穿两堵墙，只剩下两个信，而且会降频到只有11兆的连接速度，而且丢包严重，nas连接的速度不可接受。C在穿一堵墙的时候，架设wifi中继到卧室使用时，还是只有300到400KB左右的上传下载速度，而且不稳定不可受。最后采用的方案是电力猫，小米路由器直接插网线连墙上的电力猫。卧室电源口放一个电力猫，接收设备带802.11N加网线基本能达到5兆左右的速度，而且不丢包，基本可以接受。但是拷贝大东西的时候，还是得把笔记本和路由器用千兆网线直连。另外电影预报有个缺点，发热量大的情况下容易死机。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:40",
      "text": "深圳的夏天基本一个月重启一次，所以这位听众和你在都在一起，都在深圳，哼，另外国内小区wifi信道的干扰也挺大。现在家里三个电力猫，一个input两个output，我家的热点有五个。不过wifi多了还是会给自己造成信道的关信道的干扰。家里PS4 streaming的PSV上，使用PS4主动wifi离得非常近，都频繁掉线。后来PS4关闭主动wifi，PS4连网线，PSV连电力猫的wifi情况好了很多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:13",
      "text": "推荐一下android上的wifi信道分析相关的APP，能够快速了解当前空间下的信道占用情况。个人结论是能布网线就布网线。OK所以你对这一点有什么反馈呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:30",
      "text": "有什么评论吗？首先其实无线也没什么，你不得好的话，问题不是很大。他说那些情况，就我去我也去过很多这种这种什么这种叫coworking space。这种合作办公的空间确实看他们那个，因为现在特别深圳这边很多这种孵化器，众创空间都是当二房东的，就是基建也没好好干，很多人对这个也不熟，然后做的都挺差的。公司也是这样子，就是你要很多这种所谓的IT公司的这些技术部门都是非常差的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:08",
      "text": "所以这不是寨都的常常态吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:10",
      "text": "不全，就是中国都基本上都这样，就不那个那个wifi不得好的非常少。但是如果wifi不得好的话，其实这些问题都应该解决。OK对，但有很多前提条件，首先你要是要整要整体规划。你不是说像他说那种一层楼234，工程师妈的各家都搞自己的那就没得玩了，对吧？肯定是要要禁掉那个人用。对，这个尽量个人用个人的那个那个wifi热点的情况要统一去布。然后要要根据那那楼层的形状，包括那些中间的隔墙的材质，去考虑要布多少个点，然后采用哪些东西。其实这里面学问还蛮多的，就是要做好了是挺难，但是做好了，对现场这的确。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:00",
      "text": "是一个不是说你念完网络工程就可以搞定的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:04",
      "text": "真的有很多。对，不是说你在这加俩六点这个信号就好了，就是你加了可能会反而更糟糕，你要去考虑到各种各样的情况，然后就是设备也是一个问题。听他说那些什么，千元左右国际品牌路由器。对，这种就是办公楼这种密度的，就几百人的那种，也不不可能用这种千元级别，就是家用的，不可能用家用的，一定要用企业级别的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:33",
      "text": "然后它里面的那些方法是不一样，就像什么CC厂牌和H厂牌的对吧？就比较贵，一个一个那个就普通的还不带那个802.11AC的，就802.11N的。我看最便宜的那种还是得3 4100个。然后如果你要上最新的一一ac那所谓什么1900兆的那种企业级的无线那个AP我看好像是最便宜的淘宝货都要六千多块钱一个对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:04",
      "text": "然后你一层你一个覆盖的范围也就那么点，然后你一层楼看面积还得装上十几二十个对吧？差不多小10万块钱光买AP就进去了完了你还得买AC对吧？还要做千兆网，就是那种cat 51的网，做那个backbone对吧？然后你还要布完之后，你还要去在美国之间做那个叫roman就是漫游。对你从你从一个AP切换到另一个AP的时候，中间连接不会断掉对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:37",
      "text": "然后在二层三层，对，看到我很讲究的。然后那个2.4G他说有三个不重叠的信号。没错，确实是这样子，那么你更要小心谨慎去做。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:48",
      "text": "然后那个信号强度也不是说你开到最大是最好的，你要根据周围的情况来看，就有可能要调到中或者调到小才是能够更好的一个方案。然后现在5G也是一样的，就是说5G也有那几个心脏，它基本上不怎么互相干扰。而且5G有个好处，他说的很对，5G的信号穿墙性能比2.4G差，这就导致一个什么样的后果呢？就破就使得5G就邻居之间。比如说你刚才说他说家里还有一个情况，就是5G和5G邻居之间的影响是比较小的。因为基本上隔离度强5G信号就很弱了，隔两堵的话你就可以就忽略不计了。所以你在家里布5G的话，其实是更好的一个选择。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:29",
      "text": "然后包括用那个11N和11AC区别也是蛮大的。因为同样的这个信道带宽，你用更快的这个标准，在更短的时间内完成了数据的传输，那你有更多的空闲出来给别人传输。那个冲突的时间会更少。对，因为一旦冲突叫两个的back off，然后重传。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:50",
      "text": "再然后就是这个设备的选择，刚才吐槽了一下，还有那个千元左右的家用还没问题。然后他说他家里用那个小米路由器，我靠，小米路由器我看了好多这个测评工作，都是信号非常差的代表。为什么会用这个？我觉得他把刚才那个办公室用千元左右的国际品牌路器放家里，我估计还差不多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:13",
      "text": "然后小米的可以扔了。是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:15",
      "text": "其实也不是说便宜的一定不好，但是大部分的便宜的就钙你买到好的概率很小。而且你没有人去做这种专业测评。而在国内这种硬件测评他妈都被搞坏了，就是全是枪文软文拿钱写的，就没有正儿八经在做的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:31",
      "text": "那个叫什么？我们只谈硬件的，硬杂志叫什么来着？",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:37",
      "text": "有有这种杂志。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:38",
      "text": "微信好像就叫微型计算机，就一本杂志，然后封面上写着我们只看硬件的那个杂。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:44",
      "text": "肯定也是枪王满天飞的，好吧。不用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:46",
      "text": "我记得我小时候他口碑还不错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:49",
      "text": "我觉得国内其实真缺乏那种真真正正的踏踏实实做那种某一个细分领域的这种很专业很有深度的测评的。因为最近我遇到两件事儿，最近我不是在买那种小的PC机，那种玩NUC，英特尔那个小的。我发现国外有个专门的不有个网站叫做NOC blog，它专门就只测评这么一个非常逆势的一个产品。OK就就很他会讲的很细。然后说这个家用无线组网的话，或者小范围无线组网，有个人叫做small net builder，甚至也会把那些就在就当然是他是美国的，应该是他会把那些在美国市场上卖的，那些新的无线设备都会测的非常详细，相对来说比较专业。那国内找不到这种，你只能听这个听那些各种公关文给你瞎逼逼，对吧？就基本上不可信了。但你买回来实际测的时候就很麻烦。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:44",
      "text": "我觉得可能在西方比较好的一点就是很多网站都会不不是网站，就是很多媒体都会提供付费购买测评结果的服务。德国有很多，德国法国都有这样的网站，就是他的测评给出来了，然后他会给你一个排名。但如果你想要知道具体这个排名是怎么得出来的，你需要花几欧元去买他的测评报告。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:13",
      "text": "哼国内对我。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:15",
      "text": "觉得这个模式至少你可以相信他们基本上是不需要拿别人的钱，然后就也可以做出相对独立的判断。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:27",
      "text": "这个问题我觉得一下还解决不了。在国内。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:29",
      "text": "对，就是这个国内不可能的，就光靠花钱看别人评论，这是闻所未闻的事情是吧？怎么能接受？",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:37",
      "text": "对，那你说回这个事儿，比如说你买了一个比较好，工业界公认比较好的那种是无线设备的覆盖一个家里的，当然其实家里情况也比较特殊。不同那个那个户型，那个那个楼叫什么隔那个隔墙的结构不一样，有些是那种有承重墙，里面是有钢筋的那效果就很差，然后他给你摆位是对吧？对对对，这之类的事情，那我们不用。我在现在住的地方是一个两房，然后面积就还有那么大我就一个比较新的无线路由，然后选的还挺不错的，测过了，然后就效果就挺好的。隔个墙我也能够有个二三十兆，因为我是还是我这个设备还是一一N不是11AC的。OK11N的话，三个stream顶天也就450的理论值了。你扣一下，打个对折，差不多也就那样二三十兆的速度了。对，其实还是挺不错的。所以里面还是有很多这种要经这确实挺难的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:44",
      "text": "要有你要对这个东西要有技术上有足够的了解，然后你要知道怎么去判断那些软文，然后去看足够多的测评，然后你也得先从测评里面买一个合适的，完了之后你才知道在家里怎么去选择一个合适的点。因为不一定合适，你刚好想那个信号最好的点，可能没有网线接口，你怎么办？对吧？然后他像他这种情况，如果是这个看起来他是有隔两堵墙的话就很麻烦。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:08",
      "text": "因为他可能那个入户的地方不是在房间的中间的位置，我的运气比较好，我入户的位置可以刚好在整个房间的中心点，就可以整个平均覆盖的到。然后他那个就不行，那就只能然后之前也没有埋线的话就很糟糕。是所以我就我觉得他那个话很早，就是能不限就不线。但是我觉得这个看情况，如果成本不是问题，然后装修的方案也可以，也还没有定死的话。最好的方案就是说你在每个房间的那个顶部，去布一个那种吸顶式的那种AP然后做那个漫游的方案。但这个成本就比较贵，可能一个就三房的话，家里加三房，就是三个卧室加一个客厅，对吧？对，就有四个房间。你要布这个东西，搞完这一套下来也得可能几千块钱。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:59",
      "text": "挺贵的。我觉得我是觉得从安全的角度讲，布线至少要比无线安全一些。安全的意思比如说首先在和平时代，邻居不会来破你的无限。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:14",
      "text": "在僵尸来现在无线很容易破吗？用那个WPA2应该。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:20",
      "text": "还密码。是的说法，邻居不会说我，我老婆怀孕了，你把无线关一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:29",
      "text": "不他怎么知道是你。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:32",
      "text": "对，然后你如果买了网线的话，你就可以理直气壮的说，我们家没有五星。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:37",
      "text": "大河很不方便。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:38",
      "text": "现在设备对我反正我现在是基本上，虽然我现在有有线口可以用，但我还是PS还是连着无线。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:46",
      "text": "比如说对对吧？而且他他他家里就提醒挺奇怪的，它热点就五个。我不明白为什么你既然有一个路由器情况下，你还要加这么多个热点，你这不是自己给自己找事儿吗？但是要关掉那些干扰的热点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:01",
      "text": "因为小米路由器好啊，我们不要继续吐槽这位听众，我们把人家的名字都说出来。对不起，饶先生，我们这个对视不对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:09",
      "text": "他不就什么叉叉路由器那里应该毙掉，我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:15",
      "text": "好吧？对。Yeah，no hot feelings.",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:22",
      "text": "下一则又是名GW，这位叫。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:28",
      "text": "这个字一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:30",
      "text": "我靠两位主播好，然后他想补充一下这个windows下面文明机的问题。在windows下用win GW人有很多，其中一个是我。原因很简单，因为windows下还在更新的，而且免费的fortune编译器基本只有min GW一个选项，或者更严谨的说最流行的一个选项。不要惊讶为什么我还在用fortune，我的主主页是科学计算，就是显示的使用，包括大量学C语言的跟压根不想学编程的本科生在内，则在影视的使用。比如被学长推荐安装个code冒号block.",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:09",
      "text": "这个lock是一个ID1，应该没记错了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:12",
      "text": "OK关于windows里的终端仿真器，我想两位也许是很久不用windows了，不了解也是很正常的。我依据个人的经历提几个。有一个是git for windows里面带了一个bash.",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:27",
      "text": "get bash。对，就如果你你带了一个中台房间。对对对，如果你在windows上面装一个bas h的话，它会给你提供一个命令行。然后这个命令行其实是纯这其实是个shell，就是一个best shell。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:42",
      "text": "对，因为get你不还小。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:45",
      "text": "对对对，就是这get up的人觉得与其写一个图形界面，不如让windows人逼着windows用户也用。Get me用好跟give .",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:57",
      "text": "up什么关系？",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:58",
      "text": "这个东西是give up做的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:00",
      "text": "OK，如果比较喜欢bush行为的人，可以用那个做一个基本做一点基本的操作。对于使用command点EXE的人，应该推荐一个叫做commander，网址是commander CMDER点net的项目。当然这个项目是C的一个改进版，com是CONEMU，但的确很流行，重点是开箱即用且美观，这个还是蛮蛮难得的。就是没记错的话，应该是也支持基本的linux shell命令，比如说list之类的，也可以在里面调用power shell以及bash。这可以试一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:44",
      "text": "OK come council EM是一个council，mulai是一个有新生活。好像用过，但我具体不记得长什么样了也有可能不是，但是应该是一个用过。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:58",
      "text": "这种东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:00",
      "text": "我之前不是在windows，我不不我之前不是在一个数据调研公司写的软件，最后是要部署到linux服务器上的。但是开发环境是windows，所以要。对我我记得那个康也没有是支持，反正是个支持tab。然后好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:24",
      "text": "下面一则反馈就可有意思了。这个一定要强烈。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:29",
      "text": "这是我们这简直是我们这一期的主题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:32",
      "text": "对，可以吐槽好久对不对？不就是和和他一起吐槽，对，应该说叫什么引起共鸣。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:40",
      "text": "对，本期我们没有主题，这个还是要解说明一下。因为我周末要去意大利玩陪女朋友，所以我们这期是以非常轻松幽默。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:57",
      "text": "为主是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:59",
      "text": "好吧？我刚才想说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:00",
      "text": "我们我们毕竟是一个IT主题娱乐节目。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:03",
      "text": "没错，我们是以听众反馈充填时间的一期节目。我刚才。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:09",
      "text": "想说这封是我们每次都写很多反馈的老朋友，叫做Polly diary。对real吴涛你们好。首先还是感谢一下二位，通过你们的节目的确让我了解了不少计算机方面的基础知识。最新一期的terminal emulators，虽然我几乎没听懂在讲什么，辛苦你了。但是这种形式这种节目形式的好处就是可以一边听着，也不耽误手头的事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:35",
      "text": "还好还好，我们应该有一个convention，就是当你大声念的时候，就是这个反馈的内容。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:41",
      "text": "然后当你想应该我应该换一种voice对我应该换一种voice来来我现在开始切，我们为了这个表意清晰，我们进入一个就是以后我念听众反馈都会用一种不是我这种日常说话的声音。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:56",
      "text": "就说播音用播音腔好了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:58",
      "text": "对，这次的反馈是关于上一期命令行的。是因为最近我决定把网站迁移到某云服务器上，正好折腾了两天。Linux的web环境配置真的是无比的痛苦。所以想说一下对民营银行的看法和疑问，当然是从外行的角度。和大多数人一样，我真正开始接触计算机也是从windows开始的，对于命令行的了解基本上仅限于在windows命令提示符下拼一下域名或者埃批config看一下本期埃批等简单操作对于linux是完全陌生的。之前在本机环境测试都是装一个web集成web环境。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:42",
      "text": "WANT是windows space，apache msg L.",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:47",
      "text": "PHP就是lamp.",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:48",
      "text": "的那个衍生版windows版是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:51",
      "text": "OK, 然后所有的操作都可以通过图形界面的菜单或者编辑器来操作。我最近才知道，linux下都是需要用命令来操作这些简单事情。我记得很多年前就听说过一些linux系统，比如5 bunt就已经实现了类似windows的图形界面，而mac OS也是基于nex的。这里说明一下这个是错的，mac OS是基于BSD的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:19",
      "text": "我有点搞不懂的是，为什么现在的服务器还普遍使用笑命令行的操作方式，而不是像windows那样远程登录过去直接用图形界面操作。当然我也看到有的观点说是为了节省性能，但是我觉得对于今天的硬件配置，加一个图形界面这样的资源应该是微乎其微。是不是有其他的原因？",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:40",
      "text": "还有就是我本来以为我使用的云服务已经实现了类似虚拟主机那样的web图形界面管理能力。但是我发现完全不是那样。实际上他们只是在硬件层面实现了弹性和虚拟化，用户拿到的仍然是一个空白的系统，一切需要自己配置。虽然他们有云市场里面可以购买集成了的镜像，但是我试了一下根本用不了，而且客服根本就不回复。所以最后我只能自己按照他们的配置教程去做。但是他们的文档明显是写给专业用户的。比如刚开始就说如何运行安装命令，却不告诉你如何把安装包弄到服务器上。最后我是从一个视频里面才找到办法，用linux自带的命令上传过去，然后再用命令解压点点点，最后配置好了程序，跑几分钟mysql就挂了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:33",
      "text": "我根据错误提示从网上找解决方案，结果发现有45种可能，而且也没有把原因说清楚，最后都试过还是不行，只能重启服务器维持几分钟。好吧，我就说多了，基本上我的感受就像是一个小黑箱，对于服务器来说也是一种神秘无形的存在，只能通过一个小黑窗，通过某种神秘的密码和它对话。让人困惑和气愤的是，为什么我所有步骤都做对了，还是出各种问题，或者已经能运行的还是会出一些小的错误。折腾了两天，重置无数次之后，我终于崩溃了。所以最后我通过根据别人的提示，用了一个云主机面板，可以通过图形界面来操作了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:20",
      "text": "这件事让我意识到运维并不是一件容易的事，但至于为什么会这样，我还是有点不明白。也许因为已经习惯了windows这种图形化的直观操作方式，或者像smart phone的上的应用，其实大部分工作开发人员都替你完成了。而linux这样的只能从一砖一瓦自己开始盖大楼，要自己亲自踏过所有的坑才能跑起来。我总觉得这不是一种理想的方式。用一个例子来说，我觉得微信大行其道，其中有一个重要原因可能是它通过图形化的、直观的、人人都可以操作的方式，完成了以前只有开发人员才能完成的工作。直到现在，一个没有任何编程基础的人，想在web上做一个类似公众号的东西都是几乎不可能的。所以就算是公众号早期的时候，仅仅只有一个发布图文的功能，几乎相当于web 2.0以前的技术水平和模式，仍然吸引了大量用户。后面就不用念了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:27",
      "text": "对，您现在收听到的是内核恐慌一档real卖萌的节目。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:32",
      "text": "OK, 现在听到我自己的声音，表示这个听众反馈环节已结束了。其实你觉不觉得这个反馈代表了很多人的心声。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:40",
      "text": "我觉得有点像在回顾自己的童年。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:45",
      "text": "童年太早了。你十年二十年前的，就我们刚学这个接触linux的时候，差不多也经历过这种一种很怎么样。我用那个词，它在叫让人困惑和愤怒让人困惑和气愤的时代。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:00",
      "text": "对这篇email里面其实当时有种冲动。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:04",
      "text": "就是把它打印给加布的感觉。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:06",
      "text": "是不是不是把它打印出来，然后把其中一些亮点的句子用这个荧光笔i like。比如这个让人困惑和气愤。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:17",
      "text": "的是对，因为其实这则反馈其实我觉得相当有代表性。因为其实我们自己起码我自己是是也是经历过他们他这个阶段这么摸索过来的，就是觉得这什么是跟什么就是一堆什么乱七八糟，我的屏幕跳来跳去，对吧？为什么这么难？为什么不能点两下就搞定了？",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:39",
      "text": "但我觉得这个是就这里有一个历史背景在哪儿？就是我们的那个时代，你必须去买杂志或者是看报纸上一篇受字数限制的文章，来一步一步的去钻研。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:53",
      "text": "怎么没有搜索引擎。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:55",
      "text": "对，但是现在这个时代还是会有这样同样的。比如说那个是最简单，那个时候不可能有什么一个virtual box让你装个linux然后你按一个快键切换出来就可以去查文档了，这种事情是不存在的对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:14",
      "text": "就一台电脑装上就那个地方，然后崩溃了，也没有没有任何东西可以用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:18",
      "text": "对不对？而且那个时候我反正三号脑子一热，把windows整个删掉了。就是连一个想打游戏的就是非常可怕，从来非常挫折的时候想要打游戏都没有选择，只能关机。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:39",
      "text": "我们但我觉得其实他这个有其实有有几个方面，但是我们这个可能展开来讨论。但是我觉得首先有一点我要承认的，就是说他说的这件事情从一个就如果我们把这个linux服务器当成一个消费级别的产品来看，就从他的产品感或者说这个易用性，他确实是很差的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:00",
      "text": "所以这点我们要承认。沿用上一期提到那个车的比喻，linux卖给你的是坦克，那里面一大堆。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:07",
      "text": "而且是不保证能正常运行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:09",
      "text": "对，里面搞不好你坐进去连连方向盘都没有，是两个操纵杆。你得先明白，同时推操纵杆是前进，对，一个前一个后就是转弯。这个就是你连方向盘的使用经验都没有了，对吧？没错，没这个这。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:25",
      "text": "确实它不是一个，它不是一个包装的。其实也有现在有很多商业公司在做。比如说就像我们觉得像一些比较比较user friendly，就比较用户友好的linux发行版。它做的已经还在这方面做的已经比以前好多了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:41",
      "text": "以前那个时代真的是你要自己去下载一个这个什么turbo回来解压编译，然后选各种参数，然后自己解决各种依赖，对吧？然后才能搞上一个软件。现在比如说大部分主流的发行版，对很成熟的这个包管理器，然后你只需要运行一条命令就连上网了，就可以自动安装。然后包括所有的依赖，基本的配置都给你搞好了，对吧？其实已经比十几年前好的多的多了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:09",
      "text": "就从我们这些老用户的角度来看，但是他说的一些问题确实存在，特别是对于一种你刚从windows过来，然后你也完全不理解这个菌命令行操作方式，也不理解linux这些的这些原理的话，其实没有这个没有就所谓没有基础，你真的是很难去搞懂。因为就是在这图命令行的界面有一个发现性比较差的一个问题。就是如果你不知道要做什么的话，永远都不知道。对你就你就根本就无处就你不能东点点西看看，对吧？你看啥你都不知道，这就是一个很很自由开很开放的一个世界，你都不知道该该查什么。然后也不像说有图形界面的话，你可以至少看一下一共有多少个选项，每个选项是干嘛的对吧？它有一个逐渐学习的一个过程。但是就说完这些问题之后，其实就我自己的这种这种摸索学习的技能来看，其实他这个问题的最核心的原因就是说他没有这个基础知识，就是说还没有学会走，就想学会跑。我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:12",
      "text": "应该这就是他他是我觉得这个比喻可能非常的政治不正确，但是应该说它比较像他他他是他是一条鱼，它游贯了，然后上岸之后，他试图在一个没有水的地方用摆动尾的方式前进，这是行不通的。因为有那些windows的知识，图形化的知识在那边，你会想说沿用你曾经可行的方式，去在一个崭新的环境里面工作展示。对你必须先有一个词叫安乐，就是把一些东西忘掉，就像像学什么太极拳，你好忘掉自己所学的东西，才可以重新开始去学一些新的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:05",
      "text": "对，就是说你特别是你从一个故意图形界面转化成一个命令行界面，这种是有本质范式转换的。你那些之前的经验是行不通的。然后就会一个正确的方法应该是什么样子？就是说你其实是需要看一些更加基础，更加底层东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:26",
      "text": "你得一步一步看linux的基本操作，它的基本原理是怎么样子的，它有它为什么会有这些东西，像我们之前讨论过的很多这种问题，它的图，它的这个命令行命令命令行，它是更早一图形界面出现的。它的历史沿革是什么样子？那为什么我们在服务器上还是沿用这么一套东西？有各种各样的历史的原因，或者是一些更加务实的考虑。就没有那么简单的一个就没有图形界面那么直观的可以用的界面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:56",
      "text": "反正有句话说，学专业就是学哲学史。其实你学操作系统，至少linux操作系统，你其实是要学一遍unix的历史，这是绕不过去的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:05",
      "text": "一但但其实但其实我觉得对于很多这种新手来讲，他是我最起码我自己也有有这个很经历。我就是说我之前我们做这么一个非常简单的事情，对吧？我为什么要花一个月或者半年的时间去研究一遍这么底层的东西。但你学这个windows的时候，你不也花了这么多时间做做同样的事情，你就忘了，对吧？所以我觉得还是要先首先要把心态放对。如果你要选择这条道路的话，那你肯定是要先打一些，就是要先读小学，先要完成一个高中的作业。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:39",
      "text": "最大问题是很多人可能就被的去做这件事情，他这并不是他的主动的一个意愿。比如说他比如说这位听众，他的动机其实就很简单的，是把网站迁移到另外一个云服务器上，对吧？那为什么就要被逼着去折腾。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:57",
      "text": "这么多是吧？对，其实也有其他的选项，只是说你没有选择那些更简单。有那个什么各种什么叫什么不叫云服务器，叫什么主机空间，对吧？那就比较简单，还各种什么PHP卖的命，那一套都给你搞定了，对吧？你直接配置复制过去就好了也可以。但是你自己选择了一条hard的位，那你肯定要默默你自己要想要要有一个心理准备。然后它里面其实提到一些我觉得一个核心的问题，就是为什么这个就是他说为什么现在的服务器还普遍使用share命令行的操作方式，而不是像windows那样远程都能够直接用图形界面操作，这当然是有原因的了，一个竟。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:41",
      "text": "无言以对。我觉得要从我的我先说我的理解，我觉得就是因为命令行是个universal的东西，它是像real最喜欢说的那句话一样，它是一个最大公约数。是这么说，对，最大公因数没错，就是你在一台路由器。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:04",
      "text": "不对错了，最小公倍数不不不。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:06",
      "text": "最大公约数and proving.",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:09",
      "text": "数。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:10",
      "text": "就是任何一个机器就任何一个数都有的那个部分，所以当然是最大公约数了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:17",
      "text": "没有，windows没有效，windows server没有效，就是有的power笑算笑。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:23",
      "text": "我的意思是命令行这个东西基本上是可以确表确定它在任何一个环境下都应该有的。可能比如说什么micro s nine或者是BEOS可能没有运用好。但是其他的基本上每一个操作性都会有银行。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:42",
      "text": "而且对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:43",
      "text": "比如说你要给一个单片机编程，单片机上是不可能跑起来图形界面的对吧？另一方面你要给一个比如说路由，你要去调一些路由器上的东西，路由器也不可能给你个图形界面。当然它有可能装一个web服务器，但最多也就是那样了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:03",
      "text": "对所以为什么说linux普遍还要使用shell命令的操作方式？我觉得一方面就是这个，而另一方面则是使用图形界面是一种非常效率低下的方式。可能这位听众现在还没有感觉到，但是如果用借用这个通信领域的一个概念来说的话，就是商非常的的低，信息熵非常的低。你传过来一个窗口好吧，这个窗口可能有99%的像素是对于我来说没有任何意义的。我唯一需要的就是那个组成输入命令行密码的窗口的那一个text input，仅此而已对吧？那为什么不就直接告诉我说我应该输入命令行密码？用户名和密码？",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:58",
      "text": "而且如果你每一台计算机都登录过去，用图形界面操作的话，一方面每一台计算机的图形界面将会有细微的不同。不管是设计上的还是操作系统本身上的不同。这个会给你带来一个影响，就是你会每登录到一个新服务器上就被迫去熟悉这个服务器的一些特性。比如说图标摆在哪儿，或者是字体渲染有一些不一样的地方。但是在命令行下面没有这个问题，对吧？你不管到哪里，你用到的那个shell的。当然我们那期也讲过了什么bash fish之类的，但是他们大同小异，你只需要敲几乎一样的一些命令，就可以完成一模一样的事情。这个效率其实是要比图形界面高很多的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:47",
      "text": "对你刚才讲了一件技术上的原因，那我讲几个另外一个维度的事情。首先你说如果那linux服务器用图形界面操作可不可以？我觉得技术上是可行的。但是有一个问题在于，你去看一下现在的linux发行版，甚至都没有几个主流发行版是用的同一个图形界面。整个图形界面不是这个是一个泛指，就是包括很多东西。比如说就像比如说我邦图它的那个图形系统，它底层替代那些最开始的时候，我们上次讲过是unique上面的图形系统，是一个X11的这一套东西。但其实那个很古老，现在基本上没有。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:27",
      "text": "我们在十年代开始。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:30",
      "text": "对，然后现在其实就各家有各家的玩法。比如说那个connal，就是乌邦图的东家，他写了一个叫做mere的东西去替代这一套。但没有别家才有mere，对吧？对，就MIR那个那个子系统，这就就连这种底层的东西都没有办法统一，更不用说上面的一些什么桌面环境，比如说有什么norm，有KDE，还有各种那种小的什么XLXDE，之前我们讲过的。对，就是说在整个unix。这个环境里面，图形界面这个事情从来就没有统一过。但反而是这个命令行这件事情，就刚才你讲的是一个universal的一个interface.",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:09",
      "text": "是一个相对来说比较统一的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:12",
      "text": "对，相对来说统一的就他可能大中小还在命令上面。但是就不用说是大家对这个图这个命令，对这个笑都都理解都不一样。起码大家都都笑的孩子都是一个还有速度TTY的设备，对吧？大家这个还是有一个共同的，这个是一个历史包袱，你可以怎么理解？",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:29",
      "text": "或者说这是一个商业现实，就这样的。所以他不可能像windows那样有一家商业公司，或者像macos的那个server那样。他因为有是一只有一家商业公司在做这个事情，他可以把这个图形界面做得很漂亮。因为就是你再来比一下那个macos，那个S一的那个server其实做的也挺好的，也是通过图形化的方式来控制的。然后它的底层也是一个unix的系统，那基本上就可以达到我们这最起码达到它polydor的理想的情况，就是底层还是unix系统。但是面面上有一个很简单和好用的图形系统去解决，可以远程登录去解决这个问题。我现正在真的这么干，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:07",
      "text": "对，但是有一个问题是绕不开的，就是刚才讲的那个那个商的问题，初音界面能表达的东西就是它毕竟它的那个抽象的维度有限，对吧？它能表达的一些东西其实是不是那么够用的，然后会导致有些比较复杂的软件的配置。如果你用图形化的方式来表达它的话，那个那个简直不可以接受的麻烦，或者是难以开发、难以实现、难以维护、难以理解。有时候反而你用一个文本界面看下手册，是更加简单的一个方式。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:41",
      "text": "当然同样的来说，就是对于这些不同各样各种各样的软件来讲，大部分的我们现在用的那台上面这种开源的这种软件，它都不可能由于前面那个那个图形系统四分五裂的原因。它不可能说基于那个来去支持各个主流操作系统的这些图形系图形系统。因为你很多我们要用的这些linux上面的软件，它在开发最早版本的时候，这些后来推荐文章还没有诞生，对吧？他怎么可能为他提供支持？所以它一定是采用一种类似于配置文件的方式去实现的。而配置文件一定是通过这种命令行的方式去去加载，去去去搞他的。然后再然后就是这个自动化这个过程，就现在其实我们真的就对应大规模部署而言，手工去操作某一个服务器，然后去手工安装软件，基本上已经成为历史了。现在都是做基于这种虚拟机，基于这种镜像的方式去部署一个基础环境。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:43",
      "text": "然后再之后再用类似于像chef，像用那个那个还有一个shift之前的那个叫做还是后来的对，就puppy对，那个是早一代的运维自动化的一些工具。像后来现在我们在流行这个container，其实之前我们也几期节目聊过，是聊了就用这卡那的方式就一定它都是自动化的。自动化的话就更不需要用图形界面去增加这个东西的复杂性了。比如说你点鼠标，先点哪个键，后点哪个键。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:13",
      "text": "你这个东西怎么自动化，对吧？可以用什么拖大尾机，MC recall的东西录制，但是这是实在是太太大蛋疼。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:22",
      "text": "所以就不管是说从历史沿革也好，技术层面也好，还是说现在实际的商业的就实际的大规模操作来讲，linux server都不可能用图形化的方式去管理和配置。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:37",
      "text": "甚至我们可以说在过去的15年里面，软件界渐渐走出了这个图形界面的迷思，走向了命令行Rachel这复兴道路。基本上现在任何一个新推出的工具，或者是比较有用实用的开发者面向开发者的工具，基本上都会只给你一个命令号工具。然后在文档上也只会教你说这个东西安装很简单，什么apt gets install，或者说blue install，然后具体的使用起来也都是什么。比如说docker doctor的命令，docker基本上不可能给你一个开发出一个图形界面来的对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:20",
      "text": "那其实说回他这个情况，如果说我们刚才讲的这个现状，这样以后也不不大可能改善他这种小白用户怎么办？那我讲两种出路，第一个就是说你学对你真的花的时间去学。比如说他后面提到说他他他明显是装了一个买水果应该跑网站，应该是一个类似于这种world press的一个类型的应用。他可能装了一个mysql l他竟然在2015年自己把安装包传到服务器上解压，然后在那个了。其实这个你明显就是用错了，因为现在大部分的主流的这种发行版都自带这种mysql的这。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:55",
      "text": "这还这还这其实还是一个我刚才说的online的问题，因为在windows上面没有这个东西对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:03",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:03",
      "text": "没有办法习惯了说我应该从什么地方当。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:07",
      "text": "一个下载一个什么安装的服务器。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:10",
      "text": "对吧？那不是当你用这台确定是去装东西的时候，你就会自然而然产生这样的疑惑，这个安装包从哪儿来？对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:19",
      "text": "对对对，所以其实他就完全搞错了。然后其实我这个事情真的是可以很简单，几行命令都搞就搞定。就是从我们看来两三行命令就可以搞定，你中间不用做任何别的麻烦的事情，而且配置都自动给你配置好了。但是因为你不知道什么是正确的方式，所以你就只好选择一个错误的方式，就一路踩坑。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:42",
      "text": "反过来说自己就是前我们有前面那一期讲这个包管理的时候，这位听众明显没有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:50",
      "text": "人听吗？他都说了，边听一边听，也不耽误手头的事儿，结果听是听了没记住。Anyway, 其实这种情况其实完全可以不用绕过他这些码。就我们连自己就我们这种对这个过程很了解的人都不会说自己去下载一个mysql的安装包，再传到服务器上手动去编译再配置。一定是红包管理系统。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:17",
      "text": "20年前做过这样的事情，现在不可能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:20",
      "text": "对，还有一个出路，就现在也有一些厂商在尝试。就是说他现在我们的那个叫我们不是什么叫做叉叉the service，对吧？就是什么什么作为一个服务，现在它在这个程序上就叫做infrastructure as the service就基础设施作为一个服务，你可以买一个虚拟的服务，一个所谓的云服务器，一个虚拟机。就是说他给你的一个就把过去把这个硬件事情，把它变成一个虚拟的一个环境。但是你还是要去维护中间的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:48",
      "text": "但是对于这种很多应用，或者只是很多应用，这个东西并不是最合适的选择。你可能需要选择一个叫做我们叫做pass，就是platform of service。这platform什么意思呢？就是说这个platform可以把底层的，刚才讲的那些底层是由什么什么多少个虚拟机构成的，他们虚拟上跑的什么软件，这些都可以藏起来。你不用管你这个上面跑上传的一个应用，比如说你要跑一个博客，对吧？你只要知道怎么在在一个pass平台上去安装或者是运行一个word press应用就好了。这个东西的难度是远远低于在S上。你自己从看从头到尾装一个mysql，装一个NGX或者是apache，再装一个PHP的显示器，然后再配置各种各样的，要简单的多的那还有一个更高级的就是在我们叫叫SaaS，就是你的software as a service对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:39",
      "text": "之前也之前我们像国外那个一档，也之前赞助过我们另外一档节目的那个那个平台叫square space。他就把这个东西做成了一个这个软件作为一个服务。就是你你不用管这个网站是怎么怎么，这不用管这个网站怎么，这个软件怎么安装的，甚至你都不管怎么运行的，你只要交钱，每个月出这个几十万几十块钱，他就给你一个账号。你登这个账号，你就可以用一个很傻瓜的画的方式去选择一个模板，然后填充你内容就可以了。你这甚至都不知道出现在他后面跑了什么软件，对吧？就是说在不同的层级上有不同的解决方案。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:13",
      "text": "如果说你的这个能力或者说你的这个知识储备不足以在ice这个最底层的平台上去做的话，你可以往上走。对，但是国内有没有这种很好的这种pass，甚至是在sas的这种平台，这个是要代考的。但是起码在国外，我们就从这个逻辑上来讲，有很多这种很成熟的选项是可以用的对，就是说国内可能现在还没有普及到那一步。因为ice是一个相对来说比较成熟的一个。那既然在技术上大家是能够理解的，pass的和sas的话都有不可避免的一定程度的叫做winder rocky，就是叫供应商锁定。就一旦你用了这个之后，你再你就没法再迁移到别的地方了。因为你用了它这个software，就他这样的service的话，别家跟他不一样，你要换一家的时候你怎么办？",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:04",
      "text": "对吧？这所以你享受灵活性所拥有的自由也就越少。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:08",
      "text": "对，就你要做的事情越就是你你要自己要做的事情越少越简单。当然是可能你从易用性角度上是更好的，但是你同时你的灵活性就也就越差，对你能够迁移到别的地方的这种成本就越高。所以这个东西它是在不同的维度上有各有取舍的。所以你自己要想清楚，你愿你是愿意花时间花成本去学这个，还是说愿意，反正我要求也不高，对吧？我就跑一个很简单的地方，用一个SaaS或者是pass就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:38",
      "text": "所以这件事情就没有那么简单，包括后面他说那个微信大型的原因其实就很简单。如果你把微信视作一个软件的话，它就是一个SARS，对吧？公众账号公众号不就是这么一个SARS。过去要开发一整套的技术，跑在这些虚拟机上就能完成公众号。现在公众号点几下能实现的东西。但是你也知道的，离开公众号，离开微信你还有什么呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:03",
      "text": "对，其实这位听众说，在一个没有任何编程技术的人，想在web上做一个类似公众号的东西，其几乎是不可能的。我觉得其实是可能的，你无非去申请一个，比如说免费blog空间，不就是但是S他家。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:18",
      "text": "去自己去搭，它对不免费。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:20",
      "text": "blog空间不需要自己拿，就是你去什么牛博网申请。那现在还有吗？有还是有的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:28",
      "text": "什么博客我就说现在现现在在国就监管很严的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:32",
      "text": "现在我的点是说为什么公众号早期的时候只有一个发布图文的功能，仍然吸引大用户呢？是因为本来就有大量用户，微信是一个封闭的有大量用户的平台，所以你开公众号自然会有很多人来看。这是这个平台独占性决定的，而不是因为或者说它的易用性只是一个次要的的因素。我相信即便他把腾讯版微信号，把微信公众号的开设的门槛调的非常高，还是会有很多人打破头去做一个公众号，因为可以吸引到用户。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:13",
      "text": "对，不过这里还是要说插一句嘴，跟技术无关的微信这个没错，他确实把这个东西做得很简单，然后你确实能有大量的用户。但是你要想清楚，这个用户可不是你的用户，他可是微信的用户。对，so叫什么？那句话怎么说来着？叫做choose your own drug是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:34",
      "text": "Choose your own drug.",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:36",
      "text": "选择自己的药好一次，不对，choose your own pots, 自己的do。对，每一个选择都是有后有时候是有后果的，你觉得你是要思前想后，到底你能够接受什么，你能够投入什么？世界上但事情并不都是那么美好的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:54",
      "text": "对，反正我觉得这封读者来信，之所以会引起我们非常热烈的讨论，也是因为这位听众非常的诚实，他没有去掩饰自己的焦虑或者是困惑，我觉得这点是很好的。比如我觉得最让我感受深刻的这句话，让人困惑和气愤的事情为让人困惑和气愤的是为什么我所有步骤都做对了，还是出各种问题。这就好像就好像小学的时候在干嘛呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:31",
      "text": "什么怪我了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:34",
      "text": "对，就好像小学的时候听着老师讲的什么东西，或者说在学英语。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:41",
      "text": "解题步骤来不来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:43",
      "text": "最后还是做不对，为什么？这是为什么呢？这个世界为什么这样对我公不公平对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:49",
      "text": "对，其实这只说明一件事，就是说你还没有真正的理解这件事儿。然后所以为我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:00",
      "text": "我可以推荐这位听众去系统的看一下linux相关的入门教材。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:07",
      "text": "比如说国内很，其实我觉得他不一定有时间真的去看，就看他的那个工作和需求情况。其实不一定，我刚刚我说了，其实就是去系统的学习一下00X的基础知识。只是一种选择，你可以选择别的方案，但只是说你考虑好你选择的后果是什么，你要付出什么样的成本，以及你的代价是什么。真正的自由肯定是要花成本的。这个成本可能不止体现在金钱上，可能更多是体现在你的时间，你的精力的投入上面去。你可以选择那些简单易用的方案，就好像为什么你看那些美观的、成熟的图形界面总是要付费的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:47",
      "text": "而且我还想说的一点就是我觉得生活里面其实并不仅仅是运维或者是编程的这个领域有这样让人让刚入行的人来或者是新手，让新手感觉到非常困惑和痛苦的，就是他为什么要这样，对吧？哼那答案就是历史原历史沿革就是有非常多的历史原因造成了他现在就是今天这个样子。比如说我记得linux里面有一个函数叫create没有意义，最后没有意义对吧？就我第一次用这个函数的时候写了好多遍，我说我靠为什么错了？最后一查手册，我这个函数名里面没有末尾的那个意义，就是create没有意义。这件事情就让我觉得what fuck这世界是就为什么这些是linus世界会是这样一个破破烂烂的状况。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:43",
      "text": "其实只是当年写那个韩书的人少少打了一时手滑没有打到那个一。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:49",
      "text": "我记得unix hate handbook里面提到这件事，说是因为当时的那个中文机特别慢，所以所有的命令都能短则短。那不是应该。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:03",
      "text": "不是这个原因。如果这样的话，我close为什么会有一对？他他那个人说了，只是因为说打错了，他打错了。对，还有一个事儿，你知道在HTTP协议里面不是一个referred这个头吗？那refer的拼写是错的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:25",
      "text": "what那个拼写是错的那。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:28",
      "text": "refer应该只有一个是REFERER，应该只有一个R他写了2个REFERR等等。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:39",
      "text": "R一我想想。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:42",
      "text": "RER他我想哪个是正确的。我现在有点糊了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:46",
      "text": "天天被那个和英国拼法和美国拼法没有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:51",
      "text": "那是一个，对它多了一个R就是正确拼法是REFERER，对吧？但是他在HTP协议制定的时候，错写成了REFERRER.",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:02",
      "text": "oh my family, 然后这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:04",
      "text": "错误一直被保留到现在。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:07",
      "text": "你知道这让我想起什么吗？那个t max的作者是个英国人吗？大概还是anyway，反正他的那个T你在t max的配置文件里面写颜色的时候，一定要打COLOUR就能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:22",
      "text": "一是平板的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:25",
      "text": "真的，对，世界上很多事情都是这样的，就是他有他的历史沿革，他成为今天这个让人困惑的，为让人质疑他为什么不能再简单一点的现状，都是有他的原因的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:37",
      "text": "为什么他这么不一是的，说到不一致，下面我们就开始了。上期我们讲到windows 3那个叫PUTTY的这么一个terminal emulator的工具，然后我们把它念成莆。你也念菩提吗？我想问的是，对我念的是菩提，为什么对put就put会加。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:00",
      "text": "TY就是puke对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:03",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:04",
      "text": "多自然一直以为是因为我在德国屋，反正不加点的话，只有邬一种念法就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:11",
      "text": "不可能念他是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:13",
      "text": "那对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:14",
      "text": "而且说来我们就来讲这个，其实后来有那个也是什么听众反馈，如雪潘潘飞来告诉我们说，其实他念他，我们念错了，他应该念party party。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:27",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:28",
      "text": "因为在那个英美式英语里面，那个PU他有念，不是不是念不是GUT，这个肠子，不是念good，是念gut对吧？所以不是party是party。但虽然虽然但你们为什么不是怕？对，虽然put店铺的不是part，不要问我为什么。这就是这个高度不高，就完全没有任何一致性可以可言的英文。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:57",
      "text": "就要怪就怪法国人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:00",
      "text": "对，但是为了一致性，我们还是准备练成putting。对我自己我以为你是mico原Michael USBDM1，对，还有DME接口。德还是德语比较严谨。我觉得你看我们买个鞋，德德你们德国同事写这些程序的时候，会用德语秘密还是用英语秘密？",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:28",
      "text": "英语不好的就容易写俄语。其实这一点在世界各地都一样，日本人还会用罗马字的假名来命名变量，你看他们的大中文会用拼音是吧？你看他的代码简直想就我们的代码很多里面也是一打开一大堆但我觉得。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:45",
      "text": "德但德国人做这件事情，我觉得很有那个就起码拉丁字母的人做这件事情应该很自然而然。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:53",
      "text": "你说用德语来命名变量名就看起来没有那么违和。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:57",
      "text": "就是你对对对，就不会很奇怪说中文你用这个拼音命名就很奇怪，因为有那个映射的问题对吧？你看你要猜，因为有那个一字多音的问题，你要猜它到底是什么玩意儿。那可能根据上下文的这个语义你可以猜得出来，但德语完全没有这个问题，而且你有这个键盘又不存在输入法切换的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:16",
      "text": "对，唯一需要注意的就是coding，这打开的时候很容易就出现了一个菱形中间一个问号。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:24",
      "text": "还好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:24",
      "text": "现在都是unique的。没有还好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:28",
      "text": "你们是windows环境的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:31",
      "text": "那为什么会有这个问题？有很多服务器还在跑旧版。Long sorry。不要说这个，我觉得我其实也泄露。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:39",
      "text": "了公司商业机密。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:40",
      "text": "在上一个公司的原大盘里面有很多地方，我看到他判断判断一个条件是否为真的时候，它总是写不等于N然后我在改段代码的时候，我就写了个判不不去判断它是不是等于N而是判断它是不是不sorry，不去判断它是不是不等于N而是去判断它是不是等于Y然后之前维护这个代码的人就跟我说，千万不要这样写。因为在这个代码库里面有很多地方和N相对的是J而不是Y.",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:19",
      "text": "是德语的的但是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:21",
      "text": "有些人是用Y的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:24",
      "text": "这里科普一下，就是英文的yes是对应。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:28",
      "text": "德文的亚就JA然后对我就说我靠我之前以为这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:35",
      "text": "在等一下，如果这样的，为什么N是也是你们应该用k，nine要用nine。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:42",
      "text": "对，不是看，而是nine OK。对，这也是让我觉得我靠非常崩溃的一件事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:50",
      "text": "所以你们你见过有同事用德文写这个命名。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:54",
      "text": "有啊很多就什么很多slave什么。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:59",
      "text": "对，这个会影会影响你对代码的理解吗？我还是说你现在已经这个脑子里面中德不是音德，已经不已经自成流畅了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:10",
      "text": "我觉得我还可以，目前我没有，因为有就你不会。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:14",
      "text": "觉得违和吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:15",
      "text": "是对，我不会觉得违和。但是我看到大段的用德语写的注释的时候，我还是会皱眉头。我觉得对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:23",
      "text": "何必就德国人英文也不是那么好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:26",
      "text": "其实很多人英文非常差，当然还是要比法国人好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:32",
      "text": "法国。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:33",
      "text": "一生好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:36",
      "text": "好吧，那那这个问题在中国就更加严重了。我觉得起码我看到很多大部分应该是的英文不那么好的人写注释都是写的中文或者是拼音。对，如果是英文的话，一定是惨不忍睹的。他们有也有人有问这么一件事儿，就是说你一个中国的公司程序员绝大部分都是中国人，在可以预见的未来也不可能招外国程序员。你纠结个英文写住宿算个啥，对吧？然后我竟无言以对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:12",
      "text": "说的也，就是你看德国人也就1亿人，为什么很多程序员理直气壮的在注释里面写德语，我们却我们我们世界5分之1的人口却必须在注释里面写英文的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:26",
      "text": "好像的确那好歹还是世界第一大语言。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:29",
      "text": "从人数上来讲好像的确有点道理。而且你看现在的很多语言，接下来要谈到swift，就在first就是在在原生级别支持UNIQO对吧？你既然可以用image来做变量变量名，用unicode来写一些比较扯的这个操作符。那为什么不能用中文，用你的母语来写注释？",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:57",
      "text": "也是或者是我觉得起码从效率来讲可能还是好一点点。可能唯一要考虑就是真的是编码的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:04",
      "text": "就是至少你用中文，你想用brain fuck.",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:10",
      "text": "特别是在windows上面的话。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:12",
      "text": "你特别要注意这个。你想用brain fuck来写一段程序的话，你要想输出中文是非常累的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:21",
      "text": "好吧，OK今天的那个听众环节以及相关的吐槽就到此为止。我们下面进入新闻新闻环节。对，第一条新闻是挺挺不错的。这之前是上一期还是前一期，我们提到了有两个维多利亚秘密的模特，其实是程序员来的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:50",
      "text": "去做了程序员不是，他们本身是程序。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:54",
      "text": "不，你那个是制作程序，我那个本来就程序。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:57",
      "text": "我说的是county plus。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:58",
      "text": "你说的是我，我说另外那个上周没发过一个一个就是一个黑黑黑人女孩，她那个是本来是IOS开发者，然后后来去被发现去做了维密模特，但是没做多久。然后你这边后来我也找到了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:13",
      "text": "然后他就成了一个女生。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:14",
      "text": "这不对，这个是另外一回事。这这这位这位最近在国内非常火，因为他帮华为代言了一个表，然后各种枪文段子在那个公众号里面推。然后我也看到了，但我们提到有做广告前，这就这段你可以略过了，不用解释为什么。后来其实我们关注他是因为因为别的事儿，是因为他跑去SpaceX作秀去了袜子。然后在一个什么在叫做华尔街日报的封面，有一个很帅的标题，背后是space x的火箭声控，前面是这位KK女神穿着这个不是凯文凯利，叫卡里克德国人吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:10",
      "text": "这个是应该。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:12",
      "text": "看信好像有点像anyway，然后拿着一个很帅的宇航员，上面喷喷绘着美国国旗。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:20",
      "text": "他拿的其实是一个摩托头，摩托车头盔。我必须吐槽的是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:25",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:27",
      "text": "他他拿了这个头盔，其实叫jet jet式的摩托车头盔，然后他穿的衣服也只是一个印度星条旗的皮夹克而已。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:38",
      "text": "对，但其实我觉得为什么这件事情要单独拿出来讲？其实我挺觉得它体现了一种或者说美国现在科技圈比较讲究的事儿，就是这个性别平等。为什么我们之前讲发火箭、搞计算机写代码这些事情一定都是男人的事情呢，对吧？对，那我们也看一下是不是也有这个女人的事情，而且有一个这么漂亮，然后身材火爆。对我也是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:10",
      "text": "就听黑话是说一个女孩身材好，就是条条是指身材，条直就是身材非常好，牌儿是指脸，排量就是长得漂盘量调直的妞。这是从早期我相信是从什么清末的黑化转移来，现在是北京日常语。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:31",
      "text": "对，anyway他就是一个典范，然后我觉得这是一个好的现象。而过去我们通常觉得这种比如说这种你想到一个什么内衣模特，你脑子中浮现出来一定是已经有有一些很多带偏见的成分。特别是我知道在中国大部分屌丝男性的心目里面，会有一些这种固定的看法。但其实KK他是为什么？我们觉得这是一个很好的事，就是他它代表了另外一种叫做又有头脑又有智慧，又有身材、又有脸蛋，还超级努力的。然后老朋友就是你你男朋友还特别有钱，做什么，财团的一个二代，这种就叫做我们姑且叫做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:16",
      "text": "人生赢家。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:18",
      "text": "人生赢家不太对，人生应该有很多种形式。我觉得这个叫又有头脑，然后又很漂亮。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:25",
      "text": "你要重新说一遍吗？牌，我我我跟你说排量调整，脑子好使，行了吧。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:34",
      "text": "好吧，对，我觉得这个是非常好的一件事儿。然后他他会在社会中树立起另外一种形象，然后这种形象会改变我们过去对这种比如说内衣模特也好，那种比较主先入为主的成见。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:49",
      "text": "对我我相信这一点也许可以让我们的子孙后代在二三十年之后不会再面临。因为我现在这样公司里面可能七八十个人，只有三个女生的窘境。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:04",
      "text": "对对，这事情就是这样的，所以在这种女生再多来一些，越多越好。接下来是一条下一则新闻，就是比较重量级的了。其实我们有点错过了，因为这是上周的新闻。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:22",
      "text": "现在已经有点稍微有点退热了。但至少看到的时候我们两个还是比较，至少我很兴奋。不着急。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:30",
      "text": "因为苹果在WBC的时候说了，那个swift语言年底之前要开源。他们赶在12月初的时候，12月上旬把这件事情做，容易把这个事情对，所以你怎么看？",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:47",
      "text": "当然很高兴了，我终于可以在家里面和公司里都用这种语言。但怎么说呢？反正要走的路还很远，但这是一个很好的开始。为什么感觉好像某其实这次是巨大重大事情的发布宣言。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:08",
      "text": "他在这次开源的细节还是要讨论一下。我觉得他这次当然除了我们之前过去理解的，他会把这个语言，compiler这些相关的工具链开放出来之外，一个很更加重要的事儿，他可能是把那个叫做foundation，就是它的标准库。也就至少他没有说要没有到现在还没有完成，没有全部完成。他知道，他说会会以后会用swift逐渐写过来。因为以前的就你你如果你做IOS开发，你现在要用那个swift写一个L应用的话，你还是要有很多这种object c的那些foundation的那个那个库，对吧？你要调那个东西，然后那个是必源的，就私有的一个东西。但是如果你把没有这个标准库的话，你光有一个语言其实并没有什么用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:57",
      "text": "简单来说这一次开源最大的一个趋势就是swift。Swift这个语言和这和coco乃至于跟OS的这种非常紧密的耦合关系将会松动，就导致swift的会获得更大自由度。可能将来会有一个比较标准的，比如说可能会有一个标准的IO库，对吧？不像现在就是现在对这个时间点，你要在你想在swift，你想用swept在link linux上开开发一些程序的话，你必须做大量的操作系统判断。如果是OSN的话，你要调用一套IO函数。而如果是linux的话，你也会需要去调用另外一个函数。但是在将来很有可能这个就不再会是一个问题了。因为可能car lip的那帮人会做出一个跨平台的，我也不知道poc house的标准库出来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:58",
      "text": "对，次发布的那个他们也有一些像工具链的话，他们发布了两个，主要就是两个系统。一个是针对OS，他肯定就是自家平台，肯定要支持的。然后他还发布了一个针对ubuntu，有两个发行版本，14.04那个LTS版本和最新的15点10来15.0 15.4，应该15.4OK。的这个就是像编译器的那些包都可以直接用的对，而且是预先编译好的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:28",
      "text": "反正windows还暂时还是没戏的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:33",
      "text": "应该不会支持敌方平台。我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:36",
      "text": "敌方平台。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:37",
      "text": "但这次也局限也比较多。因为它只发布了一个架构，就是只支持这个X64架架构的处理器的指令。那不是说你想跑一个就开源的，你想跑ARM上面就好像没什么戏了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:52",
      "text": "跑到ARM上面有我在邮件列表，我在邮件列表里面看到了一个仁兄在做，然后他目前撞到了墙。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:02",
      "text": "但至少那个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:03",
      "text": "至少肯定没有官方，估计这是肯定的。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:06",
      "text": "所以这件事情还是挺沮丧的。当然这个问题时间问题，对，总有人会去做的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:15",
      "text": "就现在就已经在那里就已经有人在做了。而且他就他据他的说法，他已经走了很远，什么LVM没有问题，然后那个c mark当然也没有问题，然后唯一跑不出来的就是swift本身。然后他在对我加入了里面的两个邮件列表，一个是swift swift dev和另外一个是swift user。然后这两天的讨论还是比较热烈的，有一个哥们儿在做swift for android，而且好像是个中国人。对，然后我也是把那个代码都在公司和本机上，都就按照他的那个一本说明一步一步做下来。还是OK的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:00",
      "text": "就他这个他这次发布的是2.2的版本，22版本。然后我看了一下x code里面自带那个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:08",
      "text": "是2.1我已经很久没有开过X车了，应该是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:13",
      "text": "对，所以还是挺有意思。他发布了一个更加实验性的版本，然后他们生产就是master LS.",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:20",
      "text": "就是有一个master和C差别。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:24",
      "text": "对，这次还有一个很很重要的事，就是说因为过去苹果像开源这个像web kit也好，还有那个叫那个叫什么，就是苹果之前的那些开发产品，他都他不会把他们内部的开发的过程拿出来，他只会说给你一个code down，对吧？就是我们最现在这个状态是这样子的，你拿去你们自己研究怎么弄。但你看你从里面你看不到他是怎么一步一步得到他发布的那个版本的人。这次就不一样了，这次他们是直接选择把那个git发布到那个github上面，去做一个公开的一个repository。就你可以看到你可以根据那个commit history，就是提交的那个历史记录，你可以看到最早的一个提交是什么的，那个谁那个叫叫什么。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:09",
      "text": "在那那对他。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:11",
      "text": "怎么从最开始第一个提交，怎么一步一步把这个swift这套东西搭起来的这个历史过程。是这个应该是从来没有出现过的事。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:21",
      "text": "是人类学研究。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:24",
      "text": "苹果学研究。对，你可以看到苹果内部他们至少在这个team，就是sweep这个team是怎么做研，怎么做开发，怎么做项目管理，怎么去这个代码怎么一步一步搞出来的，就过去是看不到的，其实还挺有意思的这也可能跟最近这一两年苹果整体上的一个开放的态度还有点一个契合。对，就还比较难能可贵的一个机会，大家有兴趣可以去看一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:55",
      "text": "然后这次发布的还有一个比较有趣的小东西，叫做sweet package manager，就是平就是sweet源的官方包管理器。为什么有趣呢？因为这个东西是我们之前评论过towel写。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:09",
      "text": "max写的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:12",
      "text": "max超well。如果这个名字你不熟悉的话，麦克上那个著名的包括那些home不是他写的，他自己去面google.",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:21",
      "text": "讨论过他面google被拒的糗事。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:25",
      "text": "然后他是因为什么来着？他是因为在面试的时候，二叉树没有办法在白板上写出手工写出三二叉树的算法。好吧，其实我也写不出来。不能去过过这种公司。所以他这次他后来他不是和我们说，他后来去了苹果，然后你去了苹果也不知道该在干嘛，现在就知道他是在花时间写这个suit。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:53",
      "text": "Package manager其实想来其实还蛮合理的，物尽其用，做的挺好的，各尽其才。对swift这次发布的话，就是大家想怎么去用它。可能很多人在设想的一个场景就是说现在不是这个叫什么移动端和这个服务端的协同性比较要求比较高了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:14",
      "text": "对你可能有一段代码需要在客户端，就跟以前写那个web APP是一样的。比如说最简，那你要有一个验证用户输入是否正确的。如果是否合法的一段代码，你可能会想在那个本地就是客户端上跑。这种客户端是一个网页的话，就是在javascript里面跑。如果客户端是一个IOS用的话，就在就是你用objec或者shifts写。如果客户端是一个安卓应用，你可能要用这个java写，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:45",
      "text": "但是同样一段代码和逻辑，你又希望在服务端重复一下。因为最终你还是要以服务端验证的结果为准。因为客户端可能谁他妈知道你会被被搞了，对吧？对，但过去的话你如果做这个objec，没有人在服务器端用吧。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:04",
      "text": "已经没有人在服务器端用object。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:07",
      "text": "对，所以你一定是说在服务器端用的一种语言。PHP也好，javascript也好，python也好，ruby也好。他的那个逻辑你要在客户端里面再复述，就是重写一遍，就是很容易导致两边不一致或者出错了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:24",
      "text": "现在很多的想法就是说，其实这样我可能很多代码就可以共享了。那那功能逻辑我根据是对方这个设备的实际情况来考虑，是在客户端上运行还是在服务端运行，对吧？比如说比较是一个比较老的机型，可能跑起来有点慢。那我们在服务端上完之后就直接给他结果好了，对吧？那如果说新的机器新的比较好，我可能直接在客户端算算完之后它可以有个更快的响应的速度。对，就这些东西事情就可以做了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:54",
      "text": "但是我我我后来想了一下，这个事情怎么说，始终是一个很片面的事情。比如说你现在你国内假设你做一个应用，但你说你个人或者你只做IOS问题不大。但是基本上你要做一个稍微大的应用，你不可能只做IOS，你还是要做安卓的。不是，那你supt在安卓上怎么办？要用安卓就是你的安卓应用soft写，对吧？所以其实还是逃不掉那个问题，所以反而是现在那些jas什么从这点上看。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:27",
      "text": "可能生命力最强也是反而是最近的就是javascript通过。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:31",
      "text": "那个react native的方式来可能反而会好一丢丢。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:37",
      "text": "对，但是怎么说呢？反正你刚才说这个问题，现在机油的解决方案基本就是比如说在服务器端实现一套逻辑，然后生成客户端的代码。比如说服务器端是java，然后生成与这个逻辑一模一样的javascript，然后部署到客户端上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:58",
      "text": "Compiled to java script.",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:01",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:01",
      "text": "要么就是这这也是这这也是一种方案。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:04",
      "text": "但是对还是要不就是都用jasper pt，然后如果你只做苹果，如果你是120%的果粉的话，你可以选择只用，也许在不远的将来可以选择只用swift。但我觉得所谓的用力并不仅仅限于此。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:26",
      "text": "哼所以你觉得在你的构想中还有什么其他的用例可以？",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:30",
      "text": "因为我觉得这个是作为一种，怎么说呢？作为一种系统级别语言而生的，其实系统级别的语言可以做的事情要远远超过外部的范畴。比如说我觉得叫什么swift line之类的一些项目，就是支持什么用所有来写命令行下面的工具，写一些就跟外部完全没有关系的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:54",
      "text": "就替代C。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:56",
      "text": "对它其实是一种相对来说比较靠谱的系统级别的语言。我就是当然我的意思是他可能还达不到比如说go或者是C加这样的级别。但是它毕竟刚刚开始，才3.0，还没有还在review。我们假以时日，也许可以成长成一个比较既优雅又性感的这么一个编程语言。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:26",
      "text": "这就要看那个叫做adoption，就是社区到底对它支持怎么样。然后有因为它毕竟苹果它开放只是一些核心的组件，然后就像周边的那些第三方包，第三方库还是要靠社区去发布和维护。所以看手机这个事情怎么想了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:43",
      "text": "起码想起donut core library在去年开园的时候的类似的一些讨论。就是呃微软有这个愿景，现在很很有趣，微软和apple都在github上面有一个用户，还给top slash，get dot a slash, apple dl t slash. 挺违和的感觉。三号就你这么大的人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:16",
      "text": "现在两家的主就是起码微软的也也现在也说要拥抱开源了，对吧？他也他认识到过去那套玩不下去了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:27",
      "text": "过去那套说linux是癌细胞的，这个不对，他说他是说linux是癌细胞吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:33",
      "text": "还是说自由软件。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:34",
      "text": "应该是开源软。他说GPL，他说GPL是癌细胞。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:37",
      "text": "应该是机票确实是还行。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:40",
      "text": "好吧？对，就因为我刚才说了，对，和c sharp类似，c sharp和swift都是我觉得蛮蛮漂亮的女人。希望他们就此被放飞之后可以有更大的作为了。而且后面都有推手，对比较大的财团对吧？那我觉得前途应该是还是可以观望一下。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:06",
      "text": "其实我我个人我比较关心那个swift在写服务器端软件的应用，因为我之前用写过一些乱七八糟的小东西。然后我这么想，因为这两个语言的性质还是不太一样，因为go它是一个相对来说比较简单的语言，就没有很多复杂特性。然后他支持了一些他的一些选择，是很很特殊的一种组合。比如说它有它是一个GC就是垃圾回收的语言，然后它对这就是并发的支持比较良好，对web的支持也比较不错。但swift的话现在就不太一样，因为它是一个更加通用一点的语言。然后它没有GC，它是用通过那个计数器的reference counting的方式来做内存管理，然后他就没有GC的那个暂停的问题，另外它起码在目前为止没有对这个并发做任何特殊的优化。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:03",
      "text": "对，这不是在语言层面上支持。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:05",
      "text": "对，不是语言层面对并发的支持。他们目前在OSN上是依赖原件，叫做leap dispatch，就是那个库然后来做。我说第一个自然而然问题就是说如果做高并发的这种web的软件的话，或者服务器软件的话，这个shift怎么弄？是说用那个像event的方式，还是说以后谁再实现一个轻量级的类似于购的那种现成的方式？就现在都还是未知的，就这一块我觉得还不太适合现在用它来写一些服务器上的应用。对后swift .",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:44",
      "text": "3.0也没有涵盖任何和concurrency相关的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:49",
      "text": "对这个其实我觉得还蛮失望的，因为毕竟现在就是芝麻为我们一个大致的认同，就是未来肯定是一个并并行要特别考虑的时代。因为那个核每个核不会变得更快了，只会说变得更多。所以怎么弄，怎么去适应这个环境，或者说降低开发者编写这种并发应用、并行应用的难度。就swift没有给出他自己的答案，我觉得对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:19",
      "text": "总之这个燕子目前还是太嫩了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:22",
      "text": "还是要观望一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:23",
      "text": "观望一下。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:25",
      "text": "刚才说到的那个就是3.0，是他们明年年末，就是从现在开始一年之后要发布的一个大版本。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:32",
      "text": "说是2016年秋天，没有记错的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:35",
      "text": "反正是就是一年以后了至少。对，然后会有一些语言层面的变动。其实所以到现在为止出来这么多版本，一直都在折腾这个语言层面的变化。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:47",
      "text": "对，其实从最开始的demo一直到现在，这个语言特性已经有相当程度上的变化。如果你做一个now and then对比的话，所以先3.0也一样，3.0有可能会给做出一些直接打破向后兼容性的改动。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:05",
      "text": "就一定的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:07",
      "text": "对于一个新语言来说，这还是挺正常的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:11",
      "text": "但是起码有这套工具链了。然后我可以说，我能够写一个应用小应用出来玩一下，然后丢到这个linux的服务器上一直跑着。因为我的这个兴趣点还是在写那个服务端软件上面。我想知道以前不可能，现在至少可能了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:30",
      "text": "然后因为他这个还有是他是他是写出来是一个怎么说来着？它不带一个runtime，他没有GC那套机制，它生成的那个班的人还比较小。比如说最简单，我们都写一个print hello war这么一个应用。Swift编译出来在叉86上，叉64上就是一个不到10K的一个bary。但是你用勾写的话，出来就是一兆多两兆的一个banner，因为它里面还包含了整个go的一个让都是Better include，就是有run time，有GC那套机制。所以如果你想写那些小的那种utility就工具型的应用的话，这点是一个很非常不错的选择。好吧，那个swift的事就先聊到这儿。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:16",
      "text": "还有一个重大的新闻，就是我们对我也一直很关注的let's encysted那个开放的开放的SSL1个CA开始公测了。之前我们提到过，他是说因为过去证书是要钱的，那有一些不要钱的那种SSL证书的发放商，像那个start SSL，它的界面不是很好使，然后也很麻烦。那let's probe要解决这个问题，让大家都能免费的用上这个SSL证书加密加这进行这个加密的HTPS通信。然后同时又可以把这个证书的生成、替换自动化掉。它整套机制是做这么一件事儿。之前说是九月份开始发，公测，就拖了到了12月份了也但是好歹开始用了。然后如果有兴趣的话，大家可以去看一下，不建议现在马上部署到生产环境里面去，可以自己试试。在一些不是这可以在一些无关痛痒的地方先弄一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:23",
      "text": "我记得那天的let's crept的开发工作的时候，是谁在推特上说了一句说let's crib。简直就是科技圈的汪峰每次要上头条就遇到别的大新闻。上一次就是swift开源把这个less crib公测的风控完全压下去了。接下来的新闻也是一门一个一个语言的更新的新闻。我们真的要说他吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:52",
      "text": "说吧，这个还是很重要的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:54",
      "text": "OK, PHP7你说说出来的抖音了，PP发布了第七版。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:02",
      "text": "所以这版有什么变化？",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:07",
      "text": "我不知道你的反应是什么，我第一反应是到fuck，PHV6怎么了？",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:11",
      "text": "有有六吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:12",
      "text": "有六吗？为什么突然变成了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:14",
      "text": "PHV发布过六是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:16",
      "text": "OK原来你比我还那个，因为我知道我。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:19",
      "text": "最后一次接触PHP，它是5.0的时代。对，所以有也有些年头。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:25",
      "text": "了OK好吧，PHP4.0是一坨屎，5.0是啊不那么臭的事。但是到什么5.3、5.4其实就还不错了。然后PHP6其实是有点像像python 3，应该PHP6试图解决了一个最大的PHP的痛点，就是unico支持。但是PHP6一直难产，因为这个跟他们的核心开发者的incompetent无能，对这群人不当然他们的无能，接下来我们要介绍的很可能不是能力上的无能，而是一个制度上的无能。他们6.0一直做不出来，然后被迫把给六五开发了许多新特性，一点点backboard到PHP5里，然后PHP5.3、5.4，乃至接下来的whatever的什么版本里面，其实都有很多新特性是来自于原本计划的PH6。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:29",
      "text": "所以其实有PHP6这个版本发布过？",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:33",
      "text": "他但是问题就在于PHP6从来没有一个正式的对，我记得2005还是06年的时候，他们是希望2009年的时候大家都迁移到PHP6.",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:49",
      "text": "也不可能了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:50",
      "text": "而九年之后我们六年之后我们看这P就是扯淡去吧，这大大绝大部分P是P程序员可能连5和6之间有什么差别都弄不清楚。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:02",
      "text": "那你连5.0、5.1、5.2、5.3的区别估计都没有让很多人解释的清楚。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:10",
      "text": "对，然后我觉得PC程序员其实有一种当然不是说亲爱的你你这位其实可以成全。对，不要觉得被冒犯，我们是说另外一些品，对不对？在写p to p程序的时候，基本上就是看到这个warning就把warning关掉。然后不管开发的时候有多少warning，只要把warning关掉之后看不到warning，他们就认为这个代码是可以跑的。所以你给这些人说什么这个特性下一个版本就要废掉了，简直是让他们觉得不可接受的原，总之我觉得就是这样，就PHP的成PHP程序有很多这白痴，就是你你跟这讲道理讲不清楚了，所以这个核心开发者也没有办法强势的去推动这样一群。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:06",
      "text": "人去推不动。你想这么大规模的部署量了，怎么可能呢？就好像python图2转3一样，这么多年的就对好像也没怎么成功。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:16",
      "text": "对，所以就像我们在就像或者说就像拍的时候，其实不得不把很多三的新特性background到2.7里面以上。PHP也是很多六个新特性backcourt到PHP5，但是这就有一个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:32",
      "text": "就是更有动力升级了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:35",
      "text": "对那那新一代的PHPNG应该用什么版本？然后去年的时候PHP社区有一个讨论，就说新的PHPNG就叫PHP7号，NG就是next generation，所以新版的PHP就是PHP7。所以如果你对这个PHP感兴趣的话，然后你说现在有三个并存版本，567我应该用哪个版本呢？答案是用7，或者说我从五要迁移，那我迁移到哪儿呢？答案是迁移到7，而不是到6，因为没有6，六很有可能就不再会过了。是对对OK。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:14",
      "text": "所以总体来说七到底有什么新特性是比较好的？好有意思的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:22",
      "text": "语言层面上的新特性是是是存，怎么说呢？好像有一些是会弄坏现有代码的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:32",
      "text": "比如说就没有像还有兼容，这个我已经有心理预期了，无所谓OK有什么好玩的特性。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:39",
      "text": "但是有一个好玩的特性是the spaceship Operate.",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:43",
      "text": "这是干什么的？太空船运算符。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:46",
      "text": "对它的写法是一个小于号，一个等于号。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:49",
      "text": "一个大于这个做什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:52",
      "text": "我觉得我们现在又可以拿出那个PHV的锤子来了，就是两边都是起钉子的那个弯曲的翘的锤子，就是有很多这样无趣且无用的东西。我觉得它这个spaceship Operator其实就是一个comparator运算符，就是它会返回它左右两侧的参数之间的关系。如果是小的话就返选返回负一，如果是相等的话就是返回零，如果是大于的话就返回一。对我怎么会有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:33",
      "text": "这种意思。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:34",
      "text": "是不是？对，为什么要做出这样的东西来？对，就你不知道，就不可理喻。我觉得。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:44",
      "text": "好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:45",
      "text": "我们从现在开始换回这个比较客观的态度。另外一个新特性是比如说叫他们官方的名字叫什么来着？Now call a little sing之类的一个名字，就是问号OK.",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:03",
      "text": "这回是叫什么问号的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:05",
      "text": "因为P写PHP的时候，你经常会需要去判断一个值是不是被设定了，你要调用一个函数叫做inset。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:16",
      "text": "就所谓被设定就是它不是空，就是不是未赋值的状态。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:20",
      "text": "其实就是对，其实就是那个swift里面那个option table，对，optional. 然后这个pattern因为被用的太多了，所以他们专门做那个这个运算符就是两个问号。比如说你前面写一个，你要判断那个gets里面user这个variable是不是存在。天哪，你之前可能会写is set get user，现在你可以写get user问号。问号如果没有设定的话，后面有一个缺省就是nobody。就比如说对，这有点像那个jasper pt的一个常用的pattern，就是A等于B然后或者C如果B没有被设定的话，A就会付给CH大概是这样一个用。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:09",
      "text": "那我问你，如果说他前面判断是空的话，那就就等于什么？等于nova点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:19",
      "text": "我刚才说如果gets里面的user，对好吧，写法是这样的，dollar get, 然后那个every accessory里面是user同学，然后问号后面写一个字符串来nobody。所以意思就是如果前面这个get every里面的这个user now的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:39",
      "text": "就是nobody。对，如果他设定的话就是那个值有个大，那个值是什么就不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:44",
      "text": "对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:47",
      "text": "就是他做了一个optional type。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:50",
      "text": "其实就是相当于路，或者是jasper pt里面波尔，or就是写乱也会有这样的场景，就是你对是不知道一个值是否会设定，然后你要提供一个确定值，然后另外的写法就是AORB.",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:07",
      "text": "不是的，就是还不一样。你那个or的话，它会对那个进行逻辑判断，但这个也是非常奇怪的一件事儿，就是你逻辑判断什么，就是你得到那个值什么，你A和B它一定是前面A是为false的时候，你才会执行B吧？然后得到B。对，那么你怎么判断A为false，a为假的，就牵涉到一个那个那个叫什么来着？那个叫。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:32",
      "text": "这里有一个问题，就是这个语言如果它的布尔运算符严不严。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:37",
      "text": "不止类型严不严格。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:39",
      "text": "返回一个布尔类型的话，那这个就可以就是可以这么滥用的。这个在动很多动态里面，动态语言里面都是这样的。它它只要求前面的那个值是一个false的值就可以。False就是false加Y就false y就是类似于假的它就可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:58",
      "text": "但其实这个是类型不严谨的一种设计。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:01",
      "text": "对，这基本上只有在弱类型的语言。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:03",
      "text": "上可以用了好吧。不过PHP这种叫什么呢？这种语言设计的方式也是挺令人奇特的。我们社区需要什么我就加进去什么，完全不考虑后果或者考虑这个统一性怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:22",
      "text": "我觉得这其实这就是我们这次要说的p two p的社区。为什么会有今天这个问题？其实最简单的原因就是PHP社区是一个没有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:33",
      "text": "群龙无首。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:37",
      "text": "对他们缺乏一个像古一栋那样的所谓什么bending dictate for life，就是对for life对他们没有一个铁腕式的人物，可以明确的说这个语言应该有一个什么样的明确的姓名。很有趣的一点就是PHP开发者社区核心开发者社区是否做新特性的时候，他是要投票的，就是你要做一个大的更改，你需要获得3分之2的多数才可以把这个大的牛奶做进去。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:09",
      "text": "那那就是design by committee.",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:12",
      "text": "对，这个就导致了一个现象，就是很多平时根本不care的人，你去问他们投票的意见，他们就会说我靠坐这干嘛，烦不烦不做，然后就投反对票。很多比较新的特性都是因为这个就没有夺没有拿到多数，然后就胎死腹中了。然后2013年的时候，有一个人就此写了一篇文章，题目也起的非常有起的非常有趣的，叫做PHP6冒号。Pacing in the wind.",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:49",
      "text": "逆风还是尿。就。而且有意思的是你在网上搜PP6，如果语言设定是英语的话，这将是第一个结果。我觉得一个语言能混到今天这一步也真是不容易。然后他提出一些观点，或者说他作为一个核心开发提出一些洞见。就是说这个PHP核心开发者的社区缺乏一种clear vision，就是明确的这个眼界所带所所给这个语言导致的，所把语言带到了今天这个境地。其实都是怎么说，咎由自取。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:36",
      "text": "然后他其中给了一个链接，就是他们PHP core developer内部的一个邮件列表里面的一些对话。首先这篇这封邮件写的火气就非常大，然后它里面揭露一个问题，就是说连这个picture cover叫什么来着？阿斯莫斯都没有一个明确的目标，就是PHP到底应该做成一个什么样的范式。对此有三种态度，然后一个是说我们PHP正面做成OO的语言，就是面向对象了。然后另外一个就是我们应该明确的摒弃O或者说提供一些O的特性。但是语言本身应该是以processor为主的。第三种就是说我们应该作为一个做成像CGAI那样的，一个什么范式都支持你。但是这三群人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:23",
      "text": "做了个四不像出来的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:28",
      "text": "然后现在的状现状基本上就是每个人把自己想要的功能加进去。并且假设别人都愿意接受这个功能，才会导致社区。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:36",
      "text": "形态流量。所以其实我有一个问题，就是PPHP这个社区到底现在谁比较powerful，能够说了算？没有什么。因为我觉得其实这件事情，facebook其实还蛮有发言权或者影响力的。他不是做的那个叫做什么来着JVM，然后不是说性能屌炸天，那他说我要这么，我只支持ABCDE这几个特性，我觉得比较好。因为他们P那个facebook也是最大的商业的PHP的用户之一。就是现在还是至少如果不是最大，他至少是前十。举个例子，好的，那他们对这个完全有足够的话语权去制定这个去去去给出这么一个vision.",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:22",
      "text": "应该有道理。但是我也不知道这个如果各位听众里面有在PHPA核心开发者社区混动的话，可以帮我们解释一下目前PHPK的他们的mentality是怎么样的那。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:37",
      "text": "什么那个人现在还在吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:40",
      "text": "不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:41",
      "text": "完全没明白。对，其实反正没什么关系，就觉得挺全靠企图他到底会怎么发展下去。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:48",
      "text": "所以如果你对八卦和这个成开发人员怎么吵架有兴趣的话，可以看一看这两篇文章，就是说一篇文章和一封邮件，应该说对还是有一些OK。好，那我们本期这是第几期？31 30.",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:10",
      "text": "30 31了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:13",
      "text": "咱们两个也是做了一年多了，渐渐lost count，OK，感谢收听I片power tars网络旗下的埃踢技术主题娱乐节目内核恐慌。我们号称haco，但是也没有干货，想听人听，不想听人就别听。你可以为本节目捐款，捐款地址是kernel panic dot FM slash donate捐款金额随意，只要是八的正整数倍就可以。捐款不会为你带来什么，不捐也不会让你失去什么。我们的口号是no hard feelings。如果你问他，如果你有任何反馈，可以发电子邮件到kernel panic at IPN dot LI。同时也欢迎你收听IPN旗下的其他旗下的其他几档节目。爱听公论未知道他一来了流行通讯、high story应用、五次元博物志以及选美，我们下期节目再会。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本期《内核恐慌》节目深入探讨了技术面试中的编程问题、苹果公司的招聘策略、Swift编程语言的发展以及JavaScript在跨平台应用中的潜力，同时对比了PHP7的新特性。节目还特别强调了开源项目在SSL加密技术，如Let's Encrypt免费SSL证书服务中的重要性。通过轻松幽默的方式，主持人回顾了命令行界面的效率并分享了PUTTY的正确发音，同时预测了Swift语言可能带来的跨平台开发变革。此外，节目还涉及了动态语言与强类型语言的讨论，以及技术趋势对实际应用的影响。最后，通过一些有趣的新闻故事，如前模特转行程序员和SpaceX的招聘争议，展示了技术行业的人才多样性和性别平等议题。",
    "qa_pairs": [
      {
        "question": "那么对于这种开发环境中的奇葩设定，你怎么看？",
        "answer": "我觉得这家公司对开发环境的设定非常不寻常且苛刻，尤其是在不允许装虚拟机的情况下，对于C++开发来说确实有些病态。",
        "time": "00:04:30"
      },
      {
        "question": "eclipse CDT是什么？",
        "answer": "eclipse CDT是Eclipse的一个版本，主要是为C和C++开发者提供的开发工具集合，其中包含了针对C++开发的全套工具链。",
        "time": "00:04:47"
      },
      {
        "question": "关于上期节目中提到的关于WiFi取代网线布线的反馈情况如何？",
        "answer": "反馈显示，对于办公场所来说，由于众多公司共享2.4GHz频段的无线网络，信道干扰严重，丢包率高，甚至导致无线键鼠工作不稳定。当转向5GHz频段后，虽然有所改善，但随着各公司纷纷采用5G路由器，网络状况每况愈下。在家里，虽然小米路由器能提供一定的无线网络服务，但在穿墙能力和速度方面表现不佳，建议采用电力猫并通过有线连接以获得更好的网络体验。同时，专业人士指出，在布设无线网络时应进行整体规划，选择合适的企业级设备，并考虑楼层结构、墙体材质等因素，才能确保网络覆盖效果最优。",
        "time": "00:06:40"
      },
      {
        "question": "国内是否缺乏对某一细分领域的专业、深度测评，例如小PC机或无线组网设备的测评？",
        "answer": "是的，国内目前较缺乏真正专业、深入测评某一细分领域的网站。比如国外有专门测评小PC机的NOC blog和专注无线组网设备的小型净建设者，他们提供的测评报告详细且具有独立性，而国内往往只能依赖公关文，可信度不高。",
        "time": "00:14:49"
      },
      {
        "question": "西方国家有哪些关于产品测评的特点？",
        "answer": "在西方，很多媒体提供付费购买测评结果的服务，如德国、法国的网站会给出测评排名，但要查看具体排名需要付费购买测评报告，这种模式相对独立，较少受商业影响。",
        "time": "00:15:44"
      },
      {
        "question": "国内为何难以复制这种付费测评模式？",
        "answer": "在国内，花钱购买他人对产品的专业测评报告目前还较为罕见，多数人认为这是闻所未闻的事情，难以接受。",
        "time": "00:16:29"
      },
      {
        "question": "对于家庭无线设备覆盖问题应如何解决？",
        "answer": "针对家庭无线设备覆盖问题，如果条件允许且预算充足，最好的方案是在每个房间顶部布设吸顶式AP并采用漫游方案，但这成本较高。如果已有线接口，有线连接更为安全稳定。",
        "time": "00:18:08"
      },
      {
        "question": "Windows系统下是否也能方便地使用类似Linux的命令行工具？",
        "answer": "Windows系统下可以通过Git for Windows自带的bash shell来实现类似Linux的命令行操作，或者推荐使用Commander（CMDER.net），它是一款美观且功能丰富的终端仿真器，支持Linux shell命令及PowerShell、bash调用，能满足一部分用户的命令行使用需求。",
        "time": "00:21:27"
      },
      {
        "question": "对于这位听众提到的Linux服务器在易用性和产品感上表现较差的问题，您怎么看？",
        "answer": "我承认从消费级产品的角度来看，Linux确实存在易用性差的问题。它就像一辆坦克，内部结构复杂，不保证能正常运行，甚至可能连基本的操作界面都没有。",
        "time": "00:32:07"
      },
      {
        "question": "现在市面上是否有更友好的Linux发行版？",
        "answer": "是的，现在有一些商业公司在做用户友好的Linux发行版，相比以前有了很大的进步。它们提供了更简洁易用的安装流程和图形界面，通过包管理器只需运行一条命令就能自动安装所需软件及其依赖项。",
        "time": "00:32:41"
      },
      {
        "question": "对于刚从Windows转过来的新手用户来说，遇到命令行操作方式难以上手的问题，您认为最核心的原因是什么？",
        "answer": "核心原因在于他们缺乏必要的基础知识，没有学会“走路”就想学“跑步”。Windows图形界面的经验并不能直接迁移到Linux命令行界面，这是一种本质上的范式转换，需要先了解Linux的基本操作、原理以及命令行的历史背景。",
        "time": "00:35:05"
      },
      {
        "question": "命令行操作方式相较于图形界面的优势体现在哪些方面？Linux服务器普遍使用命令行操作而非图形界面的原因有哪些？",
        "answer": "命令行是一个universal的接口，适用于任何环境，包括路由器、单片机等，信息熵更高，用户只需关注关键信息，无需处理大量无关的视觉元素。同时，命令行操作可以避免因不同服务器图形界面差异带来的适应问题，提高了效率。一方面是因为命令行是所有操作系统共有的最大公约数，具有普遍性和一致性；另一方面，使用图形界面在效率上较低，且不同服务器的图形界面会有差异，不利于跨平台操作。另外，图形界面的实现需要多家公司共同参与和维护，而命令行则相对统一。",
        "time": "00:35:26"
      },
      {
        "question": "在当前技术环境下，Linux服务器是否还能采用图形化方式进行管理和配置？",
        "answer": "对于现在主流的操作系统和软件环境，Linux服务器不可能通过图形化方式来管理和配置。由于早期开发时图形系统还未普及，大多数开源软件采用配置文件而非图形界面进行设置，并且随着自动化部署的发展，大规模服务器部署已经不再依赖手工操作，而是通过虚拟机、镜像等方式以及自动化工具如Chef、Puppet等进行配置。",
        "time": "00:43:41"
      },
      {
        "question": "为什么对于小白用户来说，学习和使用命令行工具和自动化运维方式存在一定困难？",
        "answer": "小白用户可能不习惯从官方渠道下载安装包或不了解正确安装流程，容易选择错误的安装方式。此外，一些用户在学习过程中可能并未掌握相关的包管理知识，导致无法正确利用现有工具简化安装过程。对于这类用户，建议投入时间去系统地学习相关技术，或者选择更加易用的服务型平台，如PaaS（平台即服务）或SaaS（软件即服务），以降低管理和运维难度。",
        "time": "00:46:20"
      },
      {
        "question": "是否有厂商尝试提供更方便、无需底层运维技能的服务来解决这类问题？",
        "answer": "有的，一些厂商推出了基础设施即服务（IAAS）和平台即服务（PAAS）模式，用户只需购买虚拟机或使用预构建的云服务，而无需关心底层硬件和软件配置。更高级的是SaaS模式，例如Square Space等平台，用户只需支付费用，就能通过简单的图形界面搭建和管理网站，无需关心网站运行的具体技术细节。",
        "time": "00:48:20"
      },
      {
        "question": "这些服务在灵活性和锁定成本方面是否存在权衡？",
        "answer": "是的，不同的服务层级提供了不同程度的便利性和灵活性，用户选择越便捷的服务，灵活性就越低，迁移成本也就越高。例如SaaS虽然易用，但一旦使用特定服务，就可能面临供应商锁定问题，若想更换服务提供商，则较为困难。因此，用户需要根据自身需求权衡投入的时间、精力及可能承担的风险。",
        "time": "00:51:08"
      },
      {
        "question": "在T max的配置文件中，为什么写颜色时要打COLOUR？",
        "answer": "因为T max的作者是英国人，而COLOUR是正确的拼写形式。",
        "time": "00:58:07"
      },
      {
        "question": "在英美式英语中，PU的发音是什么？",
        "answer": "在英美式英语中，PU的发音是“party”，而不是“gut”。",
        "time": "00:59:28"
      },
      {
        "question": "为什么在德国或其他地方，有人会在程序中使用德语命名变量？",
        "answer": "这可能是因为在严谨的德语环境下，用拉丁字母书写的德语命名变量看起来更为自然，不存在像中文拼音那样的一字多音问题，也无需考虑输入法切换。",
        "time": "01:00:57"
      },
      {
        "question": "是否有遇到过同事用德文写注释的情况？",
        "answer": "是的，这种情况很常见，虽然看到大段德文注释时会让人皱眉头，但习惯后也能理解。",
        "time": "01:03:15"
      },
      {
        "question": "对于中国程序员而言，使用中文写注释是否可行？",
        "answer": "虽然中国程序员大部分使用中文或拼音写注释，但在国际环境下，使用英文写注释更便于交流和理解。然而，随着swift等编程语言支持Unicode字符，未来或许可以在注释中使用中文或其他语言字符。",
        "time": "01:03:36"
      },
      {
        "question": "苹果开源Swift语言的消息有何影响？",
        "answer": "苹果开源Swift语言是一个重大事件，意味着开发者可以在不同平台上使用Swift编写应用，尽管目前只支持X64架构，但随着跨平台标准库的发展，这将极大地推动Swift的发展和普及。",
        "time": "01:11:57"
      },
      {
        "question": "有人在做swift for android，并且已经走了很远，目前进展如何？",
        "answer": "据他所说，已经走了很远，LVM和c mark都没有问题，但swift本身还未解决。他加入了swift swift dev和swift user两个邮件列表，并且在两天内讨论热烈，有位中国开发者在做swift for android。",
        "time": "01:14:15"
      },
      {
        "question": "此次发布的swift是什么版本？",
        "answer": "这次发布的swift是2.2版本。",
        "time": "01:15:00"
      },
      {
        "question": "苹果在开源方面有何变化？",
        "answer": "这次苹果选择将git发布到github上，创建了一个公开的repository，这样任何人都可以看到提交历史记录，了解swift是如何一步一步构建起来的，这是前所未有的公开透明。",
        "time": "01:15:24"
      },
      {
        "question": "对于swift package manager的看法是什么？",
        "answer": "swift package manager是一个有趣的小工具，由max编写，他之前曾因面试时无法在白板上写出三二叉树算法而被google拒之门外，现在在苹果负责开发这个包管理器。",
        "time": "01:17:25"
      },
      {
        "question": "如何看待移动端与服务端代码共享的问题？",
        "answer": "许多开发者设想通过swift实现代码在客户端和服务端的共享，以应对不同平台需求。然而，目前这一方案存在局限性，例如对于非iOS平台（如安卓）仍需使用原生语言编写代码。",
        "time": "01:18:45"
      },
      {
        "question": "swift在服务器端应用方面的挑战有哪些？",
        "answer": "swift作为系统级别语言，在服务器端应用上面临挑战，如并发处理、内存管理（非GC机制）等问题，目前还不适合用于编写高并发web或服务器软件。",
        "time": "01:24:06"
      },
      {
        "question": "swift 3.0发布的时间及语言层面的变化？",
        "answer": "swift 3.0预计一年后发布，会给语言层面带来一些变动，可能会包含一些向后不兼容性的改动。目前swift在服务器端应用方面的支持尚不完善，需要进一步观察和发展。",
        "time": "01:26:35"
      },
      {
        "question": "PHP7发布了第七版，这一版有什么变化？",
        "answer": "我在说PHP7时，第一反应是困惑，因为之前我记得的是PHP6。实际上，PHP确实发布过第六版，但当时由于一些问题导致其未能顺利推出，许多新特性被推迟到了PHP5的后续版本中。现在看来，似乎有人误以为PHP6已经发布过。",
        "time": "01:30:25"
      },
      {
        "question": "PHP6是否真的发布过？",
        "answer": "是的，PHP6曾经计划发布，预计在2009年大家会迁移到它，但由于各种原因，尤其是核心开发团队的问题，PHP6最终未能如期推出，而是一些特性被分散地引入到了PHP5.3、5.4等版本中。",
        "time": "01:31:33"
      },
      {
        "question": "那现在新一代的PHPNG应该用什么版本？",
        "answer": "去年PHP社区决定将新一代的PHPNG命名为PHP7，所以如果你对PHP感兴趣，并且要从旧版本迁移，建议直接迁移到PHP7，而不是6，因为PHP6可能不再被支持。",
        "time": "01:33:35"
      },
      {
        "question": "PHP7中有哪些比较有意思的新特性？",
        "answer": "新特性之一是“太空船运算符”（spaceship operator），它使用小于号和等于号组合而成，用于判断两个值之间的关系，如小于、等于或大于，并返回-1、0或1。这个特性可能看起来无趣且用途不明，但在某些特定场景下可以提供便捷的比较操作。",
        "time": "01:34:52"
      },
      {
        "question": "另一个新特性是什么？",
        "answer": "另一个新特性叫做“存在性检查运算符”，用两个问号表示，它可以用来检查一个变量是否已经被设定（非空）。例如，get_user()问号nobody，意味着如果get_user()返回的是未设定的值，则结果为nobody。这一特性类似于其他语言中的optional pattern，为开发者提供了更简洁的代码表达方式。",
        "time": "01:36:20"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "内核恐慌：听众反馈与Windows开发环境挑战",
        "summary": "在本期节目中，主持人讨论了听众对上期提及的Windows问题，特别是MinGW使用情况的反馈。一位听众分享了自己在不允许安装虚拟机的开发环境中工作的经历，引发了对严格IT政策的讨论。节目中还提到了捐款信息和节目口号，强调了社区互动的重要性。"
      },
      {
        "time": "00:02:37",
        "title": "应对Windows开发Linux环境的挑战",
        "summary": "讨论集中在如何在Windows开发环境下，为Linux运行环境编写C++代码。由于不能安装虚拟机，开发和测试变得复杂，不得不考虑使用Docker。开发语言为C++，运行环境要求Linux，引发对开发工具和编译器的选择讨论。Eclipse CDT成为Windows上的开发IDE选择，但不能使用Windows的VC编译器，因为GCC与VC编译器的差异，以及引用库的不同。此外，还探讨了在不支持虚拟机的情况下，如何通过Docker进行开发环境的模拟。对于网络布线与WiFi的讨论，建议对网络有高要求的人不宜完全依赖WiFi，体现了对技术选型和工作环境适应性的深入思考。"
      },
      {
        "time": "00:06:40",
        "title": "办公室和家庭无线网络干扰与解决方案",
        "summary": "在办公室和家庭环境中，由于众多Wi-Fi信号源导致的2.4G和5G频段信道干扰问题变得日益严重。办公室所处的众创空间中，各公司Wi-Fi信号源众多，2.4G频段信道资源紧张，即使使用千元级别的路由器也难以避免信号干扰和丢包问题。转用5G频段虽暂时缓解，但随着更多设备的使用，干扰问题再度浮现。家庭网络部署实验表明，5G信号穿透力弱于2.4G，造成室内远距离连接速度下降和丢包严重。通过设置Wi-Fi中继和使用电力猫，虽然能够一定程度上解决卧室等远距离区域的网络问题，但对于高速数据传输仍有局限。此外，设备发热量大导致的稳定性问题也值得关注。总结而言，布设实体网线为最稳定可靠的网络连接方案，同时建议使用Wi-Fi信道分析APP以优化无线网络配置。"
      },
      {
        "time": "00:09:29",
        "title": "探讨无线网络优化与设备选择的复杂性",
        "summary": "对话集中在无线网络的规划与优化上，特别强调了在深圳等地的共同办公空间和孵化器中存在的问题。讨论了无线网络不佳的普遍现象、整体规划的重要性、以及针对不同环境（如家庭与办公室）的设备选择。指出了使用企业级设备的必要性，讨论了5G与2.4G的差异，以及设备摆放和信号强度的调整。此外，还提到了关于硬件测评的现状，强调了国内外在专业测评方面的差异。整体上，这段对话深入讨论了无线网络部署的复杂性和挑战，以及选择合适的硬件来满足不同场景需求的重要性。"
      },
      {
        "time": "00:17:44",
        "title": "选择和布置家庭网络的策略与挑战",
        "summary": "讨论了在家选择合适的网络设备和位置的复杂性，考虑到可能没有网线接口的理想信号位置、墙壁隔断对信号的影响、布线的成本和安全性，以及无线网络的干扰问题。提出了在每个房间顶部布置吸顶式AP的建议，虽然成本较高，但能够实现更好的网络覆盖和安全。同时，也提到了无线设备过多可能带来的干扰问题。"
      },
      {
        "time": "00:20:28",
        "title": "Windows下的开发环境和终端仿真器选择",
        "summary": "讨论集中在Windows操作系统中，对于科学计算和编程学习用户来说，选择合适的开发环境和终端仿真器的重要性。由于Windows系统持续更新且存在免费的Fortune编译器（如MinGW）选择有限，因此MinGW成为了一个流行的选择。对于希望在Windows下使用类Unix命令行的用户，Git for Windows自带的Bash环境提供了一个解决方案，而Commander（CMDER.net）作为Command.exe的改进版，提供了更好的用户体验和美观性，同时支持Linux shell命令和PowerShell、Bash的调用。此外，还提到了ConEmu作为多标签终端仿真器的使用经验，强调了在Windows环境下开发时，对Linux服务器部署的支持需求。"
      },
      {
        "time": "00:23:29",
        "title": "从Windows到Linux的转变体验与困惑",
        "summary": "本期节目中，一位听众分享了自己从使用Windows系统到尝试Linux服务器的体验和困惑。听众最初接触计算机时，对命令行操作了解不多，主要使用图形界面进行操作。后来，在尝试将网站迁移到云服务器时，他发现Linux环境下的操作与Windows大相径庭，需要通过命令行进行复杂配置，这一过程让他感到无比痛苦。尽管他尝试了云服务提供的图形界面管理工具，但最终还是选择了通过命令行进行操作。这段经历让他深刻体会到运维工作的不易，并对Linux系统和服务器管理有了更深的理解。听众的经历反映了很多人在面对技术转变时的困惑和挑战。"
      },
      {
        "time": "00:29:43",
        "title": "Linux学习体验及用户适应过程",
        "summary": "讨论者分享了他们早期接触Linux系统的经历，表达了对Linux学习过程中的困惑和挑战。Linux被比喻为一个需要用户自己摸索的复杂系统，对于刚从Windows系统过渡过来的用户来说，缺少图形界面和命令行操作的不熟悉造成了学习上的障碍。此外，讨论者也提到了Linux系统的发展，指出现在有很多用户友好的Linux发行版已经大大简化了安装和使用过程。他们强调了基础知识的重要性，认为在没有充分理解Linux的基本原理和命令行操作之前，用户很难有效使用Linux。最后，讨论者建议新用户应从基础开始学习，逐步适应Linux系统，以克服最初的困难和挑战。"
      },
      {
        "time": "00:35:26",
        "title": "Linux服务器命令行操作的必要性和历史沿革",
        "summary": "对话中讨论了Linux操作系统的基础操作、原理及其历史沿革，强调了命令行操作在服务器管理中的重要性。探讨了Linux命令行的普及原因，包括其作为通用接口的效率、历史遗留问题以及图形界面在不同系统间的差异性。还分析了Linux服务器使用命令行操作而非图形界面的务实考虑，如自动化部署和配置的便利性，以及图形界面操作的低效率。同时，指出了学习Linux和Unix历史的重要性，并对新手面临的学习曲线提出了建议。"
      },
      {
        "time": "00:45:36",
        "title": "软件开发中的命令行复兴与服务模式演进",
        "summary": "在过去15年里，软件行业逐渐从图形界面转向命令行界面，尤其是在开发者工具方面，新工具大多只提供命令行操作，如Docker，强调简单安装和使用。对于非技术用户而言，学习成本成为一大挑战。对话中提及多种解决方案，包括自我学习、利用包管理工具、选择IaaS（基础设施即服务）、PaaS（平台即服务）或SaaS（软件即服务）模式。这些服务模式简化了技术操作，但同时也可能带来供应商锁定问题，限制了用户的灵活性和迁移能力。最终，用户需根据自身需求和能力，在学习成本和使用便利性之间做出选择。"
      },
      {
        "time": "00:52:02",
        "title": "探讨个人在互联网上建立影响力的可能性",
        "summary": "在讨论中，一位听众提到，没有编程技术的人几乎不可能在web上创建类似公众号的平台。然而，讨论者认为这是可能的，如通过申请免费博客空间实现。他们还讨论了微信公众号因平台的封闭性和大量用户基础而获得成功的因素，强调即便提高门槛，人们仍然愿意尝试。此外，还提到选择和后果的重要性，以及历史沿革对现有技术影响的例子，比如Linux的命令和HTTP协议中的拼写错误。最后，强调了系统学习和理解的重要性，以及选择时应考虑的成本和代价。"
      },
      {
        "time": "00:58:37",
        "title": "编程语言中的命名习惯和文化差异",
        "summary": "讨论集中在编程时命名习惯的多样性及其背后的语言文化差异。提及了在不同语言环境中，程序员如何选择变量名和编写注释。通过Putty的发音讨论，展示了英语中的不一致性，并进一步扩展到德语和中文的使用上，特别是在注释书写方面。讨论还涉及了使用母语编写代码和注释的实用性与挑战，以及如何处理编码问题，确保代码在不同系统上的兼容性。"
      },
      {
        "time": "01:05:17",
        "title": "维密模特转型程序员及性别平等议题",
        "summary": "最近，两位维多利亚秘密的模特因其程序员背景受到了关注。其中一位黑人女孩原为iOS开发者，后转战T台但不久便离开。另一位因代言华为手表而走红，并在SpaceX的活动中引起热议，展示了科技界性别平等的趋势。此外，苹果在WBC宣布Swift语言将在年底开源，引发了业界的兴奋。"
      },
      {
        "time": "01:10:46",
        "title": "Swift语言开源及未来展望",
        "summary": "讨论者对于Swift语言的开源表示了乐观态度，认为这是一个良好的开端，尽管仍有许多工作需要进行。特别地，讨论聚焦于Swift的开源细节，包括其标准库（Foundation）的开放、跨平台的潜力以及Swift Package Manager的发布。开源Swift意味着开发者可以在多种平台上使用该语言，增加了Swift的灵活性和自由度。此外，这次开源不仅包含了语言本身和相关工具链，还包括了其开发过程的透明化，为开发者提供了前所未有的洞察力。然而，也指出了目前存在的局限，如对ARM架构的支持尚未完善，以及Swift在非Apple平台上的应用仍需探索。尽管如此，Swift的开源被视为向更广泛的开发者社区开放Swift技术的重大步骤，可能会促进Swift在不同平台和应用领域的发展。"
      },
      {
        "time": "01:21:25",
        "title": "Swift语言的系统级应用与未来展望",
        "summary": "Swift作为一种系统级别的编程语言，其潜力不仅限于外部应用，还覆盖了命令行工具等内部领域，被视为C语言的可靠替代。尽管尚处于发展初期，Swift的3.0版本仍在审查中，其社区支持和苹果公司的开放核心组件对于其未来发展至关重要。讨论还提到了Swift在服务器端软件开发中的潜在应用，尽管目前Swift在并发处理方面未提供特殊优化，依赖于外部库实现。此外，Swift的轻量级编译产物使其成为开发小型工具型应用的优秀选择。随着版本的更新，Swift在语言特性上经历了显著变化，对于一个新兴语言来说，这些变化是正常的，但也在某种程度上影响了向后兼容性。"
      },
      {
        "time": "01:28:15",
        "title": "PHP7发布及SSL证书新动向",
        "summary": "对话内容围绕PHP7的发布和SSL证书的最新进展。首先，讨论了let's encrypt提供的免费SSL证书，旨在解决过去SSL证书成本问题，并实现证书生成与替换的自动化。接着，转向PHP7的发布，强调了PHP6版本的困惑和缺失，以及PHP7作为新一代版本的重要性和推荐使用的理由。此外，也提到了PHP社区在版本更新方面的挑战和开发者适应新特性的情况。"
      },
      {
        "time": "01:34:14",
        "title": "探讨PHP新特性和社区发展",
        "summary": "对话中讨论了PHP语言的一些新特性，包括spaceship运算符和空值合并运算符，及其对现有代码的潜在影响。同时，分析了PHP社区的决策机制和语言发展方向的不确定性，以及Facebook在PHP发展中的影响力。讨论还涉及了PHP6项目的现状和社区对语言特性的投票情况，指出了社区缺乏明确愿景和领导力的问题。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "名称：内核恐慌"
            },
            {
              "children": [],
              "content": "平台：IP in podcast网络"
            },
            {
              "children": [],
              "content": "主题：IT技术主题娱乐节目"
            },
            {
              "children": [],
              "content": "口号：show me a poor request or STFU"
            },
            {
              "children": [],
              "content": "捐款信息：推荐使用podcast客户端订阅，捐款地址kero panic dot FM flash donate，金额为八的正整数倍"
            }
          ],
          "content": "1. 节目介绍"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "一位听众分享了在Windows上使用minGW进行开发的经历，主要是因为开发环境的限制不允许安装虚拟机，且需要编译能够在Linux上运行的C++代码。"
                    }
                  ],
                  "content": "关于minGW的使用场景讨论"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "一位听众分享了在办公室和家中使用WiFi遇到的问题，包括信号干扰、穿墙能力等，并讨论了电力猫和NAS的使用体验。"
                    }
                  ],
                  "content": "关于WiFi与网线布线的讨论"
                }
              ],
              "content": "2.1 听众反馈"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "讨论了Linux服务器上使用命令行进行操作的必要性和效率，以及为何Linux服务器普遍采用命令行而非图形界面进行管理。"
                    }
                  ],
                  "content": "Linux服务器的使用和管理"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "探讨了PHP 7发布的一些新特性，包括太空船运算符和空合并运算符，以及PHP社区的一些现状和开发人员对其未来方向的看法。"
                    }
                  ],
                  "content": "PHP 7新特性"
                }
              ],
              "content": "2.2 技术讨论"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "通过Swift语言开源的例子，讨论了开源项目如何促进社区的参与和技术的发展。"
                    }
                  ],
                  "content": "关于开源项目和语言社区的讨论"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "讨论了女性在科技和编程领域的参与度，以及社会对女性程序员的看法正在逐渐改变。"
                    }
                  ],
                  "content": "性别平等和技术行业"
                }
              ],
              "content": "2.3 行业观点"
            }
          ],
          "content": "2. 节目内容"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "捐款支持：kernel panic dot FM slash donate"
                }
              ],
              "content": "邮件反馈：kernel panic at IPN dot LI"
            }
          ],
          "content": "3. 节目参与方式"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "未知道他"
                },
                {
                  "children": [],
                  "content": "流行通讯"
                },
                {
                  "children": [],
                  "content": "high story应用"
                },
                {
                  "children": [],
                  "content": "五次元博物志"
                },
                {
                  "children": [],
                  "content": "选美"
                }
              ],
              "content": "爱听公论"
            }
          ],
          "content": "4. 其他IPN节目"
        },
        {
          "children": [
            {
              "children": [],
              "content": "节目感谢：感谢收听，下期节目再会。"
            }
          ],
          "content": "5. 结语"
        }
      ],
      "content": "脑图摘要"
    }
  }
}