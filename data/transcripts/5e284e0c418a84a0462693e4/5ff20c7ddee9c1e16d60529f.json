{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5ff20c7ddee9c1e16d60529f",
  "title": "62. 你的电脑不是你的",
  "task_id": "mloynmwmxjzjqagp",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "您正在收听内核恐慌，一档大致以计算机科技为主题的娱乐podcast。我们号称硬核，但是也没有什么干货，想听人听，不想听人就别听。我们的网址是PAN dot ICU，您可以在网站上找到订阅我们节目的方法，以及联络我们的方式。我是吴涛。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:18",
      "text": "我是real。今天节目开始前我们做一个简单的follow up。好久没有做follow up了。是针对上一期这个叫吟诗的光猫内提到的几个问题，我顺便说一下后续。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:33",
      "text": "第一个就是说那个吟诗光猫案算是告破一半。怎么个一办法？就是我发出去之后，有我的那个光猫的生产厂家的朋友找过来跟我确认过那个猫叫那首诗确实是他们光猫里面的设备发出来的，不是外面的设备，也不是我的局域网站里面其他设备发出来。他们在他们的那个测试环境里面也出现了这个东西。然后产生那个诗的选项也找到了，就是那个环路检测。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:04",
      "text": "所以我猜对了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:05",
      "text": "他对他已经猜对了。他不是每十秒发一个包，那就是用于环路检测。但是就是没有找到这个东西是谁写的，也不知道为什么是这首诗。我国说过的光猫型号是上海贝尔阿尔卡特生产制造的，所以目前也不知道是贝尔的工程师干的，还是阿卡的工程师干的，还是说上海贝尔阿卡的后来的工程师干的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:28",
      "text": "目前找不到人，因为也不知道这个former到底谁写的，也可能也比较久远暴露了。他们没有washing control是吧？或者说就是找我那个朋友，他不是做那块开发的，所以他也不清楚，都没有这个权限去查看到底这个是谁谁扛你的进去的。我也不知道他们有没有，有可能是没有的对吧？这个我就不清楚了，他们内部的问题，他就说至少我说这个算是告破了一半，就是说找到了这个源头，找到了他这个是干嘛用的。但是不知道是谁写进去的，以及为什么是这首诗，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:57",
      "text": "OK, 这是第一个follow这个flag，上次我们不是花了很长时间在讨论到底能不能够用，已有房子里面用于接电视的那个同轴电缆来延伸这个wifi的信号的距离，对吧？目前来看有两种观点。我们到时候也把把这两个链接是一个super user上面的这个回答放进去，就是说正常你直接接，就是我上次我说那个方法，你直接把那根同轴电缆，就墙里面那个铜轴电缆给电视用的，当成wifi天线来延长是不行的，因为它的电阻不对。这个同轴电缆的电阻，电阻好像说是一等，我确认一下，好像是七十五欧姆，应该是对75欧的电阻。但是wifi天线的那个从叫这个专业名词我也找到了，叫做馈线。这个就是延长wifi的天线，天线那根导线的电阻是50欧，所以正常你直接接上去肯定是不行的，因为信号很快就摔。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:00",
      "text": "但是有一种设备是可以转化一下，就是它在那个通道电缆两端都接上一个类似于转接器一样的东西。可以把一个wifi的信号转成那个通过电商适合类似于一个想象，它是一个放大或者怎么样，然后把它传导到另外一端，最后再解码出来，然后再重新转为wifi。能用的就这种东西是有的，但这个设备有点贵。而且国内我在淘宝、在天猫、在京东上都没有找到。但是在亚马逊上好像是有的，那个东西叫做摩卡MOCA，我不知道这个是什么的一个缩写。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:37",
      "text": "我还发现一个特别好玩的东西，叫做wifi over cox，就是专门干这件事情的，就是专门在用那个同轴电缆延长wifi信号的一个解决方案，刚刚上去就是要用到刚才那些东西，所以就解决这个电阻不匹配的问题。大家如果生活在国外，然后你那个房子里面没有走网线，只有这个通车电缆。你想解决这个信号的问题的话，你可以去亚马逊上搜一下这个moca MOCA，那个MC都大写，O是小写这么一个设备，他可以完成这个东西。然后我们也在我们的听众群里面，就是telegram那个听众群里面有在海外的听众朋友，他确实也买了用过这个东西，好像效果还不错，能够达到千兆。他应该说是你如果你。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:23",
      "text": "不是一定要延长这个wifi信号的话，可以直接把网线转到通用电脑上。那个转接头非常简陋，但是就just works也是可以的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:33",
      "text": "就这种方案也是可行的，但是具体怎么操作，大家可能要去自己研究了一下。因为我房子里面有有通用电缆，但是我实在是不想搞它。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:42",
      "text": "OK好，OK就是for love。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:44",
      "text": "今天我们开始今天的正题，今天有点特别，我们我们好久好久没有邀请过嘉宾了，今天我们邀请到一位重磅嘉宾，就是我们的老朋友。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:56",
      "text": "这一期我们又是跪着录的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:58",
      "text": "可以说最近我邀请到我的一个好朋友，是就是大家可能很多人都用过这个网络开发调试工具surge的作者刘亚晨。亚晨你好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:11",
      "text": "两位老师好。",
      "speaker": "发言人3"
    },
    {
      "time": "00:05:13",
      "text": "要不亚晨你稍微简单介绍一下自己。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:16",
      "text": "我觉得可能我自己的软件的受众和你们的听众，其实应该覆盖面挺大的，所以还需要再介绍一下吗？我也不知道该怎么样去介绍东西。",
      "speaker": "发言人3"
    },
    {
      "time": "00:05:28",
      "text": "应该是不用介绍的，但是大家应该对你这个人还是不太熟悉。就是我觉得你有什么可以给听众朋友们分享，就是介绍一下自己的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:36",
      "text": "然后有有什么有什么我们想知道，我们会接着再再不对代替听众来提问的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:42",
      "text": "行，那我就简单的说一下，剩下的靠你们提问。我现在的身份的话就是专职的IOS的独立开发者。然后之前的话可能主要是创业者的一个身份，干过很多一些创很创标准的一些创业的事情。甚至还做过一些像技术猎头这样的一些和技术都已经快越来越没相关的一些事情。反正从15年开始，变成了一个专职的独立开发者。现在的话主要的产品是surge和air pass两款。同时的话还有一些客户的项目作为技术顾问去参与，大概就这些。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:20",
      "text": "L pass这个可能很多人不知道，是一个密码管理器，是应该是比那个one password要好用的。好，谢谢。但这个相对来说比较小众，但我密码管理器我记得我们之前节目里面还有单独讲过一期，不过那个时候你还没有写，所以我们如果下次再聊的时候，可以到时候再专门介绍一下。但虽然今天我们邀请了这个亚晨，但是我们今天不聊四耳机，也不聊air pass，甚至也不聊这个。可以，最后有一点相关，但是甚至也不主要要聊独立开发。今天我们其实是要聊苹果，对不对？是这个事儿也比较简单。是因为目前我们三个里面只有亚成先生你是买了那个M1芯片的mac o对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:00",
      "text": "对，是的，好像是我就比较急。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:03",
      "text": "所以你是在发布的那一天，就是可以定的时候第一时间定的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:07",
      "text": "对，而且我当时第一时间定了之后，由于它标准配置是8G内存，要定制版才能是19 16G内存。定制了之后会使得发货周期延迟到我印象中正常发货时间应该是20号还是19号左右，我特别急的又等不了，然后拖了一个apple的朋友，让他帮我查了一下现在实体店的库存，发现离我家比较近的一家店还有16G的一个高配版。我就我立刻跑到店里去现场拿了他回来，然后把原来的订单给取消了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:36",
      "text": "这里有个小知识，就是说我们通常认为苹果店里面只有那种所谓的标配版，对吧？它比如说通常它苹果它在网站上他给一个mac pay，它会给一个低配和一个高配。这两个都是标准配置，你不用去定制就可以直接在店里买到的对吧？但是这次好像有点不一样，对不对？这次是因为它的两个标准配置都只有8G内存，然后16G理论上按照官网的那个逻辑，你是需要定制才可以选的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:01",
      "text": "是的。但是其实我和朋友聊了一下，他说一般的话店里面会备大概5台左右的顶配机器，就是每家店都会有这么一个储备。所以说的话如果不确定的话，可以提前去他们官网上找的那个店的一个店的，直接的拨打他们的店的电话，然后打电话去问一下他们现在有没有高配这个库存，然后再过去直接就可以购买。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:22",
      "text": "所以他们应对的这个场景就是一个土豪走进苹果店说我要你们店里最好的电脑，你给我拿一台出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:28",
      "text": "对我感觉应该是这个意思。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:31",
      "text": "他比如说你去买那个顶配，它我记得就是这一次的这个M1的macbook，它能选的只有是内存是可以变成八标配的8G和高配的16G然后唯一能选的就是那个SSD的配置了，对吧？那这个SSD的它的高配的能最多是配到哪里？他店里面那台店里。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:48",
      "text": "的机器我记得都是一TB的，这是三个选项，5121T和2T我印象中全是一T没有两T的那个机器。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:58",
      "text": "所以其实也没有真的到最最顶那个所有的加到最大最贵的那款，它还是没有的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:05",
      "text": "而且颜色也只有深空灰，就深空灰的16G的ETB机器。这个机器好像是有个三四台左右。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:12",
      "text": "你颜色也没得选。如果你拿这。这个16G的配置的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:15",
      "text": "对，是的，没错。所以但是本来我就是要选的话，就选深空灰。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:19",
      "text": "所以说这个倒是无所谓。刚好他们其实还是有一些大数据去支撑这个决策，说一般买这种配置的人，他不会选那种比较骚气的颜色。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:28",
      "text": "而且这次其实那个颜色只有深空灰和银色，都是两个比较保守和传统的颜色也没有太大的区别。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:34",
      "text": "Sku数量是要比较简单的是吧？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:37",
      "text": "是的，OK, 所以其实对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:39",
      "text": "土豪还是没有那么的友好，对吧？不能说我想买啥，你给我最最顶的那个我不在乎钱。Money note也有的时候也没有买你你还是得去网上定制。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:52",
      "text": "我觉得要是真土豪的话，可能不会在意是M1还是什么，直接来一个mac pro就直接带走了是吧？这好像是个无偏见了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:02",
      "text": "To how their type. 所以目前你看就是我们网上看到一些各种媒体网站的测评的。但是我们聊一聊你实际使用下来的感受，就是跟他们测评的你觉得有多大差异吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:17",
      "text": "其实我作为最早就参与到那个ARM芯片版本的apple的开发者来说，因为DTK我早拿到了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:26",
      "text": "对，你是有DDK的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:28",
      "text": "是的。但是DTK的话由于受协议限制，我也没有还没有仔细去看。在现在这个状态下，我还能不能给他公开的发表一些review一些意见。我想我想一想，我觉得应该没什么太大的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:43",
      "text": "所以这个是有有N有NDA的是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:45",
      "text": "DDK是有NDA的对，这是有NDA的。它官方写的是我不可以在public的场所去进大家进行review。但是好像我没有仔细看他有没有一个期限就到什么时间解禁，好像是没有的那我为了避免踩到这个坑里，我还是尽量就不提他。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:02",
      "text": "OK我们就假装他存在着。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:04",
      "text": "对我我们谈论他。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:05",
      "text": "但这并不是一个review。明白，我就是在想打这个擦边球，就是之前通过用DTK的时候，我就能感受到苹果的这个ARM芯片。这个A系列芯片的话，很有可能它之后出来的正式产品会更牛逼。原来已经其实很牛逼了，但是等到一个毕竟但是那块芯片的话是A12Z是那个ipad之前用的芯片。所以的话如果它本身就是为移动设备，为低功耗设备设计的那如果是在这种基础上再为macbook或者macbook pro的话，其实是更优化的就是一款芯片，那它出来的效果应该是非常劲爆的。然后确实的话从这几天的一个不管是测试还是使用来说，都非常的让我感觉很兴奋。这确实是一个可能有划时代意义的产品的这么一个进步。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:57",
      "text": "就按我们这个行业里面的话说，就是一屁股挤爆了这个英特尔的牙膏，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:02",
      "text": "对我自己的话说，是不是把英特尔按在地板上摩擦，这地板已经看快按穿了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:12:08",
      "text": "已经按出了一个棺材来了，可以把英特尔盖棺定论了已经。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:12",
      "text": "我们看到网上的测评，它性能基本上都说是这种。我们能看墙上的这个定语都是什么massive improvement，就非常通常是吊打的。至少我们看到那个数字，跑分的跑分有很多指标。我们看最常见的几个什么kick bench，什么什么那个那个叫什么spec那些的，都是可能提高了百分之七八十这种级别的性能的提升。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:35",
      "text": "这而且很多网站的论述，就是一开始我们是怀疑的，一开始我们是非常抵触的，不愿意相信这个结果的。但是实际上手之后，我靠。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:45",
      "text": "原来真的这么香。对，关键是就是说他在这种提供这种性能，这么大幅度性能提升的的情况下，是基于什么呢？是不发烫对吧？按我看他们测评的方法，那个评论的人也说是风扇机基本不怎么转或者听不到。然后特别是像那个macbook air这一款，它根本就没有风扇，而且续航能力还非常的恐怖。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:08",
      "text": "就相关的。如果说你在那个风扇又不转，又不就不怎么发热的情况下，说明的能耗是低的。那电池不变的情况，你能耗变低，你续航就显然变长了。但是我没有想到会有那么长。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:18",
      "text": "对吧？对，这个我其实都还有一个疑问，这个mac pro多的这个风扇拿来干嘛的？我现在就没有能让他转起来过。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:26",
      "text": "但他他在转吗？就是他是你确定他是一直在转，还是说需要才转？",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:32",
      "text": "我贴上去看感受的时候，应该是以非常低的频率在转的。就是你不基本上是完全感受不太到它在转，但实际上它确实在转。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:41",
      "text": "他赚的意义可能就是为了提供一个压力，让灰尘不要进去。That's不是为了散热。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:48",
      "text": "可能真的是或者叫他围绕一个，他就他因为这样他这个就叫什么来着？就是热热工程是吧？还是热力学什么乱七八糟，他得维持一个平衡。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:58",
      "text": "那个呃热动力学，你想说cr mo dynamics.",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:01",
      "text": "我只知道以前那个校那些去清华读这个热工程的热动力学，什么热能学的这些好像说他们都是烧锅炉对吧？其实但其实这个东西是可以用到很多场景的。烧锅炉只是一个比较大型的使用场景，对吧？包括你现在做芯片也好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:19",
      "text": "烧锅炉很难。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:20",
      "text": "的渴望它可能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:22",
      "text": "是以这么低的一个转速的话，就已经能够把它维持的很好了，平衡了。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:27",
      "text": "是的。因为同样是这个M1芯片的macbook，它是完全被动。然后我们看到因为昨天那个FX出那个拆解图了，他把那个打开看了一下，那个macbook air里面它只是有一块比较大的散热片，对吧？但是完全没有那个风扇，它也可以完成这么一个就是不是那种高负载一不是那种持续高负载状况下的散热。照理说这个macbook pro有一个小风扇，它能够低速的运转，能够也能够很快的实现这个热的平衡。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:02",
      "text": "对，而且这个和英特尔机器比起来真的是天壤之别。我第二轮测试的时候是测试去编译代码，然后看它们的性能怎么样。我两台英特尔的机器，一台是i mac pro pro一台是macbook air，都是才开始编译。第一轮到一半的时候，风扇就已经基本上到满钻了，就已经进入很吵的状态了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:21",
      "text": "就是战斗机来袭的感觉。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:23",
      "text": "是的。然后那个M1的那台macbook pro的话，三次测完了之后，我摸它就感觉温度几乎没有提升。",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:31",
      "text": "就还是那种室温的状态了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:34",
      "text": "对，是的。就让人感觉这已经是黑科技一样的一个存在了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:39",
      "text": "因为我们知道macbook是前几代的时候换过一个更薄的外壳。以前是以前不是那个type c接口对吧？以前是在拆碑这个的时候，他他那个时候大家都会抱怨说，有时候如果用的太猛，他那个底部会比较烫。特别是macbook pro那个有独立显卡和这个CPU的两个热源。后来它换到了现在这个外形的，就是薄薄的，然后边上是那个type c接口的时候就更烫了。就是英特尔的时候对吧？我们到如果你放在膝盖上的话，它是有他们那个说法叫什么来着？火腿肠煎蛋对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:16",
      "text": "而且我还听过一个说法，就是对于现在的四口的macbook pro，你要给它充电的话，是应该要插固定插右边还是固定插左边，这样去减少它那一侧的发热，才能平衡。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:28",
      "text": "对，我们我们上就好像结尾的时候谈到了这个，就是你要是从一边插的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:33",
      "text": "它会特别烫。因为它有一个叫什么电压管理模块，是在某一边，然后会导致升温，然后升温就会降频，然后性能也会受影响。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:41",
      "text": "现在apple把这个锅就完全的丢给了英特尔，告诉大家，好，不是我们做的烂。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:47",
      "text": "对，所以就这件事情证明了之前有几个问题。就是苹果我们不是老是说他最近mac这几代就迭代都非常的慢，然后非常的不让人满意。但最后我们的锅，现在你可以明确的说是英特尔的锅，对不对？真相大白。亚忱，我记得你也有，你也有买那个那个垃圾桶的。那个mac pro是不是第一代的macpro pro？",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:08",
      "text": "对，那是13年的那个型号了。那垃圾桶的话，对，垃圾桶总共就一袋，没有个之后也没有前无古人后来者。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:17",
      "text": "他更新过一次CPU，好像我记得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:19",
      "text": "好像只是小型号的，可能是加了几个选项，反正都是13年的那一款。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:24",
      "text": "对对对，你没有大改过。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:26",
      "text": "对，在汽车的术语里面叫face lip小改款。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:29",
      "text": "小改的不是大改。然后当时他不是那个那个垃圾桶，他出来的时候说是最后他们的不是要做了一个媒体，邀请那些麦克的那种专业媒体去开了一个小会说他们之前那个设计是叫什么来着？遇到了这个thermal constraints，就是受到了热能的限制。其实这个锅也是英特尔的对吧？因为或者说是加上这个AMD的，因为目前看也是个商业大户，他没有想到你们竟然不能够按照我们预期的提升这个能那个功耗，就是不叫做每单位功耗的性能。导致我们不能在这么小的空间里面用一个单一的风扇完成整个设备的散热。所以导致我们产品的这个phone factor外形和整体的形态，没有办法支撑你不断的后续的迭代。这口锅已经毫无疑问的坐实的落到了英特尔和MD头上了。那就是显卡，是是是CPU，然后MD是因为显卡，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:30",
      "text": "反正都是用不下。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:31",
      "text": "对，因为我们现在看到确实也是，现在你说因为我亚成你也好像我看到你买了最近什么新出的几台显卡，你看那个显卡都是一个大卡，然后上面三个风扇对吧，然后一转起来也是非常响的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:43",
      "text": "那电磁炉。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:44",
      "text": "是电磁炉，然后我们看到这次M1芯片，不光是这个CPU的性能报表，GPU的性能也是把。但它是集成显卡，它的集成的显卡的这个性能也是把英特尔的那个叫时代的那个艾瑞斯，也是按在地板上磨穿对吧？它提升的好像还不止不是说百分之几十这种情况，它是提高了3两3两三倍。我记得那个是大概数字。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:10",
      "text": "是对那个图形性能我倒是没有仔细测试了，因为那个确实不是我了解的东西。然后我看了的话，别人的评测的话，很多是视频博主去评测他去进行视频编辑的时候的一个性能。只不过由于那个M1它自己有H265的硬解码，所以说好像这个评测有点不太公平。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:30",
      "text": "这个事情要吐槽一下，包括我记得最开始爆出这件事情做的一个显示的对比是叫做JoNathan Morris对吧？他在youtube上做了一个好像是两三分钟的短短评，他凭的是输出一段H265的这个视频。就是他他是做他是做他是做那个视频博主，对吧？他说我有一个原始视频，我编辑好了，我要输出成这个叫成片，要流出来成一个H26可以给大家播放的一个文件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:59",
      "text": "他现在那个他的好像是他的imac pro，上面开始点，然后已经那边就已经开始在转码输出了，对吧？然后他说这个时候他拿出他刚买的iphone 12的mini，然后说怎么他跟你墨迹半天说，那现在我们开始在这个i iphone mini上面去做同样的事情。结果那个时候已经那个imac已经跑了可能一两分钟了，对吧？然后他在开后面点，那这个时候i iphone mini还是比他那个imac先完成这个转码工作。那看起来是很impressive，对不对？但是这个事情刚才亚晨讲的，他不是太公平。是原因是在于说一个是用专用硬件去做输出，另外一个是用CPU去压，那肯定是不能比的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:41",
      "text": "对，只不过说到不公平这事的话，我们之前大家就比CPU性能的时候，其实现在拿来和M1比的东西，都是拿imac pro、mac pro这种顶级的桌面端的CPU去比了。移动端的根本就早就已经不知道甩到哪里去了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:58",
      "text": "如果有功耗限制的，肯定都是比不过的对吧？那只有找那种不太受功耗限制的，因为像那个imac pro就桌面级CPU它都是功耗都是可能几十上百瓦的这种。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:08",
      "text": "对，因为我自己对比的时候，我是测的是我的i mac pro和我的之前的19款的imac macbook air。I maca book air的话，它那个CPU是比较弱了，是两核的。但是相比现在的macbook air的话，相当于这是一个一年前的完全同价格的一个产品拿来比较。然后我记得测试结果的话，在M1上面的编译时间大概是40秒。到了macbook air上面的话是大概接近260秒，是这么一个翻这么多倍的差距。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:38",
      "text": "就是六倍对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:41",
      "text": "对，没错，就是我我在做这个测试的时候，到后面我真的都不想等马克布克尔测三次的结果了，太漫长了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:49",
      "text": "那个月还是有风扇的对吧？我记得它是一个小风扇。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:51",
      "text": "对，是的，而且风扇转转已经转转到最小了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:55",
      "text": "但你这个也是有风扇，但是如果说你是拿这个MB的ARB，我相信这个结我也不会差的太远。因为是我们看它的那个测评结果，一般好像说是八分钟以上才会那个soto就是降频限速。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:08",
      "text": "没错，所以来这次的话，这次这个air和pro的其实是一个定位还挺奇怪的两个产品，感觉好像到底该买pro还是买air的话很难选。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:18",
      "text": "你可以解释一下你为什么选择买pro不买air吗？因为就从参数上来说，好像差的并不多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:24",
      "text": "它的屏幕首先是差不多的，是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:27",
      "text": "我印象中好像没有区别，所有的技术都是一样的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:31",
      "text": "对，而且这次不一样，以前他们就上一代就是英特尔芯片的那个air，它那个屏幕不是所谓的P3那个广色域的people，但这次他连这个也升上来了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:41",
      "text": "对我记得我之前我购买之前看过那个学基金学功课的时候，发现好像没有什么屏幕上有人提到过会有区别。我自己买pro的话是想再给touch bar一个机会。因为我上我在这台air之前的那台的话也是台mac book pro，但它用的我非常糟心，就是经常的我会想要一个功能键的时候，要么摸不到它在哪里，特别是一scape键或者是他直接死机掉，所以说就非常的难受。所以这次想着既然要换的话，那我就再给你顺便给pro一个机会。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:16",
      "text": "你的上一代那个pro的是没有独立的物理的escape键的那款对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:21",
      "text": "对，是的，那是最早发布的那一款的touch 8。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:25",
      "text": "他后来是出过一款有有单独的这个escape键，同时有touch 8的max 4 pro。我记得对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:31",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:31",
      "text": "就是上一款就是19年更新那一代了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:33",
      "text": "是19还是哪一年不记得了，反正就这一代和上一代在这个方面是一模一样。就是今年年初那一代。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:39",
      "text": "应该是就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:40",
      "text": "今年的就是只要如果你现在去苹果店买，然后你说你要这个英特尔芯片的mabon pro它都是同时有物理的escape键和touch bar。所以你你你是我遇到的第一个好像还不太反感这个touch bar的人。但是你刚才说其实体验也不是很好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:59",
      "text": "我其实是很反感的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:01",
      "text": "对我刚才也想说就是你你用第一代touch bar你觉得很不爽，然后你觉你说第二想要再给第二代他说一个机会。对，这个思路就比较那就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:12",
      "text": "比较奇怪？",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:13",
      "text": "说我感觉这就是真的资深果粉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:17",
      "text": "而且可能可以算。因为既然要换电脑了，那就多带来一点变化，多带点不一样的去体验呗，是吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:24",
      "text": "这个我觉得也可以理解。因为有一个很显著的区别，就是说英特尔的英特尔芯片的macbook pro的那个touch 8是用t two那个芯片来驱动的。它有一个单独的一个BOS来驱动它，对吧？所以导致各种各样的通讯的问题，我们都看到都已经看到各种什么死机，什么这没没反应，都已经很多吐槽了。但这次M1的touch，照我的理解，首先M1的已经把t two的所有功能整合在M里，没有单独的一个梯度芯片了。那我的理解应该也不存在所谓的这个了，对吧？他应该就是在M芯片里面单独自己在内核里面跑的那所以有可能说这样就可以解决他奇葩之间各种比如什么响应失灵，什么死机的问题，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:11",
      "text": "对，因为之前这事情我之前和我们自己私下聊过。就是从我自己观察的话，就在旧版的设备上，T2的芯片用的是USB总线和整个CPU去进行通信。按照我们自己之前的经验来说的话，USB的这个总线的可靠性一般来说可能是没那么高的。就是它还是会在某种情况下就闪断了。然后说会不会是因为这样的一个原因，导致那个touch 829的时候就突然间就死机了，或者是他就怎么就不灵了呢？所以说我也是在想试一下的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:25:41",
      "text": "所以你想再给他一个机会看一下，对吧？对，是的，对，看到这是不是也是因此的过。如果说我们抛开这个不稳定性和死机这种因素来看，太极把本身你觉得它的这个实用性还是可以的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:56",
      "text": "我觉得也不太好说。就是它算说看上去直观上来说，他把很多操作放在键盘上了，这样我能够直接站着操作的话是一个提升。但它有一个扣分项，就是假如说我本身我自己会定了很多FN的功能键，有特定的作用。我如果是键盘的话，我能摸到那个键在哪里。我还有很多时候可以盲打操作，就直接对按上去了。但是如果是他去把我完全按不到，我必须得低头去看到底在哪按上去。",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:22",
      "text": "对这个问题我觉得是没有办法通过任何软件和这个什么优化来实现。因为它就是一个很物理的东西，对吧？你能不能通过触感，对是的来摸到那个东西。因为他那个因为他基本上最核心的一个就是说他把那个FN那排键的功能变成了一个随时可以定义它是它叫context away are。就是说根据使用环境，比如你切了一个某一个APP的前台，那个前台它那个它就把那功能就不一样，对不对？但这个就导致你没有办法说此时你不看那个他鸡巴的时候，他会怎么样你是不知道的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:53",
      "text": "而且还带来的另外一个问题就是误触，就是我可能会不注意就碰到他了，把把什么事情就调调不对了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:00",
      "text": "踏实。刚出来的时候我发过一条推，就说我花了20年的时间学习怎样不看键盘来打字。他说爸出来之后，我就反过来需要看键盘了，这个就让人感觉很逆历史潮流那种。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:14",
      "text": "所以我觉得他去把这个东西真的是有点像苹果，就是为了做的不一样，强行做出来一个不一样的东西。然后感觉说不定之后希望他能改邪归正。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:25",
      "text": "但是你还是用金钱支持了他，你用脚投票说你们还记得我在这条邪路上越走越远。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:32",
      "text": "对，是好像是啊你这样说的话，我我还是怀着一个比较果粉的心态，希望再给他一次机会。是我自己的问题，不是他的问题。但现在这两天用下来，感觉好像不是我的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:46",
      "text": "好，那我们到时候再关注一下，就是这次这个M1的map pro普及开后，首先我们看确实是不是说这个touch的各种不稳定问题，可以归丢过于这个bridge OS和USB的不稳定性。如果这个问题解决之后，我们再来看刨除掉这种导致极大扣分的负面因素之后，它其实本身它能不能够打动消费者。除了这个touch 8之外，这回的这个M1芯片的macbook pro和macbook air，它唯一的区别就只有在外形和重量上的。好像是因为不管是接口也是一样的，屏幕是一样的，甚至连这个wifi天线的数量都是两根都是一样的，对吧？SSD也是一样的，那个触摸板都是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:30",
      "text": "对，这件事情给人感觉就是apple应该是把直接把原来的英特尔的版本就拿过来，换了个新换了个主板，大概其他的没有什么大的改进，就直接拿出来了。好像在mini上这件事情会更显著一些。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:44",
      "text": "至少我们看那个MAI fixy昨天的拆解图，它打开来看，我们来对比跟上一代就英特尔的这个芯片的m pro，它确实是一模一样的。连他们说那个就是连那个CPU风扇的型号都是一模一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:58",
      "text": "没错，而且迷你的话好像据说会空额外空出来很多空间。就是明明可以做的更小的，更更精简的一个设备。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:07",
      "text": "对它其实里面就是半空了，已经是对当时瑞尔问我要不要买mini我觉得这肯定不能买，这明明可以做的更小，然后一定要塞在既有的壳子里面。那我宁可等更小的下一代好了不。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:22",
      "text": "下一代也不一定变得更小，可能变得更powerful。就是下次给你一个mini的mac mini pro之类的这种。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:27",
      "text": "对，不管怎么说呢，这一代显然没有下载。好吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:31",
      "text": "对，这句话是永远是对的。但是早买早享受也是这也是有道理。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:36",
      "text": "因为我印象特别深刻，因为我当时是买的就是你们记不记得苹果是在一二年发布的第一款那个retina的mapper pro 15寸的那款。他当时还是搭载的独立显卡，还是这个NVIDIA的，应该是多少来着，什么几几零零M，好像。是对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:52",
      "text": "那那一代我应该也是买了的，我都是第一个去吃第一代螃蟹的对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:57",
      "text": "那你那你叫那个质量问题了吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:00",
      "text": "我好像不记得我遇到什么问题，我记得我对他那台macbook当时还各方面挺满意的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:05",
      "text": "说回来这个M1，因为你没有买那个mini，然后因为你有那个DDK，所以我们目前的苹果目前还没有没有公布到底说那个DDK它是租给你们用，对吧？当时也说的很明确，那个东西产权不是属于你的。对，到时候你还得退回去。对，但是不知道退回去之后，因为你是为那个付了钱的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:25",
      "text": "对，当然那个钱的话，他说的是一个program fees，是加入这个计划的钱。它和买这个设备根本就没有任何的关系。所以说他即使要求你收回去，然后什么也不说，你也是没有办法说去抱怨这件事情。但是好像据说按照当年那个power PC迁移的那个时候的事情的话，苹果之后你还回去了之后是会还给是会再换给你一个市售的一个正式版的一个产品的。现在开发者大家都还挺期待这件事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:55",
      "text": "当时他是给了一个好像是英特尔版本的imac给那些尝试的开发者，但是可能这件事情不太好比，因为当时苹果开发者的数量还是非常少的对吧？至少跟现在不是一个数量级，可能差两个数量级。我估计现在有这么多人的情况下，估计不能送imac了，有点贵，能送一个mac mini回来就已经不错了。对我觉得可能送一个M1的mini应该算一下价值上应该是差不多的。因为现在它M1的那个mac mini，它标配是多少钱，好像就是六就六百刀差不多是吧？599还是699来着？",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:30",
      "text": "好像差不多，反正是这个价位上。但要是这样比的话，现在开发者虽然说可能比原来多了很多，比如说多十倍，那它苹果的市值也翻十倍了是吧？那那也可以。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:42",
      "text": "刚才不能赔钱给你，我的意思就是说他可能就是让点利，比如说我这个不怎么赚钱，算你的，你算。如果说我们我们查一下现在那个mac mini官方售价是多少钱，对吧？M1的刚好699，你交的开发者费用差不多是五百刀，对吧？那我们知道苹果大概是通常来说是30%的利利利润率，那差不多这个mini的成本也就是三四百刀的样子，那减掉物流成本估计能打得住，我估计。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:11",
      "text": "实在不行的话，我觉得给开发者一个折扣券什么的，能够抵消一下你自己去买的时候的价格，我觉得其实也已经很不错了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:20",
      "text": "第五年apple developer年也可以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:25",
      "text": "对，也可以，也是个方案。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:27",
      "text": "或者给那个APP store的那个gift card，你可以去店里买东西也行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:33",
      "text": "对，那就和其实就和底钱差不多一个意思。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:36",
      "text": "对对对，但是你自由一点，你不一定说一定。假设你不想要命，然后你就想要个air，对吧？你就是他给你选择权更多一些。是的，没有。这个还挺期待到时候会怎么样。但如果说到时候真的换回来一个mini，你可以拿它来做这个什么编译主机用，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:52",
      "text": "对，可以，暂时是没问题的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:54",
      "text": "因为毕竟比你那个imac pro的那个编译性能要好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:58",
      "text": "对，我现在都在犹豫，我要不要干脆拿个mini还把我这个imac pro给替代算了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:04",
      "text": "就把那个imac pro给出了，然后换一个什么pro XDR display回来接上那个mac mini。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:11",
      "text": "对，但对对，那但是那个显示器的价格又变成了一个阻碍。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:15",
      "text": "等一下他们说是什么来着？就是那个显示器的那个支架的价钱是要比那个mini贵的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:22",
      "text": "是的，那个支架的比比mini还贵。对我所以我去店里买的时候，我又仔细的端详了一下那个支架。他做的确实是很优雅的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:32",
      "text": "很很fancy对吧？有一种这种很很贵跑车的感觉是不是？",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:38",
      "text": "对，是的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:40",
      "text": "那那你要买吗？我觉得还是值那个钱的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:44",
      "text": "我觉得想了一下，冷静一下，还是等着他二代出现M2这样的芯片的时候再迁移。确实现在在M1上要做完全拿来作为一个工作开发环境的话，可能还会稍微有一点障碍。这种情况下的话就没有必要这样非要强行换过去了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:00",
      "text": "那刚好我们就刚才聊完了硬件好了，我们就过渡到说这个软件的问题。就是目前你用下来，在日常生活中我们分两类。首先说你的工作上如果用它会遇到什么样的障碍。然后如果你日常就是消的日常消遣应用，它也会遇到什么问题？那我们先做工作这一块，你说还是有一些工具链不够那么完善的对吧？就主要是哪些呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:23",
      "text": "是的，如果是苹果自己相关的s code相关的这些东西的话，几乎都毫无问题，所有东西都他都帮你已经想好了，你就顶多是调点参数，改些参数就行了。然后的话最多的话就是bro就是那些命令行下面的话一些工具本身的话，这次做的这个兼容层是非常完美的，就是英特尔的二进制在机器上执行不会有任何的问题。但是一旦遇到像batch script这样的脚本的时候，就可能会出问题了。特别是当他需要去编译本地编译一些代码出来，然后去运行的时候就会出问题。但其实这个事情有一个很简单的解决方法，你把你整个terminal，就是item或者是官方的terminal，用那个特定的一个指令去执行了之后，让他直接让整个terminal运行intel的框架之下。这样的话他去执行的下面的子进程BH和然后和script的话都会延续着它的母进程的这么一个父进程的这么一个设置。所以说就是以虚拟的方式去运行，所以说可以消灭掉很多很多的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:26",
      "text": "这里可能要解释一下，首先默认情况下，在M1的mac上面，你开的任何程序，它有两种程序。一种是原生的这个ARM，就是这个ARM指令集的这种程序。然后就是所谓的的这这种叫native，我们叫原生对吧？还有一种就是用英特尔的这个指令，但是是通过roseta two的这个模拟层来实现的对吧？它emulation就是用在一个ARM的芯片上，模拟运行叉86的指令，然后来跑原来那些旧的英特尔的那些指令级的程序，不做任何修改。对，是的。然后你的目前的状况是说，如果你用那些原生的，有的话是没有任何问题的。但是如果说原生它不就它原来是英特尔的这个指令集的程序，你最好还是用Robert二的方式来驱动它会比较好一些。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:17",
      "text": "它如果本身是二进制的分发，然后是英特尔代码，你就直接当它就是一个原生程序，用起来没有任何的问题，这个兼容层做的非常好。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:27",
      "text": "但这个时候它还是通过这个模拟的方式来执行的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:30",
      "text": "因为它不是原生的这个程序，对它只是一是CPU性能上会有损耗。另外我观察的话，它的内存占用上几乎是它在英特尔设备上的2倍。可能是要涉及到虚拟的方式的话，它有一些特定的一些损耗。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:44",
      "text": "可能要翻译一些指令。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:46",
      "text": "要缓存起来，可能对，是的。所以的话就是一个内存和CPU的一个单一个问题，但是不会影响你工作，所以但是的话就是会直接跑不起来的。程序的话主要都是一些特别复杂的，然后脚本类型的。因为脚本类型的话它会导致你这个翻译的机制，你不知道你现在该去工作，你该对这个脚本进行一些特定的一些兼容性的一些事情。所以它就整个就break掉了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:10",
      "text": "你的意思就是说脚本就是它是以ARM的方式来运行的，但是开发者是在这个叉86的指令集上实现，所以导致这里面有点冲突的地方。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:19",
      "text": "对，是的，没错。就比如说你是那个脚，他自己靠一个脚本去编译出一段代码，这个编译的那些各种参数和命令的话，都是为X86环境设计的。然后这个时候你去执行的话，整个bagh，整个terminal这个环境全都是在按摩状态下。它用到这个脚本，那个脚本里面自然的各种命令就和他出问题了，他就没法进行下去了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:38",
      "text": "就可能连那个参数都不不支持了，并且是叉86特有的参数。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:42",
      "text": "对，是的。但是如果你把整个terminal都是使用那个arch指令，让它以虚拟环境的话去执行的话，那后面的整个动这一套它就全部都对上了。所以说它又能用起来了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:54",
      "text": "就是连整个这个terminal都运行在roseta two的这个叉86的环境片。它所以它下面启动的所有的这个脚本，他也认为它是还是在一个叉86的这个芯片上运行，所以就不会出任何问题。然后因为这个roseta two的这个模拟层就做的特别好，所以目前来看兼容性上是可以得到保证的对，是的，OK. 那你有没有留意到他用这个roseta图来模拟运行叉86的这些，不管是脚本也好，还是一些比如说像draw bo x他还没有改，对吧？这种原有的程序除了刚才你提到这个内存占用比较大的问题之外，它性能损耗大概有多少。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:26",
      "text": "你能感受得到吗？UI程序的话几乎感受不到，就是你可能感觉开点开的时候稍微太慢了一点，就是可能慢了那么一秒不到的一个时间。但是我不确定这是心理作用，还是他真的是慢的一个作用。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:40",
      "text": "也有可能是今天我们要说到的后面那个问题导致的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:44",
      "text": "是的，但根据别人的评测结果来看的话，即使是在虚拟城上运行的那个速度的话，都比在原来的英特尔机器上原生运行还快。这是这个实在是太可怕了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:57",
      "text": "对，这个是我觉得最最让我们吃惊的一个地方。它在一个M1芯片上模拟运行叉86的指令，还比在叉86的原生的机器上去运行还要快。因为这个MPC的性能提升足够大，对吧？然后它模拟属性好，比如说它M1比上一代叉86的性能提高了70%。原来模拟损耗可能只有20%或者是30，那这样算下来的我还是有40%的提高，对不对？这个真的是把心态磨穿地板过车了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:29",
      "text": "是的，他这个就让人感觉就都怀疑人生了。这英特尔到底这么多年他最近在干什么？",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:35",
      "text": "真的是没有对比就没有伤害。你在apple搞出这个东西之前，你是不知道英特尔是老已经老态龙钟到了有什么地步。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:45",
      "text": "是的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:45",
      "text": "虽然我们经常会调侃牙膏厂，但是我们可能心里面总会有一个想法说，可能现在芯片发展的确是到了到了这个瓶颈了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:54",
      "text": "我们老是说这个摩尔定律到头了，对不对？然后苹果说来看我吊打你一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:00",
      "text": "对，只不过在新的M1上面的话，还是能发现一些不一样的东西。有一些可能是在本来在叉86结构上，我们已经熟悉了十几年几十年的一些东西，它现在在苹果这里被被颠覆了。比如说我发现的话可能有这几个，一个是根据最新的拆解结果看的话，新的wifi和蓝牙芯片已经不再是一个高通的一个独立的一个设备了。在原来的imac上的话，我理解的话它应该还是在PCIE总线上的一个设备。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:30",
      "text": "它老的苹果的mac方案的wifi方案一般都是接博通的方案，博通的单独给它做一块卡。对，但是这个事情好像也不是苹果。先发明的。因为我记得如果没记错的话，英特尔是最近两年做了一个技术。他把那个wifi的主要就是这个u wifi它分两个，一个是叫做physical layer，就是物理层，就包括什么无线信号的乔治解调那一套东西，它还单独还有东西。但是它的那个逻辑就是什么协议控制，那他就已经做到了英特尔的芯片里面去。所以你现在去买一些比较最新的最新的英特尔的移动笔记本，你会发现它那个也是在那个芯片组里面，就是在英特尔的芯片里面完成的。这个事情也是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:13",
      "text": "明白以后。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:14",
      "text": "都是变成那种独立的。我们以前还搞那个就拆那个叫什么拆卡，比如说我们给一个老的麦克换像比如说wifi 6的这个wifi卡也是可行的。但以后就越来越不可行了，就是因为它是集成在CPU里面的了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:29",
      "text": "对，有一个更直其他的更直观的就是那个face time的摄像头。原来的话face time摄像头是靠也是靠USB总线接入的。现在在新的M1设备上，我在系统信息里面看，USB总线上默认上是干干净净的，什么设备都没有。说明这些内置的这些设备的话，很有可能现在都是苹果自己的一些特殊的一些实现，去直接就和主芯片去通讯了。而不再是一些标准的。像我们所熟悉的这些方式。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:56",
      "text": "它就叫SOC，对吧？System check这个整合度是非常令人吃惊的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:01",
      "text": "另外还有一个比较有趣的事情，就是当你的M1设备，如果它真的整个系统坏了之后，你怎么样去让它恢复。这个事情变得也很有点稍微有点奇怪。就原来的话我们的电脑不管是台式机也好，笔记本也好坏了的话，像mark的话是进入恢复模式，从网上重新下。然后像是或者的话更传统的方式就是拿U盘或者是光驱光盘重新去装整个操作系统。现在在新的M1设备上当，如果你出现了真正彻底死死掉的设备的彻底死掉，开不开的时候，你要做的事情是再找一台mac把它两个连起来。然后把那台mac按照特定的开机方式让它进DFU模式，然后在这边的mac上去刷它，就像刷一个iphone 1样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:46",
      "text": "他不能自举了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:48",
      "text": "他对我还没有试过，但是不知道是否拿一个可启动的U盘上去之后，能够通过过U盘去启动。根据之前DTK的一些经验的话，是那个时候是不行的。唯一的恢复方法就是我再拿一台mac然后把它接上来当成一个设备，然后把它刷一遍系统。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:06",
      "text": "所以听到这里，其实我们已经猜出了DDK你是遇到了什么问题才需要做这种操作，是吧？虽然我不能评论他，但是我们推测出来应该是这么一个结果。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:16",
      "text": "对我没有对他进行嘴巴。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:21",
      "text": "那刚才说到了这个软件，你的就是工具软件没什么遇到问题。那你日常需要用的一些软件上面有遇到什么问题吗？不管是原生运行的还是需要模拟运行的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:32",
      "text": "应该是完全没遇到。首先是因为我用的软件的话，大家这些开发者的话都更新速度非常快。基本上日常用到的像bear sings这些的话都已经专门适配，已经是原生代码的那个版本都已经出来了，所以说没有任何问题。然后有一些稍微的旧一点的程序，你像job叫box，spotify这些的话，就靠金融层的虚拟化的运行也没有任何问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:57",
      "text": "而且我相信这些他们也会比较快的把那个M1版本的做出来。因为他们还是要做这个原生的，比较在乎用户体验的一些公司。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:06",
      "text": "是的，而且其实整个迁移过程的话，其实工作量并不大都是比较烦。主要是各种参数的一些兼容性的一些小修小调的一些问题。没有什么需要你彻底去颠覆原来架构重构这样的一些事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:19",
      "text": "对，因为你你自己也有几个程序是很快就put到了这个M1上面去。好像这个过程中我的理解应该也是比较平滑的，没有遇到什么太大的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:28",
      "text": "是的，基本上就是几个依赖库，然后把它拿来之后调整一下它的一些编译参数，在M上能编译出来。然后至于我自己的代码的话，主要是依赖s code，s code这些的话就基本上是点两下。",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:43",
      "text": "好，这就一直在这个苹果生态体系里面的，还是比较舒服的对吧？他已经帮你把所有的问题都解决了，然后你只用点点就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:52",
      "text": "对，一方面是他帮解决了，另外一方面就是本身的话，这个麦克和IOS的开发者生态是打通的。大家基本上写的代码的话，除了一些因为用了一些专用库不一样，它不兼容。但实际上本身大部分你在mac上的代码，在IOS上也是能用的。所以说它就自己就本身就不存在这个迁移的这么一个障碍。",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:12",
      "text": "所以那你在实际的就是比如说我们现在你做了两款surge的，就是IOS版和l pass的IOS版现在都可以。理论上你就可以在麦克上去下这个L400来用，只是说它的界面可能没有为这个麦克单独优化。对，然后碰巧刚好这两个软件都是有单独的为mac优化，甚至功能上也有比较大的不一样的这个麦克版本，所以好像也没有什么必要。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:38",
      "text": "是的，但而且让人感觉apple这件事情做的还挺细心的。本来以为他大概是做了这么样之后，你骑起来就像原来我们的虚拟机一样，然后你可以在里面用上面大部分的UI功能，就已经还是一个不错的一个情况了。比如说我现我自己开发设计的时候，虚拟机里面的设置是肯定没有办法启动net work extension的网络扩展去接管我mark的那个网那那个网络的。但是现在我发现神奇的是，就是在APP store上面，你下了设置之后，你用设置的IOS版。它在IOS的这么一个虚模拟器，这么一个虚拟环境下，你启动了之后，它能够对接上系统mac系统上的NE扩展这一套的所有的逻辑，然后把整个系统的维权给接管了。这个是让我很惊艳的一件事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:46:25",
      "text": "也就是说不用怎么改IOS的这个版本，也可以去操作mac一些底层的一些系统扩展。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:32",
      "text": "没错，因为它这些扩展的话，它的extension的话，它在max上和IOS上它的接口是完全一样的，有很多扩展的接口都是完全一样的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:46:41",
      "text": "像之前我看那个nett extension filter data provider，就是当时跟我们接下来要聊的话题比较相关的那个新闻里面的时候，我注意到他的availability是比如说他协会他他会写出IOS9.0，macs 10.15，然后加上mac catAlina的13以上。就是他会说这个class的这个或者这个API的整个接口，在这三个版本里面是一是完全一样的。所以他迁移成本应该是蛮小的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:11",
      "text": "没错。但是让人感觉他也既然去花了这个心去还是要花这个心去做这个事情的，也是挺不容易的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:47:19",
      "text": "他可以不接，然后就导致这种用不了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:23",
      "text": "对他也可以完全不接。其实一般来说用户不会太在意，唯一这件事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:47:27",
      "text": "他也要求你改写。像那microsoft不就直接会windows就会要求你，这就你就再写一遍喽。对，从他们来看。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:38",
      "text": "这个时候反倒是说苹果对这个跨平台兼容性做的还蛮好的是吧？但他的自己的这个控制的底层系统。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:45",
      "text": "没错，就是我看起来他还挺用力的会去推这件事情的。因为我一开始以为的话就是可能我在IOS的APP里面，它如果在mac虚拟环境下，我一些获取系统配置系统参数的一些函，我应该是能拿到的是迈克的一些参数，这才是比较合理的。结果我发现其实apple对这个进行了一个造假，我在在一个imac这是在一个mac设备上面，如果是IOS的这么一种运行的方式的话，我拿到的设备信息是ipad 14。对，14逗号1.",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:16",
      "text": "他会欺骗你是吧？对，就是让你以为他是在一个ipad上运行的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:21",
      "text": "没错，操作系统版本是14.1还是14.0，就是它完全是虚拟化造假，出了一套IOS环境，让你整个应用相信你真的是在一个IS上面去运行。",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:32",
      "text": "对，这里其实就我们就很自然的说到这件事情了。当时大家都在担心，换成M这个指令集后的这个M1，上面很多很多原生的叉86的软件不就运行不了了吗？那那怎么办呢？不会面临这个软件慌吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:50",
      "text": "其实我们看目前他的提供的两个解决方案，一个就是说通过reset t two来模拟运行叉86。目前来看这个质量还是非常好的，基本上没有什么的大的问题。然后你还可以拿这个IOS上面的软件库直接在mac上不做，基本上不做什么修改，就在mac上面去运行。这个又提供了一个它是提供了一个单从功能性来讲，它其实提供了一个超级对吧？它除了能运行mac本身的那些历史的软件，能云运行专门为M1这个芯片优化过的native的mac的软件，还可以运行。本来在IOS上面运行，没有只没有想到过会在mac上跑的这种软件，对吧？它其实集了三个平台的好处。对，是的，trinity三位一体这个非常，那那有一个问题可能打岔问一下，因为你自己也是IS这个程序的开发者，他这样的话会不会导致你的这个产品的布局和包括这个定价策略会有一些影响？",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:53",
      "text": "对，是的，我也在思考这个问题。然后现在就还暂时还没有那个就是是一个比较明确的一个结论。但是确实是未来会需要更多去考虑的一个事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:50:04",
      "text": "Surge这种比较特殊，就可能还相对来说比较清晰一点。因为至少我们看到这个surge的IOS版和这个surge的mac版，它在功能上有比较显著的区别。比如说就这个路由模式，这个是只有麦克版才有的对吧？IS版目前是基于为平台限制是没法提供的。是的。但是如果你是直接把IOS版在mac上运行，因为你根本就没有这个代码，所以它也是没有这种比如路由模式这种增强性的功能的，对不对？所以这个相对来说有这种差异性的地方。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:32",
      "text": "但是对于这个air pass来说就比较尴尬，因为它的功能其实是差不多的，也没有说有平台这种排他性。但是l pass可能不太合适来比，因为LL pass本来它不是靠卖本身这个授权来来来盈利的，对不对？它是靠订阅。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:49",
      "text": "对，是的。对于现在主流是订阅制的话，其实就不存在的问题。本来用户就是买一份订阅，然后在所有平台上就可以用。所以说你把IS你非要拿IS版本在mac上用的话。",
      "speaker": "发言人3"
    },
    {
      "time": "00:50:59",
      "text": "那作者其实他也不拦你，对吧？你爱怎么用怎么用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:02",
      "text": "不会拦你爱怎么样。但是你比如说像since这样的话，是按单平台独立去购买的话，就会有点尴尬这个事情。Mac版的原生应用的用户体验比起IOS版来说还是挺差距非常大的。那毕竟是个模拟器是吗？你永远你所有的操作都是在那么一个虚拟化的这么一个小窗口里面干的，和你在mac上面的话各种丰富的交互还是差别很大。对，差别还是很大的。所以说我觉得对开发者来说，应该是不太不会太care的一件事情。就不会说因为你能在我上面用了之后我就走，我就收入减少了，或者是我就很担心怎么样的，我觉得到时候不会财产问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:42",
      "text": "对我我觉得可能主要还是想避免，或者说如何苹果如何才能避免ipad这种比较尴尬的一个状态。比如说我们现在看到就是很多国内的软件也好，甚至国外的软件其实也相对好一点。但是其实也有这个问题，就是说他要么就是没有这个i ipad版，我记得好像像是the instagram到现在还是没有ipad版，对吧？没有，肯定没有。对他就是你要强行在ipad上运行iphone版也行，对吧？就是变成一个很小的窗口，或者你用两倍的方式把它扩大。然后像国内的有一些软件，就是说它它有这个ipad版，但ipad版明显你看基本上没有怎么用心去做，就随便。对，重新就放大了一下，放大了一下，就是很很粗暴。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:25",
      "text": "比如说我记得最印象最深刻的像那个京东对吧？京东这个P我用的比较多，有时候买东西看什么，有时候ipad上在鼠标，我就直接在apple上用。他连那个横屏转过来都不支持，就只能在ipad上竖屏。但我刚好有那个外接键盘，我的ipad大部分都是横屏的状态，就很尴尬。我每次用的时候还得把脑袋斜过，写个90度去看他。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:47",
      "text": "我已经放弃了，我直接就用那surface的浏览器。没有。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:51",
      "text": "对，然后我就在想这种IOS APP可以在mac上运行是可以的，但会不会有开发者单独为这件事情去优化，我觉得还是一个非常存疑的事情。就是如果不解决这个付费的或者用户数量的问题，可能还是比较干，还是比较难。你说ipad绝对用户数肯定还是比mac绝对用户数要多一些的，但即便如此，厂商还是觉得ipad好像没有那么重要，就不管，那mac上面就更不用想了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:20",
      "text": "对他其实得从另外一个角度可以从另外一个角度来看这件事情的话。就是对于我们这种开发者是本身就有多平台的软件存在的。所以说会出现互相平台之间抢占这么的一个问题。但是对于更多的可能开发者来说，他根本就没有mac版本。所以说他是凭空的话多了一部分市场和用户，对于他来说这绝对是一个好消息。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:42",
      "text": "或者说他再做一点点简单的适配调整，能够对比较低成本的去支持。Mac它其实也还可以的，只要不让他完全在为mac单独定制一套，那就很麻烦了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:56",
      "text": "对，是的，没错。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:57",
      "text": "对，因为这里就不得不吐槽一下我们日常用的这个twitter的官方客户端。在那上面它本质上也是一个IOS版，通过那个叫什么catalist方式把来来运行，我觉得就是cat list。对，所以说可能看list稍微简单解释解解解释一下。如果有朋友不太熟悉，colorless是一套在叉86的芯片上的mac上面需要开发者做一些处理，才能够把一个IOS软件变成mac上可以运行的这么一套方案对吧？对，是的。和这个对比起来，那显然是在M1芯片的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:34",
      "text": "和root 2的差别。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:37",
      "text": "那没有就塞塔它是在在M1上运行叉86的程序，对吧？那这个是那个cat的，是在叉86的mac上运行IOS的程序，对吧？然后现在就是说你可以就那个时候还是要这两个事情都是要不就是说的是不需要开发者介入的。然后这个color是需要开发者做一些操作，然后还有一个不需要开发者做一个默认操作，就是说直接在M1芯片的mac上面去运行IOS的程序。我觉得像比如说像twitter这种客户端这种做的这种调性，那你还不如不要看到的是你直接在MV上去运行一个IOS版本，推特可能效果还好一点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:15",
      "text": "with second twitter的客户端。你在用吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:18",
      "text": "要不我有在用，非常难用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:21",
      "text": "我都已经完全忘记这件事情了。对我就忘用网页，因为在mac上面刷推的时间可能也没有那么多，可能发推的时间要比刷推的时间多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:30",
      "text": "对，发推会比较多一些。它毕竟还是有那个系统级别的整合。比如说你在一个网页上，你要share到twitter的话，你有两个方案。一个就是说你手工编辑复制你那个叫什么URL到推特里面去发也可以对吧？但是如果他有那个虽然说是一个cattle list改的一个APP，但好歹他会提供在share sheet里面分享那个菜单里面提供说分享的推特，你可以做一些相对的操作。我还是比较答应这一套便利性的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:00",
      "text": "我好像从来没有用过这个功能，就是share to twitter这样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:04",
      "text": "我还是在继续用twitter boat。但twitter board的话现在受那个API影响比较大了，他那边推特没有给很多数据回来，很多的那些别人的回什么的患者，你拿推特boat中第三方客户端根本看不见，所以说推特boot也就刷刷timely。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:19",
      "text": "就因为这最近这两年推特的那个就是产品本身的改动还是比较大的。你看他最近又出了一个渗透新的那个叫fleet.",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:27",
      "text": "什么功越发操蛋了。说白一点就是越发操蛋。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:34",
      "text": "就是他还这些新功能都还没有在API的层面上体现给第三方开发者去接入。所以我你要去跟原生客户端去竞争这个feature rich，那肯定是比不上的。这里你作为用户，你就必须得想说那你怎么办，对吧？那我就属于尽量用原声，还是原声，反正捏着鼻子用呗。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:54",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:56",
      "text": "行，那差不多就是M1的这个mac的问题就聊到这里。因为也是你是刚拿到，差不多还没有一个星期。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:03",
      "text": "有一个星期了吗？没有一个星期，应该就三天四天都是左右的样子。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:08",
      "text": "可能接下来大家看我们目前看性能是没有问题的。然后不管是原生性能，就是报表，然后模拟性能还是超越原来兼容性，目前来看都还好。但是可能还是有一些小小的这种不尽人意的地方。但是我相信过个半年一年，等到他明年出第二代的麦克的处理，就是这种可能M2比如举个例子，到时候大家再去买，可能到时候一个是有新的这种外形的机器了。另外就是说这些兼容性的问题基本上也都解决了，对吧？该转原生的都转原生的，然后该模拟的如果还有问题的，可能也都修掉了，对吧？然后那个时候大家再去换一个问题就不是很大了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:48",
      "text": "我这里还想问一下两位，你们用你们现在的英特尔的macbook，有觉得在电池状态下开盖之后到解锁这个过程非常的痛苦吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:59",
      "text": "首先我现在没有用mac我现在用收银台迷你是叉86，所以OK我只能告诉你说唤醒那一个过程肯定不是非常的快，他还是要等一下下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:09",
      "text": "我好像基本上不怎么棺盖儿。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:13",
      "text": "好的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:14",
      "text": "我我我唤醒的过程就是按一下，随便按一下键盘什么键，或者敲一下鼠标这样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:19",
      "text": "好了，明白了。就是我最近几年的这个感受上来说的话，我的话macbook我每次打开它的盖子的是盖子的时候都感觉非常的痛苦。黑屏可能就会黑个1到2秒，甚至有的时候不知道为什么卡个五六秒也是经常常见的事情。然后亮了之后，整个UI也是卡住的，然后输密码也是没有反应，然后进了桌面之后，可能也还得再卡一段时间才能恢复正常。我在后面我在推特上也大概问了一下，好像有很大部分用户也是有同样的问题。但是好像有另外一部分用户好像又没有遇到这样的问题。我还挺奇怪，这个问题到底是怎么造成的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:57",
      "text": "我好像没有遇到。就是在我绝无仅有的几次，把他带着到处走的过程中，就是可能一天比如说要开个会，然后频繁关河十来次，好像没有发生过这样的事情。但是你刚才说你要输密码，就是我我知道是有些人用手表解锁的话，就是他那个免密码解锁的时候会遇到这样的情况，但是我好像没有遇到过。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:21",
      "text": "因为这里面有一个机制的问题是这样，就是说首先你取决于它是我们讲系统休眠和系统睡眠，它不是一个概念。我们好像之前某期节目里面提到过所谓的这个sleep，就是说它的那个内存是不断电的。就是你整个内存还是在整个系统的镜像还是在内存里面，你只要打开它可以比较快的去跟得上。但如果你是休眠，它就存在这么有一个所谓的深度休眠和这个浅度休眠问题了。就是你真的这个hyper nic休眠的时候，它的那个内存的镜像是写到磁盘的。这个时候就是说哪怕你整个系统没电，或者是你电池没有用光了，它在唤醒的时候还是能够把那个之前的状态给唤醒回来。但是取决于你电脑有没有插电，以及你电池的剩余状态，它内存是有可能会掉电的。这个时候说你在再唤打开唤醒的话，它等于要从先从SSD上把内存里面的原来的那个镜像读回来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:25",
      "text": "你看我们现在内存都是16个G对吧？可能八至少八个G以上。开发者16个G可能是比较，如果你是那个叫什么来的，那个台式机可能是，但台式机不会拔电，应该问题没有这个不存在这个问题。如果是笔记本的话，假设我们就以16个G的这个内存镜像要都读回来的话，那其实你算一下它的那个存储，到那时候带宽本来就要读16个G就要那么长时间。然后再上电，再自检，再引导起来，系统就不是说重新开始boot，就是说恢复之前那个状态，他肯定是需要一个时间的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:00",
      "text": "但是其实我们讨论这个好不好，我之前写了一篇文章的解释就是和这个其实真的没有关系。OK因为的话现在在最新的macbook里面，它的机制是一旦盒盖修明了之后，它就动静那个动他就先把内存我们当铺一份到那个那个存储固态存储上，保证断电之后的问题。然后除非电池彻底耗尽，一点电都没有了。它你都是从标准的，从RAM上直接唤醒的这种模式，而不会去走休眠这种模式。就只要要是电池有电。",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:28",
      "text": "它的内存是不会掉电的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:31",
      "text": "是的，要不说话，因为现在16G那么大，读出来你很明显你能看到一个进度条在那走，进度条的读那个速度是太慢了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:39",
      "text": "不对，对，就你说只是说哪怕是内存没有掉的情况下，它的唤醒也是非常慢的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:45",
      "text": "对，是的，这个我自己做了一个猜想，就是不确定这个猜想是对的。就是在如果我就有一个习惯，就是因为我的my book不是主力的工作机，所以说我可能把它放在那盖个一两天，我都可能不会用一次，然后这时候才打开。然后如果是在英特尔的设备上的话，你在休眠的这个状态下的话，整个CPU是彻底不活跃的。所以说你在打开那一瞬间，有很多的APP它的代码的话，它有很多的timer计时器要触发一些各种各样的事情。这个时候你这个盖合的越久，关不用的时间越长，这个各种的胎面就堆的越多。所以说这一瞬间。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:20",
      "text": "堆积的任务在处理，对吧？对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:23",
      "text": "全部都出来了，然后就要去处理，然后就会导致这一个时间是非常卡的。然后现在我在我测试了一下新的那个M1的macbook的话，它整个CPU的核在后台是一直会有间断的去唤醒整个系统，然后去工作的。就跟iphone 1样，它不是完全的一个彻底休眠的一个状态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:42",
      "text": "就是它所有的后台任务都是在一直运行的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:45",
      "text": "所以你就不会在那个一那一时刻会有这么大量的一个任务量堆过来，然后非要在那一刻全部解决掉。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:52",
      "text": "你说这个我想起一个事儿，就是你你在那个M1的macbook pro上面，你去他的叫system preference，就系统设置里面找到那个能源，就是energy saver，就是节能那个选项之后，它还会有那个选项。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:06",
      "text": "叫做power nap。那个选项给你吗？没有了，我看过他那个选项已经取消了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:03:11",
      "text": "可能就这个问题导致的。Power nap是我现在是十点几引进的一个新特性，就是说它可以让你那个麦克在待机或者休眠状态下，它还是隔三差五的唤醒一下，然后来处理一下。比如说是做这个time machine的备份，他说是检查邮件或者是icon的一些推送处理，对吧？但是这个是仅限于我的理解，仅限于苹果的第一方的这些应用，他当时要求一个东西，就是那些应用必须得支持，叫做timer就是合并。因为我们知道他的那些timer是就是各自各自APP各自的timer的节奏，他可能不一定在一起。他他当时为了支持这个part nap那些应用，如果你想要在power nap期间，就是跟用户合约期间还能做一些后台更新的话，你必须满足一些前提条件。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:58",
      "text": "其中还有一个就是说你必须能够支持把你的timer能够合并。比如说你本来是定时定的是比如说3分50秒后唤醒一个事件，你要去运行。但是因为你如果你要在拍，那不就是说你必须牺牲掉这个准确性。他他系统有可能说我在3分20秒的时候就把你唤醒，或者是在4分10秒的时候才把你唤醒。因为我要考虑把尽可能多的timer事件合并到一个map的周期，我就只能唤醒一次，因为每次唤醒都要比较大的能耗，所以在M1的芯片上不存在这个问题。因为它没有这个power nap这个功能。因为它的后台它不是有什么四个小的这个小核心，就是efficiency call对高效率的核对。所以它会一直在后台运行，所以不需要。那就跟你的手机，跟你的那个iphone，跟你ipad一样，它是其实是一直在后面有待机状态在运行的那就不存在说我需要合并timer这个问题。那你只要你不过分的去使用它，还是是会让你去完成这些timer的功能的那也就不会导致你说开盖以后，导致可能上一个map周期累积的那些timer事件一下就冒出来了，我也马上要处理了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:11",
      "text": "对，而且那个power nap选项的话，我记得默认设置情况下，在电池的那个情况下是关掉的。就是你得自己去电源设置里面去允许它在电池的情况下执行power nap。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:23",
      "text": "对，如果你是一个电池，是比如说你是一个笔记本，你是带电池的，它有它在那个简单选项里面会有两个type，一个是电池模式，一个是供就是电插插电源线的模式。插电线的模式里面那个power默认是开的，然后插那个电池模式它默认是关的，你得从手动打开才能完成。因为它还是要费电，对吧？但是他现在如果是M1的话，就完全不给这个选项了。我就足够，我就有那么自信，即便是这样还是不会费电，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:49",
      "text": "没错，对，所以现在如果有英特尔的macbook的用户，可以尝试一下把那个选项勾上之后，能不能缓解唤醒了之后会卡顿的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:59",
      "text": "至少他通过牺牲一些电量的方式来减缓最后的一统一打开唤醒，然后全部他们时间都跑出来，要挨个处理的问题对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:11",
      "text": "对，但有另外一个问题，就是我曾经遇到过我原来的macbook，就是我明明是休眠就盖上盖，然后就带着出去旅行或者怎么样了。然后盗墓一D一打开，整个电池就0%完全耗尽的这种情况的对，没电了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:25",
      "text": "我有遇到过这种情况的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:27",
      "text": "这个好像他们说过一个原因，就是我不知道是不是这个情况。就是因为你在背包里面的那个盒盖的话，它是竖直的。如果说你的没有夹紧的话，比如说你书包比较空，让你抖一抖，它是有可能在那个过程中把那个盖打开了，就不断打开。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:45",
      "text": "不断关上盖子变成打开的状态。对，它又变成又在运行，我这里不太可能。因为我背的是一个那种带专门夹层的包，它它会把整个macbook就整非常紧的包裹起来。但我还是遇到过这种问题是，下班的时候把电脑放进去，然后去健身，然后回到家里面再打开电脑已经没电了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:07",
      "text": "这样可能是后台有什么程序阻止了强行阻止了休眠这样的一个事情。然后他他实际是运行的有可能对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:14",
      "text": "或者是出现了一个bug，根本就没有进到休眠状态。然后一直就是在尝试进入训练，然后不断的去这个耗能的一个状态也有可能对吧？但是我们目前都知道这个锅可以甩给英特尔了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:28",
      "text": "是的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:29",
      "text": "这个也意识出来，因为M1没有这个问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:32",
      "text": "对，没这个问题了。我什么时候都在跑，我只是变得跑的慢了一点而已。对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:37",
      "text": "不过你刚才说到这个timer的这个问题，如果我在想，假设苹果假设如果确实问题是如你所说那么一个的导致的它开机的时候会比较就英特尔的那个麦博开机会比较，就是揭开盖会比较慢的话，它其实可以等一下再启动那些timer事件的处理，也还是可以解决这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:57",
      "text": "好像从架构上来说会比较难，因为那已经是那个代那个程序自己的一个代码的一部分的逻辑了。你这个时候你要是强行的把那些那部分程序全部给sleep做，然后就只把科诺唤醒，只把那个UI的进程和这种事情唤醒的话，想起来想想还是一个很复杂的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:16",
      "text": "就会导致比如说你打开之后，那个程序没有响应的。虽然说它不不不影响你其他系统的性能，但是那个手机本身没响应，会导致你说你这个东西是不是挂掉了。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:26",
      "text": "而且系统很有可能系统的某些东西也要非得依靠某个程序的某个结果怎么样。这个东西你把它实力不出来，那系统也卡住了，然后大家就互相锁死。对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:36",
      "text": "我们把这个设置给sleep住，然后打开，没网了就完蛋了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:44",
      "text": "对不对？然后那边要检查OCSP的请求，然后有然后就互相就死循环的卡住了，所以看起来也不太可行。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:51",
      "text": "对，就这个鸡和蛋的问题很难解决。对，说到这个开机，你用那个手表解锁了这个M1的这个macbook pro？",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:00",
      "text": "我没有。因为我的手表的话只是健身的时候戴，所以日常的话我都没有戴手表。平时你不带是吧？对，而且M1的话有那个指纹。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:08",
      "text": "所以说也不带看。亚生和我一样，我基本上很少戴apple watch，现在不去健身了，连连这个机会都没有了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:15",
      "text": "就放在那儿吃灰OK。因为我平时还是戴的，但是因为戴一段时间就会它背后那个圈儿会压在手上，压上一个印子，那部分皮肤会非常的养就是难受，养这个然后就摘掉了，也是出门，就是我需要走步的时候才带上它。这个问题还是比较难解决。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:35",
      "text": "其实也是去健身房。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:36",
      "text": "对之前遇到的问题，就是说我老是经常性的解锁不了这个apple watch，就是它你看到他在尝试解锁对吧？那我说那个mini，然后他过了几秒，我说这几秒时间我已经足够我输入密码完成登录的过程了，对吧？但是他还没有结束，最后他还告诉我失败了，我还是得输入便秘。这个可靠性非常低。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:58",
      "text": "对这个对于苹果来说简直太常见的一件事情了是吧？各种的这种只要涉及到两个设备不在一个一起的这种感觉，这个bug的发生率有50%的这么高。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:09",
      "text": "我是十次有七次可能都解不开，可能碰运气能解解锁开，可能两这种。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:15",
      "text": "你的是第几代的？我去。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:17",
      "text": "五代，不是最新这个，但是也是比较新的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:21",
      "text": "对，那是去年那个应该是没问题的。因为原来一二代的时候，确实是好像实现方式整个都是不一样的，那个成功率就是非常低。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:29",
      "text": "我就是一代的。可能就是太老了无他就是太老了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:33",
      "text": "对我当时是开发air pass的时候，我就专门开适配了watch，然后用让watch可以解锁。然后就发现我原来的最早的那一代应该是零代了，S0那个成。对，那个那个真的不行，那个成功率就低到可能5%不到的这么一个这么低的一个成功率。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:50",
      "text": "直接放弃了呗。那代机器真的非常慢，就是那个DBC号机，然后那个处理器也不行，续航也不行，挺坑的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:00",
      "text": "是的，然后换到5代了之后，就发现成功率在测试的时候是达到了99%左右。但是在日常的使用中，确实很多时候也会出现，就不知道怎么它就不用做了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:11:11",
      "text": "可能依赖于蓝牙的那个2.4G环境可能还是有一些讲究。因为现在2.4G环境确实这特别是在城市里面是比较糟糕的。然后说不管你再怎么努力，你解决不了这个无线这个射频的问题的话，他可能还是没有办法实现稳定可靠的解锁了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:29",
      "text": "对，但这个锅好像也有一个可以甩给英特尔的可能性。就是我之前做过一些蓝牙的一些开发。然后你会发现其实整个巴克VS和IOS的蓝牙协议栈还是经常会出现问题，整个协议站崩掉的。所以是不是也是mac上面的和原来在架老架构上面和蓝牙的通讯不是那么顺畅，然后它出问题了。然后在M2M1芯片上面也把这个问题好了，也是有可能的一种理论。",
      "speaker": "发言人3"
    },
    {
      "time": "01:11:58",
      "text": "也有可能就是之前他是用那个他的之前蓝牙和wifi应该都是博通的方案，就是在麦克上面对。是的，那这次他改用自己的方案，说不定也有可能。你可以关注一下，就是你之后的试着去做几次看一下。行，还能行，没问题。但我觉得最终要解决这个问题，可能还是得靠不管是从安全性还是和这个可靠性上，还是得看这个这是从iphone 11开始搭载了那个U一的那个ultra White band的那个东西，看能不能解决。因为你一个是可以解决这个通讯可靠，因为它是超宽带，它是可以同时在多个频段上发这个消息了。就不就不用再等蓝牙的一个跳频2.4G那么弄，而且它有那个距离，就是说它可以更加安全可靠的判断，是不是你这个表刚好在这个macbook的旁边，然后我就可以有更大的信任空间。说那肯定是你本人在接受这个东西，而不是说通过这种叫做什么人类攻击的方式来做的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:57",
      "text": "对，没错，但是这个好像还是一个遥远的现实，这个只在iphone上，目前装载了watch和mac上都还没有watch。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:05",
      "text": "上面看主要是空间的限制，怎么能够实现说把那个再微缩一下，或者直接整表上呢？它还不是SUC，它是叫做SOP，system on package。它整个系统都封装在一个package里面去了，然后它整个都是比那个M1还要高的。所以说到时候如果他把U一整合进去，我觉得应该也是有可能性的。但只是说工号，这些天线怎么弄我不太清楚，但是我希望是能够实现的。然后U一应该是mac上还都还没有，对吧？哪怕是这个M1的mac上面也是没有的对，都没有，说不定这个M2可能就有了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:42",
      "text": "应该是的，按时间的话应该是到了一个该模型模具该进行大升级的这么一个时间了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:48",
      "text": "对，而且他他这个他要整合在芯片里面，它也比较好做，都是在自己的这个就不管是安全性上，还是说这个对空间上来讲都比较好弄，对吧？我觉得而且这个场景很合适，对吧？用这个表或者手机靠近一个你的麦克就解锁了，那其实还是很方便的，就是不用做什么操作。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:07",
      "text": "对我今天才从你这学习了，原来U一是可以拿来传输数据的。我原来的理解的话，以为它只能去标定一个方向。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:14",
      "text": "80方向是它的那个物理特性导致的。传输器它只要能够传输信号带，都是可以传输数据的。而且我理解它那个带宽还比较高，因为它可用的那个就是那个无线的频段会比较宽。所以我觉得U一如果内置到I不是ipad的，甚至是mac里面，它甚至你知道我们现在用那个叫什么side car对吧？就是通过驱动wifi来实现的，它是通过5G的一个wifi来实现的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:37",
      "text": "对不对？应该是wifi.",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:39",
      "text": "但如果他用U一的话，还可以把那个wifi的带宽解放出来，其实还是更好的一个方案的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:44",
      "text": "是的，是一个我们希望的未来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:47",
      "text": "对对对，anyway这个就是未来的苹果的mac基带设备还是非常值得期待的那大家可以去买一点这个苹果股票，反正我是买了不错。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:58",
      "text": "你也买了。我先卖围巾。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:00",
      "text": "先买围巾。对，OK今天我们前半部分叫我们叫什么寓意？先扬对吧？先表扬了一顿苹果的这这个硬件，现在我们开始吐槽模式很招在后面对就是在聊的第二个话题，其实是跟其实是也相对来说一个比较糟糕的一个或者是比更加难解决的一个事情这东西叫什么？我不知道这个中文名叫什么，我这就是这个缩写叫做OCSP。它的全名叫做online certificate status protocol，叫什么在线证书状态协议。大概这么翻译一下，要不要请你给我们先解释一下，因为这个是一个开发者专门用的东西，你给我们解释这个东西是干嘛用的，为什么它会再次变成一个很大的问题？",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:46",
      "text": "行，然后其实这个OCSP这个东西的话，本身的话和应用的话，它只是正好被套用在这儿了。它本身不是为了解决应用安全性的这么一个问题，他是解解他解决问题是什么呢？是就是在原来的传统证书体系一下，证书可能更常见的场景是HTPS网站。我们当我们仿真一个网站的时候，网站要通过各种的加密手段给我们出示一个合理和有效的证书。我们浏览器才知道我们连接到了一个网站是真实的，不是别人造假的，然后这么一个情况。但是这个情况就会出现，我的运营商也好，或者其他whatever什么样的情况都行，导致我把证书表情泄露出去了。那我需要有一个措施能够补救，然后能够把我泄露出去这个证书给它注销掉。所以说就有各种各样的方式去进行，叫做证书吊销。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:35",
      "text": "这个OCSP就是用来吊销证书用的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:38",
      "text": "对，是的，OCSP就是来吊销证书的一种方式。最早的时候应该是用来叫CRL的一种方式去吊销CIL。就是定期的系统去或者是浏览器去查一个地方，然后给你返回一大个列表，哪个证书是被吊销了的。你记得你不要想再相信他了，但这个东西就是越堆越大越堆越大越堆越大。现在大家这么多网站，那么东西对他只能不讲，因为对，是的，然后就搞得这个的事情就会感觉看起来很不优雅。",
      "speaker": "发言人3"
    },
    {
      "time": "01:17:05",
      "text": "然后OCSP的话其实也挺简单的。就是每次访问的时候，我再去找一个特定的我相信的服务区去问一下。然后说这个证书还有没有被吊销掉？对他有没有被吊销掉，然后夫妻就说OK没问题，然后我就我本金就放心就可以了。然后可能会再加上一些缓存机制，就是比如说只有几天才会访问一次。",
      "speaker": "发言人3"
    },
    {
      "time": "01:17:26",
      "text": "这个可能有点我们做个刚才那个很技术的一个描述哈那我们做一个比较形象的一个比喻，就好像我们现在说是你去拿一个美国签证，他虽然发给你了一个签证，你拿到的那个所谓的VISA那张纸贴在你的护照上了，对吧？但是你实际上要去美国之前，还是得在一个美国官方指定的一个网站上去注册一下，说我要来美国了，虽然你之前给我发过这个签证，但是你现在我再确认一下我能不能来这次。对吧？差不多这个OCSB就是说确认这个过程。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:55",
      "text": "可以这样解释。我觉得OCIP更像那种，比如说你买了一瓶酒，然后酒上有一个什么防伪标签，然后说你打电话到某某某地方查那个标签是不是真的类似于这样一个东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:07",
      "text": "对这个解释好像非常的合适了，几乎是一模一样的一个机制。",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:11",
      "text": "因为OCSP的它那个验证的防止实际上是在证书内部。就是他发给你证书的时候就告诉你要是想查这个证书的真伪，你要去哪查对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:21",
      "text": "所以他这次我们就苹果这次遇到的一个问题是说，因为这个新发的这个macos big，so这个11版本，十一的这个新系统，大规模的人去通过OCSP的方式去查这个应用证书。因为你你重新换了新系统，然后你都要去去你开每个程序的时候都要先检查一遍这个东西，导致苹果的这个OCSP服务器被等于是等于是他自己被自己逼dos了，拒绝服务攻击了，导致它缓慢，然后导致所有人所有的这个mac程序都启动不了，这些都在等这个查询的结果。那就这里面可能有个跳跃的地方，就在于每为什么每次启动mac程序之前需要去检查一下这个证书。就苹果做这个东西的的目的是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:06",
      "text": "这个的话最早的时候其实是就是一种安全的机制。这个类似的机制的话，就是在可能公众理解一般理解起来更简单的一个说法叫数字签名，在windows上也有。这可能背后逻辑是这样的，就是因为有恶意软件。我就要求你们每个人分发软件的时候，必须都给这个软件加上一个签名。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:27",
      "text": "就是这个所谓的证书对吧？就你签完名得到一个证书。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:31",
      "text": "对我才能认为这个软是一个相对安全的软件，我才允许你打开。然后背后对应的逻辑就是这个证书的获取是有一定的门槛和难度的。对于麦克来说的话，就是你的成证书是就是你的苹果开发者账号证书。首先你要付钱才能买到，要九十九刀。你对于99到这么一个成本上来说的话，假如说你要非常大的广泛的去撒网，然后的话你想每一个分发都用不同的证书，几乎是不可能接受的一个成本。另外就是你在这你在注册账号的时候是需要提供信息的，支付的时候也是需要暴露你的支付的信息的。假如说真的是之后需要给你秋后算账，你是个恶意软件，那么是有证据可以去追寻的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:11",
      "text": "就抓到你本人对吧？对，是说设计我们是可以找得到。苹果是找到你在哪儿的对吧？对，是的。你在哪里注册，你的这个法律主体是什么都能找得到。就这个证书是包含了这些信息。对，是的，除非从苹果给你就认证过，你是不可能自己伪造一个默认情况下被苹果设备信任的证书的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:31",
      "text": "这个是算法层面决定的。当然这个你应该比我懂得多，你可以给直接给大家科普。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:37",
      "text": "这个我们我们下次再解释。但是我们从实用性的解释的时候，就是说你是不可能伪造一个苹果发给签发给你的证书的。这个是这个安全性全是可以保证的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:48",
      "text": "那么对在这个证书基础上再做OCSP的原因是我猜想，是不是说苹果认为我即使发给你一个可信的证书，但是你作为一个开发者也有可能拿这个证书来分发恶意软件，对不对？对，是的。或者说你先分发了一个正常软件，但是你可能潜伏一段时间才启用你软件里面的恶意的功能。这个时候苹果需要一个手段说，即便我签发了一个可信的证书给这个软件的开发者，然后他用这个证书给他的程序签了名，我也要有一个所谓的叫kill switch，对吧？就是库克上tim cook可以按个键老板键说禁止这个软件在苹果设备上运行。因为它现在是一个恶意软件，还有一些隐藏的功能，我们当时是不知道的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:35",
      "text": "没错，是的，这是一种可能。还有另外一种可能是，比如说开发者他不小心把证书泄露了，然后被公众所知道，这个时候大家谁都可以用的那这也是需要把它注销掉。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:45",
      "text": "你把钥匙丢了，需要整个导致整个楼都要换锁。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:49",
      "text": "是的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:50",
      "text": "这个OCSP其实是为了还从本质上来讲，它还是为了保障用户的这个安全性考虑。所以说在每次一个应用去启动之前，都去检查一下这个应用程序签名的证书是否被吊销过了。如果它被吊销过的话，这个程序就不能启动，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:07",
      "text": "其实还有一点偏差，就是它也不是每次系统都会检查，一般它还是有一个时间的缓存，隔一段时间可能一两天，我倒是没有具体测了，可能是几天，也可能是几个小时这么一个时间吧。然后他就会需要重新去检查一下，而且甚至有可能，当然这个也是推测，不能确定苹果压根没有考虑UCSP在软件在APP包的验证上这件事情。因为整个系统关于证书数字签名的验证的东西都用的是同一套公有体系。然后在开发者方面的话，应该是security framework work。然后这套体系的话既会没拿来验证HTPS你房的网站是否是合理法的，也会来验证开发者那个那个开发者签名你的应用包是否是合法的。所以说他可能也根本没有想那么多细节，就直接把那个东西搬过来，在这用了OK。",
      "speaker": "发言人3"
    },
    {
      "time": "01:22:56",
      "text": "如果你电脑是在没联网的状态情况下，这个OCSP它是可以直接直接失败，其实不影响你启动的，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:05",
      "text": "对，这其实是OCSP协议本身设计的时候我们就有问题。但这个问题好像从理论上，我印象中之前讨论是不可能解决的。就是假如说黑恶意的它能够控制你的链路，它能阻止你的这个查询，那怎么办？",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:18",
      "text": "就不准你去检查OCSP，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:20",
      "text": "对你不可，你因为不太能够说你这个OCSP访问失败，我就不允许继续。因为访问失败这件事情太多因素了，对吗？对，太多因素了，在网络上各种方面还是都还是可能的。我自己观察的话是系统会重复五次。会你如果这个连接失败的话，它会在后台自动重试五次。如果五次之后都还是无法访问的话，它就不管了，它就继续运行。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:44",
      "text": "所以这里面有一个非常简单直白的问题，就是说如果他OCSP检查，默认就是说如果网络不通的，他也能够就放过不检查。然后就让这次先启动以后再说，它是不会影响用户使用的那为什么这次会导致这么大规模的用那个不能动了？",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:00",
      "text": "他的问题在于他没有服务器直接说我不行了，而是服务器被被d doss了没有响应。所以说在等着他服务器说话。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:08",
      "text": "OK这个代码就非常傻。如果说你正常加个什么，加个timer有一个timmer，比如说5秒之后还没有成功，你就直接放弃了。其实也不会导致这么多的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:18",
      "text": "对吧？但实际上等待5秒也是相当长的一段时间。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:21",
      "text": "Timer应该是有的，我觉得应该不止5秒。可能那个台面我没有实际遇到他真的宕机的那个时那个时间那个事情了，就是我没有观测到它的它到底是多少秒，但是应该不止5秒，而且我觉得这可能是真的是一个第一世界没有考虑到的问题。对于苹果的工程师，坐在苹果的网络里面，从来都不会觉得执行一个网络请求那个堵塞的。执行一个网络请求会对还能失败。对还能失败还能考。他说这不就几毫秒的事情吗？有什么关系呢？",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:49",
      "text": "对，关键就是说如果他是直接失败，反而对了，就反而如果是直接失败，就是网络不通，这种情况下，他反而也不会出什么太大问题。它属于这种。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:57",
      "text": "对，直接502之类的就可以了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:00",
      "text": "对，但这是属于那种他那边服务器响应非常慢。大家说我还在正在努力中，对吧？你不要放弃这种感觉就很。但即便是这样，即便是这种失败场景，它如果说它是这个OCSP，它是一个我们说什么呢？叫做异步的。就是说它它检查SSP和和让你启动APP，它是两个不需要一以前会有依赖关系的这个逻辑步骤，它其实也不会导致这个问题，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:27",
      "text": "就是说你启动是启动了能检查，你可以下次再告诉我这个结果，或者说你检查好了之后，你弹个小窗出来说，这个程序刚才我检查失败了，但是你已经把打开了。我现在警告你说这个已经被吊销，可能有问题，你赶紧退出来对吧？也是可以的。对，但是他连这个也没有做对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:45",
      "text": "而且这个问题的话可能导致了在国内绝大部分用户，他觉得迈克缓慢的一个很大的问题。就有的时候我们会打开我们的麦克，然后点开个APP，就看到图标在那弹弹个10秒，其实一直在跳，对吧？对，不是一个很可能很很罕见的事情，就是在检查这个证书，它访问不畅。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:03",
      "text": "不是网络不畅。所以就是说这本质上是一个软件架构设计的失误，再加上这个网络这个基础设施，因为一些外部或者是不可预测的因素，导致变得缓慢，而不是完全不可用的情况下，双重压力导致的一个用户使用体验的重大的问题。对，是的。所以还是要把苹果的这个架构的，也就是负责这块架构的人拖出来打板子才行。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:27",
      "text": "对我觉得很可能就是之前没有想过这件事情，在他们那儿从来没有遇到过这件事情。那这个坑埋在那儿就没一直没人管。其实这个坑应该白了很相当长的时间了。很大很多年以前就已经是这么一个工作方式。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:41",
      "text": "就引入SSP。我记得应该是至少可能是3到5个版本以前的，对吧？大大版本以前的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:46",
      "text": "对我作为开发者，我自己观察后台请求，我早就是看到后台不断的就说CSP的请求会在会有在一直在进行的OCSB9.",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:55",
      "text": "是会直接发到开发者那里去的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:57",
      "text": "不是会发到开发者，他发的应该是证书的颁发者那里去查。应该是我从设置上面看网络流量，我是能看到他的频次的。你是从中间人的角度去看他。对，是的，我能看到他的请求。然后因为他那个请求本身是HTP是铭文的，所以说你能看到他们信息。所以这也是导致这是大家对他在隐私方面的一个泄露上的一个批评的一个原因。",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:17",
      "text": "对，刚才我们说的就是说它是导致不可用，这个还是说是一个用户体验的问题。可能相对来说，如果他把这个架构改一下，导比如说它做成异步的对吧？不需要跟启动这个启动应用程序之间产生一个绑定关系，那可能也还好，但可能这是更要紧的是就是说他在OCSP检查过程中暴露出来的一些更侵犯隐私的事情。比如说他说我们我们我我现在不太清楚是不是这么一回事，我看到的这个说法就是说他在OCSP请求是通过HTP明文发送的，没有通没有走HTPS。这个跟我们目前主流的。只要是通过这个互联网传输的信息，就尽可能加密的方式来做，这种做法是违背的，这是其一。对。第二就是说他在这个铭文的这个UCSP的请求里面，还附带了你就是他要检查那个APP的一个哈希。这个所谓的哈希就是说可以唯一判定说你是否在不是哈希。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:16",
      "text": "是SN是那个证书的SN证书。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:18",
      "text": "的SN序证书的序列号对吧？对，是的，但是这个序列号是证书唯一的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:23",
      "text": "假设我有一个证书和APP之间的彩虹表的话，我是可以反查出来这是哪个APP的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:28",
      "text": "都是公开信息对吧？比如说设计对它会有一个SN，他发了这个SN过去。但如果我只要假设我是这个S一或者任何一个中间人，网络中间人，我观察到了这个铭文的HTPS的流量。然后我看到的是一个IP地址，就是这个原的IP地址。他发现了苹果这个OCSP的服务器有一个明文的包包里面含有这个SN，那我可以百分之百精确的得出结论说，这个IP的人在用surge开发者证书签发的东西。对，但是设计开发者证书，因为他只签发了两个东西，就是和这个l pass这2个APP，那他肯定是在用其中的两个之一，对吧？对，没错。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:05",
      "text": "然后由于绝大部分的这个我们不抛开什么微软，那些什么大公司，就正常一些中小开发者，他可能一个这时候就只开发一个APP。其实我们可以基本上可以精确的定位到这个人是不是在用surge，或者这个人是不是在用某某某什么软件对吧？有些比较敏稍微敏感一点敏敏感一点软件，就是我们是可以明确的知道这件事情的对，是的。所以从这个角度上来讲，这个铭文的OSCSP的请求，它的确是泄露了用户的隐私。这个说法是没错的对吧？对，这个说法是没错的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:35",
      "text": "我们也看到就是这单这是一篇这个是一篇博客里面他有专门去解释整个底层原理怎么回事，我会把这个修这期的修note里面会贴出这篇对文章的这个链接，大家可以去如果感兴趣这个技术细节可以去点进来看。但我们也看到就是隔了可能几天之后，苹果出了一个官方的算是一个回应。他在他的它的这个support配置里面叫做safely open apps on your mac。就是说在你的mac在安全的打开启应用程序里面最下面加了一个section，叫做这个curacy protection隐私保护。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:12",
      "text": "他他说他最后加了一段话，他给了三个方法，他说在明年我们会增加几个变化。一个是说通过加密的协议去传输这个OCSP的请求，对吧？这是其一。第二就是说它有更强的保护措施去解决。刚才我们讲的就是说如果服务端不可用，不就是各种失败的原因，出现就尽尽量避尽量避免由于服务器或者网络不可用而导致无法启动这个应用的情况，对吧？然后就是说还给用户一个选项，说说用户可以open tot就是可以不要这些安全保护措施，就彻底的保护这个隐私。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:50",
      "text": "吧？我就是要裸奔，我就是想说像要像windows一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:54",
      "text": "对我我就不想检查对吧？你我就不想给你苹果知道我在运行什么样的程序。虽然说这个说法我觉得有点奇怪，就是说你你你都在用苹果的软件硬件系统了，你也不想让苹果知道，这个是不可能的对吧？苹果做苹果如果要想知道，他总有各种的方法知道，你跟他你在这里做文章是没有用的。但是我们来看，虽然苹果还没有公布，他说他具体的解决方案是什么，那我们我们这是一个毕竟是个技术节目，我们来想想有哪些方法可以避免这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:23",
      "text": "首先来看，我们先说刚才也提到了，就是说把这个OCSP检查和APP启动的两个过程独立开来，不要做成是像如果因为OCPC检查失败，就是没有结果或者是还在进行中，就要等他结果才能存在，这个明显是不合理的对吧？对，所以就是要它DOCIP它是一个应该是一个异步在背景后台去运行的一个东西。然后前台应用在还是正常执行，不用等待任何网络请求。后来如果你OCOC检查结果，你告诉我说，要不就下次不能用，或者是你这次不能用，你直接弹个窗或者是给个什么提示，然后把那个那个APP freeze住也可以，对吧？或者是强行杀掉他退出给个提示也行。那这种方法就比较简单。其实我更关心的就是说，是否或者说如何通过一个加密的协议来传输这个OCSP的检查。或者说从技术上有没有可能哪怕是我用明文传输，但是不会泄露用户的再用哪个证书的，或者是再用哪个APP的这么一个信息。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:27",
      "text": "其实这个问题它之所以OCSP有这个问题，就是因为OCSP本身最早就是为HTPS这个请求来设计的。因为我当我去访问HTPS的时候，这是一个加密连接，我要去验证这个证书是否有效，然后我要去执行OCSP请求。如果这个OSCSP请求也是个HTPS的话，那那他这个请求又该谁来检查呢？",
      "speaker": "发言人3"
    },
    {
      "time": "01:32:50",
      "text": "集合弹的问题这个说法，我觉得逻辑上是可以理解。但是我觉得如果我们不去追求那么的百分之百完美的话，这个我觉得也不是不可以接受的。如果说OCSP的请求它不是每次都要检查的话，如果它可以像网页的HPS的检查也可以异步的话，它完全可以我检查SSP的那个HPS请求的OCSP我可以不做，或者说是我等下次，或者说等这个或者一步来做也可以。至少让我保证这一次的OCSP请求是可以完成的。然后我们再来看你那个OCSP，这个是它是两个英国的OCSP请求，它它不需要一定是同时完成。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:29",
      "text": "对，这个从我的理解上来说的话，是当时是在1999年。那个时候对隐私的保护重要性没有现在这么强。然后本身的话你通过访问HTPS的话，你通过在链路上已经SNI已经泄露出你的那个访问的域名了。所以说这个事情你访问哪个网站，那些已经暴露了，就加不加密好像走不到HPS的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:50",
      "text": "关于在OSSP请求上的话，只涉及安全性的问题，不涉及隐私性的问题。安全性的问题的话，在响应结果上本身就已经被证书的数字签名给解决了。所以说你加HTTPS是解决隐私问题。在1999年那个时候，估计大家一是它本身在TS的SNI上就已经泄露过一次了。然后二是也没有这么特别的去关注这个隐私上要这么保护的一个事情，所以说就没有考虑这件事，这是我的理解。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:15",
      "text": "因为它毕竟它是一个online的事情，就是说你一定要联网，然后你还要你本来就要要发的东西，哪怕我不通过SSP来看，我直接看你连续了。假设我是个中年人，我直接看你连去了哪个目标的IP，我也知道你去访问了什么网站，对吧？这个场景跟这个APP上面启动，因为你有些APP你可以是不用联网的，你就是本地启动一个，比如说我请了一个随便某某某APP，它它本来也不需要联网，对吧？它就我只是在本地启动，但是却通过OCSP这个东西泄露出我在开什么程序，这就很奇怪了，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:45",
      "text": "对，所以就是我的观核心观点就是是苹果偷懒了，他没想那么多，就把那边现成的一个东西就拿过来就用了。没有根本没有考虑过这些事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:54",
      "text": "你完全可以把整个OCFPC验证这一套搞到本地执行。定期在macos里面更新一套苹果从root certificate到具体到每一个APP的证书的这么一套验证链。然后你把整个验证过程放在本地完成就可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:12",
      "text": "这其实就是原来传统的ACRL，就是提前我把哪些被吊销了的东西先全部下滑在这等着，然后我只用更新这个就行了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:20",
      "text": "这个面临的最主要的一个限制就是说这个列表到底有多大我是不知道的。但如果想来这种在APP上面被吊销证书的情况应该还是比较少的。因为不像web，它是一个完全开放的一个状态。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:33",
      "text": "在mac上几乎没有听说过有哪个知名的软件，或者没有见过哪个软件或者是安全的什么东西被出现过。吊销证书的情况其实在IOS上会很常见。IS的话有很多一些黑色产业什么的，滥用企业分发，然后去分发了很多的应用。然后他们一旦苹果把他们的企业证书吊销了之后，就会靠OCSP把证书给注销。这样的话用户的设备上那个应用就直接打开了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:59",
      "text": "核心。就是苹果之前没有仔细想过这件事，没有过没有去仔细考虑把证书体系用在应用包检查上面这些细节上会不会导致问题。但如果就是他好好的想了，我该怎么样去做这套逻辑，做这个流程的话，应该是有非常多的方案能够做出一套既保证隐私又安全又稳定的一个。一个结果的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:19",
      "text": "在目前他不用他做任何额外的工作，只是简单的把这个OCSP就是H不是OCSP点apple点com这个网站强制通过这个HTPS去访问，也可以解决这个隐私保护器和不泄露的问题，对吧？你只有苹果知道吗？中间人是不知道的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:35",
      "text": "对，理论上应该没问题。但是从开发者的角度的话，系统架构上我觉得可能会有问题。因为它本身就把这些东西的功能性划划分成块了。那么就是那个进程可能本身就没办法去再执行HTPS了，不然它就会产生一个循环了。所以我觉得最后结果肯定就是它整个机制可能都完全给颠覆掉，然后重新重写一套专门为检查A熟了这么一套体系。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:00",
      "text": "是既不依赖现有的HTPS的证书体系，但又可以同时保证安全。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:05",
      "text": "对，应该是就是我觉得可以值得专门花精力就好好的重新做一套，而不是偷个懒，然后把HTPS里面的东西拿过来就直接用。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:15",
      "text": "那它其实如果因为我们知道他苹果都是有自带这个证书，他即使用那个root证书给所有的设备签发一个苹果专用的证书，然后用这个证书去签名这个HTPS的那个OCSP的请求，然后再发给加密的时候再发给苹果也是可以的。这个还是比较简单的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:33",
      "text": "是的，就是这样。这种改动其实很简单，就是改两下就是改好了。但是如果要改的话，那干脆从头再来是吧？就把所有这些事情都考虑清楚。因为现在的话我们可能有隐私问题，还有就是堵塞问题。那个隐私问题倒是其实确实混淆一下，怎么样一下的话就能够解决了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:51",
      "text": "那堵塞问题要解决的话就异步。对，异步我在考虑异步的话可能没那么简单。那异步第一次启动的话，必须得是同步的。要不是画一个恶意软件，它已经起来了，他该干的坏事都干完了。你现在你一步结果来了，再把它吊销，你这个赶不上已经赶不上这个时间了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:08",
      "text": "这个是一个问题，就是你要不要阻止，或者说你要多大程度上去阻止。第一个那个那个程序，或者说其实你想本来这个OCSD就是一个滞后的解决方案。不管是你说你即使去查询它也是一个滞后的方案。因为你始终是要等到你发现这个程序它是恶意软件之后，你再才能够去吊销它的证书，然后再通过SSP发布出去这个东西。所以我觉得你去这个时候你去追求所谓的这个及时性，其实好像意义不是特别大对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:35",
      "text": "没错，是的。而且现在其实在10点15还是10点14开始，已经又加了新的一层notion公正的一个机制。和这个证书又是独立的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:46",
      "text": "这个机制跟OCSP还不一样吗？你这个我一直没有搞明白，顺便可以解释一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:51",
      "text": "这个证书的这个机制的话是持续存在的。就是每次启用用超雄启动那个程序的，就像或者是隔一段时间都会要去检查的证书是不是有效。然后重新触发了CSP，可以动态去吊销。那个的话只在入口检查，而且那个是针对每一个应用包。就是我每一次开发者发布一个包，都需要把那个包丢到苹果的服务器上去。先做一是hash和各种安全性的检查，然后它生成一个有效的一个签名和一叫做TK然后拿给我，我附在应用包里面，然后下发给用户。然后用户打开这个应用包的时候，会检查这个t kate是否是有效的。一同一种是本地的静态检查，同时也向服务器会检查这个TK的是否是有效的，然后是如果是有效的话，才允许应用学习。",
      "speaker": "发言人3"
    },
    {
      "time": "01:39:35",
      "text": "对，你说的那个就是这个notarization那个服务对吧？就他这个过程是做这件事情的对，就是它其实两个层面东西。也就是说OCSP检查的是证书，但是这个证书是签发给某一个开发者账号的。然后这个开发账号可以开发很多个APP出来，然后他他所有的检查都是检查这个证书会怎么样。但是notarization是针对于这个开发者开发的单个应用程序而言的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:58",
      "text": "单个二进制，每个二进制，这都需要单独的去重新钱。我也在思考这两种方式，它到底是为什么要搞这么一种额外搞这么新的这么一场。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:07",
      "text": "它涉及这两个机制的，用一层或者notification主要解决什么样的问题？他说是检查这个恶意软件。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:14",
      "text": "对吧？我想的话可能有这么几个优势。一是这样的话，你每次提交的时候，它其实是现在是有个要求的。就是你要求你要满足以下的一些新的一些系统的安全特性。这个安全特性的话，随着时间的推进，它的要求会变得越来越严格。然后比如说像现在的一些harden，一些runtime的一些各种限制。你必须得启动了这些保安全保护之后，你他才给你发这个钱，发这么一给你通过这么一个公证。所以说他会能够主动的去控制，去鞭策开发者，你赶快把这些新的安全特性都给我做上。要不是的话你就别大家就用，用起来会很麻烦。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:50",
      "text": "然后另外一方面的话，就是可能会考虑到有些开发者他偶然发了一个版本，那个版本是带有恶意软件的，或者是他有什么样严重漏洞的，不用把证书都杀掉，只用刚才那个版本就可以了。你把证书一杀掉，这个可能影响的效那个就可能威力太大了。比如说google，假如说chrome的某个版本带来不小心带了个鳄鱼包，你这把google的证书一杀，感觉这个互联网可能都得炸了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:14",
      "text": "公正是解决就是说是那种出不是这个开发者主观故意，而是因为疏忽或者是因为一些什么原因别的原因导致说他某一个版本的APP有问题。但是整个开发者证书还是安全的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:28",
      "text": "对我觉得应该这个是应该是这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:31",
      "text": "我理解note action它还有一个作用，因为我们知道并不是所有的mac上面的应用程序都是通过这个mac apps做方法。其实我们用的大部分这种第三方的软件都不是通过这个mac APP store发布的。所以苹果是不知道你的这个APP到底有，他没有机会知道你下载的这个第三方APP到底有没有包含恶意程序。就是哪怕他知道，他也没法去对比，因为他不知道你电脑上装了什么东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:58",
      "text": "那么通过这个notarization这个公证的机制，它其实是强迫开发者必须上传一份到他那去留档。然后他发现这个恶意版本之后，他可以直接跟从他的库里面去比对，说这个版本是否在我这里公证过。如果被公证过，他就有可能被分发到其他地方去。那我可以通过这个公证书或者那个时候ticket？来查到说他在哪些mac上用过。我可以去估算这个安全问题的影响范围。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:26",
      "text": "没错，甚至我也可以直接去拿到这一份之后，我好去分析它的代码，他到底是干了什么样的一些坏事儿。",
      "speaker": "发言人3"
    },
    {
      "time": "01:42:34",
      "text": "所以是通过这个机制解决了mac apple store，就是一九应用商店提供的一种安全特性。但是又不需要强制，大家都必须通过这个应用商店去开发程序。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:44",
      "text": "对，没错。",
      "speaker": "发言人3"
    },
    {
      "time": "01:42:45",
      "text": "目前这两重机制，一个是在用户这个开发者账号这个层面，一个是在每个单个用的层面，双重保护机制。这个都是属于叫什么get keeper那个要管的事情。就这个来看，目前这个mac上面的整个安全性还是比较有有保障的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:01",
      "text": "因为这个事情我印象特别深刻。你知道就是在那个你知道在中国你要用那个网银，其实现在做消费者端基本上都是用手机银行，没什么太大的一个问题，都会通过这个APP做那个。你只要不做越狱，不做什么这个事情，都还是能够保证你的安全的。但是在那个企业银行，你还是要用所谓windows的那个那个程序，然后去下银行的客户端。然后非常搞笑的就是那些客户端的安装程序，我看了一下，十有八九是通过HDP明文去传输的。而且他下回来那个东西，它windows上也是有签名的这个机制的对吧？但是你看他都是未知开发者。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:40",
      "text": "就感觉这些安全素养还是有一个很需要极大的提高的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:44",
      "text": "各个方面安全素养实际上是需要厂商来倒逼的。我觉得在在就是在倒逼开发者做到比较安全的这一点上，苹果实际上是业界先锋。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:55",
      "text": "没错，苹果特别能逼开发者。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:57",
      "text": "我感觉不可能说，我们下一个windows词的什么某一个版本更新，然后强行加一个那个安全选项。那默认你如果是未知开发者就没有通过签名的，我根本就不给你运行，他根本就不敢加这种选项，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:10",
      "text": "那地球就炸了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:11",
      "text": "估计这种事情只有苹果现在能够推得动，其他人好像不敢。",
      "speaker": "发言人3"
    },
    {
      "time": "01:44:16",
      "text": "对，就说这个安全性上，我觉得还是有比较好的保障的那只是说在实现细节上，我觉得确实还有很多。刚才我们讨论了很多比较简单的就可以改进的空间，对吧？那其实还是可以更好的避免出现我们今天讨论的各种各样的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:32",
      "text": "对，但其实这个讨论的话有我会绕围绕两个方面。一个方面的话就刚刚我们说的会隐私问题。另外一个方他们大家会有一种感觉，就是像你最早那篇文章的标题，your computer isn't yours，你的电脑不是你的那我就是我是否是我作为用户丧失了我对我的设备完全的控制权这么一件事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:44:52",
      "text": "技术精英这个圈子里面说，我说你或者说我们说的说你懂安全这个东西，你知道怎么回事？你会觉得我不应该把这些信息都泄露给苹果。但是其实从我觉得其实从普通人的角度来讲，普通人是没有这个能力去分辨这些细节的。必须要有一个。了解这个事情的厂商，他信得过的厂商去完成这个事情。如果这个世界上还有什么大企业可以让你相信的话，可能苹果上面属于那个区屈指可数的几个之一。",
      "speaker": "发言人2"
    },
    {
      "time": "01:45:19",
      "text": "应该是这句话是非常深刻的，一个果粉只有最最骨子里的果粉才会说出来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:27",
      "text": "其实就是从普通人心里可能还是能能理解的。就是我买了一台电脑，这是我的电脑，我想运行什么程序，你苹果凭什么有权限插手说你不让我运行它，这是可以理解这种心理。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:38",
      "text": "当然我不认同这样的说法，但是我从一魔鬼代言人的角度来说，我要反驳的话，我说那你实际上你开的车也是一样的，虽然你的车不能左右，你能去哪儿不能去哪儿，但实际上你的车买回来之后，你自己也是修不了的。就别说你可能能换一些内饰，但that set就是现在包括很多4S店都是修不了你的车的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:04",
      "text": "改车是违法的，中国是不能。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:06",
      "text": "上路的对是的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:08",
      "text": "对，这个的法规的倒在其次，就很多4S店也实际上也是修不了你的车的。你就比如说现在奥迪或者是宝马之类的车，你到4S店，你说我的车有什么问题，他帮你测一下。他能做的就是把你坏的那个零件寄回去，然后换一个新的过来。但是他已经失去了能够帮你维修车辆的这样一个作用了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:29",
      "text": "我觉得这个本质上是一个权利和这个责任的一个分摊的问题。没错，如果从绝对的说我要有自主权的情况下，美国不是也在讲什么叫做叫做right to repair，就好像是那些美国农民都比较强势。他要买什么高级这些拖拉机他坏了他要修，对吧？他说这个拖拉机要送去这个jn dear原厂再修，再给他发回来，那这个作物就烂在地里了，这个明显是不可以接受的，对吧？这个我觉得完全是可以理解的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:56",
      "text": "但是其实像你说像这种对于普通来说，你说一个电脑或者一个一个手机，你就如果突然不能用的话，你对你来说好像也没有那么大的一个损失。但是更主要的是说，如果厂商说允许开放很多接口，让你去做一些底层的修改。或者哪怕像苹果这次他说给到一个选项，可以让你talk，可以放弃这些安全保护，但最终你被黑了，你的这个资产被盗了。或者说假设你钱里面有1000个比特币的，随便举个例，然后你就把这个安全箱关掉，然后你说你比这个偷的你怪谁呢？你还是会去怪苹果，对不对？你说你这个安全怎么做做的怎么这么早，那这个时候就就你就明显就是说你的权利和责任是没有对等的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:47:35",
      "text": "对于绝大多数这种不是那么懂技术，也不知道那些安全措施应该如何去日常践行的。哪怕是说对于我们这种懂行的人，你每天要去想各种各样的安全措施，各种各样的牺牲，各种各样便利性，你也很心累。就是我觉得这从日常学来讲，你还是我愿意放弃一些所谓的我自己的一些权利，去换取说有人去帮我take care，不是有人把这个事情给我搞定。我愿意我甚至愿意为此付出更高的这个价格，对吧？这个就是这个溢价的地方在这里。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:05",
      "text": "那为什么我现在不想去用安卓，不想用windows？你说安卓不好用吗？其实也不是，安卓做做的挺好的，对不对？Windows也跑的很流畅，都没有问题。但是我还是不想用，因为我觉得没有人去帮我盯着这一块。对，所以我觉得还是有一些成年人的想法，就是说你的权利和责任始终是对等的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:23",
      "text": "是的，而且我觉得还有个底线，就是如果你真的觉得你要是你的，其实你现在是也是有办法的，虽然麻烦一点。进恢复模式把SIP关了，把各种东西改了也能够绕过这个限制裸奔去的。对你也是能够甚至不行，你把macos删了是吧？你装个windows，那也是你的macbook，也能用。",
      "speaker": "发言人3"
    },
    {
      "time": "01:48:42",
      "text": "就不要买mac，跑个跑装个linux，买个PC多好，又便宜又好用。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:48",
      "text": "那篇文章的一个论点就是你在M1 imac出来之前，你是可以选择。比如说我装个linux我装五本图都是可以的对吧？这个硬件上面我装什么操作系统是完全OK的。但是从M1 mac之后，你除了装macos之外没有办法装备了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:02",
      "text": "但你可以不用买麦克，没有人逼着你买麦克，对不对？所以这个也很扯。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:07",
      "text": "是。而且现在好像据说苹果也在考虑，正在和搞开放出来M1的设备也能装其他操作系统。但是这可能就是一个比较大的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:16",
      "text": "工程问题是谁谁会去适配呢？微软的微软做个把那个windows ARM移植过来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:21",
      "text": "我觉得linux一定会出一个M1或者说apple silicon的版本。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:27",
      "text": "我觉得微软也不是没有可能。现在微软不是苹果的最佳合作伙伴开发者了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:31",
      "text": "微软他现在是他的那个ARM基生态是依赖高通，高通不是出了，他最近是发了一个什么来着？X, 还是pro x就是那个surface book，还是surface，surface就也是一个就他出他对我讲自己那套两用的那个那个便携电脑，它就好像用的是高通的那个处理器。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:51",
      "text": "但是你看一下，在苹果如果能够把其他厂商吹打成这样的话，那微软之后会不会也觉得就那干脆硬件上我就依然也我也是也来加入了苹果的这个APP生态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:02",
      "text": "对，反正我又不卖，我又不靠卖硬件赚钱，对吧？我就卖卖软件，然后我能够在这个MM1的麦克风跑，那何乐而不为呢？",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:11",
      "text": "对，是啊，也是有可能的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:13",
      "text": "这个事情是太crazy了，对吧？你就十年前你都不敢想象说为啥还要去给苹果适配一下系统。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:22",
      "text": "这是什么情况呢？说到十年前，这十年前那个windows sky这次又出来了，在苹果发布会上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:29",
      "text": "对，是那个PC versus mac那个广告里面那个PC吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:34",
      "text": "对，稍微有点发胖，但是还是风采不减当年。我有读过一个报道，就说这个广告里面两个人就是这个windows sky实际上是一个P是一个mac的铁粉。而那个mac guy实际上对电脑一窍不通。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:51",
      "text": "可能是个windows用户对吧？对，这个才是真的果粉，愿为了愿意支持这个解牺牲自己来来出演这个坏牺牲。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:02",
      "text": "自己的形象。好了，换取苹果的高大。",
      "speaker": "发言人3"
    },
    {
      "time": "01:51:05",
      "text": "那那也换取了一些美元，我觉得主要是美元比较像，那是可能的OK那好啊，今天我们就对苹果的M1芯片和OCSP的问题展开了深入而友好的讨论。也非常感谢亚晨来我们这个节目做客，感谢两位的邀请。我们这还有机会的话，亚晨也可以常来我们节目再聊聊其他的一些事情。我们可以比如说聊聊独立开发者，来聊设计之类的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:36",
      "text": "行，好的，还是感觉有很多蛋可以扯的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:51:39",
      "text": "对对对，好，我们今天的节目就先到这里了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:43",
      "text": "您刚刚收听到的节目是内核恐慌，一档尽量贴近计算机科技主题的娱乐podcast。我们号称硬核，但是也没有什么干货。想听听？不想听就别听我的网址是PAN dot ICU。您可以在网站上找到订阅我们的节目的方法，以及联络我们节目的方式。如果您期待我们更频繁的更新，欢迎您到案发类我们捐款，捐款地址可以在案发，可以在我们的网站上找到。先发电后催更，文明催更从你做起。如果您觉得意犹未尽，也欢迎您去收听real和黄海解释主持的节目，风投圈real和任宁主持的节目，提前怀旧，以及基本不由吴涛。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:22",
      "text": "主持自弹自唱拜拜。",
      "speaker": "发言人2"
    }
  ],
  "lab_info": {
    "summary": "本期播客深入探讨了计算机科技领域的几个关键话题。首先，讨论了内核恐慌的播客内容、同轴电缆在WiFi信号延伸中的应用以及M1芯片在苹果设备上的性能表现。通过分享使用同轴电缆来增强WiFi信号的方法，以及M1芯片带来的显著性能提升，播客提供了实用的技术见解。此外，强调了苹果在隐私保护措施上的努力，以增强用户数据安全。\n\n讨论进一步聚焦于M1芯片在Mac上的影响，如性能增强及电池寿命的改进，以及苹果如何应对OCSP问题导致的用户体验下降，包括DNS污染和服务器DoS攻击。OCSP机制引发的安全性和隐私问题促使苹果采取措施，改进OCSP请求的加密传输，并为用户提供更多的隐私保护选项。\n\n最后，播客触及了苹果对用户设备控制权的讨论，强调厂商在技术安全和隐私保护方面的责任，表明用户愿意为更高的安全保护和便利性支付更高价格，即便这可能意味着需要牺牲部分自主权。整个对话凸显了技术问题对用户生活的影响，以及在隐私与安全之间寻找平衡的复杂性。",
    "qa_pairs": [
      {
        "question": "上一期节目中提到的吟诗光猫案的后续进展如何？",
        "answer": "后续进展是找到了发出吟诗的源头，是上海贝尔阿尔卡特生产的光猫内部设备进行环路检测时产生的，但尚未找到具体是哪个公司或工程师写的代码，以及为何会生成这首诗。",
        "time": "00:00:33"
      },
      {
        "question": "关于用同轴电缆延长WiFi信号的问题，目前有什么结论？",
        "answer": "直接将用于电视的同轴电缆作为WiFi天线来延长信号是不可行的，因为两者电阻不匹配。不过有一种名为MOCA的设备可以转换并放大WiFi信号，通过两端接上转接器设备后，实现通过同轴电缆传输WiFi信号，这种解决方案在国外有售，但在国内较少见。",
        "time": "00:01:57"
      },
      {
        "question": "今天节目的主题是什么？",
        "answer": "今天的主题主要是关于苹果M1芯片的macbook，分享使用体验和感受。",
        "time": "00:04:44"
      },
      {
        "question": "亚晨先生能否简单介绍一下自己？",
        "answer": "亚晨是一位专职的iOS独立开发者，之前有过创业者身份，现在主要产品包括surge和air pass，同时也会参与一些客户项目的技术顾问工作。",
        "time": "00:05:42"
      },
      {
        "question": "这次苹果新品发布，亚晨先生有什么购买和使用体验可以分享吗？",
        "answer": "亚晨先生在发布当天购买了M1芯片的macbook，并分享了关于购买高配版以及颜色选择的一些情况，他还提到新款M1芯片电脑相较于英特尔版本是一个划时代意义的进步，实际使用感受非常兴奋，性能提升显著。",
        "time": "00:11:05"
      },
      {
        "question": "在大幅度提升性能的同时，这些产品是如何做到不发烫，尤其是风扇不怎么转或者根本没风扇的？",
        "answer": "这说明产品的能耗是低的。在电池不变的情况下，能耗降低会导致续航能力变长。例如macbook air款型，没有风扇却拥有出色的续航能力。",
        "time": "00:13:08"
      },
      {
        "question": "mac pro配备的风扇是什么作用？它是否一直在转？",
        "answer": "风扇以非常低的频率运转，基本感受不到它在转，但确实是在工作。它的存在可能是为了维持内部压力平衡和防止灰尘进入，而非主要负责散热。",
        "time": "00:13:32"
      },
      {
        "question": "M1芯片的macbook pro相比英特尔机器，在性能测试中的表现有何不同？",
        "answer": "在编译代码等测试过程中，英特尔机器的风扇会在短时间内达到满负荷运转，产生较大噪音；而M1芯片的macbook pro即使经过长时间测试，温度也几乎无明显提升，保持在室温状态，展现出了更优秀的热管理能力。",
        "time": "00:15:02"
      },
      {
        "question": "是否有关于macbook pro发热问题的历史背景和解决方案？",
        "answer": "前几代macbook pro在设计上曾遇到过因发热导致性能下降的问题，例如在使用时底部会变得很烫。而现在的外壳设计虽然更薄，但在充电时也可能出现局部发热现象。苹果将这个问题归咎于英特尔，并承认之前的产品在热能限制方面存在问题。",
        "time": "00:15:39"
      },
      {
        "question": "对于新款M1芯片的macbook pro，其GPU性能如何？",
        "answer": "新款M1芯片的集成显卡性能相比英特尔的CPU有显著提升，大约提升了3-3.5倍左右，但在视频编辑等特定任务中由于硬件优势，可能无法与专用显卡直接比较。",
        "time": "00:18:44"
      },
      {
        "question": "购买macbook pro而不是air的原因是什么？",
        "answer": "主要原因是想给touch bar一个机会，尽管之前曾遇到过功能键反应不灵敏等问题，但仍希望通过新款pro版本改善体验，并且新款air和pro在参数上差别不大，换新电脑时希望带来一些新的变化。",
        "time": "00:22:41"
      },
      {
        "question": "在旧版设备上，T2芯片的USB总线与CPU通信的可靠性是否存在问题？",
        "answer": "是的，从我观察到的情况来看，旧版设备上的T2芯片采用USB总线进行通信，这种USB总线的可靠性可能不够高，存在闪断的问题，这可能是导致touch 829出现死机或不灵现象的原因之一。",
        "time": "00:25:11"
      },
      {
        "question": "你是否想通过这次机会重新测试一下这个问题，看看是否与USB总线稳定性有关？",
        "answer": "是的，我确实想通过这次机会进一步验证USB总线稳定性对触控体验的影响，同时我也认为太极本身的实用性还是值得肯定的，尤其是将很多操作整合到键盘上，提升了操作直观性，但同时也带来了一些扣分项，比如用户无法盲打操作特定功能键，且可能存在误触的问题。",
        "time": "00:25:56"
      },
      {
        "question": "对于M1芯片的macbook pro和macbook air，它们在设计上有什么不同之处吗？",
        "answer": "这两款产品主要区别在于外形和重量上，内部配置如接口、屏幕、WiFi天线数量以及SSD、触摸板等都是一样的，给人感觉新款产品可能只是简单更换了主板，并未进行大的硬件改进。",
        "time": "00:27:46"
      },
      {
        "question": "对于M1芯片版本的Mac，开发者在使用过程中遇到了哪些问题？",
        "answer": "目前开发者在使用M1芯片版本的Mac时，遇到的主要问题是与英特尔版本兼容性相关的问题，尤其是当涉及到批处理脚本或本地编译代码运行时，由于模拟层的存在，会出现各种问题。不过，通过特定指令引导，可以在一定程度上解决这些问题。",
        "time": "00:34:23"
      },
      {
        "question": "在M1芯片上模拟运行X86指令集时，性能损耗有多大？在M1芯片上运行X86脚本或程序时，性能损耗具体体现在哪些方面？",
        "answer": "根据别人的评测结果，即使是在虚拟环境下运行的速度，都比在原来的英特尔机器上原生运行还快。这表明模拟层做得很好，兼容性得到了保证。对于UI程序而言，几乎感受不到性能差异，可能只是打开速度稍微慢了一点，但不确定这是心理作用还是实际的性能影响。不过，据评测结果显示，模拟运行的性能并未显著降低。",
        "time": "00:38:44"
      },
      {
        "question": "苹果M1芯片在硬件层面有哪些颠覆性的改变？",
        "answer": "M1芯片上的一些改变包括WiFi和蓝牙芯片不再由高通独立提供，而是集成在CPU中；FaceTime摄像头也从USB总线接入转变为直接与主芯片通讯；此外，新的M1设备在系统恢复时，需要通过连接另一台Mac进行刷机恢复，而非传统的恢复模式或重装系统。",
        "time": "00:41:29"
      },
      {
        "question": "开发者在将原生或模拟运行的软件迁移到M1芯片上时遇到了哪些问题？",
        "answer": "开发者表示迁移过程相对平滑，主要是对一些参数进行兼容性调整。部分老旧程序通过Rosetta 2虚拟化运行没有问题，而新的原生代码版本也已更新支持M1芯片。对于依赖库的软件，通过调整编译参数即可在M1上编译运行。整体来说，迁移成本较小，主要是针对不同架构下的兼容性小修小调。",
        "time": "00:44:06"
      },
      {
        "question": "在跨平台兼容性方面，苹果做了哪些努力？",
        "answer": "苹果在跨平台兼容性方面做得较好，例如在iOS app中可以利用mac系统的network extension接口进行网络扩展功能，而无需针对mac重新编写代码。同时，苹果还提供了通过Rosetta 2模拟运行叉86软件以及在mac上直接运行iOS软件库的解决方案，一定程度上降低了迁移成本并提供了更多的功能可能性。",
        "time": "00:48:50"
      },
      {
        "question": "对于开发者来说，现在是否存在普遍担忧iOS APP在mac上运行会带来收入减少或用户数下降的问题？",
        "answer": "目前开发者对此持较为乐观的态度，认为即使有用户在mac上使用iOS APP，也不会过分担心收入减少或用户数锐减。不过，如果不能解决付费或用户数量的问题，这个现象可能仍然难以避免。",
        "time": "00:52:51"
      },
      {
        "question": "对于开发者来说，如何看待和应对多平台软件之间的互相抢占市场和用户的情况？",
        "answer": "对于拥有跨平台软件的开发者来说，多平台意味着更多的市场和用户，是一个好消息。他们可能会通过简单的适配调整来低成本地支持macOS平台。",
        "time": "00:53:20"
      },
      {
        "question": "对于像Twitter这样的应用，其通过catalyst方式在mac上运行的情况有何看法？",
        "answer": "Twitter等应用通过catalyst方式在mac上运行时，这种方式不如直接在M1芯片的mac上运行原生iOS程序那样理想。catalyst需要开发者做一些操作，而直接运行iOS程序则更为方便快捷。",
        "time": "00:54:37"
      },
      {
        "question": "用户在使用Twitter官方客户端时，是否有遇到因跨平台移植导致的功能不全等问题？",
        "answer": "在跨平台移植过程中，Twitter官方客户端的一些功能并未得到完整呈现，例如在分享到Twitter时，网页版提供的便捷操作在跨平台后可能不如原生客户端。此外，由于API限制，第三方客户端如Twitter Boot在获取数据方面受到很大影响，用户体验不如原生客户端。",
        "time": "00:56:04"
      },
      {
        "question": "目前M1芯片的mac在性能、兼容性等方面表现如何？",
        "answer": "目前来看，M1芯片的mac在性能、原生性能、模拟性能以及兼容性方面表现整体较好，但还存在一些不尽人意的小问题。预计随着未来Mac的新一代处理器（如M2）推出，这些问题将得到解决，届时用户换新机时体验会更好。",
        "time": "00:57:08"
      },
      {
        "question": "使用英特尔macbook的用户是否觉得在电池状态下开盖后到解锁的过程非常痛苦？",
        "answer": "部分用户反映在电池状态下打开英特尔macbook的盖子后，从黑屏唤醒到桌面恢复正常状态的过程较为缓慢，存在卡顿现象。但也有部分用户并未遇到此类问题。这可能与系统的休眠和睡眠机制有关，以及内存镜像从SSD读回的速度等因素有关。",
        "time": "00:58:19"
      },
      {
        "question": "在M1 Macbook上，新的特性是否解决了之前存在的唤醒卡顿问题？",
        "answer": "是的，在M1 Macbook上，由于其CPU核会间断性地唤醒系统进行工作，类似iPhone 1的设计，所以不会出现大量任务堆叠导致的卡顿现象。",
        "time": "01:02:23"
      },
      {
        "question": "M1 Macbook Pro中关于power nap功能的情况是怎样的？power nap功能在M1芯片上的作用是什么？",
        "answer": "power nap是苹果为解决类似问题而引入的一个新特性，它允许Mac在待机或休眠状态下每隔一段时间唤醒并执行一些后台任务，如Time Machine备份、邮件检查等。但这需要相关应用支持合并timer的功能，以便在一次唤醒期间处理多个定时事件，以减少唤醒次数和能耗。对于M1芯片，由于它没有power nap功能，所以不需要合并timer，后台任务会一直运行，从而避免了开机后大量任务积压的问题。",
        "time": "01:03:11"
      },
      {
        "question": "power nap功能默认是否开启？对于电池供电的设备有何影响？",
        "answer": "power nap默认设置下是在电池模式下关闭的，用户需要手动开启。对于M1 Macbook来说，虽然默认取消了这个选项，但如果在电池模式下尝试开启，理论上可以缓解开机后因唤醒处理大量任务而造成的卡顿现象。",
        "time": "01:05:23"
      },
      {
        "question": "是否有遇到过笔记本在休眠状态下因某种原因导致电池电量耗尽的情况？",
        "answer": "是的，曾经遇到过笔记本在背包中因未夹紧导致盖子打开而不断唤醒消耗电量，最终造成电池电量完全耗尽的情况。",
        "time": "01:06:27"
      },
      {
        "question": "是否可以通过调整程序逻辑来延迟启动某些timer事件以解决开机卡顿问题？",
        "answer": "从架构上来说，强行调整程序逻辑可能会导致一些程序无法及时响应，甚至系统整体卡顿，因此这种方法并不容易实施。",
        "time": "01:07:57"
      },
      {
        "question": "关于Apple Watch解锁M1 Macbook Pro的问题，是否有可能是蓝牙通信的问题？",
        "answer": "是的，Apple Watch与M1 Macbook Pro之间的蓝牙通信可能存在可靠性问题，这可能导致手表无法成功解锁电脑。苹果可能需要通过改进蓝牙协议栈或采用更先进的技术（如超宽带U1芯片）来提升无线设备间的通讯质量与安全性。",
        "time": "01:11:29"
      },
      {
        "question": "OCSP（在线证书状态协议）是什么，它的主要用途是什么？",
        "answer": "OCSP是一种用来吊销证书的方式，它主要用于解决传统证书体系中证书泄露的问题。当证书被泄露或需要注销时，OCSP提供了一种实时查询机制，以确认证书是否仍处于有效状态，从而保障应用的安全性。",
        "time": "01:15:46"
      },
      {
        "question": "苹果采用数字签名和证书验证的原因是什么？",
        "answer": "数字签名和证书验证是一种安全机制，目的是防止恶意软件分发。要求开发者在分发软件时必须签名，这样可以追踪到开发者身份，并且只有经过苹果认证的证书才能被信任，增加了安全性和追溯性。",
        "time": "01:19:06"
      },
      {
        "question": "为什么在新版本的macOS系统中，大量用户通过OCSP查询应用证书导致苹果的OCSP服务器被 DOS攻击？",
        "answer": "这是因为新系统在启动时要求对每个应用程序的证书进行验证，这导致了大规模的OCSP查询。原本设计是为了确保应用安全，但在此场景下却造成了服务器压力过大，最终引发拒绝服务攻击，影响了所有mac程序的启动。",
        "time": "01:18:21"
      },
      {
        "question": "在证书基础上再做OCSP的原因是什么？",
        "answer": "OCSP的存在是为了即使苹果发给开发者一个可信的证书，也能防范开发者可能利用该证书分发恶意软件或者在一段时间后启用隐藏的恶意功能。通过OCSP，苹果可以随时“禁止”已知有问题的应用在苹果设备上运行，作为一种动态的安全补救措施。",
        "time": "01:20:48"
      },
      {
        "question": "如果电脑在无联网状态下，OCSP验证会如何进行？",
        "answer": "在无联网状态下，OCSP验证将直接失败，但这不会影响已启动的应用程序运行，因为系统有网络请求失败的重试机制，通常会自动重试几次后不再阻塞程序启动。",
        "time": "01:22:56"
      },
      {
        "question": "CSP请求是否会直接发到开发者那里？",
        "answer": "不是直接发给开发者，而是发送到证书的颁发者那里查询。",
        "time": "01:26:57"
      },
      {
        "question": "如何从技术上解决OCSP请求的隐私泄露问题？",
        "answer": "可以通过异步方式将OCSP检查与APP启动解耦合，即使OCSP检查失败，也不应阻塞应用启动；同时，探讨是否可以通过加密协议来传输OCSP请求，或者即使明文传输，也能确保不泄露用户使用的具体证书或APP信息。",
        "time": "01:31:23"
      },
      {
        "question": "对于OCSP检查过程中存在的一些侵犯隐私问题，能否具体说明？",
        "answer": "当前的OCSP请求是通过明文HTTP发送的，而非加密传输，这违背了互联网信息传输应尽可能加密的原则。此外，在明文的OCSP请求中还包含了要检查的APP的哈希值，如果存在证书与APP之间的彩虹表，攻击者可以据此精确定位到用户正在使用的特定软件。",
        "time": "01:27:17"
      },
      {
        "question": "苹果针对此问题是否有官方回应或解决方案？",
        "answer": "苹果在支持文档中提到了将在未来增加加密协议传输OCSP请求、增强服务端不可用情况下的保护措施，并给用户选项以选择是否开启这些安全保护措施。",
        "time": "01:30:12"
      },
      {
        "question": "是否可以将OCSP验证逻辑转移到本地执行？",
        "answer": "可以考虑将OCSP验证逻辑转移到本地，在macOS中维护一套从根证书到每个APP的证书验证链，并定期更新，但这种方法面临列表大小的限制。在iOS上，由于企业证书滥用等情况，吊销证书的情况较为常见，因此需要仔细考虑证书体系在应用包检查中的细节问题。",
        "time": "01:34:54"
      },
      {
        "question": "是否可以简单地将OCSP请求强制通过HTTPS访问以解决隐私问题？",
        "answer": "理论上，通过强制通过HTTPS访问OCSP服务可以解决隐私问题，但实际上这可能影响系统架构，因为现有的系统设计可能无法支持这样的更改。如果要改，建议从头开始设计一套既能保证隐私又安全稳定的解决方案。",
        "time": "01:37:33"
      },
      {
        "question": "这个证书机制是怎样的，它如何确保应用的安全性？",
        "answer": "这个证书机制是持续存在的，每次启用超雄启动程序时都会检查证书的有效性，并通过CSP动态吊销无效证书。这个机制主要针对每个应用包，在苹果服务器上进行hash和安全性检查后生成有效签名（TK），随应用包下发给用户。用户安装时会检查TK的有效性，进行本地静态检查以及与服务器验证，只有有效才允许应用运行。",
        "time": "01:38:51"
      },
      {
        "question": "notarization服务的作用是什么？",
        "answer": "notarization服务主要用于针对单个应用程序的验证，它检查恶意软件并确保开发者提交的应用满足系统安全特性要求。同时，即使某个版本出现恶意软件或严重漏洞，也不必吊销整个开发者证书，只需针对有问题的版本采取措施。",
        "time": "01:39:35"
      },
      {
        "question": "notarization机制解决了哪些问题？",
        "answer": "notarization机制一方面促使开发者主动采用新的安全特性以通过验证；另一方面，在发现某个版本存在问题时，可以单独处理而不影响整个证书，降低对用户的影响。此外，对于不在mac App Store发布、而通过其他途径分发的应用，notarization可以强制开发者上传文件以便存档和比对，便于追踪问题影响范围。",
        "time": "01:41:58"
      },
      {
        "question": "目前mac上的安全性情况如何？",
        "answer": "目前mac上的安全性相对有保障，得益于双重保护机制，即使是在用户开发者账号层面和单个应用层面都有防护措施。但同时指出，在安全素养方面仍有待提高，苹果作为业界先锋，在倒逼开发者提高安全性方面做得很好。",
        "time": "01:42:45"
      },
      {
        "question": "对于“your computer isn't yours”这种观点，您怎么看？",
        "answer": "虽然从技术角度看，用户可能觉得自己的设备应由自己完全控制，但实际中，无论是汽车还是电子产品，厂商往往对设备的修改有制约作用。用户在追求个性化和便利性时，往往需要牺牲一些自主权，而选择相信厂商提供的安全服务。苹果通过严格的安全措施和公正机制，在保障用户设备安全上做出了较大的努力和牺牲。",
        "time": "01:47:35"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "内核恐慌：吟诗光猫之谜告破一半",
        "summary": "在最近的一期节目中，我们对之前提及的吟诗光猫事件进行了跟进。经过与光猫制造商的朋友交流后，确认了那首诗确实是从光猫设备中发出的，而不是外部设备或局域网内的其他设备。通过测试环境的验证，发现产生那首诗的选项与环路检测有关，证实了之前的猜测。然而，仍然未知的是这首诗是由谁编写，以及为什么选择这首诗。此外，光猫型号由上海贝尔阿尔卡特生产，但具体是哪方工程师所为，目前尚无从知晓。这表明问题已告破一半，找到了问题的源头和其功能，但作者及其动机仍然成谜。"
      },
      {
        "time": "00:01:57",
        "title": "探讨使用同轴电缆延长WiFi信号的可行性",
        "summary": "对话集中在讨论是否可以利用家庭中用于电视的同轴电缆来延长WiFi信号的距离。提出两种观点：直接使用同轴电缆不行，因为电阻不匹配（同轴电缆为75欧姆，WiFi天线馈线为50欧姆）；存在一种设备可通过转换解决电阻不匹配问题，但这类设备价格较高且在国内电商平台上难以找到。特别提到了一种解决方案，即使用MOCA设备或WiFi over Coax技术来实现WiFi信号的延长。有听众分享，使用这种方法能够有效延长WiFi信号，达到千兆速度。此外，还提到了一种简单的网线转换方法，虽然技术上简单，但同样有效。"
      },
      {
        "time": "00:04:43",
        "title": "Surge作者刘亚晨做客，分享独立开发之路",
        "summary": "本期节目特别邀请到老朋友，Surge网络开发调试工具的作者刘亚晨。他分享了自己从创业者到成为一名专职的iOS独立开发者的心路历程，以及当前主要负责的产品Surge和Air Pass。此外，他还参与了一些客户的项目作为技术顾问。"
      },
      {
        "time": "00:06:20",
        "title": "M1芯片MacBook的实际使用体验",
        "summary": "在讨论中，一位购买了M1芯片MacBook的用户分享了他对于这款设备的购买经历和使用感受。他提到了为了得到16G内存的高配版本，他选择了实体店购买而非等待线上定制的订单。讨论还涉及了苹果店对于高配版本的库存情况，以及颜色和SSD配置的选择限制。用户实际使用下来的感受与媒体测评基本一致，体现了M1芯片MacBook在性能上的优秀表现。"
      },
      {
        "time": "00:10:17",
        "title": "苹果ARM芯片（A系列）的性能与效率体验",
        "summary": "苹果的ARM芯片（A系列），特别是A12Z在iPad中使用，为MacBook等设备提供了更优化的基础。开发者通过使用DTK（开发者过渡套件）体验了ARM芯片的潜力，指出其不仅性能强大，而且在低功耗设计上具有显著优势。与英特尔处理器相比，ARM芯片在性能、发热控制和续航能力方面均有显著提升，特别是在MacBook Air和MacBook Pro上的表现。开发者还提到，尽管存在NDA（保密协议）限制，但对苹果ARM芯片的初步体验非常积极，认为其可能是具有划时代意义的产品进步，对英特尔构成了巨大挑战。"
      },
      {
        "time": "00:15:39",
        "title": "苹果设备散热问题及英特尔责任探讨",
        "summary": "对话涉及了苹果设备，尤其是Macbook和Mac Pro，在设计和散热方面遇到的问题，以及这些问题如何被归咎于英特尔。讨论包括Macbook改用更薄外壳和Type-C接口后散热问题加剧，以及Mac Pro因散热限制导致的设计挑战。同时，提到了苹果通过M1芯片在性能上对英特尔的超越，暗示未来苹果可能减少对外部供应商如英特尔的依赖。"
      },
      {
        "time": "00:19:10",
        "title": "M1芯片性能讨论及与旧型号比较",
        "summary": "讨论集中在M1芯片的图形性能上，虽然发言者没有亲自测试，但他注意到很多视频博主在进行视频编辑时测试了M1的性能。特别提到了M1芯片拥有H265硬解码，使得一些性能评测看起来不太公平。此外，通过比较M1设备与旧款MacBook Air的编译时间，展示了M1在性能上的显著提升。"
      },
      {
        "time": "00:22:17",
        "title": "选择MacBook Pro而非Air的理由探讨",
        "summary": "在选择MacBook Pro而非Air时，尽管从参数上看两者差别不大，屏幕技术和质量几乎相同，选择Pro主要是对Touch Bar功能的再评估。先前使用的MacBook Pro缺少独立物理Escape键，导致使用不便，因此希望给Pro和Touch Bar功能再次机会。Touch Bar的实用性受到质疑，虽然设计上提高了操作的直观性，但实际使用中存在误触和盲打不便的问题。尽管存在这些问题，购买者仍愿意再次尝试，期待苹果能改进这一设计。"
      },
      {
        "time": "00:27:44",
        "title": "M1芯片MacBook Pro/Air的评估及期待",
        "summary": "讨论集中在新推出的M1芯片MacBook Pro和MacBook Air上，主要关注点是Touch功能的稳定性问题，怀疑这可能与Bridge OS和USB的不稳定性有关。此外，讨论也触及了这些新设备与英特尔版本相比，除了外形和重量外几乎没有其他显著变化，暗示苹果可能只是进行了简单的硬件更新而没有进行重大设计改进。特别提到了Mac mini，在内部设计上似乎没有充分利用空间，暗示未来可能有更小或更强大的版本。最后，提到了对开发者工具套件（DDK）的处理方式以及苹果过去的迁移政策，表达了对苹果未来产品更新的期待。"
      },
      {
        "time": "00:30:55",
        "title": "苹果开发者支持及M1芯片的日常使用体验",
        "summary": "讨论集中在苹果向开发者提供的硬件支持变化，以及M1芯片在日常和工作中的使用体验。随着开发者数量的增加，苹果可能不再提供昂贵的iMac，而是选择更经济的Mac mini作为支持。M1 Mac mini被认为是物有所值的选择，考虑到苹果的利润率，为开发者提供可能是可行的。此外，还探讨了M1设备在软件兼容性方面的问题，特别是对于非苹果原生工具和脚本编译的挑战，但提出了解决方案，例如使用Rosetta 2模拟层来运行英特尔版本的应用程序。讨论还涵盖了未来可能的硬件升级，如等待M2芯片的发布来进一步改善工作开发环境。"
      },
      {
        "time": "00:37:54",
        "title": "M1芯片与Rosetta 2的性能和兼容性讨论",
        "summary": "讨论集中在M1芯片通过Rosetta 2模拟运行x86应用的性能和兼容性。虽然存在一些内存占用较大的问题，但整体上，Rosetta 2的模拟层提供了良好的兼容性，使得大多数脚本和程序能在没有明显性能损耗的情况下运行。特别地，M1芯片在模拟运行x86指令时，性能甚至优于原生x86机器，这主要归功于M1的显著性能提升。此外，讨论还涉及了M1设备在WiFi和蓝牙芯片集成、摄像头接口变化以及系统恢复过程等方面的创新。开发者们普遍对M1和Rosetta 2的迁移过程表示满意，因为它们极大地简化了开发和兼容性测试的工作。总体来说，M1芯片和Rosetta 2在推动苹果生态系统的软件兼容性和性能提升方面，展现出了巨大的潜力和进步。"
      },
      {
        "time": "00:46:24",
        "title": "探讨iOS和macOS系统扩展的兼容性",
        "summary": "对话集中在讨论iOS和macOS在系统扩展方面的兼容性。指出许多扩展接口在iOS和macOS上是完全相同的，这使得从iOS到macOS的迁移成本相对较小。此外，讨论了苹果公司在推动跨平台兼容性方面所做的努力，包括在macOS上运行iOS应用时进行设备信息的虚拟化处理，以及对M1芯片设备上运行x86软件的担忧。"
      },
      {
        "time": "00:48:50",
        "title": "探讨iOS应用在Mac上运行的利弊及开发策略",
        "summary": "当前通过技术手段让iOS应用在Mac上运行成为可能，这种做法极大地拓展了应用的使用场景，使得开发者能够以较低的成本覆盖更广泛的用户群体。然而，这也带来了产品布局和定价策略上的挑战，特别是对于那些已经为不同平台分别开发应用的开发者。他们需要考虑如何处理iOS版和Mac版应用之间的差异，以及这种技术是否会导致用户分流，影响到原本的收入模式。此外，虽然技术上可以让iOS应用在Mac上运行，但是否能真正提升用户体验，以及开发者是否有动力为此进行优化，仍然是个问题。对于那些没有Mac版本应用的开发者来说，这可能是扩展用户基础的好机会，但是否值得为此进行额外的开发投入，则需要仔细权衡。"
      },
      {
        "time": "00:53:57",
        "title": "对Twitter客户端及M1 Mac的体验与期待",
        "summary": "讨论主要集中在对Twitter官方客户端的不满，特别是其通过Catalyst在Mac上运行iOS应用的方式，以及与M1芯片Mac的兼容性和性能表现。表达了对客户端体验的失望，以及对M1 Mac在未来更新和兼容性改善的期待。同时，也提到了第三方客户端受限于Twitter API的问题，和对Mac未来版本，可能是M2芯片的Mac，在外形设计和兼容性问题解决后的期待。"
      },
      {
        "time": "00:57:47",
        "title": "MacBook电池状态下唤醒体验讨论",
        "summary": "讨论集中在使用英特尔MacBook时遇到的问题，特别是在电池供电状态下，从开盖到解锁的过程中的延迟和卡顿。一部分用户经历长时间的黑屏和UI卡住，而输入密码无响应，进一步导致桌面加载缓慢。虽然有一部分用户没有遇到这些问题，但普遍认为这与MacBook的睡眠与休眠机制有关。此外，探讨了新旧MacBook在处理后台任务和唤醒状态上的差异，指出M1芯片MacBook由于后台任务的持续处理，减少了唤醒时的延迟和卡顿现象。"
      },
      {
        "time": "01:02:51",
        "title": "探讨MacBook Pro上Power Nap功能及其影响",
        "summary": "对话者讨论了MacBook Pro中Power Nap功能的取消及其对设备性能和电池续航的影响。Power Nap允许设备在待机或休眠状态下执行某些任务，如Time Machine备份和邮件检查，但仅限于苹果第一方应用，并要求应用支持timer合并。在M1芯片的MacBook上，由于其架构，Power Nap功能被取消，因为M1能够更高效地处理后台任务，从而减少了对这一功能的需求。此外，还讨论了英特尔版MacBook可能存在的一些问题，比如电池快速耗尽的情况，并猜测这可能是由于程序阻止休眠或系统bug引起的。最后，对话触及了使用Apple Watch解锁MacBook的可能性和日常穿戴Apple Watch的习惯。"
      },
      {
        "time": "01:09:34",
        "title": "苹果设备连接问题及未来技术展望",
        "summary": "讨论者分享了关于Apple Watch解锁iPhone或Mac时遇到的连接问题，特别是当两个设备不在同一2.4G蓝牙环境下时。尽管第五代Apple Watch在测试时解锁成功率高达99%，日常使用中仍面临挑战。讨论转向了蓝牙协议栈的问题，以及苹果可能从M2芯片开始通过U1芯片的超宽带技术来改善设备间的通讯可靠性与安全性，从而提供更顺畅的用户体验。此外，U1芯片不仅能增强方向性通讯，还可能提高数据传输效率，为未来苹果设备间的连接提供更好的解决方案。"
      },
      {
        "time": "01:15:00",
        "title": "苹果新系统导致OCSP服务器压力剧增问题探讨",
        "summary": "在讨论中，首先对苹果硬件进行了表扬，随后转向讨论一个技术问题，即OCSP（在线证书状态协议）在苹果新系统macOS Big Sur 11版本中引发的问题。OCSP原本用于吊销证书，确保应用和网站的安全性，但新系统的大规模使用导致苹果OCSP服务器承受巨大压力，影响了Mac程序的正常启动。讨论还涉及了苹果为保障应用安全，要求开发者对软件进行数字签名，并通过OCSP检查证书的有效性，防止恶意软件分发。同时，指出了OCSP检查并非每次应用启动时都执行，存在一定的缓存机制。"
      },
      {
        "time": "01:22:56",
        "title": "OCSP协议问题及其对用户影响",
        "summary": "OCSP协议在设计上存在问题，导致在电脑未联网或网络连接失败的情况下，虽然理论上无法解决某些问题，但实际中，系统会尝试五次连接后便放弃，允许程序继续运行。然而，由于服务器可能因DDoS攻击等原因响应缓慢，导致长时间等待，影响用户体验。对话指出，如果服务器直接返回失败，或者在设计时加入超时机制，便可以缓解此类问题。此外，还提出了OCSP检查与应用程序启动不应相互依赖的解决方案，以改善用户体验。"
      },
      {
        "time": "01:26:27",
        "title": "OCSP请求中的隐私泄露问题",
        "summary": "讨论集中在OCSP（在线证书状态协议）请求如何在一定程度上泄露用户隐私。主要问题包括：OCSP请求通过HTTP明文发送，未使用更安全的HTTPS协议，这违背了互联网信息传输应尽可能加密的主流做法；请求中包含了证书的序列号（SN），如果被中间人截获，可能允许精确识别出用户正在使用哪个具体应用，尤其是对于那些仅开发一个应用的中小开发者来说。这种隐私泄露风险引起了对隐私保护的批评。"
      },
      {
        "time": "01:29:35",
        "title": "苹果对OCSP检查的回应及隐私保护措施",
        "summary": "苹果在一篇博客中解释了底层原理并针对隐私保护提出了具体措施，包括加密OCSP请求传输、增强保护措施以防服务端不可用导致应用启动失败，以及提供用户选择是否开启安全保护措施。苹果的回应包括在mac上的“safely open apps”配置中加入隐私保护部分，并承诺明年增加相关变化。讨论还涉及了将OCSP检查和应用启动过程分离、通过加密协议传输OCSP请求以及定期更新本地证书验证链等技术细节，旨在解决隐私泄露问题，并提出了苹果在处理应用包检查时可能的改进方向。"
      },
      {
        "time": "01:36:18",
        "title": "苹果安全机制讨论",
        "summary": "讨论重点在于苹果系统中的OCSP（在线证书状态协议）机制如何通过HTTPS访问apple.com以增强隐私保护，避免中间人攻击，以及系统架构可能存在的问题。提出需重新设计一套非依赖于现有HTTPS证书体系的安全机制，同时讨论了苹果如何通过notarization服务对应用进行安全检查，确保应用符合最新的安全要求。此外，还探讨了苹果在推动开发者提升应用安全方面的做法，以及与其他平台（如Windows）在安全性上的对比。"
      },
      {
        "time": "01:44:32",
        "title": "探讨苹果设备的隐私、控制权及安全问题",
        "summary": "对话中讨论了两个主要方面：首先是苹果设备的隐私问题，其次是对用户是否完全控制自己的设备的疑虑。虽然技术精英圈子里的人可能更注重安全和控制权，但普通用户可能缺乏辨别这些细节的能力，因此信任可信赖的厂商变得尤为重要。讨论还提到了设备的修理权利（Right to Repair）问题，以及厂商在安全和用户自主权之间需要找到平衡点。此外，还探讨了如果苹果设备开放更多接口或允许底层修改，用户可能面临的安全风险。最后，讨论了对于大多数人来说，愿意牺牲一些控制权以换取厂商提供的安全保障和便利性。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "极大提升，超越英特尔"
                },
                {
                  "children": [],
                  "content": "效能比预期高，功耗低"
                },
                {
                  "children": [],
                  "content": "对开发环境和日常使用影响积极"
                }
              ],
              "content": "性能"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "通过Rosetta 2模拟运行x86应用"
                },
                {
                  "children": [],
                  "content": "大部分软件兼容性良好"
                },
                {
                  "children": [],
                  "content": "部分复杂脚本可能存在问题"
                }
              ],
              "content": "兼容性"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "启动速度和电池续航显著改善"
                },
                {
                  "children": [],
                  "content": "遇到的问题：少数应用兼容性问题，可通过Rosetta 2解决"
                },
                {
                  "children": [],
                  "content": "对开发者的建议：尽快适配M1芯片，利用其性能优势"
                }
              ],
              "content": "设备使用体验"
            }
          ],
          "content": "苹果M1芯片讨论"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "用于验证证书有效性"
                },
                {
                  "children": [],
                  "content": "存在隐私泄露和性能问题"
                }
              ],
              "content": "OCSP简介"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "加密OCSP请求"
                },
                {
                  "children": [],
                  "content": "提供更严格的保护措施"
                },
                {
                  "children": [],
                  "content": "用户可选择放弃保护，以保护隐私"
                }
              ],
              "content": "苹果解决方案"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "对苹果的隐私保护措施表示担忧"
                },
                {
                  "children": [],
                  "content": "呼吁苹果改进OCSP实现，保护用户隐私"
                }
              ],
              "content": "社区反馈"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "分离OCSP检查与应用启动"
                },
                {
                  "children": [],
                  "content": "加密OCSP请求，减少隐私泄露风险"
                },
                {
                  "children": [],
                  "content": "定期更新证书状态，减少网络请求"
                }
              ],
              "content": "建议和改进"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "苹果在安全和隐私保护方面领先"
                },
                {
                  "children": [],
                  "content": "用户需要权衡便利性和安全性"
                },
                {
                  "children": [],
                  "content": "鼓励开发者提高应用的安全标准"
                }
              ],
              "content": "苹果生态系统的安全性和隐私保护"
            }
          ],
          "content": "OCSP问题讨论"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "M1芯片的普及和优化"
                },
                {
                  "children": [],
                  "content": "对开发者和用户的长远影响"
                }
              ],
              "content": "苹果生态系统的持续发展"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "如何在提升安全性的同时保护用户隐私"
                },
                {
                  "children": [],
                  "content": "苹果和其他科技公司在安全和隐私保护方面的责任和义务"
                }
              ],
              "content": "安全和隐私保护的挑战"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "M1芯片对Windows和Linux平台的潜在影响"
                },
                {
                  "children": [],
                  "content": "苹果和其他厂商在软硬件兼容性方面的合作机会"
                }
              ],
              "content": "对其他操作系统和硬件平台的影响"
            }
          ],
          "content": "未来展望"
        }
      ],
      "content": "5ff20c7ddee9c1e16d60529f"
    }
  }
}