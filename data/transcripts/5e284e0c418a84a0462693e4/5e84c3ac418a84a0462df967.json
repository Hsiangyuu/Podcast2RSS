{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df967",
  "title": "24. XcodeGhost",
  "task_id": "4l6xqav7omgpqm2y",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "欢迎收听IPN podcast网络旗下的埃踢技术主题娱乐节目内核恐慌我们又回来了。我们号称hot call，但是没有干货，想听的人听，不想听的就别听。本节目的网址是IPN dot LS flash chrono panic。我们推荐大家使用podcast客户端订阅节目，详情请访问IPN dot IOS flash FAQ。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:19",
      "text": "欢迎你为本节目捐款，捐款地址是IPN dot IOS flash cho panic slash donate，捐款金额随意，只要是八的正整数倍就可以了。捐款不会为你带来什么，不捐也不会让你失去什么。我们的口号是trust，no one even有compiled。好久没有念这句话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:40",
      "text": "还可以，挺流畅的。所以你一个月玩的可好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:45",
      "text": "还不错。带着爸爸妈妈去了以前我学习过、生活过、工作过、战斗过的地方，然后去了些我觉得怎么说呢？德语区还比较满，还比较漂亮的一些地方，没有去更远的地方OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:05",
      "text": "所以这算是什么重走长征路。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:09",
      "text": "就是因为过去的这我在德国有九年了，然后过去九年里面一般都是他们只能从电话或者是照片里面知道我曾经在什么地方待过。然后这次可以身临其境的看一看，我觉得还是挺有意义。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:26",
      "text": "他们过去从来没去过是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:28",
      "text": "对，这是第一次来，甚至之前二老连护照都没有，所以这是第一次出国。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:34",
      "text": "你也是不孝子孙。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:37",
      "text": "所以令尊令还是去过加拿大。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:39",
      "text": "其实也并没有，那他们也没有护照，不过他们有有比较忙，所以也不太可能走得开。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:48",
      "text": "现在我父母也是其实刚刚才退休，所以也是刚刚闲下来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:56",
      "text": "哼这个挺好的。上次因为你家在天津，所以还是要关心一下那个爆炸对你家影响怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:05",
      "text": "我们家距离爆炸现场的直线距离是三十多公里，所以算是幸免于难。但如果和其他各位比起来的话，还是比较近的。然后之前也是比较担心说如果有可以泄露的毒害物质在外面，要不要考虑先去。因为我们家是浙江人，就是要不要先回老家避一避风头。所以但目前看来还好。然后我爸妈又特别，我也不知道他们两个都是化工，所以不把这个当事儿，总觉得无所谓。那那暂时也没有什么特别的影响。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:48",
      "text": "所以这个时候你需要特别需要伞公司的保护。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:53",
      "text": "Umbra你说对，就是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:56",
      "text": "what's.",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:58",
      "text": "浣熊镇？",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:59",
      "text": "Preserving the heart of .",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:02",
      "text": "the people .",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:03",
      "text": "OK umbras moto, 那个也可以，这个是一个什么？前面那个伞公司是那个生化危机的梗。对，反正那个还挺挺奇怪的。因为我现在深圳，我经常在路上，我今天看到两次了，那别人在那个车上贴的伞公司的那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:28",
      "text": "标识那些这是某种coat，就是邪教。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:34",
      "text": "就我还我还我还挺挺吃惊的说疑这个还有真爱遍地有人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:40",
      "text": "在搞这个梗是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:43",
      "text": "没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:44",
      "text": "回头我去贴一个回去我去贴一个up science的。在车厢后其实是个蛮好的点子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:52",
      "text": "可以买得到，你可以直接把它贴在车上就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:55",
      "text": "对，而且wow好像还有T恤之类的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:59",
      "text": "全套主题都有是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:01",
      "text": "对，不对，是drink dot com在卖那个porto相关的主题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:07",
      "text": "这就是你之前买的那个那个那叫。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:09",
      "text": "什么贴笔记。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:12",
      "text": "那个东西有学名吗？就是贴那个笔记本电脑背壳那表面那个纸就是sticker，那个就叫sticker.",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:21",
      "text": "没有什么其他的，没有什么特别的。因为能贴笔记本电脑的表面还可以贴别的，就也可以贴别的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:29",
      "text": "没有，因为之前苹果出过一个系列广告片儿。一个广告片就是他的那个macbook air上面就是贴了一大堆speaker，一大堆这个，然后他每一个做了一个这个叫什么？这叫slow motion，也不叫slow，这个叫什么来着？一个专门的术语，这种拍法。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:46",
      "text": "粘土动画对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:48",
      "text": "粘土动画就是他每一张拍一个，然后做成一帧1帧，然后串起来播着对还挺有意思。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:54",
      "text": "我看过。对，但是苹果官网不卖sticker，真的太贵了。我今天看了那一周，我好想买。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:05",
      "text": "不过我觉得这个是迟迟早的事，他们都已经卖就做手机壳了，下一步不就是sticker了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:12",
      "text": "这个很难说。我觉得其实一般公司是不太愿意让的sticker去修改自己的logo了。就好像哼那个提供改装车选项的车厂，不会让你把它的logo弄成别的颜色一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:29",
      "text": "他他这个sticker还不算修改，他只是说就在那个边缘做一些发挥了发散。比如说我的特别印象是一个钢铁侠的手上不是有个亮灯的喷东西的那个东西吗？胸前对他就是直接把它装到用苹果那个那个图标。他在这个macbook pro它是可以发光的。对还挺有意思的。不过现在新出的那个macbook 12寸的就没戏了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:56",
      "text": "为什么太小了，不发光？真的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:59",
      "text": "这还蛮遗憾的。对，好吧，我们做一下上一期，也就是差不多一个多月以前的follow up。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:08",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:10",
      "text": "当时说什么来着好久了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:12",
      "text": "我又不记得上一期说过什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:14",
      "text": "怎么觉得对我也忘了说什么，我把note写在那里，但是我已经想不起来是怎么一回事了。他就提到这么一个概念，我想起当时说是一个什么禁止开发，就是应该是叫做应该应用叫做clean room对的方法，就是他们的房子里面，当时我记得莫名其妙说说成了这个y box。对，后来想想应该是和那个black box混在一起。对比较久。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:43",
      "text": "Anyway小口误无所谓。哼然后有几位热心听众给我们写来了来信，然后。择其中几段念一下。首先要给一位不愿透露彭姓名的朋友道个歉。就是有一次我们尼亚斯的信，虽然他写信强烈要求不要念，但我们还是念了。然后某种意义上讲，我们侵犯叫什么著作权法是吧？在这边给你道个歉，非常刺激。不过我觉得还那封信写的还是蛮好的，不念真的挺可惜的这就是一个借口。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:24",
      "text": "所以你去知乎上那个问题下面自己负荆请罪。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:30",
      "text": "我已经答了，我觉得。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:32",
      "text": "就是他问的OK好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:35",
      "text": "OK。然后上一期节目之后，有一位读者写信来说，这期节目还是老样子，软就软。刚刚说到一点让我心动的内容就戛然而止了。看来中老年程序员是得认真关注一下自己的前列腺问题了。这内容便是吴涛说的中老年程序员工作了五六年时所处的境地。我个人就处在这样一个境遇里，积累不好，很难有突破，又不想转管理，不上不下。Real又说要可能要告别专业程序了，更是让我内心难以平静。这样的桑苏，都觉得自己距离大牛太遥远，是自取其辱，我等鼠辈还怎么苟活下去？祝两位一切顺利，吴涛有一个好假期。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:21",
      "text": "桑苏。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:23",
      "text": "啊桑苏轼，我想想，如果没理解错的话，指的是非常有成就的人物，而是我们。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:32",
      "text": "说你确切的说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:35",
      "text": "天哪江苏这是什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:38",
      "text": "语言线？",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:40",
      "text": "好像这难道是什么这个古文里的梗吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:48",
      "text": "又又凸显我们暴露自己没有文化怎么办？",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:54",
      "text": "不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:55",
      "text": "没有了还没有了，反正这个我觉得就对自己的资质有一个正确的认识。我觉得但是我觉得这个世界也不一定非要大牛才需要那个，不然正常人的生活该怎么过？",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:10",
      "text": "这就好像那本叫什么rework，讲那个start up的书，或者以至于说你是在讲什么，讲工作方法的书里面提到说你不一定要成为一个了不起的企业才算成功。如果你能成立一个小的能够自己维持下去并且活得很好的小额公司，同样是一种成功。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:33",
      "text": "对对对，这刚好前面有一个就前几天那个backboard的博客发了篇文章，叫做好像don't build a billion dollar company还是什么来的backboard。就是现在我在用的一个备份软件中强集团在给我打广告。就是他的那个客户端写的非常不错，然后也很便宜。然后他就说其实因为现在很多这个风投模式，就是说你一定要成为一个the next big thing，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:03",
      "text": "你一定要成为unique的对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:05",
      "text": "不然就没有意思。但是从风险投资的角度来说确实是这样子的。但是你可以考虑去开一个叫lifestyle business，就是不一定要拿风投的钱，然后只要能够营收平衡，做一个简简单单的这个生意其实也是可以的。作为一个职业或者人生的选择，就不是一定要奔着什么市值10亿、100亿、1000亿美元的公司去。这种情况。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:33",
      "text": "是话是这样说吧，就是我们当然永远可以说在这个世俗的衡量成功的观念里面，你只有做到最大最强才是最成功的。但同与此同时，其实你做一个能够自谋其利的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:52",
      "text": "这个是自食其力。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:54",
      "text": "的自谋职业。好像也不错。对，但是我觉得在程序员这个群里面，可能因为普遍来说都不会太笨。因为对智商是一个做写程序的门槛儿，对吧？那可能在聪明人里面会更有这样一种追求，追求去去试着要追寻，让自己的事业变得最了不起，或者是非大公司不进，或者是非大的这种点子不去想的一种倾向，这种倾向是切实存在的。我觉得。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:34",
      "text": "据说这是雄性荷尔蒙分泌过剩的结果。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:40",
      "text": "也就是说如果我们找一个因为某种原因失去了这个激素分泌器官，这个程序员他就不会有这样的倾向，是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:53",
      "text": "这很难说，这只是一个说法，我觉得也很难去去去证明他了。但是我觉得就好像不是所有的成功都是一定要什么所谓出人头地，你能有一份安稳的生活，开心的工作。然后这个小宝宝叫worklife baLance，就生活工作平衡都都很好。其实我觉得也是一种选择，就不一定真的要像那个说的一样，要成为在某一个领域或者是在某一个人生阶段令人望其项背的大牛。其实这也不是大多数人的选择，我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:26",
      "text": "我觉得可能成为大牛更多的是凭借天赋以及努力。如果你真的能够成为大牛的话，你就不会去费力想要成为大牛。而如果你不能成为大牛的话，那就不如就接受自己的命运。那有什么办法？就是好像颜值一样，颜值就是没有别人高，你又能有什么办法呢？而且这世界上有整容手术，但没有智商提高手术。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:56",
      "text": "不过也不一定，据说有一些叫做一些药物可以提高智商。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:02",
      "text": "据说你是刺激脑细胞发展吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:05",
      "text": "还是the smart drug这之类的东西，但我不知道这个靠谱程度怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:12",
      "text": "就是代考OK节目录完了，你告诉我哪里麦。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:15",
      "text": "那你就不用了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:19",
      "text": "所以real现在不仅仅是可能要告别专业程序员了。穆real目前已经真的告别专业程序员，莫real迎来了他人生中的另一个新的阶段。那么你要不要谈一谈感想？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:34",
      "text": "我就想说每个行业都不容易。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:38",
      "text": "就这么简单吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:39",
      "text": "没有别的吗？没有了，因为也跟刚刚开始做，还是有一个我还有一个学习的过程，我觉得所以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:47",
      "text": "你现在的工作是完全不用写代码。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:50",
      "text": "其实也不是我还是希望说我现在是这么想的，我觉得写程序这一点可以帮助我提升在其他领域的工作效率。比如说别人要苦哈哈的做一点事儿，我可以写一些小程序，可以帮助我能够更好的完成我的工作，我觉得还挺开心的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:06",
      "text": "其实那你会觉得自己之前过去这十年有十年，你接受到了编程专业的科班的编程教育，对你接下来的工作有什么影响吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:20",
      "text": "还蛮蛮有影响，起码可以和程序员聊得来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:24",
      "text": "OK这是一个比较大的park，就是程序员在很多时候是不愿意跟不愿意写程序的人聊天的，尤其是因对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:33",
      "text": "因为思维方式不一样，聊不到一块儿去。所以至少我觉得以我现在的这个知识储备和这个套词能力，应该还能在别人没有发现我这个是个彻底的门外汉之前，能够今天撑一会儿。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:51",
      "text": "你怎么可能是彻底门外汉呢？你在主持这样一档节目，然后说自己是一个彻底门外汉。你不怕这个听下去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:59",
      "text": "了要求摔耳机就不听了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:01",
      "text": "是吧？对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:03",
      "text": "好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:04",
      "text": "好吧，那接下来念下一封信，如果有幸被念求不念出名字和邮箱地址。多谢吴涛和real，你们好。终于有机会提起电脑写一些反馈。之前许多次听节目有感，甚至做了笔记准备回复，无奈下一次播出的时候才想起来外还未曾写成。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:23",
      "text": "这也是拖延症。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:27",
      "text": "听了这次城市病。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:28",
      "text": "得治。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:30",
      "text": "别这样了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:31",
      "text": "不要再逼着你了，好吧，开玩笑。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:34",
      "text": "听了这一次程序员之路，很有感慨。我的情况可能跟瑞有点相似，本科学外语和金融，无奈真的放不下对计算机的热爱，曾经自学java，尝试过科技媒体，终觉不够深入，于是决定考研。CS, 也考虑过把计算机当做兴趣爱好，但实在是放不下，加上头脑发热，选的专业不尽如人意。语言就不用讲了，我觉得还可能是最令人民讨厌的语言。什么语言最令人民讨厌日语了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:07",
      "text": "那就是是不是给你人民讨厌日语。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:13",
      "text": "阿拉伯语。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:14",
      "text": "为什么会人会令人民讨厌呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:17",
      "text": "最令人民讨厌的语言，不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:21",
      "text": "好奇印地语，你让梁海跟你拼命。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:28",
      "text": "sorry, 金融越觉得金融越学越觉得这玩意儿也好意思叫科学。不知道real放弃商科有没有类似的原因。有机翻转二叉树是说交换二叉树所有子树的左右节点。这是一道很简单的题，在考研题也算常规题，但就像吴涛说的，会默写快跑又对开发有什么用呢？针对real说的山科指教计算器，我们金融有一门课全程教用excel模拟交易组合模型，期末考试是用excel模拟期权组合。可能情况也在变吧，但是这里也可以问一句，这又能有什么用呢？特别是在有现成工具的情况下，我想这两个问题的答案可能只是简单的帮助理解，会不会会不用参考的默写一段程度，会不用参考的默写一定程度上代表着透彻的理解，特别是对于初学者来说。只是这个需要透彻理解的原理和只需要记住如何使用工具和参考的界限，是随着时代、领域乃至于工具的获取成本而不断变化的。毕竟没有人不允许你只用乘法，不用用乘法，只用加法的不是？",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:41",
      "text": "这句话什么意思？就是乘法加法。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:44",
      "text": "没有人一个不允许你用乘法，只能加法，而不是就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:49",
      "text": "乘法可以用加法来实现。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:52",
      "text": "是的，最后不管real如何选择未来的路，祝好。吴涛，听起来生活很舒服，同样祝生活有趣，希望贵节目生生不息。这是暗示我们要换主持人了，是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:09",
      "text": "这个特别有意思，就是我刚才我讲有一点，他他那个其实贴贴挺好的。就是说起码在初中上，我认为说能够在黑板上默写出来，这就基本可以等同于你是透彻的理解。这个我觉得还是有一定的道理的。有些事情如果你理解了它的原理，你是可以叫做推敲出来的。就是从一个基本的原则推敲出来一些它要让你实现的功能。但是怎么说呢？也不是所有人都能真的有这个能力，我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:44",
      "text": "说的也是，其实我觉得先不说前面那个用什么默写快排之类的。就是你在写一段程序的时候，如果一个函数你记住了函数的用途以及函数的签名越多，你写程序的时候被打断的概率就越小。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:09",
      "text": "这句话我说好，再念再说一遍。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:11",
      "text": "就是你你的你如果你在写程序的时候，不停的去查一个函数的用法以及这个函数的签名的话，那你流畅写程序的过程就会被打断，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:24",
      "text": "这不就是IDE大放光彩的时候吗？Auto complete。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:31",
      "text": "但即便如此，ID我还真的没有办法反驳。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:40",
      "text": "你竟无言以对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:42",
      "text": "错对我竟然无言以对。但是可能是因为目前的状况，就是我基本上不会用IDE来写需要写的东西，所以会有这样的感觉。就是如果我可以减少去看文档的次数的话，我写程序的效率会变快。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:00",
      "text": "对，其实就是说这里就是两个层次的一个用法。像我们这种苦行僧，他就说记住这个函数，下次你写的时候就不会忘记它了，对吧？但也有说像objective c里面的那个函数名那么长，我就算记住了，我我我光打字也很久，这个时候auto complete还是挺有用的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:22",
      "text": "对，当然这个问题如果深入下去的话，还是会和语言和具体所使用的环境以及你开发的程序的复杂程度相是是无疑是有关系的。就好像剑宗和气宗的差别，对吧？我们可能会觉得因为是做后端或者是做一些不需要特别复杂的东西的，不不需要不会不需要使用特别啰嗦的语言的时候，你会觉得记一些函数，常用的函数以及它们的用法其实很自然的事情。但是如果你处理东西的复杂程度真的摆在那儿了，然后你又不可能脱离IDE的话，那可能不去记也是一个理性的选择了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:10",
      "text": "对，下一条一位。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:12",
      "text": "叫做Jerry麟的朋友说，提到高能物理我就默认是高能实验物理实验高能力。我们什么时候提到过高能过？",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:23",
      "text": "我也忘了，有点这有点年份了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:26",
      "text": "对，这是过了一个月，怎么就忘了这么多，然后他提到了CRN就是欧洲原子能中心CERN，三人肯定都很熟悉，毕竟是在欧洲，而且同时又是WWW的发源地。括号WWW某种意义上说是为了解决高能物理的分布式计算而发明的。这个倒是第一次听说，赛N有一个叫做root的CPP计算框架，同时带有interactive的环境，类似于air python。这个框架有各种数据处理和plotting的功能。还蛮好的，就是文档比较shit。配合他们最近的数据开放项目还是蛮有趣的。我还真的不知道锤头W是为了解决高能物理的分布式计算而发明的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:22",
      "text": "我就记得是写论文，他们要引用东西，然后等一下他说是trip w不是HTML是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:29",
      "text": "可是这和W补救的基本要素不就是一个外部服务器。就我去过四川，我去过cr看参观，然后我还见到了那一台电脑，然后我还去去了听本里的他开发出web的那个实验室，是在地下，很难想象是在地下的一个实验室里面OK。然后我印象里面他只是为了把hyper text呈现给大家以便翻阅，而研发出在SGML的基础上开发出了HML，然后把它做成了一个web服务器，这样所有人都所有其他人都会去访问它的页面，大概这个样子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:19",
      "text": "哼你这么一问我也卡住了。这个追根溯源到底是为了啥？",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:25",
      "text": "总之这个划时代的东西歪打正着的就在sir的一台nex的电脑上被研发出来了。然后下面现在有这样一个叫做root的CPP计算框架，再去研究一下。不过CPP你有你有兴趣吗？No OK, 所以这一封来信的我们的反馈就是good，no.",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:51",
      "text": "不是呵呵。呵呵太有贬义了，我觉得没有，呵呵是中性的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:58",
      "text": "你确定吗？为什么我总觉得。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:02",
      "text": "好吧，可能我。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:04",
      "text": "理解不太对我总觉得呵呵的语义是我知道了，但是所以也没有什么兴趣。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:16",
      "text": "所以就呵呵了。所以它是中性，那没有错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:20",
      "text": "而且还呵呵更多的时候被使用的场合是，你这种想法真蠢，我懒得跟你辩论。比如说什么对方说PHP是最好的语言，然后你说呵呵这种就是那种不屑的感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:40",
      "text": "好吧，懂了，对OK，那就我们不合适。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:45",
      "text": "谢谢。Good.",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:45",
      "text": "this is good to know, 谢谢了。哼因为其实你blocking这个事情，其实还要讲一下，我觉得因为之前我上学的时候还经常用那个叫什么w plot k然后通过自己写个拍的输出那个点，然后去用group的这些东西画，但是画出来的那个真是惨不忍睹。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:12",
      "text": "可是你都在用python了，为什么不用那个叫什么mat plot lip，还是叫什么那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:21",
      "text": "王牌子，是为什么？因为当时好像在那个linux上面有吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:28",
      "text": "有啊，这是一个跨平台的库人OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:31",
      "text": "那可能当时比较幼稚，就只知道用那个new plot OK，然后用的还还用过那个还考虑过用过那个meta post来做plating，我也是蛋碎了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:46",
      "text": "meta post好古老。我已经有三年没有听到过这个名字的，至少因为。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:51",
      "text": "之前已经淘汰，基本上没有什么人在用了。所以哪怕是在latex这个社区里，大家也转用什么PIJTIKZ去画图了。所以meta post这种比较落后的东西就让他过去。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:07",
      "text": "随风而去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:09",
      "text": "哼OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:10",
      "text": "然后是新闻环节。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:12",
      "text": "是的，新闻环节，这个是应该插入新闻联播的音效。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:17",
      "text": "这些都。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:18",
      "text": "嘣嘣嘣嘣嘣嘣嘣。我好久没看电视了，那个音效改了吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:24",
      "text": "我好怀念这个音效。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:25",
      "text": "我已经好多年都。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:27",
      "text": "没有听过了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:29",
      "text": "对，观众朋友们，我们本期播报第一则新闻是看看别人家的小孩儿。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:35",
      "text": "其实这些都不是新闻了，这些新闻都已经过上个月的33到5周了至少。然后有感兴趣的朋友们其实都已经听过了，所以我们就算是最近发生的要闻的评论。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:50",
      "text": "对，好，今年第一则新闻是今年十岁的ryan是doom和quick的主程序员，all s rift CTO john ker的儿子。我上次节目我们说到了john comic，准备在他那个oculus VR的开发环境里面使用scheme作为脚本语言。哼然后作为一个each your own dog food t的实践家，他让自己的十岁的儿子开始学这个scheme，然后用在这个rocket这个开发环境里面写了一款游戏叫做mr bar空格b dot q and angry face。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:31",
      "text": "不是，应该是它这款游戏叫做fly。然后这个fly的主角一看就没玩。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:39",
      "text": "这我玩了，我还没过。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:44",
      "text": "他这个主角就是里面那个飞行的小人儿，叫做mr barbecue。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:49",
      "text": "对，挺出来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:50",
      "text": "barbee。对，然后他其实这个游戏考核的那个对烧烤哥，就是你控制烧烤先生在云里面飞，如果撞到好像逻辑是撞到云就死是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:03",
      "text": "没有撞到或掉下去都是死了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:06",
      "text": "对，其实就是一个flappy bird的copy。但是无论如何让人惊讶的是，这是一个小孩写出来的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:12",
      "text": "十岁的小朋友写的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:14",
      "text": "一个十岁的小朋友写出来的。Fp我我一生中都没有写过一个flapper。不能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:22",
      "text": "而且你的人生太不完整了，你就写一个吧。我真的我感觉那个floppy bird这个游戏就好像你做游戏的话就好像他的一个hello world一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:36",
      "text": "做游戏的hello world不应该是俄罗斯方块吗？你没写过俄罗斯方块吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:42",
      "text": "好吧，做手游的hello word.",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:45",
      "text": "好吧，立刻无言以对。贪吃蛇，贪吃蛇也比flap board应该比较简单一些，也难说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:56",
      "text": "差不多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:58",
      "text": "我觉得我还是觉得贪吃蛇有更简单一点，因为现他是说如果你做一个静态长图形那块。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:04",
      "text": "会简单一些。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:06",
      "text": "逻辑很简单，贪吃蛇有什么逻辑？贪吃蛇基本上就是贪吃蛇不用考虑场景生成的问题，只需要随机生成一个苹果就可以了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:16",
      "text": "好吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:19",
      "text": "不过所以不管怎么说，这个十岁的小孩写出一个fly board coffee也是非常了不起。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:24",
      "text": "对他们的开发环境也挺有意思的。Rocket你用过吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:28",
      "text": "用过，就没记错类，而是lay scheme类listen不是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:34",
      "text": "Rocket是scheme的一个实现，对它叫R6，什么S几我忘了。还有一个版本号。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:43",
      "text": "挺奇怪的，OK就是只是指的那个reference的版本号。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:47",
      "text": "把那个对racket是一个一个具体的实现。然后现在它有一个叫做doctor rocket这么一套套件，里面包含了各种工具。它那个比较方便，就是可以直接生成一个跨平台的应用，就是可以生成linux和windows和mac都可以运行的这个binary。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:07",
      "text": "为什么他这个呃ryan没有把linux平台的包试出来，他之前只放出了mac和windows版本。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:18",
      "text": "好问题，我也不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:19",
      "text": "可他是肉。对，然后他写的这个flag board的，他写的这个fly的游戏里面有三种模式。有是grand y模式，就是非常慢。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:31",
      "text": "然后是然后挠老奶奶，我是好困。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:39",
      "text": "祖母模式，祖母是正常模式，还有一个专家模式，好像还有一个叫什么hypersonic模式helper就是那个mode里面基本如果你选择以那个mode开始游戏的话，一开场你就会死。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:54",
      "text": "那个中翻译成中文叫做是男人就坚持10秒模式.",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:58",
      "text": "OKK可能0.5秒都坚持不了。因为一上来你只有两个选择，按空格键或者不按空格键。不按空格键的话就会撞到下方的云，按空格键的话就会撞到上方的人。所以你看you know.",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:12",
      "text": "所以你对这事情怎么看？这个小朋友。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:16",
      "text": "前浪死在沙滩上已经。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:20",
      "text": "死了是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:23",
      "text": "我也不知道这可是十岁写的游戏，是非常了不起的事情吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:31",
      "text": "我不知道，但是他的这个我们先不说这个品这个效果怎么样，但是我觉得完成度和这个流程还是挺挺让我吃惊的。因为你看到他他有个介绍，他说他怎么会写这么个游戏，他让他弟弟还是哥哥帮他做什么配乐，那些乱七八糟的OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:50",
      "text": "他们有一个team是那个那个angry face，就是他他之前的另外一款游戏里面的那个angry face的这个小笑脸就胡说露脸是他妈给他画，然后他他用他用GM jam把那个笑脸抠出来，我觉得这个很了不起。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:11",
      "text": "而且他还一学这这个做这个游戏中学会了用那个blender做3D模型，还学会用那个，还用那个audacity。我们你也用那个来编辑音频。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:22",
      "text": "来对我此刻就那个adacte来录音。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:24",
      "text": "对，游戏的那个声音就是太强，就是十岁的小孩。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:32",
      "text": "是这个的确是应该承认的确很强。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:34",
      "text": "所以这个什么基因好还是不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:38",
      "text": "对，有家父熏陶。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:40",
      "text": "关键是这个小孩长得逆天的可爱。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:44",
      "text": "这倒是就是打开主页的话，颜值真的是逼人的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:49",
      "text": "爆表简直。他的那个网址我一直没想明什么意思。一他的网址是1K31就是数字一字母K数字3、字母C点com我不知道什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:01",
      "text": "意1003C因为四个字母和数字组合的网址是非常难找，我有点怀疑这个网址，其实其他。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:10",
      "text": "四个字母还是蛮常见的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:13",
      "text": "不，已经卖光了，就现在你去住三个的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:16",
      "text": "三个的卖光了，我觉得四个应该还有。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:19",
      "text": "你确定吗？1K3C.",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:23",
      "text": "它是点com OK，maybe。对，有可能因为我我有一个三个字母，点net短贷好像不太值钱了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:31",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:32",
      "text": "anyway. 好，这就是什么大人口中别人家闪闪牛逼的，闪闪发光，让你无限自卑的小孩儿，到此结束。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:44",
      "text": "不过他毕竟是做游戏的，然后不不不。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:48",
      "text": "这个描述太太那个了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:51",
      "text": "他DA毕竟是一个做游戏的，是鼻祖。所以他在这个about me的界面里面也写到了，他特别喜欢玩当dragon当时还列出了自己的阵营。You know就你会觉得我靠一个十岁的小孩已经开始研究阵营之类的。不过也难说，我相信70年代的时候，DND作为纸游，就桌面纸游最流行的时候。也许那时候的小孩也是这样的，就还会自己做数值卡，自己去算那些莫名其妙的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:30",
      "text": "就好像我们小时候玩什么黑白棋。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:32",
      "text": "五子棋之类的那种常态豁免检定之类的。而且他还列出一大堆自己喜欢玩的游戏，其中包括minecraft，monster hunter，destine，还有someone s war。可是我有点奇怪，the destiny难道不是一个至少是team的游戏吧？就他他没有到那个年龄，他这样赤裸裸的列出来。那如果有人去告他爹说你让这个小孩玩不符合他年龄游戏。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:04",
      "text": "那怎么办？",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:05",
      "text": "游戏有分级吗？有啊，我靠，天哪，rio你之前是收到一块石头下去吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:15",
      "text": "我生活在一块石头。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:19",
      "text": "上面OK，不管怎么说，刚才就是别人家小孩的故事。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:26",
      "text": "哼下一则新闻是特别搞笑的，就是上周上一次节目我们提到那个home brew的作者叫做max howell去谷歌面试，由于未能在白板上手工完成翻转二叉树的算法，被谷歌拒了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:44",
      "text": "对我相信谷歌招他的人一定觉得what fuck，然后他自己也说what fuck。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:50",
      "text": "然后他就去了苹果。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:52",
      "text": "对他恶狠狠的说了一句，此处不留爷，自有留爷处。然后就去了苹果。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:57",
      "text": "然后他在推特上发了一个图，背景是苹果的总部叫做one apple campus at one final loop，然后写两个字。First day接了个自己的半个脸，然后我也不知道什么意思，反正我觉得这个事情还挺有意思的，给大家分享一下。所以你猜他在给我做什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:21",
      "text": "不知道搬家了，因为刘总他在回复别人的那个问题的时候，说你最近怎么样？不是，是你是通勤，还是搬过去了？然后他回说had to move，所以应该是忙着搬家。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:36",
      "text": "所以他肯定是入职了，搬过去了。然后我在想他去难道在写一个苹果的，就是the official package manager for western.",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:48",
      "text": "那不是APP store。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:49",
      "text": "应该也有可能不知道。但是问题是我。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:52",
      "text": "觉得就是这样一个人，你把他拉到苹果去，他你即便让他继续在那儿做，叫什么third level support，就是为程序员解决程序员的需求，也已经非常有意义了，不是吗？就是你哪怕只在苹果内部，让他为苹果内部的程序员服务，已经就他不需要去开发什么面向于最终用户的产品。没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:20",
      "text": "好吧，这个小新闻也就到此为止，还有一个最后一则小新闻是the native for android最近发布了。然后有一个跨时代的理想可能终于要实现了。就是在同一台电脑上编改写一套JS的代码，然后同时在iphone和安卓上渲染出两个原生的界面，这个还是蛮酷。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:46",
      "text": "的一次编写到处运行。为什么感觉像java？Java和javascript最终殊途同归。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:58",
      "text": "他们之前不是问java和java script的区别是什么吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:02",
      "text": "就像雷锋和雷峰塔的区别。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:04",
      "text": "其实我也没有那么远。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:07",
      "text": "怎么说呢？我觉得就java当初搞swing和另一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:15",
      "text": "号叫什么那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:17",
      "text": "FX还是什么之类的。对，其实也是想要跨平台。他最终历史的选择是有限度的接受他们，但是很大程度上还是抛弃他们。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:34",
      "text": "对，现在那个red native这套方法，其实在我看来好像不好说。你说他是right once every run everywhere，好像也说得过去。不过他们自己的官方口号是learn once right everywhere，所以hard to know。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:53",
      "text": "我相信于这个技术所解决的一个痛点是开发人员的痛点，但并不是市场的痛点。每一个平台的用户都希望自己使用的APP是最快的，是最经过优化的对只有资金和时间不足的公司，才会想要通过这种一次书写到处运行的方式来完成用户交互的部分。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:28",
      "text": "不过我觉得它这个有一个好处，就是说至少可以如果卖一个经典的MVC的结构来讲，它至少可以实现model和controller可以用同一套js代码来做。然后view的话就是各平台用各自平台自己原生的那些接口了。反正OK就我也很难说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:49",
      "text": "就是我觉得我觉得内心里是抗拒这种东西的。但是如果跨平台的需求一直在那儿，就是换句话说，如果android和apple阵营的这种互相竞争，互相良性竞争的状况还能持续，比如说十年，哼那这一套东西还是大有所为的。但是任何一方如果流露出了被打败的姿态，那我觉得这种跨平台的技术也很宽裕，也很很快就失去它的价值。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:30",
      "text": "所以说只能走着瞧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:33",
      "text": "对，但不管怎么说，它的学习成本至少不是那么高，所以学一学也没什么太大的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:44",
      "text": "好，今天最后一则新闻是也是前两天才发生的事儿。对，就美国有一个叫做阿美的小男孩，我听。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:55",
      "text": "一听这个名字就知道他是中东后裔。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:00",
      "text": "对他做了一个用那些什么各种零件元零器件儿、元器件儿弄了一块表，电子表。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:10",
      "text": "穷玩车，富玩表。放在这里忽然觉得好违和。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:17",
      "text": "然后他把这个表带到学校去玩儿，然后被老师认为是一个炸弹。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:23",
      "text": "对，被老师误认为这个炸弹，然后叫了警察。然后他们在一个看守所里面待了一段时间。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:30",
      "text": "好像对，然后我们这个新闻就报道出来了。他叫艾哈曼，是他的名儿，他姓穆哈默。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:40",
      "text": "阿曼穆罕默，这是一个很典型的回教的名字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:43",
      "text": "也就是说说伊斯就穆斯林的名字。对，非常典型的。然后这个事情在美国就引起了轩然大波，各种各样的事儿。我之前看到的最新消息是docker berg已经给他说亲自邀请他说你可以来facebook。然后说好像又最近又接受什么奥巴马总统的邀请，又不拉不拉了，反正这个是个挺搞笑的事儿。美国政治我们就不去评头论足了，这个是我们对IPN旗下基金开了一档节目选美的事情。对，但是而且这事情挺好玩的，如果这个事情在中国发生会怎么样？",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:25",
      "text": "你说好玩吗？我觉得其实是很让人哭笑，让人想要苦笑的一件事情。就在这个星球上这种当然这种说法非常左派，我就是这种族裔和血统带来的问题，居然会影响到你再再去做这种完全跟政治活动无关的hobby行为的是行为或居然会影响你做这件事情。你因为你的肤色或者是你的姓名，或者是你的长相，会导致你在做某些特定事情的时候，哼其就突然。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:09",
      "text": "蒙受这种。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:11",
      "text": "不白之冤，我觉得还是挺挺让人悲伤的一件事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:16",
      "text": "对这件事情其实我刚才我说这个事情你听起来可能是阿拉伯人或者是穆斯林，感觉离我们挺远的。其实这些事情离我们并不远。因为前段时间刚好有另外一个事儿发生了，就是美国有一个我忘了是大学教授，还是一个什么样的研究员，一个很资深的一个人。他被这个CIA就中央情报局指控为是中国的歼中国政府的间谍，就在窃取帮中国政府窃取美国的这个研究机密，后来证明他其实是无罪的所以其实CA的指控无非很多时候也是基于种族和肤色，其实也有一点种族歧视的成分在里面。我不知道这件事情在中国发生会怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:10",
      "text": "我觉得中国没有这么敏感。这其实并不是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:16",
      "text": "只是说你可能没有太留意到。比如说我举个很简单的例子，大家就你们听到这句话，你自己在中国的人想一下，你在晚上街头碰见一个黑人你会怎么样？",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:31",
      "text": "我再玩好吧，如果没出国的话，一定会觉得有点恐怖。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:41",
      "text": "出了的更加可怖。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:43",
      "text": "出国还要看在哪儿吗？比如说如果是在巴黎的话，那可能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:47",
      "text": "也是皇后区，纽约的皇后区和布鲁克林。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:51",
      "text": "这个太正常了。还是要跟你你得你你会就我们这种结合当前的场景来去做出stereotype的能力，实际上是一种生存的本能。对，如果我们在动物园的那个观鸟区看到一只老虎，那我肯定会吓到死。但是在老虎区看到老虎就会觉得是正常的。所以你会觉得这个地方是危险的地方，所以这个地方出现一个危险的人物，那代表我会可能会产生危险。这是一个很自然反应。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:33",
      "text": "所以你就是为不再为种族主义开脱了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:41",
      "text": "我只能说我理解种族，就我能理解种族主义为什么会存在，但是并不代表着我就赞同这种根据肤色来划定其潜在可能性的方法。这个我也说不好，其实就穆斯林这件事情来说，德国目前开放大量难民涌入境内，其实里面也是以穆斯林为压倒性多数，但不能就因此会认为说这个会冲击到德国的宗教组成，或者说影响治安之类的事情。即便你有这样的恐慌，这样的担忧，但是这种事情确实不一定会发生的。对我觉得这个跟我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:35",
      "text": "本节目扯的有点远，对不？刚刚我说那个FM这个案子是一个想提另外一个事儿，一般在中国有两个含义。一个是说一个有种族明显种族特征的一个小孩在做这么一件事儿，明天就被认为是危险事儿或者认为会怎么样。另外一个就是说其实哪怕是一个正常的中国小孩儿，自己用那个电子元器件来做了一块表，被带到学校去，大家会认为它是一个炸弹吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:05",
      "text": "肯定不会。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:06",
      "text": "我觉得其实会被在中国反而是会被鼓励的，我觉得动手能力强什么什么的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:12",
      "text": "会被打的。你不写作业搞这些破玩意儿。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:16",
      "text": "你这是什么样的童年。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:20",
      "text": "你不是吗？我觉得我小时候想要做一点跟考试无关的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:24",
      "text": "基本上都是会被说的。不是，我感觉我小时候的学校还是挺至少父母也好，老师也还是挺孤立这种发明创造，动手能力的。虽然说在这个绩效考核上，他们并不是真的是这么想的。但是起码在心就在舆论上，大家他们还是会坚持这么说。所谓绩效考就是期末考试了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:49",
      "text": "说也是我上。还有是有一次我小时候去航模组，然后我是把飞机的尾巴粘到了，还是什么就粘一架什么飞机，B29之类的一个飞机，然后把它尾翼给粘到，嗯哼然后韩博老师说了很长一段话，说什么大意思，你在这件事情上花费的时间太多了，什么还是要好好去学习，乱七八糟。哼。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:20",
      "text": "然后同样的事情在我上高中的时候又发生一遍。我高中的时候在那个围棋社还是什么地方，应该是围棋社跟老师下棋。然后有一个同学来找我，去什么物理奥赛组还是什么样。然后我就说我下完棋再去，然后那个下棋老师非常惊讶，瞪着我说奥赛比较重要，你怎么能摊摊着下棋不去看，不去参加奥赛班，你赶紧去就他是教围棋的老师，他能说出这样的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:50",
      "text": "我觉得小备胎他们在人们心目中还是下意识的给这个行当分了个三六九等。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:56",
      "text": "对，然后其实人种也是或者说足以也是就莫名其妙被分出个369的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:05",
      "text": "其实我们看来离真正的自由还挺远的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:09",
      "text": "左派还需要努力，这是个左棍上心努力，右棍还是牢牢的把持着这个世界。虽然我也是个优惠。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:22",
      "text": "今天的这个我就不讨论我们的政治倾向了，我们今天的新闻环节新闻联播到此结束，不，科技新闻联播到此结束。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:32",
      "text": "科技社会新闻到此结束。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:34",
      "text": "今天的正题是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:38",
      "text": "其实今天的正题是我们没有正题，我觉得应该是时候把这个兔子从帽子里面揪出来了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:45",
      "text": "我们的我有个梗，我有个耿，ghost in the x code.",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:53",
      "text": "看吧。不，我刚才想说的是从本期节目开始，我们不会再专门的找一个编程领域里面的话题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:06",
      "text": "就不会刻意找。但有的话也可以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:09",
      "text": "讲来来来贯穿整个节目。就我们之前找话题找的非常辛苦，所以也造成了我们在录节目的时候，每次都非常的应该怎么说呢？觉得投入和产出不成正比。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:24",
      "text": "就是那个跟报以前那个报纸编辑不一样的一个选题会，对吧？对，就我们已经这个什么吾郎才尽了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:34",
      "text": "为什么是吾郎才尽？",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:36",
      "text": "你是说掏郎才尽。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:38",
      "text": "所以你是你的你是还没才进是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:40",
      "text": "那没没没有没没就我是捧，所以你你你是主。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:48",
      "text": "我记得我听谁说有人在IT公论的，好像是那个现场说IT公论是laws的节目，real只是一个捧哏的。我觉得IT公论不内核恐慌，其实是real的节目。然后我是一个朋友。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:03",
      "text": "反了，the reverse is true.",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:06",
      "text": "可。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:06",
      "text": "忘了，不扯这个了。好，其实这个事儿，但是大家今天我们上午录的那个ID功能已经大概讲过了，就是那个x co ghost这个安全事故，来龙去脉就不交代了。大家听到这个词，如果你不明白是什么，估计也就没有必要再你可以去深究，你可以去先看一下报道，我们就接着往下讲了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:32",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:35",
      "text": "简单来说就是x code。有人下了一个什么，这台以后我还是又讲了，简单说就是x code。就因为苹果那个CDA不给力，很多开发者顺手下了一个从什么迅雷下了一个x code回来。然后发现编译出来的软件被搞了，被撞了后门。究其原因是因为下载编译器有问题，x code就被搞过。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:59",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:01",
      "text": "所以这件事情我们先揪一下。你觉得苹果有问有责任吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:06",
      "text": "我觉得从技术上来讲，苹果关苹果屁事。但是从从一个比较meta physical的角度来讲，苹果采用的这种模式导致了会有今天这个下场。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:26",
      "text": "所以他的问题在哪里？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:28",
      "text": "就是centralized就是这样一种独此一家的工具，导致了这种情况的发生。我觉得这种情况为什么会不会在其他的世界里发生？就是因为其他世界比如或者说为什么不会在比如说C世界里面发生，是因为C世界里面你有很多编译器可以选择，而且你也有很多下载点可以选择。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:58",
      "text": "不对，我觉得这个是这个问题，就是说正确答案是不知道，你不知道其他地方有没有类似的问题。他们好像就很多人说，那你们下的这个安卓的开发环境会不会有这个问题？",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:09",
      "text": "没有人知道，android是另外一件事情，就是android的情情况其实要比苹果严重很多。因为android的比如说钓鱼屏，不什么钓鱼屏的支付平台是你强制你要去，或者也不是强制。在android里面如果你把一个支付平台连入你的APP的话，你是完全可以去读写说这个支付平台里面到底我有什么信息我去。但是对，就是因为你你在android上面别说话对话框了，你只需要去，你甚至都不需要去钓鱼去画一个假的对话框。你可以直接去读那个跳出来的支付平台的那个对话框里面写了什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:50",
      "text": "他没有那个进程分离吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:51",
      "text": "他不你都把对方的支付平台的SDK集成到你的APP里面了，你要去搞什么进程分离不那。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:58",
      "text": "这个是这个是那个是应用内部的问题。我觉得这个没有办法，肯定是是是是这样子的那你如果你都不信这个就没有问题。但我我的我的问题就是说你怎么知道你用的这个安卓的编译器也好，或者是类电器也好，没有被人搞过呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:17",
      "text": "我没有办法知道自己的，所以我觉得。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:20",
      "text": "这个事情苹果和其他厂商是一样，就跟它的分发方就是这个组织方式是没有关系的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:27",
      "text": "我我的我的理解就是假如是在其他的，比如说一个我们想象另外一种软件分发的方式，就是在苹果这边他只给出一个编辑器的specific编译器的specification。然后每个国家或者说每一个不同的厂商都可以写出自己的为x code，不是sorry，为IOS开发程序的编辑器和编译器，然你可以任选其中一家来写出自己的程序来。就比如说现在在windows上面你要给你要写一个windows程序，除了微软的windows view可以用之外，你还有很多一大批其他的东西可以用。其实在90年代的时候，这个状况是非常好的，就是百家齐放等等，叫什么来着？百家争鸣。对，就是什么ballet，什么cold warrior，什么turbo c之类的。你可以用各种各样的编译器和编辑器和编译器来书写一个平台上的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:33",
      "text": "没有，我觉得你并没有解决这个问题，只是把这个问题的皮球踢给了另外一波人。就是说你说不会有一个编译器出了问题，所有人都中招，而是说因为有十个编译器可能只有三个有问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:47",
      "text": "是这个这不已经是很好的了吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:49",
      "text": "不是，但我觉得这并不是从根本上解决这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:51",
      "text": "所以我这个问题是没有办法从根本上被解决的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:55",
      "text": "为什么你会这么认为呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:59",
      "text": "我有什么办法去验证一个闭源的单一发布者的编辑器？它的编译器是安全没有问题的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:11",
      "text": "但至少你可以说你相信如果这个编译器是苹果原就是原始就是苹果官方的那一个，你可以至少相信他不会来搞你，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:22",
      "text": "所以你还是要选择相信，你刚才还是使用了相信这个思路是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:26",
      "text": "对，所以说底层的信任，你还是说你至少要信任一家，不管你是信任哪一家还好。现在问题就是说比这个开发者，因为下载，因为都有这个网络的问题或者CDN的问题。它不能从苹果的官方服务器直接下载到这个原始的版本。或者说他下载过程中不是用的HTPS，而是用HTP。然后被上次我们的节目一样，被那个缓存服务器，那个那个运营商的缓存搞了。他也不能保证它下载到的一定就是苹果发布的那一个。所以这里面其实我觉得唯一可以就唯一可以做的就是验证那个那个哈希验证。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:05",
      "text": "好吧，所以我其实我们两个有点在不同的层次上讨论这个问题。我是觉得如果你要既然你要分而治，相对你要分而治，就你之前选择一个单一发不伤的话，你无论如何是会面对面对这个问题的。因为你就像你刚才说的，你只是选择相信苹果而已。你没有办法确认说苹果就没有在自己的编译器新闻也做手脚，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:31",
      "text": "但是我觉得苹果他在自己编技术做手脚对他没有好处，对吧？对呃就我们。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:38",
      "text": "从利益的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:39",
      "text": "角度去出发去想这件事情，我们至少说相信他从这个incentive方面，他不会去给自己的电影去做手脚。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:48",
      "text": "但是事情总有一个但是，就好像当初我你无论你还是我都不会相信希杰会在自己的硬盘的BIOS上面有放一个木马了，不是吗？但迫于CIA的淫威，他就是这么做的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:03",
      "text": "你有什么办法吗？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:05",
      "text": "所以从一个我也不知道你作为一个非常paranoid的人，你居然会选择说我就是相信，不然也没有办法。这其实是一个很很分裂的行为，不是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:16",
      "text": "对，我觉得这个就是问题所在了。就是说在存在着叫做close source这个program的形成，就是闭源代码的情况下，我觉得这个东西都是没有办法去彻底相信的。就好像上次我们讲的，我记不得是在哪里讲的一样。如果就像Richard storm的说法，如果这个软件不是你从头到脚写起来的，如果这个意见里面跑到所有的固件不是开源的，不是你从头到脚被验过的，这个都是不可以被信任的，不可以被彻底信任这种好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:50",
      "text": "如果我们在RMS和一个完全对计算机一无所知的gRandy之间画一个scale的话，那我觉得在这一点的看法上，我是比你更接近RMS。Hello，我觉得如果真的要彻底解决这个问题，那你只能说所有人的就是你必须为编平台的编译器市场，你必须开放平台的编译器市场做到一个至少。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:19",
      "text": "有一个状，至少有一个开源的实现，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:22",
      "text": "对，然后才可以保证说如果出现了类似的事情，你所影响的只是选择了那一个编辑器的这些人。然后其实类似的事情早就出现过了，这并不是什么第一次出现这种非常狗血的事情。以前在09年的时候，曾经有一个病毒叫做win 32 in duc a我查到了对这个病毒的机理就是感染delph y2009年的时候，delph y还有人用。对，他感染delphi 5到7版本的IDE，然后它会以使得使用被感染的ID所写出来的程序都带有一个带有这个病毒本身应该是但是为什么这个病毒没有造成任何今天还有人想起来的伤害，就是因为用delle pin的人在09年的时候已经非常少了，而且5到7也是一个相对来说比较古老的版本。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:25",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:26",
      "text": "但假如苹果在苹果平台上，你除了x code还有别的选择的话，那我觉得可能这件事情闹得没有那么大对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:35",
      "text": "至少你说波及面会小一点点是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:37",
      "text": "对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:40",
      "text": "对，这单我也同意，只是说我觉得还是不能至少从我的角度来讲去相信这件事情。我觉得还是要有一些技术手段。因为你刚才说只是一个怎么说政治手段来保证它减小它的波及面，就通过这个分割的方法。但是我觉得其实有一些技术上是可以探讨的。比如说最简单的方法就假设我们相信苹果不会给自己的编译器添漏，主动添加这个红的情况下。那我们说说怎么保证我们拿到的这个x code的编译器是苹果发布的那一个。其实最简单，我们方法都有，对吧？做一个沙万的哈希，然后对比一下苹果官方发布通过一个安全的平台，安全就是HTPS的方法去发发布一个某一个固定版本的X这个x code的哈希，然后去去去那个就好了。还有就是说他现在他苹果那个上面不是有那个code sign，就是代码签名。可以说代码签名，然后运行的时候苹果系统会报错，就签名失败的，这些都是不被执行的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:45",
      "text": "对，我记得以前我下载python的时候，还一定要去看那个下载下安装包跟官网上提供那个还是是不是一样的？现在也早已不会去做这件事情了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:58",
      "text": "对，你看就像你你我这么狗血的人，也不是所有的时候都要去做这件事情的。所以我觉得这里面还是有一个机制和习惯的培养的过程。但话又说回来，另外一方面就假设哪怕我们能保证我们下载的这个x code也好，还是其他编译器也好，都是通过一个安全的可靠的管道，用一个来源和正确来源下载到的原始没有被搞过的版本。我们还得保证我们机器本就是开发用这个机器本身，它是没有病毒和后面的或者其他木马的。因为这样的话，你装上之后，你的那个编写是可以被改写的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:44",
      "text": "好吧，从其实从一个比较极端的角度来讲，你只能相信你使用你所做的这些措施，会保证你的开发机器是没有受到影响。但是真实的情况是你永远查不过来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:57",
      "text": "但其实我还是想，其实有没有任何方法一些可以做这件事情呢？我觉得还是会有一些机制可以就你就就最简单我们目前的一个要点就是说防篡改，对吧？其实防篡改一个很简单的其实就可以做了。比如说你我们用那个叫做哈希数的方法来做。比如说因为你任何一个软件放在那个磁盘里面，都是在文件系统里面的，对吧？那么我怎么保证？当然最最归根到底整个操作系统的也是一个巨大的文件数，整个磁盘磁文件系统上的磁盘文件数。那其实我们是可以，因为像软件，就是这些应用程序它有一个特质，就是说它基本是一个immutable的东西。就是它它不应该就安装好以后，它的绝大部分是不应该程序那一部分，我们把程序和数据分开，你你你要修改的东西肯定是属于数据的那一部分。但是这个编译器本身，就那compiler本身那些东西它应该是不变的，它不应该被改变，除非你升级，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:04",
      "text": "那么我们可不可以说对每一个不变的部分，就程序的那部分的文件做一个做一个哈希。然后我们按文件数的结构去组织这些哈希。然后我们再在就是在每一个目录那一层，在对那个目录里面的文件的哈希做一次哈希，以此类推会得到一条根，这个root就是这个树的根部的一个哈希。然后我们知道一旦这个哈希被改变了的话，说明这个文件系统中的某一部分是被改变了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:38",
      "text": "咱们可以沿着这个对比每一个root键，不是就每一个这个叫什么？因为每一个树的根都可以是一个root，对吧？我们对比一个root的哈希，可以找到哪一个文件被改变了，对吧？其实通过这种方式，我们就可以完全能够探知得到你的程序有没有被叫未授权篡改过。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:05",
      "text": "怎么感觉像date git，其实不就是。对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:09",
      "text": "本质上就是在做这件事情。不过说gate它是一个链状的结构，然后这个文件的哈希，文件树的哈希是一个树状的结构。而这一点恰恰是在一些比较高级的文件系统里面已经实现了，就像这个ZFS里面的，它是但是它不是为了保证说你的文件不会篡改，而是说他是要保证因为那个硬盘本身可能会发生一些硬件错误，导致你的文件被篡改。它需要能够侦测得到这个篡改，然后同时一些一样的东西。对，但他的这个是算法和这个逻就是这个思路上是一致的。就通过一些方法能够能够能够记录一些生成一堆数据的指纹，而且并且能够快速的探测到，通过这些指纹能够快速的探测到哪些哪一个文件的哪一部分是被不经意的修改过了，发生了这个变动，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:05",
      "text": "所以其实从这种角度来讲，我觉得是完全有技术措施。可能虽然大家要花费一点计算能力，就是CPU要多算一会儿。但是其实是完全是有能力去实现说这个文件，这个软件是至少是按照原始意图来的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:25",
      "text": "当然另一方面就是这次这个OS一升级以后，10.11 cap ten里面自带了一个功能叫做rootless root什么意思呢？就是说因为以前就刚才讲那个问题，苹果就是苹果的操作系统里面一些那些系统的核心部件的文件，是可以被超级用户所更改的对然后大家虽然说我们用这个速度，这个超级用户和普通权限，就普通的用户隔离。但是因为很多这个使用实际使用的原因，大家还是用速度用的比较烂，对吧？现在要输出这样速度那样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:59",
      "text": "然后很蠢的事情就是你在你要试图用你的你在试图装一个软件，然后这个软件的安装指南上赫然写着苏州这个苏州那个。对，然后叫你堂而皇之的叫你输入5万元密码。就基本上对这从来不会告诉你说你这样做可能会对你的系统产生危害。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:19",
      "text": "当然也告其实告诫了也没有用。就好像那个windows，好像是我从XP还是windows vista开始，他每次要就有程序或应用要做出对系统修改的时候，它会弹出个框问你要不要做这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:35",
      "text": "要不要做那个，对对对，叫UAC之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:38",
      "text": "对对对，但是你其实做了。所有用户也就疲劳了。这东西对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:42",
      "text": "这种东西也就十个用户有九个会试图在第一时间让这个对话框赶紧消失。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:48",
      "text": "对，没错。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:49",
      "text": "根本不会去读上面写的什么。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:51",
      "text": "所以其实你看这个东西，你靠提示用户是没有用的。因为首先用户并不一定具备这个能力去判断这到底是可以还是不可以，对吧？他不具备这他不是那个technical的一个知识。而且是即便是对于这种具备这种知识这种能力和知识的用户，你也不可你也可以你也不可能每次都去问他，因为这个会反人会产生疲劳的。就是说你问他100次，他肯定不会再想这个事情了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:22",
      "text": "对，所以我觉得这不是一个就是如果你的你如果你解决这个权限问题的方案是是是询问用户的话，你就其实已经认输了。你就说这个问题我解决不了，你们自你自己想办法。但是其实是我觉得是王源通过设计是可以改变一些，就可以做出更好的设计的。比如说刚才讲的那个哈希数的方法，你可以精确的告诉这个文件给出费，哪个文件出了问题，这样可能会有什么后果，对吧？对，可以做一些事情。然后就是说在这个设计系统的时候，不应不是不是我们目前那种非黑即白的这种比较简单粗暴的权限的方式是不太够用的。然后这里就涉及到我们要讲的一个非常重要的一个人了，这个人叫Daniel j birthday。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:14",
      "text": "伯恩斯伯恩斯坦先生。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:16",
      "text": "对，就是他说一下DJB。如果这个时候你的你听到这三个，你看到这三个字母缩写名字的时候，你都没有一种如雷贯耳的感觉的话，说明的安全是安全不太到位。先普及一下，DJV是他有一个个人网站叫做crito，是CR dot YP到TO，你就可以看看他能做一些什么样的事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:42",
      "text": "Crypto这个单词分裂成三半，就有点像当初delicious。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:48",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:49",
      "text": "他是哪个爱丁堡大学的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:50",
      "text": "还是不是，他是伊利诺伊斯大学沙哥分校的教授。对，OK是在数学统计和计算机科学系。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:02",
      "text": "名字好长。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:04",
      "text": "Anyway他有一些著名的作品，最简单的大家可能比较红火的一个叫NACL的这个库。Does the networking and total phy library. 然后还有一些像这个library的重要程度是什么样子呢？就基本上今天互联网一些应用的基石是依赖于这个库的，就是安全的。我安全的网络通信的基石是依赖于这个库的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:30",
      "text": "为什么他的CV上写了他是德国人，他的citizenship，就是他是他跟我是同一天生的。首先10月29日出生，他出生在美国纽约，但是他的citizens写了USA和germany，这是为什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:50",
      "text": "哼好问题我也不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:53",
      "text": "OK你接着说。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:54",
      "text": "我刚才产自德国和美国双国籍，有可能他是他是by bird，就是拜血缘关系关系的德国公民。因为他父母一方是德国人，那他在美国出生这样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:05",
      "text": "然后by birth又是美国人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:07",
      "text": "就是落落地落地在美国。所以就是这个美国公民，它是有这个双重公民身。Anyway他还有一些其他的作品，比如说DNS curve，ok对吧？DNS curve DNS curve是干嘛的呢？就是一个这个说起来加了密。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:30",
      "text": "的DNS.",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:33",
      "text": "这种加密的DNS协议可以这么说。然后linux或者unix上面用户可能用的比较多的这个demon tools。对，是他写的，好像我看其他的q .",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:46",
      "text": "mail也是他写的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:49",
      "text": "对，所以当然我都说了，如果你觉没觉得这DJB3个字母不对灌耳的话，你可能要反思一下自己了。他在在2007年的时候发表了一篇论文叫做some thoughts on security after ten years of q now one point out就是写q mail 1.010年后关于安全的一些想法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:16",
      "text": "对，虽然原来标题里面没有关于安全这件事情，有sorry.",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:20",
      "text": "some people are security on security.",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:22",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:25",
      "text": "里面他用了大概多少五个章节，讲了一下他在写q mail这款以安全著称的邮件的这个demon英文中文翻译成什么？我又往助手进守进程守护进程的这的这么一套工具的一些想法和和这个措施。就简单来说，怎么去写出一个安全可靠的软件。这篇论文我们会贴在本期节目的notes里面。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:58",
      "text": "我长不是很长？如果不去看reference的话，基本上只有8页纸的样子。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:04",
      "text": "对，而且它里面其实technical detail其实并不多，大部分其实是在一些讨论一些思路和这个架构的问题。原则上问题就是对principle对，他说怎么写一个安全的程序呢？有一些通常的思路叫做，首先我们要减少bug，对吧？因为这是安全漏洞，通常就所有的安全漏洞都是bug，所以我们怎么样解决这个bug。然后第二个思路就是说，如果我们假定这个出bug的概率是相对来说差不多的，那么这个程序的代码量越少，它的bug的总量是不是可能就越低了。就一个复杂的程序总是可能比一个简单的程序就其他情况一定的情其他条件一定的情况下，肯定是一个更复杂的程序，可能还有更多的bug对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:02",
      "text": "没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:03",
      "text": "对。然后第三个一个措施就是说叫做什么来着？",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:08",
      "text": "减少被信任的代码。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:10",
      "text": "对，这里提到有一个概念就是什么叫做信任的代码和不被信任的代码。就是说信任的代码可以做一些更高权限的事儿，然后不被信任的代码就必须只能做一些很低权限，甚至不需要权限的事儿。然后是这样的好处是什么呢？就是说哪怕不被现代代码出了bug，它的结果也不会导致系统出现安全漏洞。所以说我们能够把代码分成可信任的部分和不可信任的部分，并且把不可信任的部分放在一些特殊的受限制的环境里面去执行。比如说沙盒模型对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:45",
      "text": "这样可以也可以在一定程度上减低这种安全漏洞的隐患。因为这个情跟前面那个情况一样，就是因为授信的代码就是授信代码就是需要运行在更高权限级别的代码的总量减少了。然后如果我们假设这个代码出现漏洞的概率是差不多的话，那肯定代码总量也会减，就是至少安全漏洞的隐患会减少了，对吧？当然还有一些就是他认为是没有什么就是然并卵的，就并没有什么用处的，就是提升软件安全的办法。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:24",
      "text": "第一个方法叫做是chasing attacker。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:28",
      "text": "对，就跟着应该是叫被攻击者牵着鼻子走。对我觉得这个翻译好一点，OK就简单来说就是我们说的中文叫做头痛医头医头脚痛医脚的方法。就是说攻击者过来了，发现哪里漏了，就扑过去把那个漏洞补上。然后他攻击者又攻击另外一个地方了，你又扑上去把这个漏洞堵上，就始终是处于一个相对被动的方法。是这个DJV认为这个是不靠谱的，因为不从没有从根源上解决问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:01",
      "text": "对他就顺便黑了一下firewall，然后什么防病毒软件，或者什么intrusion detections system之类的东西。对他觉得这些东西都是燃兵了。当然这个地方我觉得还是可以反对一下，就是至少intrusion detection system可以让你对于正在进行的攻击有所反应。这已经是一个至少你在维护一个维护一些不可能被修正的漏洞的时候，会这个东西还是很有用的。比如说d dos，d dos本质d dos攻击本质上是没有，根本质上根本跟漏洞没有关系，对吧？它这是一个物理条件所导致的一个安全隐患。你在这种情况之下有一个in d detection sym还是很有用。不过这当然对这个在软件工程的环节上，是的确是可以像他说的一样，做这种东西是没有什么事，的确是没有什么卵用。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:57",
      "text": "对，因为它本质上并没有修正，就是去改变这个系统是一个千疮百孔的事实，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:05",
      "text": "对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:07",
      "text": "然后下一条他觉得然并卵的方法叫做减少权限。对，这个其实可能跟很多这个就是刚才我们讲的那个速度这个情况有点关系。就是说你降低权限的这个或者权限分离的这个，其实在他看来并没有什么用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:26",
      "text": "没错，这其实有点叫什么contrary to popular belief，就是minimize privilege，在他看来是没有太多用处的。因为毕竟你有你再怎么minimize privilege，那个privilege如果你需要的话，还是需还是还是在那的对吧？你只有说我要把这些所有需要被trust扣的减到最少，你这个minimize才有那么一丁点的用。但如果你在minimize private的同时，没有去减少需要为trust code，那你只要给你那一点点privilege，你就已经可以为所欲为了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:10",
      "text": "所以其实逻辑上他觉得这个减少权限的一个并不解决实际问题的根本原因，就是因为减少权限只是说减少了一旦出现软件bug或者是安全漏洞造成的损失，而并没有解决安全漏洞本身。对，所以其实这个东西它的这个思路是正确的。因为确实他确实并没有减少这个软件漏洞的数量本身，他只是说减减少减少了这个软件漏洞产生的可能产生的影响。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:45",
      "text": "其实这个事情是只是值得说的。比如说很简单一个例子，他说你说minimum就是减少权限。比如说现在很多IOS的应用也好，还是安卓应用也好，他会说我要你的这个通讯录访问权限，对吧？但其实你知道他是会有可能会把这个偷偷上传到他的云端，然后去做一些这种打着你的旗号去骚扰你的朋友的事儿。对，这个时候你有两种做法，你要不就拒绝他，对吧？你拒绝他显示那个，然后那个时候就减小了权限了。这样哪怕它是一个恶意的程序，他也不会说拿到你的通讯录怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:23",
      "text": "但是假设这个软件刚好有这么一小撮功能，是必须得访问通讯录才能正常使用的。但这是举随便举个例子，你又不得不授权它的时候，这个时候你就很纠结了。有人说我到底选择要不要为了这个功能选择相信他呢？这个我觉得就是一个挺考验人性的时刻，没错。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:45",
      "text": "对，我觉得其实minimum privilege并不是一个错的举措，至少你至少在你做，比如说你是一个IT strate，然后你必须给不同的用户分配权限的时候，mini with private是一个非常正确的策。但是我相信作者的意思只是说MINMIS prevention并不能减少软件中的bug。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:07",
      "text": "所以这是两个层面的问题。我们还是要把这个分的清楚的。一个是说就解决减少软就是减少软件bug这个事情。这本身来讲确实减少权限并没有什么鸟用，但是但我们毕竟在实践中还是说不可，因为不可能保证所有的bug都被修复。所以我们只能说除了在在通过措施减少bug，同时还要尽量矫正，尽量保证如果bug发生，也要减少它的可能产生的负面影响。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:39",
      "text": "对，也就是从一个是从工程学的角度来讲来解来理解的。另外一个则是从这个adminstration的角度来讲。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:47",
      "text": "对。然后他说第三条并没有什么，这不叫并没有什么用。而是说一个常常见的因素会导致大家会放弃对这个软件安全的追求，这个理由通常就是性能或者叫速度。我们可能为了追求软件的性能或者是一些速度。去采用一些不那么安全靠谱的方案，或者说这个写法。一个最简单的例子，我们可能这么对比比较好。比如说这个当然我们是自己举的例子，并不是他文章说的一个例子。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:22",
      "text": "我们说进程和线程的关系，通常在可能lw上就是不成立。比如在windows上面你开一个新的线程，你开一个新的进程是要开下来的。低的对没错吧？对，但是县城是与县城之间并不能实现内存隔离，对吧？因为它线程之间是共享内存区域的，不受操这种其他保护。这样的话你在一个线程里面出现了软件bug或者说是漏洞，使得它可能造成这个共享的内存区域泄露。然后这样的话一个县城的bug会波及到其他县城。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:03",
      "text": "但是如果你不为了这个性能或者是方便的考虑而采用进多进程的模型的话，进程与进程间的通信是一个明确接口的。然后它近之间如果不除非你做特殊的操作，不然你是没有办法共享内存的。所以一个进程的这个被compromise是不会影响到。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:28",
      "text": "另外一个进程的安全性的对对这就是为什么沙盒模型可然后进程隔离能够使得一个一些比较失败的程序所产生的一些灾难性的后果，不会扩展到其他运行的程序上面的原因。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:48",
      "text": "他他还举他在文章中举的倒是一个例子，我觉得挺有意思。就是说可以用一个解释器的方法去实现一个简单的限制性的环境去做一些基础的处理，而不是说你直接用比如说用C语言写一个邮件地址的解析。气因为这样的话你很容易因为C是这种什么内存不安全的语言。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:12",
      "text": "很容易轰掉脚了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:14",
      "text": "对，很很容易叫做suit。Shoot yourself in the foot，就是拿把枪把自己脚给打了一枪。对，因为由于这个内存越界，导致各种各样的问题是使得你可能会出现错误。但是如果你写一个简单的编译这个解释器，就是就一个很简单的虚拟的迷你语言去做这个地址解析的话，可能会好一些，对吧？但是这样很多人会觉得这完全是什么杀鸡用牛刀，何必？对吧？没错，所以为了这个性能或者实现效率来讲，那就采取了一些没有那么安全的方法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:56",
      "text": "反正这篇论文是非常具有研究价值的。我觉得如任何一个因为这件事情，或者是因为之前乃至将以后将会发生的其他事情，想要让自己写的东西比较安全的朋友的话，一定要读一读这篇文章。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:14",
      "text": "其实他这篇文章我觉得它最有价值的是叫做第四部分和第五部分。第四部分就是说第四部分叫做如何减少代码量，这个是我最喜欢干的事儿。因为我总觉得现在我们很多人写这个代码的习惯就是越多越好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:34",
      "text": "他其实有一个概念，我觉得非常当然这不是他自己原创的，而是那个extra说的就是说叫什么愚蠢的软件经理。通常用这个程序员的生产效率去衡量一个一个程序员的通通常用这个是代码量去撰写的代码行数。对对对，用一个代码这句话再说一遍就是一个愚蠢的软件。这个经理又或者是这个产品项目经理，会用这个代码行数去衡量一个程程程序员的生产力。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:07",
      "text": "也就是说剪裁的含义就是说代码写的越多，这个是这个程序员越高效或者说更越高产对吧？对，因为高产肯定是有产出的。但其实上这个概念是完全错误的，应该是用消耗的代码量去衡量一个代码这个程序员的生产力。就是说一个为了实现同样的功能或者同样的specification，程一个程序员用的代码量越少，它应该是越好的。但这句话也不太对，因为毕竟你还是要考虑到这种什么可维护性、易读性怎么样，对吧？这个深究的我觉得这个是，但是起码他提出这个概念就是编写的代码量和消耗的代码量是一个两个完全不同的这个思路去看的一个问题。没错，对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:54",
      "text": "所以在这个第四节里面，这篇内容讲了一个很好的一个点，就是说我们消消消减代码的量。第一个就是说就是把重复的部分做成一个通用的函数了，哪怕它再小再trivial，对吧？应该用的重复次数过多够多的话也是值得的。当然这个东西也是有一定的副作用的，就说在一些这种比较愚蠢的语言里面，你调用的函数过多，其实是会影响你的性能的对吧？他不会帮你去依赖这些东西。当然这个就跟刚才提到那个为了为了性为了这种微不足道的性能去牺牲了其他东西，是捡了芝麻丢了西瓜。对，没错。然后这个4.2他提到了一个就是说如何去处理这个临时错误，这个是非常重要的。其实所有的程序里面最麻烦的就是错误处理，而是说很多人会能很多人但这个回到我们之前说的那个就是exception机制的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:55",
      "text": "就是exception，这不是我们第一期的内容。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:57",
      "text": "exception机制是假设这个程序的正常逻辑是一个什么正常运行的，然后这个错误是或者说这个异常是需要特别处理的。但是其实应该是反过来的，我觉得就是说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:11",
      "text": "你默认这个程序是跑不了的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:13",
      "text": "默认程序是会各出各种各样的问题的，你只能不一步一步去处理的问题。然后你当你把所有的出手阶段都覆盖到了一个这个程序才是安全无错的，对吧？所以为什么要为什么用这个exception机制，从本质上来说是不是一个非常靠谱和安全的一个方法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:31",
      "text": "听到这里这个勾程序员和C程序员一定会觉得非常有理。然后其他所有程序员都觉得，我靠，这是在说什么邪教。我也不知道，我觉得有时候你使用的这种语言的错误处理机制，会让你产生某种特定的性格。就是我觉得写4D的人一般都会比较悲观，觉得这个东西是很有可能失败的。就是不管干什么都会说这玩意儿错怎么办？对，然后写java的可能就不会想那么多，总是会假设说这个世界会完美运行，出了错了再去想他应该怎么办。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:12",
      "text": "没错就这个4.3节他讲了另外一个我觉得挺重要的事儿，就是还是叫重用网络工具。但这里举到了一个例子，其实是我一直很想吐槽的。就是还有一个另外相关的事情，我们可以在这里聊一聊。就是他得到一个例子，就是unix系统里面有以前有一个很通用的功叫做IE叫做i net d低能对这个低门有什么用呢？就是它的那个作用简单，他会去监听一个端口或者有几个端口，然后去帮去接受连接。然后一旦他接受指定端口，没有指定连接，它会启动一个进程，然后把这个进程的输入套到这个连接上，然后输出套到这个连接的就一看发现自己有输入输出，对吧？对他把这个跟那个程序的输入输出是对接起来。这样的话其实这个程序本身就不用考虑它的这个输出是从哪里来的，他只用考虑去处去处理这个输入数就好了。就其他网络的事情也好，还是说从一个管道过来的也好，对这个程序员来说是透明的。这样它可以把它就可以重用这个ipad d里面已经实现过的那些网络的机制了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:22",
      "text": "当然他也说了一下原因，为什么其他的一些程序不能直接使用这个方法。但是其实仔细看来就是通可以通过某些方法去去就从架构上的改进是可以重用这一点的。就想到我在这个，当然这个安耐D现在用的也不是特别多哈。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:38",
      "text": "我想说的是另外一件事儿，就是现在不是有那个什么system d和之前在乌邦图里面用的比较多的那个叫upstart。他们本身有一个功能叫做demonization这件事情其实是一个非常诡异的事情，就是你要让一个程序成为一个守护进程。在unix系统里面你要做很多事情对吧？你要把它输出跟他调好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:01",
      "text": "重新做一遍，写一大堆脚本。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:03",
      "text": "你还得double folk，对吧？防止这样因为这个存被收割掉什么之类的事情。然后这也是因为这个，所以那个DJB才写了那个demon 2这套工具去完成这个事情对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:16",
      "text": "但其实这个事情是完全没有必要去做的，因为在现代的操作系统里面，基本上都有这种自带的工具去帮你做这个进程的监控和管理。使得你根本其实不需要写一个传统的传统意义上的dem进程。就是这个守护进程就不需要驻留后台，你就让那个程序驻留前台就可以了。然后这个前台的程序会被像system d还是APP start这种管理工具去管理，使得它能够实现DM进行同样的功能，甚至更好的实现这个功能。所以应该把这个东西交出去，让更专业更专注的工具来完成这个事儿。而不是说所有的人写一个那种server的时候，都需要去做一个double fork。就变成低这种形式。对，这个是我要吐槽的一个事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:06",
      "text": "然后4.4节讲到另外一个可以重用的部分，叫做access control，就是这个访问控制。就在一般的这个unix系统里面，这个文件的权限全系统是一个比较简单和常用的访问控制的基础。当然也有很多人说一个简单的用户组和其他这种分类的方法并不能解决所有的问题，所以后来又叫做ACL。Access control list的这种更高级的方式来做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:33",
      "text": "但是access control list其实是现在在windows里面，在unit，在类unix里面已经不比windows里面少了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:40",
      "text": "对，就比如说OSN就是用的这个。对，但anyway这个是具体实现的问题。这个要点就是说如果系统已经有一个access control的工具了，不管是文件系统的权限也好，还是acl也好，我们应该尽可能去重用它。因为没有编写的代码是最少的代码。因为如果一个代码量是零的话，它的bug量肯定是零的对对吧？所以怎么去重用它就是一个非常要紧的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:08",
      "text": "就很多人就愿意去重新发明轮子，要自己搞一套自己的用户账号或者权限系统。那其实是往往是啊适得其反的。没错。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:19",
      "text": "然后4.5提到另外一个重用，就是文件系统。就很多人说我要自己写一个自己的这个storage layer，就存储层怎么怎么的，要做什么什么事儿。但其实现代的文件系统就可以做非常多的事儿，就完成一些基本的存储功能是都是没有问题的。没有必要在这个特别早期或者没有那么明确性能瓶颈的时候，去开发自己的这个文件存储的系统对吧？所以能够总体来说4.4的一个核心要务就是说如何降低代码。刚才讲的那个就是重用这个，从就说就简单如何重用代码或者重用功能。比如说用这个函数去去写通用的功能，然后使用网络工具，从用这个访问权限控制文件，文件系统对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:08",
      "text": "这都是一些。对，基本上都是在教你怎么样不要去重新发明。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:12",
      "text": "没错。然后第五节其实还是挺有意思的，就刚刚讲的我们讲的那个叫做如何去减少这个trusted code受信任代码的部分。这当然就是从一个架构的方法来做了。这里有细节比较多，我们就不就一一过了。有兴趣的朋友就可以去看一下里面的细这个细节。因为这篇文章总体来说还是不难懂的。然后你只要具备一些基础的unix相关的知识，就是能够看个89百分之八九十的。然后我相信看了这篇文章以后，对你以后编写程序也好，做这个系统架构也好，会有一个非常大的改观。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:53",
      "text": "另外我觉得也可以从软件用户的角度来讲，来谈一谈怎么样才能避免在中类似于x code ghost这样一种这样这这样的落陷入这样的窘境里面。我觉得最重要的一点就是远离国产软件，或者远离国内的互联网环境。你说这件事情中招的人最大的一个问题不就是贪便宜图省事儿了。当然一方面也跟这个墙的存在不可分离，就是在网速非常慢的情况下，你要连美国的一个服务器下载东西，的确是很痛苦。这件事情我记得在好像不是升级x code，而是在升级那个新的在下载一个新的IOSIOS ten升级包的时候，两个特有同时给出了下载升级包的截图。一个在国内的，在国外，然后在国内就是还有4个小时，然后在国外这个在国外的这就是还有两分钟。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:01",
      "text": "对，其实这个我觉得反而是苹果的责任，因为他毕竟是要在中国市场长期存在的一些公司，他为什么不在中国市场。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:14",
      "text": "多在中国搞个CDN是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:16",
      "text": "他是有CDN的，就是我我的情好，我好奇在于为什么在有CDN情况下还这么慢。这个是我觉得是不能够接受的这。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:26",
      "text": "难道不是CDN的责任吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:29",
      "text": "这个是CDN的责任没错，但是这个CDN是苹果买的，或者他他去去去花钱找的智能服务。当然你可以说中国的网络是不如美国。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:39",
      "text": "中国的网络环境的确是非常复杂的。你说中国的网络投放做的好的厂家，其实也只有那几家真正的巨头能做好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:49",
      "text": "但是就是找那些机构合作，这个有什么关系呢？对吧？我觉得这个是苹果的责任，他应该把这件事情做好的，但是他并没有做好。这个我们就不去吐槽政策，我们毕竟是一个技术性的节目。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:03",
      "text": "其实有有一件事儿我觉得还可以探讨一下，就是说刚才我们讲了一些常见的一些技术手段去解决这个问题。但是其实有一个细节是在今年的早些时候，我在那个go line的语言组里面问过这个问题。就是说我问你这么一个事，就给定你同一个编译器，就是这个binary是一样的。然后给定你同一套源代码，你能否保证在不同的机器上去执行同样的这个编译器编译同样的代码，得出来的那个结果是叫buy to bite identification，就是每一个字节都是相同的。知道我叫做deterministic build，就是可预测的build.",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:52",
      "text": "这跟编译器的policy有关吗？有些编译器是不可能给出这样，哪怕你在同一台机器上只相差一微秒，他也不一样，他会打个standing在里面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:03",
      "text": "对，这就是问题所在了。因为首先说我我先说一下为什么我觉得这个是一个deterministic build是一个非常好的特性。因为我们可以很负责任，就是reproducible，就是我可以重现这件事情。因为我说如果我的同一套源代码，就是因源代码本身可以用git，就刚才我讲的一个哈希的方式去验证它的这个等同性，对吧？对，但是我并不知道，如果我每次同一套源代码，同一个编译器编出来的结果都是不可都不一样的话，我是没有办法建立源代码和编译出来结果之间的一个一映射的关系的，因为它有很多其他变量是不在这个函数的描述中的，对吧？所以说后来我就去琢磨去去做了一个那种很不全面，很不靠谱的小调查。其实大部分的编译语言或者工具都不能做到这一点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:03",
      "text": "但原因因为我是你要实现你的说这个determined compiling的功能的话，那你需要任何一个compare的设计者，都需要在设计的初期把它当做一个fundamental的够就是一个一个设编辑器的设计目标来做，才可以在最终的编辑器的结果上实现这个。因为我觉得实现这一个一实现这个目的，有一个很明确的要求，就是要明确的区分哪些是可变的，哪些是可变的变异条件，另外一些哪些是不可变的变异条件，就是他在变异的时候他必须确定说比如说比如说我给出一个优化的flag，o一还是2，O0还是O3。给出O0的时候所包含的会被编译的部分和O3会编译的部分其实是不一样的，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:06",
      "text": "这个问题我能够理解，但是我觉得这个就是可能要加一个限制条件，就是说编译的参数和编译的环境得是相同的对吧？我如果我们把这个编译的过程想象成一个数学的函数叫做F的话，它的输入应该包含哪些部分？我们可以想一下，包括源代码。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:25",
      "text": "对是吧？最大的问题就是这个函数里面所要给出的这个变量实在是太多了。然后你必须在设计函数的时候就明确的知道哪些变量是可以被包在一个额外的信息里面，作为整个最终所要递交的这个binary的源信息给出去的。比如说编译时间，编译时间你可以不包含在那个最终的binary里面，你只把它放在一个binary的附加包里面给用。对，就要求你一上来要明确的区分哪些是可变的，哪些是不可变的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:08",
      "text": "所以我觉得我就我就想说这件事情我觉得在技术上应该是可以做到的。如果我们不做，哪怕是我们对这个源代码做一些比较疯狂的transform变形也是可以做到。因为只要就我说，如果我们把编译过程想想成一个定义为一个函数的话，它的那个输入一个函数的输入应该是什么？应该是这个源代码。你比如它的一个文本的形态，我们可以直接通过算哈希的方法算出它的一个就可以比较它的一个不变性。然后就是说各种编译的参数，我们可以按一个方法给出的编译参数应该是相同的，然后就是编译环境的。然后环境其实在某种自动程度就在那个就扯的比较远，也可能会牵涉到整个操作系统是不是应该一个是可以叫做immutable的系统对吧？理论上如果我们不考虑时间的因素的话，是有办法把这个编译过程做成一个函数的，是一个所谓一个函这个是一个数学意义上的函数，就是它的给定一个输入，它的输出是恒定的。而输出是恒定就是FX一定。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:13",
      "text": "等于它是一个函数编程以上的函数。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:16",
      "text": "对对对，它它不是一个我们programme的函数，而是一个mathematical function，对吧？然后我的这个问题在那个go line的那个groups里面，就还挺多人在下面回复的。然后后来是说有一个勾的这个开发，就go语言的开发者，他说他其实在尝试做这件事儿，但是我不知道后来怎么样了，但他的说法不是用那个那个描述叫deterministic build，而是说叫做repeatable build。所以这件事情我还是蛮期待的，不知道他们会在一点几还是二点几里面把这件事情变成现实。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:57",
      "text": "好吧？这是一个是来我觉得是一个相对来说比较小众的需求，或者说它是一个很明确的需求。但是相对于编译器所要完成的许多其他需求来说，没有那么高优先级的一个需求。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:16",
      "text": "但如果你是说你对这个安全有追求的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:20",
      "text": "你你从安全角，你从安全专家的角度来讲，这个需求毫无疑问是非常重要的对，可是如果你市场。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:28",
      "text": "不是那么不市场不是这么决策的，是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:32",
      "text": "对，比如说你是一个写shader的人，或者是你是一个写whatever UI的人，你可能会觉得这些事情没有那么重要，速度或者是优化程度才是乃至于什么前端后端的清晰分离，静态分析才是编译器最重要的部分。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:52",
      "text": "对不？Anyway我们这里还是要提一篇跟刚才那个没关系，跟提一个神级一样的论文。这个是k thomson在1984年发表的一篇简短的一个他他。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:06",
      "text": "1984年得了图灵奖。然后他在图灵奖的颁奖。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:11",
      "text": "里说这是一段一个小的paper，只有很少三页纸，非常简单。他讲了这么一个事儿，就是说因为听他们这个人可能还是要如果大家名字，如果这个名字你都没听过的话，你如果你是程序员的话，应该就该去面壁思考了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:30",
      "text": "如果你是windows程序员的话，情有可原。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:33",
      "text": "哪怕是winter程序员，我觉得都不是情有可原。因为这是C的鼻祖。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:39",
      "text": "对，好吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:40",
      "text": "King thomson是unix的作者之一，当年在贝尔实验室的时候，他当然也是C的作者。然后到现在他在google是go语言的作者之一。对，就这么多光环，我觉得已经够那个了，就不用再说别的了。他写这一篇其实是这个篇比刚才那篇文就更加技术性了。因为有没有几个比较tRicky的一些概念，其实我到现在为止还不是特别理解。那要不吴涛你来解释一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:17",
      "text": "s code ghost的这件事情，其实并不是什么特别新鲜的事情。就比如说往回硕有一在2012年的时候，有一件事件就是普提的中文版，你看又是中文版在被人植入了后门。就是你在使用这个中文版的铺底的时候，你的SSH的公钥和私钥都会被上传到一个服务器上。对，然后你要连接的机器也会被上传到这个服务器上。所以如果你使用了这个被感染的版本的铺，那也就等于把你自己的那个服务器的钥匙拱手送给了那个感染者。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:01",
      "text": "然后更古早的就是我们之前提到那个delphi 7的virus。而这一切其实在早在80年代，在84年，在肯汤姆森的论文里面就已经提到这件事情。就是他那一年他去接受ACM的图影奖。然后他在图灵奖上就讲了自己在当时的c compiler，就是CC在那个unix的CC compiler里面植入后门的这件事情。所以这实际上是一件非常古老的事情。然后有兴趣的同学也可以去看一看这个kasson的这篇。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:43",
      "text": "论文非常短，只有三页。",
      "speaker": "发言人2"
    },
    {
      "time": "01:45:45",
      "text": "但是对，因为它毕竟它只是一个讲话。对他只是从这个讲话上来的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:51",
      "text": "其实那篇论文的最后结尾那一段其实还挺有意思的。就是他在80年代对这个安全和这个法律，还有这个责任的鉴定，其实跟我们现在的一些想法还都比较超前。至少说这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:07",
      "text": "具体。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:08",
      "text": "就不再去描述了，大家可以自己有兴趣看这篇文章好了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:13",
      "text": "对，而且很有趣的是，他在那个文章里面还提到说，其实这也不是他原创的这种这这样这样一种这样一种手段。他最开始读到这些这种可能性的攻击的是在一个空军的的杂志上面，就是一个unknown的未知的空军的文档上面，他读到了这样一种。攻击的可能性。所以可能整个来整个事情的想法还要比我们所知道的追溯的更早。但直到今天这样一种怎么说呢？安全漏洞还是在被害中。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:57",
      "text": "就他他那句话，他那个文章的标那个标题叫做reflection on trusting trust。其实可以对应到刚才我们节目开始的时候，就关于这段讨论开始的时候，你提到那个问题，你如何真的信赖你的这个工具呢？他那边最后结尾的那段的那个章节的第一段话是这么说的，叫做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:47:22",
      "text": "You can trust code that you did not totally create yourself.",
      "speaker": "发言人1"
    },
    {
      "time": "01:47:26",
      "text": "对，这其实RMS，这就是RMS是一样，所以也比较巧了。他还提到有一个就是我们到其实到我到现在认为就是说这没有。就刚刚你说，如果你真的偏激一点的话，真的是没有真正的安全的。因为叫做比如说这个。A well install micro bug will be almost impossible to detect.",
      "speaker": "发言人2"
    },
    {
      "time": "01:47:47",
      "text": "就是一个安装的非常精巧的这种微代码。微代码就是像这个什么就是硬件里面驱动某一个小硬件的这个区域，或者是一个驱动的那个barrow，是基本上不可能被发现的。因为实在是太难太底层了，就越低越底层的bug越难发现。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:07",
      "text": "如果你更进一步的话，那在硬件层面上植入的病毒或者是后面的基本上不可能对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:48:14",
      "text": "IC电路板级别的bug，是吧？对，这个据说是有的，听说那就是小道消息没有，也没有经过确认。英特尔的芯片里面据说是只有这个NSC的后门的，但是我不知道到底怎么如何实现这一点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:32",
      "text": "所以其实有时候我们嘲笑一些龙芯或者是国产CPU计算机国产化的知识者们会说这简直是有道理。",
      "speaker": "发言人1"
    },
    {
      "time": "01:48:45",
      "text": "为什么说这么强调自主知识产权？其实也是说的本质上就自己这么一件事儿。就是说他说you can't trust software，you didn't write your soft. 那你也不可能说你就是如果你不能信任不是你自己写的软件，当然更不可能信任不是你自己造的硬件了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:03",
      "text": "没错，所以从这一点上来说，这个计算机国产化是有其意义的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:10",
      "text": "或者说按照那个那个话来说，如果你对你的软件安全足够介意的话，你一定要从硬件做起。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:20",
      "text": "那如果你要足够在意你的国家安全的话，你必须要注意你的信息安全。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:28",
      "text": "好吧，今天的节目就到此为止了。感谢收听IPNP cast网络旗下的IT极速主题娱乐节目内核恐慌。我们号称hard core，但是也没有干货，想听的人听，不想听的人就别听。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:44",
      "text": "你可以为本节目捐款，捐款机子是IPN dot LI splash kernel panic splash donate。捐款金额随意，只要是八能被八整除的正整数就可以。捐款不会给你带来什么，不捐也不会你失去什么。我们的口号是no hot feelings.",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:03",
      "text": "未读本期口号不是这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:06",
      "text": "对，本期口号是trust .",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:07",
      "text": "to even .",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:08",
      "text": "you compare了and your computer.",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:13",
      "text": "and you see trip and your government.",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:18",
      "text": "and yourself .",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:19",
      "text": "and yourself.",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:21",
      "text": "如果你有任何反馈，可以发电子邮件到kernel panic at IPN dot LI。同时也欢迎您收听IP旗下其他几档节目。IT公论未知道太医来了，流行通讯high story博物主题节目，博物志美国大选主题节目。这是新开的叫做选美，我们下期节目再会对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:45",
      "text": "我们下期节目一定会来的。虽然这一次停了两周，然后让很多听众朋友们也觉得非常的用一个什么形容词难过，或者是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:57",
      "text": "觉得翘首以盼翘首。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:01",
      "text": "以对。其实这期节目差点就没录成。兄弟们，各位听众，就是我本来今天是要去慕尼黑的，然后我女朋友说如果不录节目的话就不让我出门，所以我只好在这里录了这期节目。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:16",
      "text": "感谢吴涛女朋友大无畏的牺牲，让本期节目死灰复燃。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:21",
      "text": "不对对，如果没有他的话，各位可能还要再等不良就对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:29",
      "text": "好吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:29",
      "text": "我们虽然这一期也没有那么精彩，但我们还是会继续录下去。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:37",
      "text": "其实这些我们发现一个挺好的把节目做下去的方法。什么方法？每期找一篇论文来讲。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:46",
      "text": "倒也是可以，反正不是有什么什么计算机程序员必读的20篇论文之类的文章，我们确实要讲。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:56",
      "text": "要不然确实要讲那么深度。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:01",
      "text": "还是可以的。基本上如果听完我们这20期节目的话，就可以完成一个叫什么函函授课程。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:11",
      "text": "对，是个大视频。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:13",
      "text": "对，其实我最近刚刚开始了一门开源的课程，而且是每写完一个case就要拍一张照片，然后要敲一段字来证明是你刚刚做这个quiz.",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:28",
      "text": "是什么方向。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:31",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:33",
      "text": "这个是哪一块？",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:36",
      "text": "具体叫做什么？是靠sara出的，叫data analysts and statistical influence，就讲数据分析。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:48",
      "text": "所以你是重修统计学了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:51",
      "text": "有一点，我对他感兴趣，主要是因为他他会讲那个R然后我们公司的产品里面也会就也支持了R所以我想反正可能将来用得上，就不如学一学。而且这个最后是有证书的。如果你就是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:07",
      "text": "学完这个，你就可以给自己标贴个标签，叫做MA data scientist。",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:12",
      "text": "这还是离太远了，要真正成为datta scientist的话，可能要上另外几门比较深的课。这个人是非常浅显的感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:22",
      "text": "他会讲些什么内容呢？大概就提纲是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:25",
      "text": "Objective是一上来是讲intro statistics，哼然后后面会讲什么scatter plot，然后后面会讲什么experimental design。如果你要设计一个experiment来来验证一些统计学生的观点的话，会需要我需要注意什么OK然后会有什么？就是使用R里面的各种各样的plot功能来来来建立图表，来建立8 plot，然后告诉你各种plot有什么样的方法。其实比较introduction.",
      "speaker": "发言人1"
    },
    {
      "time": "01:54:09",
      "text": "不错。对，所以我才想起上次是谁说的，说我们这个高中大学数学学那么多什么微积分，其实并没有什么鸟用。对，这个日常生活反而是应该把这个函数统计学数理统计做教的比较深刻。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:27",
      "text": "反而对日常好说了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:54:28",
      "text": "就是应该是吧？应该是不要说的对对，我我我在此深刻表示认同。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:36",
      "text": "好吧，所以这门课刚刚开了两个礼拜。如果你们有兴趣的话，也还是可以跟进来。然后还挺有意思的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:54:44",
      "text": "跟吴涛一起学习进步。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:50",
      "text": "OK, 那就到这儿了，我们两周之后再见。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本期节目深入探讨了编程与系统设计中的关键议题，如解释器和虚拟机中内存越界问题、编写精简代码以提高效率和可维护性、重用现有工具减少开发工作量、以及可预测构建的重要性。同时，讨论了网络安全问题，强调了开源软件的透明度和安全性，以及加密技术和区块链在数据保护方面的潜力与挑战。节目提倡持续学习和适应技术发展，强调了代码审查和安全编码实践的重要性，并呼吁科技社区共同努力提升网络安全意识，构建安全透明的数字环境。",
    "qa_pairs": [
      {
        "question": "这算是什么重走长征路？",
        "answer": "就是因为过去的这我在德国有九年了，然后过去九年里面一般都是他们只能从电话或者是照片里面知道我曾经在什么地方待过。然后这次可以身临其境的看一看，我觉得还是挺有意义。",
        "time": "00:01:09"
      },
      {
        "question": "你父母之前没去过德国是吧？",
        "answer": "对，这是第一次来，甚至之前二老连护照都没有，所以这是第一次出国。",
        "time": "00:01:28"
      },
      {
        "question": "上次因为你家在天津，所以还是要关心一下那个爆炸对你家影响怎么样？",
        "answer": "我们家距离爆炸现场的直线距离是三十多公里，所以算是幸免于难。但如果和其他各位比起来的话，还是比较近的。目前看来还好，没有特别的影响。",
        "time": "00:02:05"
      },
      {
        "question": "现在需要特别需要伞公司的保护吗？",
        "answer": "对，是生化危机的梗，那个还挺奇怪的，我经常在路上看到别人贴着这个标识。",
        "time": "00:03:03"
      },
      {
        "question": "那个贴在笔记本电脑上的sticker叫什么？",
        "answer": "那个东西没有学名，就是贴在笔记本电脑表面的纸，就叫sticker。",
        "time": "00:04:12"
      },
      {
        "question": "上一期节目中提到的clean room方法，是指禁止开发吗？",
        "answer": "是的，应该叫做clean room，后来误说成了y box。",
        "time": "00:06:14"
      },
      {
        "question": "是否有听众写信反馈节目内容？",
        "answer": "有几位热心听众给我们写来了来信，其中一位不愿透露姓名的朋友，我们念了他的信并为此道歉。",
        "time": "00:06:43"
      },
      {
        "question": "对于中老年程序员工作境遇有何看法？",
        "answer": "认为即使工作遇到瓶颈，也不必过于纠结一定要成为大牛，可以考虑开一个能自谋其利的小型公司，实现工作生活的平衡也是一种成功。",
        "time": "00:10:33"
      },
      {
        "question": "对告别专业程序员身份有何感想？",
        "answer": "每个行业都不容易，虽然从专业程序员转行，但仍觉得编程知识有助于提升其他领域的工作效率。",
        "time": "00:13:50"
      },
      {
        "question": "金融领域是否需要像计算机科学那样去深入理解和默写算法或原理？",
        "answer": "金融领域确实存在类似情况，例如使用excel模拟交易组合模型和期权组合，尽管有现成工具，但这种对原理的理解有助于透彻认识金融产品的运作机制。不过，随着时代、领域的发展以及工具获取成本的变化，这种“有用”的界限也在变化。",
        "time": "00:16:28"
      },
      {
        "question": "在编程时，是否记住函数用途及签名有助于提高编程效率？",
        "answer": "记住越多函数的用途和签名，在写程序时被打断的概率就越小，能提升编程流畅度，但也有借助IDE自动完成功能来减少查阅次数的情况。",
        "time": "00:18:44"
      },
      {
        "question": "高能物理与CERN（欧洲原子能中心）及其root计算框架的关系是什么？",
        "answer": "CERN发明的WWW最初是为了解决高能物理的分布式计算问题而研发出来的。其中，root是一个C++计算框架，带有交互环境，用于数据处理和绘图，但其文档质量一般。对于是否需要记住函数细节，这取决于开发任务的复杂程度和个人习惯。",
        "time": "00:21:26"
      },
      {
        "question": "对于别人家十岁小孩Ryan编写的游戏“fly”，你们怎么看？",
        "answer": "尽管这个游戏看似简单，但由十岁的小朋友编写完成是非常了不起的成就，展示了他在编程、音乐创作、3D模型制作以及音频编辑等方面的良好起步。这个案例也引发了关于家庭教育和基因传承的讨论。",
        "time": "00:32:11"
      },
      {
        "question": "这个小孩在关于自己的页面上列出了自己喜欢的游戏，包括Minecraft、Monster Hunter和Destiny，你对他在这么小的年纪就接触这类游戏有什么看法？",
        "answer": "游戏确实有分级制度，不过在70年代纸面桌面游戏流行的时候，可能同龄的孩子也会玩一些复杂的游戏规则，比如自制数值卡和进行各种游戏计算。对于这个小孩列出的游戏，虽然有些像是《命运》这样的游戏通常需要团队合作，但他这么小的年龄就表现出对此类游戏的喜爱并不罕见。",
        "time": "00:34:32"
      },
      {
        "question": "Max Howell去谷歌面试时未能完成翻转二叉树算法，被谷歌拒绝后去了苹果，这个故事的发展如何？",
        "answer": "Max Howell在谷歌面试失败后去了苹果，并在推特上分享了自己入职苹果的第一天。虽然他在苹果的具体工作职责不详，但可以推测他在苹果内部可能会为程序员提供支持服务，而不是直接开发面向最终用户的产品。",
        "time": "00:36:52"
      },
      {
        "question": "美国有个叫艾哈曼（阿曼）的中东后裔小男孩因为制作电子表被误认为炸弹而被捕，这件事引发了怎样的社会反响？",
        "answer": "这个事件在美国引起了轩然大波，反映出种族和族裔特征可能导致个体在进行日常活动时遭受不白之冤。在中国，类似的情况可能会受到不同程度的关注，但总体来说，人们可能会基于刻板印象或肤色做出预判，而这背后反映的社会问题令人深思。",
        "time": "00:42:25"
      },
      {
        "question": "那么，对于x code被搞后门的安全事故，你觉得苹果公司有没有责任呢？",
        "answer": "从技术层面来讲，苹果公司可能不直接承担责任，但如果从更深层次的角度来看，由于苹果采用的这种集中化模式，导致了今天这样的情况发生。",
        "time": "00:52:06"
      },
      {
        "question": "那么，苹果的问题究竟在哪里呢？",
        "answer": "问题在于苹果提供的x code是一个集中的、独此一家的工具，这为攻击提供了机会。如果在其他世界里，比如C世界，因为有多种编译器和下载点可供选择，类似的问题可能就不会轻易发生。",
        "time": "00:52:28"
      },
      {
        "question": "那么对于安卓开发环境是否存在类似的问题，有何看法？",
        "answer": "目前无法确定安卓开发环境是否存在类似问题，但可以肯定的是，安卓环境下的安全问题更为严重，因为支付平台SDK可以被集成到APP中，且无需额外步骤即可读取用户信息。",
        "time": "00:52:58"
      },
      {
        "question": "开发者如何确保下载和使用的编译器或IDE没有被篡改过？",
        "answer": "实际上，很难验证闭源、单一发布者的编辑器编译器的安全性。即便选择相信苹果官方的编译器，也不能完全排除其被修改的可能性。",
        "time": "00:55:59"
      },
      {
        "question": "那么，有没有可能通过技术手段来解决这个问题呢？",
        "answer": "技术上确实有一些解决方案，例如通过沙希数验证、代码签名以及防篡改机制等，确保开发者使用的编译器是官方发布的原始版本。同时，还可以利用现代文件系统如ZFS中的数据指纹技术，快速检测到文件是否被未经授权篡改过。",
        "time": "01:05:09"
      },
      {
        "question": "在新版苹果操作系统中，rootless root功能是做什么的？",
        "answer": "rootless root功能是为了解决之前超级用户权限过大、普通用户容易受到潜在危害的问题。这次升级后，系统中一些核心部件的文件不再允许普通用户直接更改，即使是在尝试安装软件时，也不会出现要求输入密码等可能导致系统受损的操作提示。",
        "time": "01:06:25"
      },
      {
        "question": "当前操作系统对于权限问题的处理方式是怎样的？",
        "answer": "当前系统会弹出提示框询问用户是否允许程序或应用进行系统修改，比如UAC机制。但这种方式导致用户疲劳，往往忽视了提示内容，无法有效解决权限问题。",
        "time": "01:07:19"
      },
      {
        "question": "是否有一种更有效的解决权限问题的设计方案？",
        "answer": "是的，通过设计可以实现更好的解决方案，例如使用哈希数精确告知用户某个文件出现问题及其后果，而不是简单地询问用户是否同意操作。同时指出目前非黑即白的权限管理模式已不够用，需要引入更精细的设计，如Daniel J. Bernstein提出的改进方案。",
        "time": "01:08:22"
      },
      {
        "question": "Daniel J. Bernstein（DJB）是谁？",
        "answer": "Daniel J. Bernstein是伊利诺伊斯大学沙哥分校的教授，他在数学统计和计算机科学系工作，拥有多个著名作品，如NACL库，它是安全网络通信的重要基石。他还提出了DNS curve加密DNS协议以及撰写了一些关于提升软件安全性的论文。",
        "time": "01:09:50"
      },
      {
        "question": "DJB在2007年发表的一篇论文主要讨论了什么内容？",
        "answer": "DJB在2007年发表的论文名为“Ten Years of Qmail: Some Thoughts on Security”，文中探讨了如何编写安全可靠的软件，强调减少bug、减少被信任代码量等原则，并批评了头痛医头脚痛医脚的安全防护措施，如防火墙、防病毒软件和入侵检测系统，并提出这些方法并不能从根本上解决问题。",
        "time": "01:16:01"
      },
      {
        "question": "沙盒模型和进程隔离是如何防止失败程序造成灾难性后果的？",
        "answer": "沙盒模型通过实现进程隔离，可以限制失败的程序对其他运行程序的影响。即使有程序出现错误或失败，也不会扩展到整个系统，确保了系统的稳定性。",
        "time": "01:22:28"
      },
      {
        "question": "为什么在C语言中直接解析邮件地址可能存在风险？",
        "answer": "C语言内存不安全，容易因内存越界等问题导致程序崩溃。为了避免这类风险，在处理如邮件地址解析这样基础功能时，可以选择使用解释器来创建一个限制性环境，虽然这种方法可能不如直接用C语言高效，但能减少潜在的安全隐患。",
        "time": "01:22:48"
      },
      {
        "question": "衡量程序员生产力的错误观念是什么？如何减少代码量并提高编程效率？",
        "answer": "一种常见的错误观念是用代码行数来衡量一个程序员的生产力，即认为写得越多代码量越大的程序员越高效。但实际上，消耗的代码量（即实现相同功能或specification所需代码的多少）才是更应该关注的衡量标准，同时也要考虑代码的可维护性、易读性等因素。通过第四节的内容，我们可以学习到将重复的代码封装成通用函数，即使函数很小也要考虑这样做，尽管在某些语言中过多调用函数可能会影响性能。此外，减少重复工作，特别是在错误处理方面，以及合理利用exception机制，将其视为常态处理而非仅针对异常情况的处理，有助于减少不必要的代码量。",
        "time": "01:25:07"
      },
      {
        "question": "对于重用网络工具和守护进程的看法是什么？",
        "answer": "文章中提到，不应盲目地为所有程序开发自己的网络服务层，而应该利用已有的成熟网络工具，如inetd，它能帮助监听端口并处理连接，使程序员无需关心网络细节，只需关注输入输出处理。同时，现代操作系统自带的进程管理和监控工具已经足够强大，无需所有程序都采用传统的守护进程模式。",
        "time": "01:28:12"
      },
      {
        "question": "如何在编程中实现代码重用并避免重新发明轮子？",
        "answer": "在编程实践中，应当尽可能利用现有的访问控制机制（如文件系统权限、ACL等），而不是自定义用户账号和权限系统。同样，应充分利用现代文件系统提供的功能，而非自行开发存储层。总之，核心思想是降低代码量，通过重用已有的、经过验证的代码来减少潜在的bug和安全风险。",
        "time": "01:32:08"
      },
      {
        "question": "为什么deterministic build是一个很好的特性？是否有人尝试实现deterministic build或重复性构建？",
        "answer": "因为deterministic build能确保同一套源代码在任何情况下都能产生相同的结果，这对于重现问题、验证编译结果的一致性和建立源代码与编译结果之间的明确映射关系至关重要。有一位Go语言的开发者尝试做这件事情，他将其称为“重复性构建”而非“确定性构建”，并且不确定是否会在未来的Go语言版本中实现这一功能。",
        "time": "01:37:03"
      },
      {
        "question": "要实现deterministic compiling，需要什么条件？编译过程如何设计才能实现确定性？",
        "answer": "实现deterministic compiling功能时，设计者需在编译器设计初期就将其作为一个基本目标，并明确区分哪些变量是可变的（如编译参数如O0或O3级别），哪些是不可变的。编译过程设计时应将编译参数和编译环境作为固定输入，同时通过某种方式（例如哈希）保证源代码不变性，并且在设计函数时明确哪些信息应该包含在内，哪些可以放在外部包中。",
        "time": "01:38:03"
      },
      {
        "question": "是否可以将编译过程视为一个数学函数以实现确定性？",
        "answer": "可以将编译过程抽象为一个数学函数，输入包括源代码、编译参数和编译环境，通过定义和处理这些变量来实现函数的确定性输出。",
        "time": "01:39:06"
      },
      {
        "question": "对于确定性构建的需求是否普遍且重要？",
        "answer": "虽然这一需求相对小众，但对于追求安全性的用户来说，它是非常重要的；但对于市场决策者而言，这可能并不是编译器优先考虑的需求。",
        "time": "01:41:57"
      },
      {
        "question": "K. Thompson在1984年的论文中提到了什么内容？",
        "answer": "K. Thompson在1984年的图灵奖颁奖演讲中，分享了他在Unix C compiler中植入后门的经历，强调了当时对安全、法律和责任的深入思考，这篇论文至今仍具有重要参考价值。",
        "time": "01:45:01"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "内核恐慌：重返德国与父母共游",
        "summary": "在本期节目中，我们分享了一次特别的家庭旅行经历。带着父母回到了德国，一个生活、工作过九年的地方，让他们亲身感受那些只在电话和照片中了解过的环境。此次旅行不仅让父母首次出国，体验了德国的美丽，也象征着一种对过去经历的回顾与珍惜。此外，节目还介绍了捐款信息和收听指南，强调了节目无干货的特点，以及对听众的自由态度。"
      },
      {
        "time": "00:01:55",
        "title": "天津爆炸事件对家庭的影响及日常生活中的一些观察",
        "summary": "对话中提到了天津爆炸事件对家庭的影响，虽然家庭距离爆炸现场有一定距离，但对毒害物质的泄露表示了担忧。父母由于化工背景对事件不太在意。此外，还谈到了对伞公司符号的见闻，以及对于苹果产品个性化装饰的讨论，包括使用sticker进行个性化表达的现象。"
      },
      {
        "time": "00:05:59",
        "title": "反思程序员职业发展与生活平衡",
        "summary": "对话内容涉及了对程序员职业发展中的困境和心态的讨论，以及如何在追求职业成就与生活平衡之间做出选择。讨论中提到了对于成功的不同理解和定义，强调了对于普通人来说，能够维持一个安稳的生活和开心的工作，实现工作与生活的平衡，也是一种成功。此外，也探讨了社会对成功的定义和期望，以及个人在这些期望面前如何保持真实自我，接受自己的命运。"
      },
      {
        "time": "00:13:16",
        "title": "转行经历与编程教育的影响",
        "summary": "对话中讨论了穆real告别专业程序员生涯，进入人生新阶段的感想，强调了每个行业都不容易。穆real表示，尽管现在的工作不需要写代码，但编程知识帮助提升了工作效率，让他能以更高效的方式完成任务。此外，他还提到自己接受的编程教育对未来工作的正面影响，比如能够与程序员更好地沟通。最后，通过一封信的形式，探讨了拖延症的问题。"
      },
      {
        "time": "00:15:33",
        "title": "转行程序员的心路历程与思考",
        "summary": "对话反映了一个人由于对计算机的热爱决定考研，转行到计算机科学领域的心路历程。尽管本科学习的是外语和金融，但无法放下对编程的热爱，尝试过科技媒体，觉得不够深入，最终决定考研深造。讨论了编程语言的选择和个人对于编程语言的偏好，同时提到了金融学习中的实际应用和理论学习的困境。探讨了编程中的记忆与理解，以及IDE（集成开发环境）的使用对于编程效率的影响，反映了编程学习的复杂性和个体差异。整个对话充满了对编程学习、职业选择和自我成长的深刻反思。"
      },
      {
        "time": "00:21:08",
        "title": "高能物理与互联网技术的发展探讨",
        "summary": "对话涉及了高能物理实验、欧洲原子能中心(CERN)及其在WWW(万维网)发源地的地位，突出了互联网技术在解决高能物理计算问题中的应用。讨论了ROOT CPP计算框架的实用性和数据处理能力，以及该框架在高能物理研究中的重要性。同时，提到了访问CERN和Web技术开发的实验室的经历，强调了超文本技术的起源及其对现代网络的贡献。此外，还探讨了编程语言和图形绘制工具的选择与应用，以及对某些技术的个人看法和体验。"
      },
      {
        "time": "00:26:09",
        "title": "十岁孩子编写游戏的惊人故事",
        "summary": "讲述了John Ker的儿子，一个十岁的孩子，如何在父亲的引导下，利用Scheme语言在Rocket开发环境中编写了一款名为“Fly”的游戏。这款游戏类似Flappy Bird，展现了孩子的编程才能。此外，孩子在制作游戏的过程中，还学会了使用Blender制作3D模型和Audacity编辑音频，体现了他在多方面的才华。故事还提到，孩子对于游戏设计有着浓厚的兴趣，喜欢研究游戏的各个方面，包括游戏的阵营和数值卡。尽管John Ker担心孩子玩游戏是否符合年龄，但孩子的成就无疑是令人惊叹的。"
      },
      {
        "time": "00:35:26",
        "title": "Max Howell经历谷歌面试失败后转投苹果",
        "summary": "Max Howell在谷歌面试中未能完成翻转二叉树算法，随后被苹果录用。他在推特上分享了自己在苹果总部的第一天，并暗示了可能的搬家。此外，还提到了Native for Android的发布，预示着在单一平台上为不同设备开发原生界面的理想可能实现。"
      },
      {
        "time": "00:37:46",
        "title": "探讨Java和JavaScript以及跨平台开发的未来",
        "summary": "对话内容主要探讨了Java和JavaScript的差异，以及跨平台开发工具和技术的未来。通过比较Java的Swing、FX与现代跨平台技术，讨论了跨平台开发对于开发者而言的优势和局限性。同时，也指出了尽管跨平台技术可以降低开发成本，提高效率，但其是否能成功解决市场痛点仍然有待观察。对于未来，认为跨平台技术的发展将取决于Android和iOS两大平台的竞争态势。此外，还提到跨平台技术的学习成本相对较低，因此学习和应用跨平台技术仍然具有一定的价值。"
      },
      {
        "time": "00:40:41",
        "title": "美国小学生因自制电子表被误认为炸弹",
        "summary": "一名美国小学生因为使用电子零件自制了一块手表，被老师误认为是炸弹，随后被警方带走。这一事件在美国引起了广泛关注和讨论，涉及到种族和安全问题。学生最终受到了Facebook创始人和奥巴马总统的亲自邀请，事件也引发了对种族歧视和儿童创造力培养的讨论。在中国，类似情况可能不会引发同样的误解，反而可能会受到鼓励。"
      },
      {
        "time": "00:49:33",
        "title": "软件安全与信任危机",
        "summary": "对话讨论了软件开发过程中遇到的安全事故，特别是围绕Xcode编译器被篡改事件展开。讨论者认为，苹果公司虽然从技术上对这一问题不负责任，但从更广泛的角度看，苹果的集中化模式可能导致此类安全问题的发生。此外，还探讨了安卓开发环境的安全性，以及信任单一发布者的风险和验证软件完整性的必要性。整个对话反映了软件开发领域内对安全、信任和分散化解决方案的深刻关注。"
      },
      {
        "time": "00:58:05",
        "title": "探讨编译器信任与安全机制",
        "summary": "对话集中在编译器的信任问题，特别是闭源代码编译器，提出了验证编译器完整性的方法，如使用哈希校验和代码签名来确保编译器未被篡改。此外，讨论了操作系统和文件系统层面的保护措施，例如通过构建文件的哈希树来检测未授权的修改。通过这些技术手段，可以增强对编译器安全性的信心，尽管完全的信任难以达成，但可以显著降低风险。"
      },
      {
        "time": "01:06:24",
        "title": "探讨操作系统安全及编程实践",
        "summary": "讨论集中在操作系统升级带来的安全功能变化，尤其是rootless功能的引入及其对系统安全的影响。进一步，深入分析了编程领域中，如何通过减少代码量、降低信任代码的范围、使用进程隔离等方法提高软件安全性。同时，指出了依赖用户判断和应对安全提示的局限性，强调了安全设计的重要性。此外，介绍了Daniel J. Bernstein在安全领域的贡献及其提出的关于软件安全性的见解，包括减少bug、简化程序、避免依赖于权限最小化等策略，以及性能追求对安全可能产生的负面影响。"
      },
      {
        "time": "01:24:13",
        "title": "减少代码量与提升程序质量的策略",
        "summary": "讨论重点在于减少代码量以提高程序质量和效率。首先提出传统衡量程序员生产力的方法—代码行数存在误区，强调应减少实际编写的代码量来衡量生产力。文章第四部分介绍如何通过创建通用函数、合理处理错误、重用网络工具、利用现代操作系统自带的工具而非手动实现守护进程、重用访问控制和文件系统等方式来减少代码量。第五部分则关注于如何减少受信任代码的量，通过架构方法来实现。整个对话强调了重用现有工具和系统功能的重要性，以减少新代码的编写，从而提高程序的可靠性和效率。"
      },
      {
        "time": "01:33:50",
        "title": "软件安全与编译器确定性构建",
        "summary": "讨论集中于如何避免类似Xcode Ghost的安全事件，强调远离可能引入风险的软件和环境。同时，探讨了苹果在提升中国市场的下载速度方面应承担的责任，并指出即使存在CDN，下载速度仍不理想。此外，深入讨论了编译器的确定性构建（deterministic build）的重要性，即同一源代码和编译器在不同机器上产生完全相同二进制文件的可能性，这对应于软件的安全和可重复性。提到了Go语言社区对这一特性的探索，以及对于编译器开发者来说，这是一个虽小众但极其重要的需求，尤其是对于追求安全性的专家而言。最后，引用了K. Thomson在1984年发表的论文作为技术参考。"
      },
      {
        "time": "01:43:06",
        "title": "图灵奖得主和计算机安全",
        "summary": "1984年图灵奖得主在颁奖演讲中提及，他在Unix和C语言开发中的角色，以及对后来Google的Go语言的贡献。讨论重点是他在C编译器中植入后门的经历，这强调了计算机安全的长久问题。提及的还有软件信任问题，如2012年Python中文版被植入后门的事件，以及更早的Delphi 7病毒。演讲中还涉及了信任软件的难题，提到即便深入到硬件级别，安全漏洞仍然难以避免。最后，讨论转向计算机国产化的重要性，强调了从硬件开始确保信息安全的观点。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "名称：内核恐慌"
            },
            {
              "children": [],
              "content": "平台：IPN podcast网络"
            },
            {
              "children": [],
              "content": "标签：技术、娱乐、播客"
            },
            {
              "children": [],
              "content": "主题：科技新闻、编程、安全"
            }
          ],
          "content": "1. 节目介绍"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "方向：程序员之路、编程语言选择、技术难题"
                },
                {
                  "children": [],
                  "content": "例子：程序员工作困境、选择编程语言的重要性"
                }
              ],
              "content": "2.1 编程与技术"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "事件：Xcode ghost事件"
                },
                {
                  "children": [],
                  "content": "解决方案：重视代码签名、源代码验证"
                },
                {
                  "children": [],
                  "content": "人物：肯·汤姆森的关于信任的思考"
                }
              ],
              "content": "2.2 安全问题"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "工具：Xcode、Root计算框架"
                },
                {
                  "children": [],
                  "content": "方法：一次编写多处运行、代码复用、自动化测试"
                }
              ],
              "content": "2.3 开发工具与方法"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "课程：数据分析和统计学在线课程"
                },
                {
                  "children": [],
                  "content": "目标：提升数据分析能力、统计学知识"
                },
                {
                  "children": [],
                  "content": "工具：R语言、Python"
                }
              ],
              "content": "2.4 学习与教育"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "话题：对阿拉伯名字的误解、种族主义、安全软件信任问题"
                },
                {
                  "children": [],
                  "content": "影响：社会偏见、技术社区的多样性"
                },
                {
                  "children": [],
                  "content": "解决方案：提高文化理解、推动技术平等"
                }
              ],
              "content": "2.5 社会与文化"
            }
          ],
          "content": "2. 主要讨论内容"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "安全措施：代码签名、源代码验证、哈希验证"
                },
                {
                  "children": [],
                  "content": "网络技术：DNS curve、HTTPS"
                },
                {
                  "children": [],
                  "content": "文件系统：ZFS、Unix"
                }
              ],
              "content": "编程语言：Scheme、CPP、Racket"
            }
          ],
          "content": "3. 技术细节"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "编程学习：鼓励持续学习新技能和编程语言"
                },
                {
                  "children": [],
                  "content": "安全意识：提高个人和企业对软件安全的认识"
                },
                {
                  "children": [],
                  "content": "社会问题：促进技术社区的多元性和包容性"
                }
              ],
              "content": "对开源的支持：提倡使用开源软件和工具"
            }
          ],
          "content": "4. 观点与建议"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "社区：推动开源软件、支持技术多样性"
                },
                {
                  "children": [],
                  "content": "企业：采用安全措施、重视代码质量和安全性"
                }
              ],
              "content": "个人：继续学习新技术、提高安全意识"
            }
          ],
          "content": "5. 行动计划"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "鼓励：继续关注和参与技术社区的发展，共同推动技术进步"
                }
              ],
              "content": "期许：希望听众能够通过节目学习到更多技术知识、安全意识和社会责任感"
            }
          ],
          "content": "6. 结语"
        }
      ],
      "content": "脑图摘要"
    }
  }
}