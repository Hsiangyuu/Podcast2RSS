{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df90e",
  "title": "35. 没有主题的闲聊",
  "task_id": "g34dn8ewr5alnwjz",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "欢迎收听IPNP cast网络旗下的ID技术主题娱乐节目内核恐慌。我们号称哈口，但是也没有干货，想听人听，不想听的人就别听。本节目的网址是kero panic dot FM，我们推荐大家使用podcast客户端订阅节目，详情请访问IPN dot LI slash FAQ。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:17",
      "text": "欢迎为姐本节目捐款，捐款地址是kero panic dot m slash donate。捐款金额随意，只要是八的正整数倍就可以。捐款不会为你带来什么，不捐也不会让你失去什么。我们的口号是that's the thing about people who think they hate computers。What they really hate is losing programmer.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:39",
      "text": "我问你个问题，你在德国吗？哼然后如果你买一些那种我们叫做gorgets，就是一些小的硬件产品。对各种一些就是不是那种太主流的比较小众的电子产品的时候，一般会去哪地方买？",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:55",
      "text": "亚马逊亚马逊。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:57",
      "text": "德国基本上。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:58",
      "text": "是亚马逊德国就取决于你说的这个德语一词时间隔出，取决于你说的这个东西的的稀缺程度，或者说它的小众程度。亚马逊上可能没有卖的，但绝大部分时候如果你是在某一个广告上看到的话，那基本上是亚军应该有的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:21",
      "text": "但比如说如果是比如说像类似于这种kick starter上面那种提到的那就非常重要。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:26",
      "text": "的一种什么印尼go go kick starter这上面都想卖的东西都是非常难的。当然也取决于他这个开源项目，就是这个kick shots的项目的地点。比如说前一阵子有一个自行车还是什么东西，他开的那个是西班牙的那欧洲来说发货就还可以。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:46",
      "text": "但是欧洲本土的都还好是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:48",
      "text": "对，如果在美国的话就非常那个了。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:53",
      "text": "那你平时比如说有没有买什么小的需求，一些小的电子产品是在亚马逊抖音上买不到的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:59",
      "text": "其实还挺多的。就比如说尤其是一些阿杜伊诺方面的板开发板什么的，这个其实亚马逊上还是挺难挺少见的，即便有的话可能也比较贵。所以还有一些替代方案，但就没有什么特别好的可以一下子说得上名字来的网站。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:20",
      "text": "现在我给你隆重推荐一个很好的去处，aliexpress.",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:26",
      "text": "天哪。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:26",
      "text": "好吧，这个是我后来发现的一个挺好玩的。我先后面会说为什么会发现这个东西？Aliexpress是阿里巴巴的面向那种海外的，你可以类似于他像阿里面向外国人的淘宝。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:43",
      "text": "对它是一个这就是逆向逆reverse proxy一样，那是一个逆向淘宝，逆向海淘。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:49",
      "text": "应该是对，因为我发现很多那种电子产品，现在深圳那边都很都在那边生产组装的，对吧？但是你像在国外的话，你买它就吸引很多那种不知名厂牌的。但是觉得比较廉价的，就是性价比比较高的那些电子产品，其实还挺难的。发现这个aliexpress上面卖的还挺多的，然后我就悲剧了。因为a alex press是不卖到中国的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:12",
      "text": "真的吗？所以aliexpress上面这些商品到底是出口OK？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:17",
      "text": "就是他那些卖家是只是从中国深圳这些地方他往国外我卖，但是他他不一般，不发往国内。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:25",
      "text": "OK就宁宁诵，宁卖洋鬼子，不与家奴。第一，因为国内的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:30",
      "text": "你就直接上淘宝买，一般是这样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:34",
      "text": "但是那你为什么会有这个阿里extra上买到的东西国内买不到的困惑困扰呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:41",
      "text": "就是一个selection的问题。就是我发现有一些东西，alexa a上面卖的它的那个卖相，还有价格，还有那些选择都竟然比淘宝上高，这或许说明了一些问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:55",
      "text": "这个好像是个挺常见的状况，有些制造业的也是，如果这个东西是出口的话，那它的什么QA，什么包装，都要比给国内的好一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:08",
      "text": "对，而且有个很很那个的问题，就是你你你如果你上两个网站对比一下，就aliexpress淘宝就那个同样同类商品的介绍，它整个页面的设计也好，还有它的商品的介绍，他会在上面会干净很多。淘宝上你知道吗？就是那种乱七八糟的那些店家自己发的那种很花里胡哨的东西，对吧？但是同样的卖家，你如果说你再找他在alexa上面卖的或者是同类产品的话，他整个页面会会就做的会非常的干净。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:42",
      "text": "我觉得aliexpress上面的东西很有可能是有一个统一的阿里内部的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:48",
      "text": "不是，他也是那些卖家自己去去发布的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:51",
      "text": "真的吗？为什么我觉得好像上面英文都还蛮正宗的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:55",
      "text": "所以我是我后来留意到这个事情，是我那天在某一个一个这种一个什么机缘巧合的关系，看到有一堆人在那里开讲座，然后讲座内容是如何在亚马逊美国上做这个营销。哼就是他们会专门去培训那些，就会有一个什么讲师一样的人去培训那些国内的卖家在亚马逊上去做营销，怎么去设计那些折扣点什么怎么选择这个推销的时间点那些而且还包括这个页面的设计，我那个那个产品的描述，他们都非常专业的这我发现就跟淘宝上那些卖家的那种透露出的感觉就就业，这是什么来着？就专业的和业余的区别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:39",
      "text": "OK那过人家国际纵队，国际纵队需要培训。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:43",
      "text": "所以我就觉得有时候觉得挺尴尬的。虽然说这个货源都是来自这里，都是可能是同样的一波人在做这个事情。但是因为卖去的地方不同，他做事的态度完全不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:57",
      "text": "是尴尬还是悲哀？我觉得好像挺悲哀。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:00",
      "text": "这个怎么说，可能市场就这样吧，你我我现在这种事情就主观色彩其实挺少的。你我会去想这个为什么会是这么一种结果，它是什么样的一种客观因素造成的那可能就是市场就是这样，对吧？比如同样的一个页面，花里胡哨的淘宝那种商品介绍，大家也应该有印象。看到过你会觉得就这样习以为常了，对吧？但是你把那个拿去给那种什么洋人们用，他们就就不就不待见了这个。他就觉得你这个不靠谱，不在你那儿买了，你逼着你要去做，要做的那种非常设计的好一点的对吧？就是有时候你也不能怪那些什么中国公司不给力，其实他们还是怎么说来着，这是被市场选择的结果。就是你市场本身你都不在乎这种事情，那他为什么要在乎这种事情？",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:50",
      "text": "这个是鸡生蛋蛋生鸡的问题，就是因为这个烂就是设不重视设计的产品太多了，所以市场产生了一种不重视设计的，不有有可能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:04",
      "text": "有可能是这么一个结果，就是说中国市场消费者太多了，对吧？总有就绝大多数的还是不管你。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:10",
      "text": "做的多烂都有人买是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:12",
      "text": "对，没错，只要你东西够便宜，然后甚至不一定要便宜，你知道吧？现在我发现的一个情况就是有的东西不便宜，但是还是有缘分。因为你那个差异可能也就是5%左右，对吧？然后觉得那我就能找到，买了就算了，他也不在乎那些东西，他不会去说进行一个选择。而且市场足够大，总会有生存下来的空间。如果说你市场是现在只有10分之1，那你可能要经要想办法去想想更多的办法去说怎么去提高自己的竞争力。可能会想提高产品的设计，提高这个介绍页面的这个landing page的设计感之类的对吧？所以有有什么样的市场就有什么样的商家。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:51",
      "text": "我觉得另外一方面也有可能就是中国的设计成本太低了。你请一个设计师，你可能给他的，你期待会给他的薪水是非常低的。然后在这种情况下，其实是没有什么好设计能拿出来。而且很多产品的拥有者会觉得自己是产品的拥有者，所以对整个的设计有最终决定权。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:15",
      "text": "但是我觉得不是这样的，因为我后来仔细比较过，像这个aliexpress卖的价钱和这个在淘宝上卖的同类商品的价钱，其实很多时候淘宝是要更贵的。也就是说他卖同样的东西，他在淘宝上理论上他应该赚的更多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:29",
      "text": "因为你算一下，我不是说他针对专门针对阿里express会有一个设计团队。我只是说你真的有就是有有在中国做一个产品的话，他有可能不是会那么重视。不管是包装设计也好，还是文案设计也好，或者而且很多时候这个卖东西的人根本就不是商品的经销商。所以但是那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:49",
      "text": "aliexpress man那些卖家他也一般一般也不是这个商品经销商，他也只是说做一个渠道而已。是我的意思吗？就是是同两个东西，它同样就是经营者和产品都是同一拨人，同一拨产品。只是说因为市场面对的市场不一样，他们做出来东西的结果是完全不同。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:11",
      "text": "你觉得这是一种什么样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:13",
      "text": "的成熟市场不成熟市场。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:15",
      "text": "但我会觉得此时会就有些听众的脑海里面会飘来六个字儿，中国使用习惯或者是whatever的类似的一个概念。就是在中国就必须是这样的，它不是一个就比你刚才的这个陈述有价值判断在里面。但是他会觉得中国市场就是这样的，不是因为不成熟，而是因为中国有这个审美习惯，或者是你是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:44",
      "text": "说中国人的什么习惯，就是更加偏向于丑吗？我觉得不是这样子的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:48",
      "text": "不是我觉得有一个很很著名很有意思的说法，就是不是不是有一句话说自然界厌恶真空，这中国用户厌恶版面的空白，所以有一点缝隙一定要填字上去，对吧？然后因为所有的地方都充斥着所有样式广告，不管这其实网络上的设计也是从这个现实生活是也是对现实生活这种现实生活的一种投射。假如你在一个连什么公车的背板或者是发动机的整流罩上都要贴广告的国家，那你很有可能是习惯了在网页上面见缝插针到处飘广告的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:37",
      "text": "但我说的不是广告的这种区别，只是说在他的文案上面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:41",
      "text": "他只是他这只是一个方面，对吧？然后在那转换到文案上面，就是说能扯多少就扯多少，不管扯那个东西是不是真的。或者说有些卖家会把某一段字加粗，然后加下划线，然后鞋底什么的。这其实都是同一种习惯的各个方面，对吧？你不会去因为你没有在一个简洁直接的现实世界里面生存过，你会觉得网上这种到处乌烟瘴气的这个状况也是可以忍受，或者说乃至你觉得默认就应该是这样的那。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:19",
      "text": "你这个的假设是他说他们没有对这个进行一个我们叫做AB test，就对比判断就是说他他只是说就刚你说那句话的暗含的假设就是所有的就大多数卖家是随波逐流的，看别人怎么写，他要怎么写。他没有对他写某一种东西，对他的这个销售情况做任何一种测试，看哪种效果更好。但是我想说的就是，其实这些人从我那天我在那里培训他们，他们那个现场我看了大概半个小时。他们是对这种东西，就是这帮卖东西的人，但我不知道他是不是淘宝上也是有这种培训。但是起码他在亚马逊上去卖的时候，他会去考虑很多这种数据的结果，他会去做测试OK.",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:03",
      "text": "我觉得能够用心去参加这种培训班的人，应该都不会不屑于做淘宝，就不会蠢到会随波逐逐流。有些人我觉得这是可能也是商业头脑的一部分。有些人会去想说怎么样做，怎么样写才能让我的东西卖的好一点，或者说每个人都会去想，但是有些人的这个搞出来的东西就比较高端那种。就没有那么low，我觉得我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:35",
      "text": "就在想就像淘宝这种面向这主要面向中国市场的这种平台，什么时候能变得不说别的了，就说能变得像express上面那种相对来说没有那么五种颜色的文字，在同一段话里面出现这种情况。这但是但也不是阿里说做的多好啊。但只是说相比来看同一家集团下面的两个同类的产品，然后就仅仅是因为面向的市场不一样，它就有如此大的这种变化。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:05",
      "text": "对你我觉得我给on express最高的的一个评价就是它非常不像中国人。但是我已经有一阵没上他了，你当时的印象应该这样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:14",
      "text": "对，如果你最近有什么买什么小电子产品的需求，你可以到店里试试。我觉得应该会有惊喜。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:23",
      "text": "其实这么说，就是我最近或者我一段时间以来都没有什么特别需要，从觉得这个东西只有国内才能买到的的欲望或者是感觉，可能唯一比较觉得有时候会想买的就是书。有基本上而且不不是不是国内的书这个概念，而是中文书。就是不管是什么台湾金石堂伯克莱之类的，还是中国的各种各样的新书，在这个需求是比较严重的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:56",
      "text": "这个没办法，你你在德国不是语言环境都不一样，这个自然是很难的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:02",
      "text": "但是其他的非就是非这种怎么说非精神消费品就好像没有什么特别需要从国内买的，而且或者说国内买不是特别便宜，除非这是我们在讨论水货或者是山寨品。水货这个东西是这样的，就是你要是觉你要是说你你要是说好在国内买，比如说一个日本的什么索尼RX100相机，特别在国内特别便宜，那我无话可说，他是水货对吧？你中国你要是说我通过偷逃税的方式来获得更便宜的东西是正义的话，那我觉得也没有什么可以讨论的。但是反过来说，到底有什么东西是在国内合法渠道可以得获得？我在德国没有办法买到，好像没有特别多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:55",
      "text": "就在物质产品上面应该是差不多，毕竟你是发达国家。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:58",
      "text": "对吧？对，而反过来，对，我要说那个乐天商城你知道吗？就是日本的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:04",
      "text": "那个乐天不是韩国的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:07",
      "text": "乐天是日本的哥哥是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:09",
      "text": "OK我一直睡不上。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:11",
      "text": "但乐阿里express的UI要比乐天商城好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:17",
      "text": "这个还日本日本的电商不发达，是这个是应该是很多人知道的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:25",
      "text": "不但日本的很多日日至少至少日本至少在我眼里面是一个比较注重设计的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:33",
      "text": "但这点我觉得其实这个对我这个我也是也是挺意外的。但是其实我们看到现象来看，日本在这个就是互联网这一块其实挺落后的。就是在相比它在发达国家里面的地位来讲。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:46",
      "text": "好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:47",
      "text": "就跟他那个独特的这种地理人口环境日。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:50",
      "text": "日本有点像一个电商的科莫多岛。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:54",
      "text": "台湾也是这样子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:56",
      "text": "台湾还好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:58",
      "text": "台湾跟日本在这方面其实很非常像，他都面临着这个，因为它本身那种就是电就前电商时代的时候，它已经很发达了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:08",
      "text": "就是没有一个惰性。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:09",
      "text": "有一个因为他没有多大的市场的增量，去使得这些厂商去愿意在上面做投入。所以你看到很多这种日本台湾的这个网站也好，还有这个电商也好。就感觉是中国可能2000年灸或者90年代那种设计，感觉就很很稀松平常等等。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:29",
      "text": "我们说的是电商网站的设计，还是说电商模式是它的整体。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:35",
      "text": "就整体来说都是这样，网站设计可能只是一种比较集中的表象。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:41",
      "text": "好吧，我觉得可能还是体量问题，就是这两个国家都太小了。然后你不管欧洲美洲、欧洲、美国还是中国，都是一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:51",
      "text": "比较。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:51",
      "text": "大过来比较对有有足够大的。好了，我们不说这些了，这些话题实在是太ID公论了，我们。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:01",
      "text": "没有。其实我说到这个，刚才讲了那么一大堆，其实一一就是有个挺巧的事儿。最近那个coding our那个叫那个叫什么jeff，对吧？对jeff at对jeff hover，他是stack workflow的创始人，他在他的个人博客上写了一篇文章叫做the scooter computer。Scooter是一个那个小朋友玩的一个这东西叫什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:28",
      "text": "对，这里是指滑板车，不是指那个速可达。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:32",
      "text": "对，滑板车是那种有一个小杆下面，对，有一下面有一个小平板。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:36",
      "text": "然后两轮在上面。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:38",
      "text": "然后蹬地。的对对对对对，然后他讲了一个什么事儿，他就是说他想买一个小型的这种威批N网关。简单来说是这样，他过去他是刷了一台华硕的RTN16的路由器，刷那个应该是open WRT，还有tomato，刷了那个tomato之后，他就用一个VPN就连到他的那个机房里面去。因为他们机房他们还挺挺传统的，他们不是用的那个云服务，他们是还是用那个叫做collocation location。中文叫什么来着？就是自己买服务器放到一个一个机房的一个架子，你就租空间对主机托管这一块，对业务他所以他有一个VPN的需求，但是后来他想那个那个VPN太慢了，那个OPPO SS版本比较低。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:24",
      "text": "然后他想换一个这个full blue linux。他以前跑的是一个精简版的linux，觉得不太行，版本也很旧，也不方便。他想换一个全功能的linux传感器，想跑一个叉86的处理器。然后找了半天，跑去ali express里面找了一个那种没有厂牌的盒子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:45",
      "text": "然后一个就是那种之前我们提到过一个叫做英特尔的，叫NUC，intel的叫做the next unit of computing。就是一个大概是5寸乘以5寸的一个小方盒，然后里面有一个超小的那种叫做mini ITX主板，然后要整合一个I3或者是I5的这种CPU。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:02",
      "text": "可以挂在显示器后面什么的。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:05",
      "text": "可以。它有一个它刚好是叫做VISA mount那个大小标准，可以挂显示器后面。就那种所谓的小电脑，然后他就买了这么从a press express来买了这么一个小电脑。然后它的配置其实我们看下，其实是还挺挺惊人的这小量能到350刀。他说最后是一个I5的5200 rowel双核四线程的2.2G的CPU，16兆的DDR3内存，128兆的M点2接口的SSD，然后有两个千兆的real tech 8168的网口，还有这个显示输出，这无所谓了，因为它是用来做这个服务器，只要有网卡就可以了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:46",
      "text": "然后这个事情就刚好就触到我了，因为我之前我最近一直在找一台这种家里的这种，网关，因为我之前都用路由器跑那些东西，他说我有一个非常小的TP link的W2703N的小盒子，他当时买99块钱，很多年前买的，它是一个400兆赫兹的SS的处理器。然后它是可以刷了那个open WRT之后，可以跑什么DNS，DCP，还有一些什么VPN的服务。他是那个东西性能实在太差了，因为只有32兆的内存对吧？然后400兆赫兹的这个是个mix的处理器，应该是mix架构的，就就很弱，就跑就就跑一个什么十兆左右的带宽，差不多就把CPU撑满了，就VPN。但是你我家的那个宽带是那光纤是百兆的，就是说经常就是不够用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:47",
      "text": "然后我想后来这个wire，不是，是是那个r technica上面有一就一月份的时候他们发了篇文章，就比较了一个还算不错的路由器。几款。有一款是buffalo的，这个跟G300N跟我那个TTP link那个703N是差不多性能的，和一个相对来说好一点的，这个nexus的算是中档的路由器。还有一个现在目前来说比较高端的net gear的那个net k叉6的那个路由器。然后比较了他们的这个路由的性能，你发现其实你看那张表，它在第一连第一并发数的时候，就是可能比如说1000个连接以下的时候，就100兆的话，应该这几个都还没问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:34",
      "text": "但是如果你放到一个千兆的环境里面去，你可以发现明显那些中低端的路就基本上就没有什么性能可言了。就是不说百兆了，可能十兆都很玄，就是高并发的情况下。但是你看一下那个叉86的，他跑了一个非常旧的一个every bridge的一个叉86的处理器，还是atom的，还不是那种什么II3I5，它的那个路由的性能就是做NAT，对吧？那个network就是地址转换的一个性能，其实是非常高的。它在高并发的情况下也能达到可能差不多七八百兆的，就这么一种性能。然后我就勾起我了那个什么，就要想买一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:16",
      "text": "这就是被人安利了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:18",
      "text": "被人种草了吗？没错，对对对，因因为因为路由器，其实很多人都觉得这个东西其实挺难去，对于普通消费者很难去度量的。就是说相对来说我们这种比较要求比较高，然后也挺挑剔的这种人才会去琢磨这个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:37",
      "text": "我觉得主要是对于普通消费者来说，这个东西它能够给自己带来什么样的注意。好像特别的模糊，或者说不是那么直，只管就是说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:46",
      "text": "主要是感受感他们感受得到就是可能家里网慢。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:50",
      "text": "特别是有时候可能你觉得网慢，但是百找不到原因。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:53",
      "text": "你不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:53",
      "text": "有人会直接说直接blame运营商，说我靠这个联通的网太慢，或者是未来防盗网太慢了，对吧？但对但是有人会说会去说这会不会是我路由器比较差什么的。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:07",
      "text": "所以很多人一直在被这个其实可能现在很多中国在搞光纤接入普及，很多人家里装的很快的那光纤其实并没有用的多少，特别是家里人稍微多一点，或者设备稍微多一点时候，还有一些人在家里下BT的时候，那个就完全不能用了。这就就就路由性能其实是一个挺那个的，挺难去普通消费者简单判断的一个话题。现在国内不是也在炒各种什么智能路由器在卖，但是他们现在其实都不咋地。刚才我们看，哪怕是那种所谓一千多块钱的所谓高端的家用路由器，在这种高带宽的情况下，其实也挺糟糕的。所以我就一直在想搞一个这种叉86的盒子，然后我就去看那个，因为我在国内，京东上买的话，其实还是我觉得买京东还挺挺方便的。淘宝上就经常觉得有时候不是很放心，然后如果退货也挺麻烦的，京东上面很多就可以七天退货。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:03",
      "text": "很麻烦。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:05",
      "text": "因为他小卖家，就是你也得跟他去商量那些乱七八糟的事情。但是如果你在京东上买那个什么京东自营的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:11",
      "text": "你挑好那个什么就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:13",
      "text": "七天无理由退货的话，你根本不用讲，他直接来上得去，他也不会问你任何问题，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:18",
      "text": "很痒顺阳的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:19",
      "text": "对对对对，所以我在京东上买了很多这种东西，就去看就发现汽车上面买那种大品牌的那些热卖款其实还可以。但是一旦遇到这种需求量比较小众的产品，就挺糟糕的了。哼然后我就想去买那种盒子，因为如果你要做路由的话，那个盒子它最好是有两个，这个就是网口对吧？因为一个插那个光纤的猫光猫，一个插那边的路由器，那边的那个无线交换机或者怎么样，你就不用用那个无线路由做它的那个路由功能，因为反正不好。对，你可以直接用那个小电脑做路由功能，然后那个无线就只做这个无线的转发和这个交换机的功能。然后发现还这种品牌的带双网卡的这种小电脑盒子还挺挺少的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:14",
      "text": "我觉得这种电脑被设计出来的时候，可能其设计者就会说这个东西应该能够拿来被人当路由器，否则他不会应该我觉得不会专门设计出两个网卡接口来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:30",
      "text": "你说就小众，对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:34",
      "text": "对，好你对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:36",
      "text": "所以当时我就想各种办法，我也想了其他一些方法。如果说你只有因为还有一个问题，就是说你去淘宝上买那些品，他都没有品牌，你也不知道质量怎么样，对吧？有时候什么不稳定。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:46",
      "text": "你也挺。可是阿里express就是相当于你在an expert买和在淘宝上买有什么差别？",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:53",
      "text": "对，这就是牵涉另外一个问题。你会发现他们那个阿里上面同样的东西，他给就是因为那个页面的问题，你会觉得这东西卖的东西会更靠谱一点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:05",
      "text": "我所以这完全是一个卖相给你带来的可靠性的印象差。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:09",
      "text": "就是卖相不够好，淘宝上的卖相就很差了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:12",
      "text": "好吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:14",
      "text": "对，就这些。对，而且就是产品的选择上面，也其实你可以看到它的用心程度完全不一样的。比如说阿里克，他同样卖这个，它是一个无风扇的，就是全的那个机身是一个铝合金的壳子，就是被被动散热的。你在淘宝上找就很难找这种，然后找出来之后，你都不知道到底能不能删。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:33",
      "text": "还是那个幻象吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:34",
      "text": "还是对alex他就会讲的很清楚这个怎么样。然后刚好jeff他那篇文章也还买了，他也拍拍了这个照片给我们看，然后他还拆开一步一步一下，我觉得这个卖起来还挺好的。虽然说做工也不怎么那个就外观也不怎么漂亮，但是起码你觉得他做工还是挺挺扎实的，很厚的一个铝合金的盒子对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:55",
      "text": "然后该该有是uni body。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:58",
      "text": "对对对，乍一看好像那个苹果那个1.80的盒子一样，对吧？还挺不错。Anyway又扯回这篇文章里面讲的那个东西。对，就是你看发现你350刀大概多少钱？两千多人民币就可以买个性能相当不赞的最新款的处理小电脑了。大陆那个路径的话其实。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:23",
      "text": "还挺不错的对，这我其实有点不明白，就是所谓school computer，它跟school的共同点到底在哪？",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:31",
      "text": "小除了小。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:34",
      "text": "那为什么不叫whatever mini computer，或者是像一个小的东西？",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:39",
      "text": "不是，这个有个比喻，这个之前不是那个谁来的，谁说是一个bicycle来的？",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:44",
      "text": "OK乔布斯吗？对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:46",
      "text": "好像是对他是乔布斯。对，对，乔布斯说这个PC是一个truck，是一个卡车，然后那些小电脑就是一个不那句话原话什么computer is a bicycle for the mind对吧？对，mind计算机就个人电脑是你那个头脑的一个自行车，可以帮你辅助你的功能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:11",
      "text": "对，是，但其实这乔布斯这话我也没有特别理解，为什么是自行车呢？因为你你需要用自己的脑力去驱动他们，还是还是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:23",
      "text": "说他。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:24",
      "text": "你还得。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:25",
      "text": "做点什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:27",
      "text": "他说这句话的意思还是只是说这个东西它比你走路要快。哼对，有时候这这些这这些东西是有点不是细思极恐的，越想越想不明白的一种说法。不管是所谓school computer还是computers，the bicycle for your mind.",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:52",
      "text": "按钮就说说回这个scooter这件事情，scooter是个什么东西？Scooter就是一个非常原始的，它可能比自行车还原始一点。比如说自行车还有什么链条，还有什么这种就不说变数，就是那种最最简单的自行车，它还是有它结构还相对来说比较复杂，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:10",
      "text": "结构简单肯定，但是原始倒未必。因为自行车毕竟是一个18世纪就出现的东西，在那之前是不可能用school.",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:18",
      "text": "就不但是你如果你比较一个现代的自行车和现代的一个super，你觉得哪个更简单一点？",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:24",
      "text": "那的确不我刚才说了就是schooler的确更简单一点，它但它并不一定更原始的。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:34",
      "text": "所以这个student这个computer这个叫什么？叫叫你刚才说说的中文叫什么来着？滑板板车是吧？对，就滑板车这种东西就是那种你可以买一个，然后你需要用一下的时候就用一下，然后你不需要用的时候，就是一个砖专用设备。你可以这么说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:51",
      "text": "我觉得scooter的隐喻可能是在这儿，就是scooter它是一个供你短途代步的工具，就是有有这一段距离，我记得jeff的在文章里面写应该是1到3英里。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:05",
      "text": "然后要求地面是平的水泥路。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:07",
      "text": "面对5公里之内的距离，你可能走过去太远，就可能要1个小时。人的步行速度应该每小时5公里，那你可能走5公里要1个小时。但是如果你踩滑板车的话，可能就五公里还是有点太长了。因为3.3公里以后骑车上班都觉得稍微有点远，但是滑板车应该是可以接受的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:27",
      "text": "滑板车比如说在展会里面，就是这个展会可能特别大，有十几个展厅。然后你可能需要从一端到另一端。每天就比如说你是在展厅的工作人员，你可能每天往返几十次，在这种情况下走路是非常不经济的。但是你又没办法开车，那用一个滑板车其实是非常方便的。所以很多展会的工作人员都会用滑板车。而且滑板车它的优点是不像旱冰鞋或者滑板那样，你需要学是要运用技巧。滑板车基本上你学只需要半分钟就可以学会。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:58",
      "text": "对，而且它那个就是hop on and hop off就比较简单了。对你那个旱冰鞋你还得穿头脱一下对吧？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:06",
      "text": "这个隐喻可能就是这个小的电脑用起来简单，然后就不用你麻烦你去专门攒一台PC来搞这种事情，你只要买过来就可以。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:18",
      "text": "对，但我想说的是啊，他虽然说这个scooter这个computer非常的好用，但其实它一点也不弱小。你发现刚才我念的那个配置没？就是他买的这个2000块钱左右的配置。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:32",
      "text": "其实相当强大的。它只是不再时髦了，或者它不在顶尖了，但他绝对是一个solid的一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:38",
      "text": "就是甚至可以说它2000块钱的小电脑的这个性能，是要好于我觉得可能大多数人家里可能两三年前的这个台式PC或者是但是是甚至笔记本的这种性能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:54",
      "text": "对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:55",
      "text": "对，但是我一直就有一点有一件事情我一直就不能释怀。我问你一件事儿，你我现在给你一个任务，就是说因为这种就做这种路由器这种设备，你不需要它有任何显示的功能，对吧？但是请给我一个列表或者是几个选择，使得那种它的那个CPU的处理能力很强，但是不需要GPU，然后它同时又价格比较便宜的这种硬件配置的这种选择。就发现你其实没有找不到这个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:30",
      "text": "你基本上必须去买一台服务器。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:32",
      "text": "这个服务器很贵。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:34",
      "text": "这其实是对服务器的要求。对我的意思就是你你所需要的是一个micro个人使用的微型服务器。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:43",
      "text": "没错，其实这种处理器首先从处理器的角度来讲已经很难找。一般来说那个英特尔的处理器，它虽然说性能很强，但是它的那个价格比较贵。就是你现在看你跟I51个处理器的芯片，大概就是至少是一百多刀，就成本就厂商的成本是一百多刀，就占了六七百块钱了。但其实里面有很多钱，你其实你并根本用不到。因为现在特别像因为出的那种集成的处理器，它可能里面很大一部分是用那个用用做那个GPU的。但是你机票你完全用不到，你做这种就是你丢在角落里面，也不管他的那种用途的话，对吧？你你就在你就找不到那种，那你再再回再回去找就只能找那种，比如说基于ARM的对吧？但你现在你基于阿尔法的这种处理器的话，它的那个那个CPU的性能好像又跟不上英特尔的最新的像什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:34",
      "text": "broadwell对它功耗低，但是性能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:37",
      "text": "又不好。对，就比如说我现在都没有找到比较合适的，能够跑满一个千兆口的一个基于ARM的处理这个SOC。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:48",
      "text": "哼所以。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:49",
      "text": "就没有尴尬。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:51",
      "text": "什么惠普或者是我还有其他厂商戴尔的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:56",
      "text": "戴尔做不做？我看过没有？",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:57",
      "text": "没有任何一款他们的要看没有？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:01",
      "text": "惠普有一款是作为那种less的，就是做网络存储的那个microsoft。它是可以给你选择用那个是I5还是还有一个是至强的处理器了。但是那个东西起家是就光是那个壳子，它是有一个小机箱的，然后带一个主板，然后有一个选择是没有，它有几个配置，最低那个就是bear ball，就是小机箱加主板，但是不带那个处理器，不带硬盘的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:27",
      "text": "大概都是四千多块钱。OK要不要？那有想过买一个旧的版本？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:35",
      "text": "没有，就是没有。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:38",
      "text": "不过好像国内的旧的服务器也不知道从哪买你是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:43",
      "text": "说买那种机房用那种服务器吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:46",
      "text": "对，机房的旧服务器。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:47",
      "text": "然后有一个很大的问题是它的首先功耗非常太大了是吧？那个都是几几百瓦的功耗的，如果全开的话，就待机的话也有七八十瓦，你不可能一直24小时开着。第二个你不会买放家里，所以它因为非常大，哪怕是EU的话，它也比我们通常的那个它它薄。但是它很很宽，它这是一个很大的面积的东西，然后非常的吵。因为它是那个小风扇，高速的小风扇非常的噪音非常大，就不可能放在家里的，你要找那种。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:20",
      "text": "对，刚才还有一个需求没有说，就是他要静音对吧？你看它体积要小要静音，找的时候就发现你就基本上没有什么可选的。就只有这种这种被动散热的，基于英特尔的这种移动处理器的那种小电脑才适合。但是他们的价钱这也不算特别便宜，就没有1000块钱以下的。但是其实你用到的可能就只有一千多块钱左右的部件而已。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:43",
      "text": "我前两天是在是看谁在推特上说他买了一个HP的microburst叫什么？真就是对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:53",
      "text": "就是就刚才我说的那个东西OK然后它是一个file server.",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:57",
      "text": "好像也是四五百刀一个。对对，然后那个玩意儿看起来还不错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:03",
      "text": "而且也挺大的。其实它跟一个普通的小小小机箱那种不是小电脑，那个不是NOC这么小，它是一个相对来说比较大一点的一个盒子。OK放的问题是一个，然后它的那个功耗和价钱都不是太理想，就不是那种你绝对不会认为它是一个scooter computer.",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:26",
      "text": "这是肯定对不对？这是肯定。我在我想的是买买一个什么motorcycle computer。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:36",
      "text": "但如果你家里没有网络存储的话，用一个来自己搭一个基于free BSD，然后跑ZFS的，其实挺好的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:45",
      "text": "对我觉得对首先还是得置个业，然后就可以在家里面想怎么搞怎么搞。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:50",
      "text": "还是得买房子。对，像我这种租房子就比较尴尬了是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:57",
      "text": "你没有买房子的计划吗？还是这个问话题太直白，太私人了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:02",
      "text": "暂有暂无。我这个想的挺开的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:05",
      "text": "所以深圳援助你那。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:07",
      "text": "倒不是这个意思。我是觉得因为现在中国这个租售比这么低，对吧，你何必。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:12",
      "text": "说的也是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:16",
      "text": "Anyway说回我要找这个小电脑的一个终极的原因。其实问题是娱乐跑VPN，因为那个open up就是那种路由器，就是那种家用路由器刷起来那个CPU不管再牛逼，你其实发现它那个性能感叉86还是挺远的对，特别是跑到那个VPN，他对那个计算有要求的时候，就非常糟糕了。然后我自己在琢磨写一个VPN，因为之前我带大家用一个比较知名的一款，后来因为一些原因，他的源码被删掉了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:52",
      "text": "OK刚好之前。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:53",
      "text": "我就刚好我之前folk了一份，然后就回去再研究，然后也找到githa上面就是github是个很好的社交工具，你可以找到很多类似的东西，可以学习他们背后的原理。我发现其实还挺简单的，然后我就自己动手写了一个，然后是用那个勾写的OK，然后有用歌曲。就一个很明显的后果。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:15",
      "text": "我产生那个被被出于某种原因删掉的那个东西是有什么原因的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:21",
      "text": "C写的就目前能是我我就就大家用的比较多的那些都是C语言写的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:27",
      "text": "这个东西的fork现在在guitar上面很好找。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:31",
      "text": "所以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:32",
      "text": "很多人都在趁他被那个什么被删掉之前去folk那边。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:38",
      "text": "那应该说是在就有这种这个事情发生之前，很多人就folk了一遍，然后出了这个事情folk可能就更多了。OK anyway这个东西反正删不掉了，已经很多都要有的。对，然后他那个是谁写的？非常小巧，就不到100K，编译出来可以放到那个路由器上的话就没问题。但是我用勾写的话，你知道勾变出来一个binary大概就是几兆了。放路由。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:05",
      "text": "inclusion问题在于他带。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:07",
      "text": "一个runtime，所以他带一个GC所以会比较大一些OK然后这样放我之前青青陵山上就比较就不太够了，因为整个内存的只有32兆。你放一个run binary都有几兆在在运行的话，就对吧？就out memory .",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:27",
      "text": "OK就会触发。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:28",
      "text": "那个OM的killed了。然后性能也是一方面，因为这个够毕竟还是不如C那么轻量级，所以就有更强大的动力去找一个叉86的电脑来跑它。Anyway就是扯了刚才那个话题，其实写一个VPN其实还挺有意思的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:46",
      "text": "你知道怎么弄吗？怎么弄？",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:49",
      "text": "原理很简单，就是你需要现在要实现。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:52",
      "text": "一个协议栈，我觉得就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:54",
      "text": "不用那么复杂。其实现在超系统帮你做了很多事情了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:58",
      "text": "OK对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:58",
      "text": "现在你要做一个最基本视频，你要需要在你的那个电脑里面，超市里面模拟出一块网卡虚拟网卡。然后在linux上面的这个一般叫做tone device，t tunnel device。然后wester上也支持这个东西。待会有一个叫做10.6还是10.8开始，它有一个内核，就Darwin那个内核级别的支持叫做U唐。有点唐龙，你可以建点东西，然后建那个U糖有什么用途呢？它就会在你的操作系统里面虚拟出一块网卡。你可以这么理解，让你可以绑定IP地址做路由规则。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:36",
      "text": "完了之后，任何写入这个网卡的这个IP包，你可以转发到一个用户进程里去去读写它。然后你在应用进程里面去做一些包装的加密，或者是压缩，或者是变形的任何处理都可以，就随便你想怎么弄了。然后你再通过一些其他方式转发到你对应的那个目标服务器上。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:02",
      "text": "就可以生成一个简易的VPN了。OK所以没有那么没有没有你之前想象的那么低级。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:09",
      "text": "对你不需要需要去实现一个整个实现一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:13",
      "text": "用户进程的程序就可以了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:15",
      "text": "对对对，非常简单。其实然后那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:17",
      "text": "协议garden没什么差别，写一个守护进程没什么差别。感觉好像。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:23",
      "text": "对你就不就不需要写个这种D，你直接写个前台程序，然后用那些什么system d，还有large d来管理他就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:32",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:34",
      "text": "过程还是蛮简单的。然后我后来去就理解了这个逻辑之后，动手写其实还挺挺有意思的，有一些那种low level的东西就还挺好玩的。然后因为勾一般你要去在操作系统里面创建那个那个timo device的话，你需要调用一些系统。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:55",
      "text": "就是系统那边。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:56",
      "text": "system call。对，然后这几个cisco直接在go里面其实是没有的。你要用cisco的那个package去自己去做一些处理。然后就发现其实我之前想的这个歌，可能做一些非常底层的事情还有点难度。因为毕竟包了一层，不是直接有那些C的那些header也可以引用我。但其实你发现做完之后还是挺简单的。你直接把那些常量从那个那个user include里面抄过来，然后再用那个CD包一下，其实也不难。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:32",
      "text": "就是在很多程度当中没有比什么python或者是swift难很难，本身应该比他们简单，可能搞不好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:38",
      "text": "对对对，就其实挺直接的。然后甚至说你在沟里面直接调用一个C的库也挺容易的，就没有我之前想象的那么麻烦。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:49",
      "text": "所以你把这个东西开源了吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:52",
      "text": "我把这个我我我就自己就写来玩这个开源没什么意思，因为其他上面已经有超多的这种同类的实现。但你好像是C写的，没有勾写的，勾有一个，好像个，但是就原理上差不多。你知道掌握了这套原理之后，你这种用你用拍照写也是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:10",
      "text": "其实就只是说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:12",
      "text": "这个效率的问题而已，但是其实就还好，你说你的叉86的服务器上跑，这种级别的应该差感觉不到任何性能上的差异。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:23",
      "text": "所以过年的时间就拿来写这个文章了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:26",
      "text": "那就就就学习一下。因为我一直在这块就挺好奇的，因为之前我想提一些需求，就发现是C写的不太好改，然后顺便就为了去读懂那几个代码，还复习了一遍C的和用C来做这个网络编程的一些知识。等于还那个啥还还就是因为C好多好多年以前学的，其实基本上没没怎么用过。然后现在去看一下，就是还能写一些了OK最开始我是直接用C写了一个最基础的版本，然后发现其实好像改个勾写也可以，然后就够的话就整个安全性也好很多，然后也容易一些。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:07",
      "text": "就是太容易太多了。我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:09",
      "text": "觉得对，好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:11",
      "text": "你可以做，就至少在mental model上有容易太多。我最近在写，我在做一件把一个操作系统性质的东西整合进一个docker container的事情。好多地方要重写，然后用python写的部分还好，用C写的部分真的是改起来太麻烦。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:35",
      "text": "这是要做什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:35",
      "text": "为什么会这个需求？你像很多知名的数据库产品，它现在基本上都提供一个官方的docket image。我们也想做一个同样的事情。但是你在一个doctor content里面跑一个服务，跑一个水库进程的一个问题，就是你需要把数据和配这个独立出来，对吧？因为container.",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:05",
      "text": "它本身是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:06",
      "text": "是对是用完机器的，应该这么说，然后可能会希望说我需要把数据和原数据和配置和log之类的所有的volume都都挂都挂在这里面。但是根据服务器的实现的策略的不同，这个东西可能光光挂进去是不够的，你还要给很多很多其他的东西。总之随后你。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:32",
      "text": "怎么怎么解决这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:36",
      "text": "就不存在什么要解决的问题。就是你如果你很多东西都要改成一个被挂机挂到那个containing面的volume的话，那你去就需要改这个原始的很多逻辑。比如说这个东西它默认说我要写到一个slash death slash什么HDD00 data之类的这么一个文件里面，或者这么一个block device里面。然后现在我只有一个可以用了，那这个东西就得改，是一个非常细致而繁杂的东西，而且散布于大麻的各个地方。OK对，是一个比较折磨心智的工作。可以。然后这个时候我们就会觉得，我靠这种情况下我还要去去看这个东西，仔细看这个东西是不是个指针，是不是个什么whatever什么，这个是个struct或者是而且一部分还有一部分它是用这个C上来写的，就是c pison。对，然后就去我这。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:33",
      "text": "等着用的写不是比用直接写C要来的，就是至少看。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:39",
      "text": "但是如果你发现你要改的东西同时存在于两者之中的话，你就会觉得我靠为什么不只只有一种原型？好吧，它存在一个mental model的转换对吧？就是我觉得是就这种感觉，就是你可能如果你一天要改34种3四个地方的代码，然后每个地方的代码是用不同原写的。比如说我可能要先改一个bh改了best之后发现这个地方呼叫了一个python script。然后改了python ript，发现这个东西它import那个东西是用sn写的。然后塞顿见到赛顿之后，他发现他这呼叫这个函数是用C写的。你会觉得有那种就是我靠我刚刚在开飞机，然后一下子改开火车，然后过一会儿又跑去骑自行车，然后要一到最后要去推一个独轮车那种感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:35",
      "text": "就可能一个好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:36",
      "text": "优秀程序员的一个优秀的程序员的特征之一，就是它的这个所谓comfortable zone特别的广。他不会觉得写这东西太高级，写这个东西多简单，然后写那个东西就特别的get .",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:52",
      "text": "IT down。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:53",
      "text": "对，但是如果你真的要一天到晚在这个不同的像层级之间，怎么说？就一量子物理学为量子物理学里面能级跃迁，你从一个轨道跃迁到另外一个轨道是需要能量的。是不是觉得脑子有点乱？对，然后一天之后你就特别累。我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:13",
      "text": "觉得对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:15",
      "text": "因为你你需要就在脑子里面构建出一个这个层级的模型，然后毁掉，然后去另外一个层级，然后再毁掉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:27",
      "text": "好吧，那那最后你是怎么解就没有解决。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:32",
      "text": "还是没有就是我一日复一日的工作，谢谢大家。我目前在做的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:38",
      "text": "就直到开始。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:40",
      "text": "而且有一个很大的问题，就是如果说你要保证一套源代码，同时给出两个发行版，就是一个正常安装版和一个docket image的话。就有很多目前可能还有很多这个编译过程，build过程的坑需要去填。就你在build的时候，你需要说这个东西是build一个image。然后接下来还有测试方面的可能就是你可能同一个功能在普通安装情况下是可以用的，在页面在docker里面就不行了，这还要专门去测。对，总之这是一个牵一发动全身的这么一个项目就挺累的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:24",
      "text": "所以你们那个产品是用C和python混合写的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:28",
      "text": "engine是用C加加写的。然后一个数据库系统基本上可以切分为，或者在我们公司是切分为engine和所谓class OS两部分。会最重要的这两是这两个切分，然后还有一些一堆周边的什么一个专门的开发工具之类的。然后engine是用C加加写的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:50",
      "text": "就是因为性能的原因是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:51",
      "text": "对，然后class OS和class OS基本上是用python和C型。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:57",
      "text": "你看。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:00",
      "text": "然后还有一大堆什么driver，就是什么GDBC、ODBC的那个dot net的那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:06",
      "text": "那就是根据那个那个要drive他的语言来决定了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:10",
      "text": "对也对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:13",
      "text": "也是难为你了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:15",
      "text": "不过还挺有意思的，就是你可能在在离开公司那一刹那，你会觉得自己做的东西还是挺有意思的那或者挺有意义的。上升到一个形而上的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:26",
      "text": "在你死那天你说我也是做过。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:29",
      "text": "对我我为人类做出一些贡献，对吧？你在做seriously不像你在做赌球网站的时候，你会说我靠，我今天做的这个东西不知道又毁灭了多少家庭。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:43",
      "text": "好吧，所以还是可以试试够，会会感觉会清爽一些。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:50",
      "text": "对，回到刚才说的这件事情，就是我觉得如果你能写一个东西，然后只用这一种语言来写，然后只用一个就是你有一个比较清晰的割裂的、独立的、模块化的层级是一个比较好的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:07",
      "text": "其实这是不是要求那个语言具备更好的什么什么一个适用性，就是它既能够写底层的东西，也能写高层的东西。并且它对应的那个抽象层级不会特别就不会特别低或者特别高，影响性能，或者也也或者说是不太好理解。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:25",
      "text": "对你要找一个sweet spot.",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:29",
      "text": "swift算是这样的一种语言。他们当时设计的时候就这么考虑，又能写操作系统，又能协商成应用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:36",
      "text": "我经常觉得是应该是因为switch现在基本上是苹果把宝都压在上。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:43",
      "text": "对，有时候不是大家在炒那个，又又在苹果的那个软件质量的问题又出来了。然后前段还在还他们那个高管还去节目上那个博客节目上去讲我们这种如何努力什么的。其实我在想，其实从软件工程这个角度来看，不就是因为这个软件的复杂度提升了。因为现在需求越来越多，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:04",
      "text": "各种什么，而且还处在一个技术转型期。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:07",
      "text": "就是他们之前一直用的那个objective c它其实是一个比较过时的技术，就是说它的那个适用性是比较窄的。它不能用来写这个内核，因为它不够高效。它是一个有有round time的系统对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:26",
      "text": "他在C上面加了一层runtime。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:29",
      "text": "是这样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:29",
      "text": "对对对，但是也可以，但是只不过没有这样做，而且或者说以前的电脑的性能不允许人们这样做。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:36",
      "text": "那就是性能不够好。对，然后另外一个这方面，他写那种非常复杂的应用，它的那个抽象层级又不够，对吧？还是毕竟是一个C的语法，然后各种我也看到了，连那个传的参数都那么坑爹。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:51",
      "text": "对我觉得OC最大的一个问题可能是他要求一个好的OGC程序员必须能够熟练的在两种编程范式之间跳来跳去。就是它在打出一个at符号的时候，他可能就跳成了一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:08",
      "text": "OO的模式。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:09",
      "text": "对，就对，跳进了那个small out的模式，然后他开始打什么voy的新之类的乱七八糟的时候，就又回到了C模式。然后你必须在两种模式之间转来转去，就有点像一个怎么说，就有点像像瑞士人？工作的时候说高等德语，回家了开始说土德语，然后这样完成一个身份转换。但是swift就没有这个坑爹的地方了。所以也许在不久的将来，优秀的所谓的程序员要比会会会或者成为一个优秀的sb程序员的成本应该要比object c的程序员高一点，要不低一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:50",
      "text": "对，哼因为我最近在琢磨这个事儿，就是因为我最近写给我写的比较多一点，然后也觉得挺爽的。但是我还是知道它的板在哪里，因为它是一个有GC的语言，对吧？有很多场合其实它是不适用的，非常底层的，而且他写出来那个banner也比较大，对吧？他说最小的一个你就print f一个hello word出来，也有可能一兆多还是两兆，就是说也不够那么的轻量级。然后就做一些我觉得网络层的网络级别的，就是我们怎么定义就是中等程度的，中等复杂度的应用，我觉得还是非常好的。但是再复杂一些，比如说一些叫做DSL，它可能不太适合写，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:33",
      "text": "但底层的最简单的一个就是你用goal来写，android谷里怎么写，好像没有什么特别好的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:39",
      "text": "他那个是包的问题，那个还好。我是说他的那个语言的那个语法的抽象程度一般化。就是你写一些非常复杂的高层的应用就不太现实了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:49",
      "text": "对我的点就是说GUI程序实际上是有时候是非常复杂的对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:55",
      "text": "你可直接用java不也写了吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:58",
      "text": "但是java在另一方面，java不可是J和C都是相当啰嗦的原的啰嗦的原来写过是比较脑残。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:07",
      "text": "的事是吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:08",
      "text": "对吧？故意这个东西是最好的故意是描述式的对吧？但是如果你不得不用一种编程语言去写，去去去以编程的方式来生成它的话，那我觉得其实啰嗦不失为一种好处。因为你能控制的地方或者说能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:26",
      "text": "我明白你的意思，但这样会影响那个校园，就理解起来就就有有有我我我一直坚信这么一种理论，就是那个人的这个大脑，他的processing power，他是他的他的那个处理能力是有上限的。如果说你东西太底层了，或者说这个太boss就是太太太啰嗦的话。其实你你你一直在头脑中你就看一下代码，你能知道他要做什么事情，你能在hold住的那个短时间能够理解的它的那个量是有限的。这样的话你就不能理解非常很多这种高层这概念，也就会使得你这个整个的复杂度，就你能够可管理的复杂度是有限度的。这样的话如果有一些更加复杂应用过来，其实你就不能很好的去理解它。这个时候就会出现各种各样的软件的质量的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:15",
      "text": "没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:16",
      "text": "所以我为什么讲那个说为什么现在一直在炒这个苹果的软件质量下降？我觉得就是这个东西的一个一个体一个结果，就是WC导致的这个原因，对吧？可能安卓也会遇到类似的问题，因为java也在，它的表壳表达性也就只有那样了。但班主任加盟可能还有一些什么救命的稻草，什么可以用scala来写，你反正变成GVM就差不多，对吧？Java OK但是就是够的话，其实我也我也看不到它作为上层应用，在这方面有什么有有任何独到的一个什么方法。它的这个适用性还是相对来说窄一点点。然后大家还要回到刚才写底层的一些东西，比较偏向C更接近于底硬件底层的那种，就跟我也不是特别适合，虽然是刚才我们说写VPN那个例子也可以算凑合一下对吧？但是还没有像swift那个下限那么低，我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:17",
      "text": "秀下限的时候。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:19",
      "text": "对我觉得够。总的来说就是一个适用的下限和适用的上限，对吧？一定要这个叫什么dynamic range.",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:26",
      "text": "这个要广开范围的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:28",
      "text": "这个对，一定要够广。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:30",
      "text": "对，这是一种HDR语言对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:33",
      "text": "对对对，因为这个是回答你刚才你说那个问题。就是说如果你只想用一套语言去解决一个非常底层，同时又有非常上层应用需求的这个一个问题的话，好像就只有这么一个方案了。不然的话就只能混合语言了。然后和合语言就会出现刚才说那种不断的加码对范式迁移的问题。跟java什么关系？",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:54",
      "text": "就just不是现在不也是前端用，后端也用，你说一套原包揽，他这个还是其实也是一种现在被当做HDR来用语。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:08",
      "text": "不那个是应用场景有，那我们还不是说这个高低层，它还是写一个非常高层的应用的。前端写那个故意，后端也是写logic那一部分，它不是说用来写这个什么，我web server本身。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:20",
      "text": "不能用gas来写一个操作手。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:23",
      "text": "有人干过吗？有人这样干过。我靠，对，有人这样干过。对，他在他是用那个什么他是用那个LLVM compile过来的。然后在java script里面，就是把C编译成那个javascript，在浏览器里面跑了好像是much boss还是什么来着。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:38",
      "text": "我们这个script s.",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:42",
      "text": "对对对，当做汇编来用。这个不算这个太。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:46",
      "text": "黑科技了。没错，是的，这有点像就是把一个光谱的某一段，然后把它放大到其他的范围。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:56",
      "text": "太黑了。说到那个最近有个小新闻，就是那个1.6。因为昨天发布的，2月10对还是前天前几天2月17号应该。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:05",
      "text": "是17号，是三天前对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:07",
      "text": "三天前对。然后那个1.6它有一个非常大的提升，是把garbage collector的那个GC POS GC暂停。对那种特别大的那个对那个堆的堆，替补是堆堆的时候，的的那个机械炮就降低到了可能十个毫秒以内，其实还挺惊人的。我觉得虽然不是完全的那种所谓powerless，就是无暂停的GCL，但是其实已经对绝大多数的都非对实时性要求没有那么高的应用，我觉得已经够用了。再加上你做一些稍微基础的内存管理，就不要散散那么多垃圾的话。我觉得很多应用他用那个构写不会比用GVM调优过的那个就比调优过的GVM的那个GC的来的要弱。我觉得那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:57",
      "text": "主要是开发效率要好很多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:59",
      "text": "因为我之前听我看到有些人在做那个，你知道有个叫什么来着，广告实时竞价。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:07",
      "text": "广告实时就是这样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:10",
      "text": "就是你有很多广告位，你要去去根据你们的用户跑过来的他的用户的user profile，你要决定他给他展示哪个广告会效果最好。然后你能收更多的钱，然后能卖出更多的广告。就是对广告有个排名，他会要在多少毫秒内要完成这个你可能有一一几万个广告，你要选出可能三个对吧？排到这个前面展示给那用户，他对这个实际要求还是挺高的。就蛮看到我看到有人在用很多国内的这种这叫什么？叫做add exchange，就是广告的集中地，他们会用这个来写。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:46",
      "text": "我还我还挺吃惊的OK。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:49",
      "text": "对，因为之前他们一般的我听说的一般的做法是开一个GBM，然后开一个很很大很大的一个hep比如说8个GB或者16个GB的配置，然后就不管它了，就不用考虑这个机身的问题，知道吧？只要够大对吧？我们只要说一天再重启一下就好了。最多对这其实也。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:06",
      "text": "是从一个侧面反映，目前GVM是一个非常robots的东西。其实但那个很好的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:13",
      "text": "就只是说它太重了。有些像我们就写那种utility工具性的应用，你就不希望因为JM启动很慢的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:23",
      "text": "取决于好吧？对，没错，在企业级服务器上肯定是非常旁。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:28",
      "text": "就你不管怎么样，你就哪怕你是你就接着你就写一个简单的hello world，你就先跑。他那个接入启动本身可能要耗掉可能几百毫秒。你感觉到它不是那种instance的感觉，你知道吧？就不是你输入这个命令，点一下那个麦克马上就执行完了的那种感觉，还是要顿一下的那种。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:47",
      "text": "对，还是分具体实现。不过大丸大部分情况下是这样，这是一个主就这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:52",
      "text": "什么目前用的那个叫什么呢？Open JDK, 还有那个叫hot pot。对，hot sport都是那种比较重的，轻量级的也有。我不知道安卓那个double .",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:02",
      "text": "k上是轻量级不那肯定是啊那那个那那是个这是个GIT.",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:06",
      "text": "但double OK没有人在PC上用，只是在安卓上跑。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:10",
      "text": "对，google不干这件事情的话，不会有人干。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:13",
      "text": "对。还说到语言，刚才也提了swift，所以这有什么新动向吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:18",
      "text": "Swift最近开了org suite上面最近的一个新闻就是fork跟这跟go这个比较底层的一个更新来比，swift目前在做一些面子工程，就是face lifting。因为我们都知道swift是跟这个coco API绑定在一起的。对，至少目前是绑定在一起的。虽然开源之后，他肯定会做出一些，比如说在跟这个解绑，然后去搞一些直接呼叫lines原生库之类的一些工作。但是目前他做做的一件事情就是它有一个所谓API design deadline。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:58",
      "text": "这个肯定要介绍一下背景，因为之前coco的APS机是跟因为那个apc定制的，等于是然后它的有些。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:07",
      "text": "设计对是一个非常有一些都有些痕迹，是非常古老的，来自于7七八十年代的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:14",
      "text": "对对对吧？然后他的就其实我们我之前那个swift一点也是1.0，是1.0，上次发布那个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:23",
      "text": "对，现在已经现在二点几2.1了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:27",
      "text": "OK22.2.04.",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:29",
      "text": "你说开源的那个版本吗？开源那个版本是2.1.",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:31",
      "text": "应该对吧？2.1对他专门我去看了一下他的那个标准库，其实挺挺没什么的，就是基本上贫瘠非常的贫瘠。对，什么都做不了。然后他说你要稍微要做点事，你得去用那个叫什么coco那套东西对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:46",
      "text": "对你怎么放，你稍微做点对，稍微做一点。比较non travel的世界里，就是基本上beyond hello world你就得去钻coco的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:57",
      "text": "对，然后你我一看那个coco一个标准可以看，那个风格就跟那个swift语言就完全不是一个风格了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:04",
      "text": "就觉得你会觉得这简直就是80年代那种等宽字体的牵引的操作手册的内容放一个比较新的放在了一个非常精美的，非常现代的天猫页面上的感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:17",
      "text": "因为当时他不是说出了对那个乌邦图的支持，我想说那你这个写服务端和客户端都可以搞定的对吧？都还挺好的，我想学一下，但是一看标准库怎么长这样子，这就跟那个go的区别很大。因为gold它标准库是它是本来就会勾定制的标准库，然后功能都挺齐全的。大部分我现在我我现在写的很多应用都基本上就基本上用不到标准库以外的东西就可以搞定，还觉得挺爽的。然后一看swift的这个完全无法接受。所以他们做了一个面子工程，我觉得还挺有必要的，就等于是一个迁就是迁移。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:51",
      "text": "对，他们先是出了一个API design guides，就是说你要为这个不管是send library设计API还是你要自己开发swift API，都最好遵都应该遵循这个design deadline。比如说里面有一些非常细小的，比如说应该怎么命名，那个命名你的方法。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:11",
      "text": "怎么对对对要一致对去去去。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:14",
      "text": "使用一些特定的convention之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:18",
      "text": "就他那个还是为那个swifts，就下一个版本是应该是今年年末的时候。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:22",
      "text": "还是明年年初的3.",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:24",
      "text": "可能是对，还是说是216年年底，是不是去年说的时候是啥？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:28",
      "text": "没有，去年说三不是16年.",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:32",
      "text": "年底吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:34",
      "text": "那是2.2，那是那2.22.",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:36",
      "text": "我就三还遥遥无期。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:38",
      "text": "三还有一段时间不是遥遥无期，但是17年了。对，应该是对，应该是明天。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:43",
      "text": "所以我想了下，还是等他们把这个API的这个重就重叫做重构，都做完，然后那个三发布之后才学在那也来得及。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:53",
      "text": "中间没错，肯定来得及打。因为现在即便苹果内部都不是非常的依赖swift，就是基本上但是IOS你看IOS那些原生程序里面没有几个是用swift写的。可能计算器是用server写的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:06",
      "text": "但是他们在那个WDC上面给出的展示效率全部都是用sups写的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:11",
      "text": "是，但是那只是一个展示。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:14",
      "text": "对内部他们怎么样还不知道是吧？其实我觉得他们内部应该也在做这个迁移。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:19",
      "text": "分析说好像现在苹果里面有能有一成的是在在生产中的代码是用C写的就已经不错了，尤其是IOS上面，大部分人还是依赖着所有的，而且什么itunes之类的还全还一直全都是OGC写的。因为switch是处在一个比较转变化，在一个处在一个进化的状态。对，就有些东西你可能今天能用，明天就坏了，对吧？但是你在一个这个体量的公司是里面是不能依赖这种非常cutting edge的东西的。虽然它版本号已经二点几，但是它还是有兼容对吧？Anyway然后这个guideline的点就是说它它有一个比较重大的一个决策，就是他要做到去去objec化，就是less verbals。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:14",
      "text": "然后两个点是什么？不要所谓什么don't surprise an expert，然后don't confuse the beginning，就是这老手不会老老手不会觉得惊奇，然后新手也不会觉得困惑。在之前的OGFC世界里面，这两件事是事情的话，我觉得是经常发生的。就是你写的就像我你可能写了一段时间，然后再去看一个什么新的API，你会说我靠为什么居然要这样。然后那新手就跟我们说了，新手可能会说我靠这些为什么有些地方要用艾特，有些地方不要用at之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:54",
      "text": "但是如果这个新的swift的API design guideline可以被我怎么想不出那个词是什么的，就可以被完全应用到这个现有的coco库上的话说或者说先应用到现有的sweet和coco之间的绑定上的话，那可能这些事情都会好很多。主要是用起来更舒服了，然后要打的字更少了，读起来也就更更流畅，有有一些非常细小的地方。但是我觉得最值得一提的就是很多API的，或者说部分API和方法的那个NS前缀都要被去掉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:35",
      "text": "这个其实还有有点假，有有可以可以探讨一下。它它出现那个AS前缀是因为那个C没有那个就name c.",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:42",
      "text": "没有named name spacing.",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:45",
      "text": "对不对？但是after c没有意思，因为C没有，它不能加一个上去，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:49",
      "text": "他可以加一个上去，但是没有这么做。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:52",
      "text": "Anyway好吧，对他们没有那个named spacing，然后swift是有的，所以他不需要这个前缀了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:58",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:59",
      "text": "所以我一直很好奇那个事儿，反正之前我不是在写那个V片的时候，在左右写一些C的一些样本的代码来写在C里面。就真的只有加钱这种方式来做name space吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:09",
      "text": "这么怎么说呢？就是C隐藏局部变量或者局部方法的的的策略是把它放在一个文件里面。如果你不希望这个东西被别人看到，那你就不要把它放在那个可以被别人include的东西里面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:26",
      "text": "不但是你你那个，但是你那个是对对外部调用，但是你对自己使用的，你没有办法在C的同一个程序里面，你自己造一个不同的name space出来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:37",
      "text": "基本上没有什么太太太。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:39",
      "text": "所以就只能加前缀了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:41",
      "text": "对他有点像。这个比喻不恰当，应该就是它比比比比较像比较像python的同一个文件里面，你是没有办法通过一个语言的机制来限制自己说这个东西不要被别人访问到，或者说这个东西不要跟别人撞名的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:59",
      "text": "Python可以，python是基于文件。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:01",
      "text": "每个文件就是一个我我就我刚才就说了，他在同一个文件里面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:05",
      "text": "啊啊啊OK就对C来说，它不分区，不区分文件。对这文件不是一个边界。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:11",
      "text": "对它诞生的状，它诞生那个年代它没有这个需求，所以它没有办法预见到这一点。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:17",
      "text": "所以现在就只能加钱。就这种最蠢的方法，导致那些名字都看起来都挺奇怪的，或者不干净。至少对而且。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:24",
      "text": "另外一个原因，我觉得可能也是没有人试图用C的这种没有命，没有name space的语言来构建一个如超大型。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:37",
      "text": "的应用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:38",
      "text": "的操作系统级别的framework，对吧？因为系统API本质上它是一个非常巨大的软件工程产品。而目前现有的系统里面，几乎只有苹果在用这个没有name space东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:56",
      "text": "那个C12，C12没有.",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:57",
      "text": "那个是不对，C杀之前C加加有吗？C加加肯定有啊。你像那个那个非常，那那sorry，我不是要吐槽一下，这里是要说两个冒号。对，两个操作。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:15",
      "text": "STD，standard的冒号，冒号什么什么。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:18",
      "text": "对它它是name space的分割符。但我想说的不是这个，是，而是PHP里面这个东西有一个专门的称呼，叫什么来着？是希伯来语写的，能懂吧？如果你在PHP里面打错了两个冒号，我也很有可能记错了。但是就会出一个操，就是那个出来的错误提示里面管这个两个冒号的称呼是一个很奇怪的名字。然后去查的话，你会发现它是希伯来语。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:50",
      "text": "就是这个两个冒号这个符号是一个专有名词的对好吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:56",
      "text": "突然想到了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:56",
      "text": "对我知道是骰子的四点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:01",
      "text": "四名。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:03",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:06",
      "text": "然后这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:08",
      "text": "病不好的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:12",
      "text": "我来查一下那名叫什么了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:14",
      "text": "那就啥。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:17",
      "text": "这个东西叫做PHP expects t我的怎么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:28",
      "text": "写P.",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:30",
      "text": "AAMPA不对，PAAMAYIM, 然后空格等等等等，你等我KUDOTAYIM。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:53",
      "text": "对，然后这个东西是希伯来语的，两个数两个冒号的希伯来语的40没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:02",
      "text": "怎么为什么会是希伯来？那个谁是希伯来人吗？对，谁？",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:09",
      "text": "就那个发明者叫什么来着？",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:12",
      "text": "作者是西方，来源犹太。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:14",
      "text": "作者是犹太人。对OK对，然后这个东西学名叫scope resolution Operator，其实跟CD加是一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:22",
      "text": "所以我们做一个中文版本，我们要TSI斜杠BIN这个错误，四点错误。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:31",
      "text": "没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:34",
      "text": "好了不扯淡。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:36",
      "text": "那我们赶紧翻篇。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:39",
      "text": "好，翻篇是那个pass是一个移动应用的后端程序服务。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:49",
      "text": "Meditation有一个板块叫做explain things like SIM five year old。就是假设我只有五岁，然后请用五岁小孩能懂的语言来给我解释这是什么东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:03",
      "text": "我放弃了，你来解释。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:06",
      "text": "Parse是个怎么说呢？就是就在你在写一个移动应用的时候，你会有这样的一个需求。就是你会需要说我需要给我需要有一台在网上的服务器给我的用户发送push onal vacation.",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:27",
      "text": "这个只是它其中一个功能，它有很多其他功能。你说存那个那用户数据。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:33",
      "text": "对，然后与此同时我还需要把用户的一些传上来的数据存在某一个特定的地方，然后所有这些我就是比较传统或者比较正常的实现方式是我自己去买一台服务器，然后自己在这个服务器上写一些提供完成这些功能的程序。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:54",
      "text": "对吧？所谓的服务端。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:57",
      "text": "对，然后pass这个东西就是把这一块给你做成一个服务了。就可能之前你用烤披萨来打比方的话，你可能之前需要去自己和面，自己去弄烤炉什么的。然后pass这个pass sorry，这个东西就相当于一个披萨店，对吧？你只是说进去，然后就拿披萨出来就可以了。然后这个披萨就是一个专门给用户用的一个服务。对对，然后他怎么了？",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:25",
      "text": "他之前是一个独立的服务，很多人用的。他觉得就是很多前端应用开发者，他们不具备这个，或者不想去自己维护一套后端，因为挺麻烦的对吧？你要考虑什么扩展性、稳定性维护的问题。你就怎么两个人的小作坊，你写一个前端应用已经够苦哈哈的，你还要再去自己维护和后端的就很想死了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:45",
      "text": "你找了这么劳力劳心又劳又又伤害钱包的人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:49",
      "text": "对对对，所以就有这么一个第三方的服务。他说我帮你的后端搞定，我提供一个统一的API的接口，你直接访问就可以了，对吧？那国内也有人在做这个事情的，然后待会儿再说。后来这个服务被facebook买了，这个团队被facebook收购了。然后最近分手决定把它关掉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:11",
      "text": "然后他们就关门了。对还还没有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:14",
      "text": "应该是到几月。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:15",
      "text": "就是今年还他们就宣布自己要关门了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:18",
      "text": "对对对，这个不是这个核心应用，毕竟很多就是为什么。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:24",
      "text": "不要把自己的公司卖给。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:27",
      "text": "谁出不对，对这个公司的人他肯定是赚到了。最起码从财务上来讲，还是出路来讲都是好的。但是对那些用了这个pass服务的这些应用开发者来说就比较苦逼了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:40",
      "text": "好吧，这换一个说法，这就是为什么你不应该就这是为什么开发者不希望看到自己使用的服务被卖给了大公司。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:49",
      "text": "对，不要卖给任何大公司，facebook都不要卖。你卖了基本上正常情况就。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:54",
      "text": "交到别人手里了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:56",
      "text": "就正常情况下，两年之内就用不了了。对，其实这个点回到一个事儿，就是说这怎么pass，这个算是怎么说呢？算是一个soft service，它是一个SaaS对吧？对于这个应用开发者来讲，因为过去你要可能要搭你去租那个公那个什么公有云。你算是租一个S的平台，然后自己搭一套东西，或者说你用这个pass platform service，或者说你去租那个像那个其实之前也很火的那个APP engine，就是google的up engine。国内不是有一大堆在在模仿的吗？什么什么新浪的APP er，什么美团也在搞这个，我也不知道为什么，还有什么腾讯，都在还有都在做这方面的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:44",
      "text": "所以阿里现在阿里在做这个事情，就是你用这些第三方的pass的时候，都会形成一种绑定关系，对吧？你那个接口就那样了之后，他它那个接口和它那个功能别家没有提供的以后，你就不能迁移，或者不能很方便的迁移。但是说如果你自己搭的话，就不存在这个问题。因为那个S层那个服务器它都一样，对吧？都是跑的一个X4的发行版。然后你自己装什么GX，自己写客户端，就那些是一个标准的，但是pass很多都是一个非标准的的东西。然后这个时候你作为一个开发者，你就要在这两个之间做一个艰难的选择。比如说想省时间，然后省事儿，去用一个非标准的东西，以后更难迁移呢？还是说你从头从开始就是我以后就为了我的自己的独立安全着想，我要选择一个很标准的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:36",
      "text": "很多人就是S然后自己在写服务端，然后自己去维护这么一个两难的选择。其实我觉得没有那么那么容易选择，因为很多就不同的资源约束情况下不一样。有些时候说你不差钱对吧？你差的时间，那你可能说我用一些第三方服务能够尽快。虽然可能贵一点，以后签起来可能麻烦一点。但是我现在能够很快速的把我这个应用上线，验证我这个市场到底行不行。如果不行，我就赶快转型做别的了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:07",
      "text": "但也就是说你是觉得这个我以后可能要签的可能性很大。我这个要一定要要保持自己的独立，不要被某一个运营商运那个服务商锁死。那你可能就要开始就要去考虑的一些服务的问题，但是就会耽搁你的这个产品的开发进度，对吧？你可能本来就人手有限的情况下，你还得分时间分精力去开发这个服务端，还要自己去维护，还要继续考虑这种扩展的问题，对吧？所以我觉得很多人说这个就不要用这种第三服务，我觉得也不是一个负责任的一个说法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:43",
      "text": "就是你还是要分情况讨论。其实就跟对对对，其实就跟怎么说过日子一样。你要一个人的话，你可能每天下馆子不是无所谓。但是如果你有七八口人的话，那可能还是每天自己在家里给大家做饭比较好。就专门有人来做饭或者轮流做饭来对来要来的经济一点。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:59",
      "text": "对，这还是一个体量的问题，就是你你在乎的什么点？当然了这个就是说答案并非那么显然，不过一个很显然的问题就是现在那些用了pass的服那些应用，但是又没有人再继续维护的那应用一旦pass停掉的话，那应用就基本上就死掉了，就没办法再用了。然后据我了解，像apple store里面的这个管理政策，就是一旦比如说你作为开发者，一旦上了一个应用之后，你不去管它会怎么样。苹果不会把你下架。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:35",
      "text": "对吧？好像是只要你的那个用，只要你的develop.",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:40",
      "text": "就你的开发者上每天接着交费100刀.",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:42",
      "text": "开发者身份还在，它就不会被下架。除非它和它里面已经就它已经不能在新版的IOS上跑。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:50",
      "text": "但是这种基于服务端挂掉了，然后肯定在业务端还是可以就不受影响的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:56",
      "text": "不一定。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:57",
      "text": "那大部分来说是应该是不错，就是它还是可以那个应用本身可以运行的，就在那个IOS上是可以运行。但是对，只是因为服务端，所以这个应用变成了一个一个鸡肋了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:08",
      "text": "没有用的壳子。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:10",
      "text": "所以我就在想，我们怎么这么像那个苹果，不是老是喜欢吹嘘他自己的那个应用商里面有多少个几百万几千万的应用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:18",
      "text": "对吧？高质量的应用主要是重点是有高质量。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:22",
      "text": "不他他说总数的时候，他没有说有高质量。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:25",
      "text": "这个OK好吧？对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:27",
      "text": "但是我就在想，其实里面很多都是这种所谓的这种垃圾应用，就没有办法再那个了。这个时候怎么办呢？还要站在一个坑位。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:38",
      "text": "没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:39",
      "text": "所以其实我觉得up主还是有一种应该有一种那种因为你审核的时候，你其实是要去验证这个服务能不能用，对吧？那个审核人员，但是我就说那是不是可以说你这个应用每隔一年要review一下，看他到底还能不能用。如果没有用这种僵尸应用，是不是就可以改下掉了就下掉了，然后把那个那个名字那个位置空出来让别人接着用还是怎么样？",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:04",
      "text": "主要是一个测试比较困难。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:08",
      "text": "不是他测试困难都不是困难。就审核这个机制已经有现成的，只是说成本的问题对吧？你本来现在审核就忙不过来了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:14",
      "text": "我说的就是这个，就是你不可能说一每一个应用每隔一段时间都要让审核员自己手动去点一遍。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:21",
      "text": "那三年审一下可不可以？",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:23",
      "text": "我觉得这个应该是用用户可以直接反馈，就最好能有一个比较简单的反馈功能。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:28",
      "text": "然后用户发就是说这个应用不能用了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:30",
      "text": "反映一下。对，然后然后那边就直接挂起来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:34",
      "text": "就什么这个苹果给开发者提一个通知，说你最好在什么半年之内是解决这个问题，不然就下了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:43",
      "text": "对，这是一个比较好的方法。而且其实这个证就这个问题并不仅仅是对于使用parts这样的服务的应用存在的。可能有些服务它是使用一个自己搭建的后台服务器，但是这个后那风气也就没了，公司倒闭对吧？它也就那样了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:03",
      "text": "对，所以这其实是一个这这这个是个管理问题。我觉得对就是需要去这些应用商店的管理者就需要去把它解决好，然后给一个用户相对来说干净的。但是这样的话他就不能去去bost，就不能去吹嘘他的那个应用商店面应用数量了。因为你看可能如果真的这么一干，发现一大半都已经没有了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:27",
      "text": "数量比较怎么说呢？就是你分母足够大，那分子就是你你基数在那儿，那你可能存活下来的好应用的概率就比较高，所以技术还是有意义的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:40",
      "text": "可以给什么苹果提一个建议是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:44",
      "text": "对对pass这件事情有一个好处，就是他在关门之前还是给了一个给你给了你一个善后方案。就是你自己去弄一个服务器，然后把他的这一套东西跑到你自己的服务，然后可以用比较小的成本来迁移。因为之前pass的那个接口做的还是不错的，基本上没有什么太跟pass本身相依赖的东西。所以基本上你最理想的情况下，你至少要在自己的前端换一个服务器的的地址。然后整个也就迁移过去，就等于是在自己的服务器上serve了一个parts的application，然后专门用来服务你的这个APP。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:32",
      "text": "对他他们这个他们叫做pass open source server，就是pass开源服务器。然后他是用这个勾写的，然后就还部署潜力枪，好像还挺我看了一下还挺简单的，反正就是一个白人丢上去what好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:48",
      "text": "这pass server是javascript的，不是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:51",
      "text": "不是pass这个opener server是狗写的OK。然后他你再搭上什么mysql，然后那个M之后反正也凑合着用吧，能够让你再弄，但就没有那些pass的，比如说自动伸缩，然后那个就是有人帮你维护，这种事情你就要自己解决。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:11",
      "text": "OK所以就并不是那么美好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:13",
      "text": "但是至少给了一条出路。不像有些服务关了就关了，你也没什么没没给你什么替代的方案。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:21",
      "text": "你只能在那边哭诉什么老板黄鹤不是人是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:25",
      "text": "那什么老板什么卷款跑了，不管我们胸膛大水。对，好吧，你pass这个事儿就讲到这儿。还有一个事儿是也是一个程序员我们常用的一个东西，give up最近又怎么了？",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:40",
      "text": "这是一个隐忧悲伤的故事。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:43",
      "text": "悲伤的故事。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:45",
      "text": "它不是一个怎么说呢？悲伤也没有，但是他会让你觉得记怎么说呢？有一个非常中文里面有个非常经典的expression叫什么？Anyway就是类似就是你被别人牵着走，或者说你把自己的身家性命托付在别人身上，是比较掣肘的一件事情。就是你你就反正先说这个新闻，give ub最近有一个管理层面的新闻，就是他们中层管理把他们的中层管理被搭建起来了。然后高层管理人员有一部分在出逃，然后底层也有很多人辞职了。原因就是github因为现在体量越来越大，它它不再是一个早期的那种像像一个西部牛仔的这么一个公司。他现在已经不是有几亿美元的那个会在我是不是说太多了，就反正他应该是现在是一个身价非常高的，2 billion对两billion美元的20公司对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:54",
      "text": "然后在这种情况之下，其的创始人叫什么？One stress就他想要criss criss，他想要让公司保持效率，所以他又请了一个顾问来，顾问叫什么来着？是个好像是个印度名字。然后这个顾问就帮助他设计一套全新的管理结构。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:18",
      "text": "然后就是中管理结构里面最重要的一点就是引入了中层管理人员。我们知道github之前是一个比较所谓flat的一个管理结构，就是基本上大部分人都是平等的。你汇报的话，你可以直接去找什么CTO或者是CEO汇报，对吧？但是现在他要引入综合管理的话，那就意味着现在有就像一个军队一样会有指挥层级了。然后这一点就让很多人不爽，不管是原来的顶层的管理员，还是管理人员，还是底层的开发人员，然后很多人就走了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:52",
      "text": "其实这就是一个典型的一个什么创业公司转向成熟公司。由那个创始人、创始团队，像那种成熟的这种职业经理人的一个过程。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:03",
      "text": "就青春期，我觉得这基本上就是叫企业青春期。你从一个小企业成长到一个大企业，然后你会发现你不得不应对一些成人世界里面才有困扰。你导致你以前就是假装这些困扰不存在，然后就搞得很好。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:21",
      "text": "但就这在这个过程中很容易就是那些这种所谓的创新，其实我们觉得还是一个小团队，还是一种什么有那种锐气。但其实你会逐渐看到，他不管在产品的发布上面，还是在公司的这个管理上面，都逐渐就迈入中年那种感觉。就很多人觉得不爽了，就要么创始人团队走了，然后用那些核心用户也逐渐去就离开了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:45",
      "text": "前段时间还出了一个什么事儿，是有一个什么公开信，公开信说是要是要这些开源的那些大的开源软件的集体撤出那个github转去别的地方。因为他们提出的要解决他们这种开源软件。因为大的开源软件它管理方式和那种小公司的那种私有代码还是不一样的，对吧？包括这种在在艺术TK上面的管理层都不一样。然后他们提出很多这种需要改进产品上需要改进的点，那个d tap都没有响应。然后他们觉得我靠，那我们不在这里玩了，对吧？我们这个就是开源的，你自己又不开源，然后我们提的问题你又不敢我们去别的地方不和你玩了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:22",
      "text": "然后最近他们又出了一个什么回应，说我们都听到你们意见，我们要要我们要我们要痛改前非，我们要改。然后又出了这么一个事儿。其实有时候不是特别好的征兆，对这个平台来讲。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:36",
      "text": "对他的公众形象其实一直还好。我觉得不是那么不虽然不是那么的亲民，但至少还OK。至少在开发者眼里面，guitar是一个非常酷的公司。但是最近的确有了几件不酷的事情。然后你就会心里面会有一个隐忧，就是会说我靠如果明天给它不好用了，我应该去哪儿？好像放眼整个互联网没有什么更好的地方。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:05",
      "text": "有挺多的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:06",
      "text": "你觉得是这样吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:08",
      "text": "除了那个b bucket，然后那个get lab最近也开了类似的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:13",
      "text": "这是一个什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:15",
      "text": "我叫他是他最开始的时候，是你要自己自己就是self host，你自己要自己装那个。然后现在也开了那种公开的托管平台了，这个是免费的对对，好吧，其实你可以去试一下。他们说那个还不错，我也上去看了一下，觉得还挺好的。反正如果等那个跟他们玩不下去了，就迁到那边去呗，那个又没什么太大影响，但是苦了我们这些用go语言的人了，所有import路径要改一遍。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:42",
      "text": "这就是对其实我总觉得这个go吧github做到就做到原生，支持专门的这么一个私有公司的网站，还是有点过。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:52",
      "text": "他不是就他这个要解释一下，他其实也不是说把github做的原生值，他是说对我我把那个就是他把那个概念怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:02",
      "text": "他为了简化你的imports.",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:04",
      "text": "就有两个有两个正交的概念。一个就是说你的这个import名字和这个import东西的它所在的这个物理位置，他们两个合一了。但其实在一般情况下，这两个应该是分开来的对吧？给你做了一个package，但是你不应该去考虑说这个package host在哪里？但是勾勾的设计者觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:24",
      "text": "他做了一件非常自作聪明的东西，他会帮你去猜这个东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:29",
      "text": "但你觉得这个是自作聪明吗？其实我觉得他还是有些合理性的，好吧，我觉得它核心在这里，就是说如果说你不把这两个合一的话，你就会引入一个单独的问题。就是说谁最终决定你import那串字符串的唯一性呢？",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:47",
      "text": "直接这里是一个，这是一种，这是另外一种形式的所谓convention or confederation。就是如果没错，对，如果你不让他自己去做这件事情的话，那你就必须手动的显示的声明说你要去github找这个东西。而这个而这一步实际上是非常让人讨厌的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:05",
      "text": "就是很多包管理就卡在这里，你要解决各种麻烦的，就去选择到底在哪里找这个包，会不会要有一个集中的一个包管理。比如说我们现在看啊，比如python有那个叫什么拍拍一拍，PP拍拍拍拍python package index对吧？这个是一个集中的服务。然后ruby有那个叫jim那套，也是这样子的。甚至你说像mac我们采用那个home brew，它也是它虽然是用github，但是它还是有一个集中的一个包管，就会有一个中心化的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:38",
      "text": "但是go那样的话，它其实有个好处，就是它可以去中心化。它不存在一个所谓的唯一的或者叫做official，就官方的一个包的一个列表。对吧？所以就是我觉得说只能说是在这个设计上是哲学上不一样，各有优缺点。但是就是会产生一些实际的complication，比如说给我的可能性就是如果说你的你这个包的管理的地址变了，那你可能要重新改一下你的input路径。但是好处就是说你不用受制于一个集成化的包列表的可用性。比如说拍照经常有一段时间经常用不了就挂掉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:16",
      "text": "尤其在国内，国内好多依赖payson公司都搭建了自己的pp员。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:20",
      "text": "对对对，所以我觉得这个是一个也是一个不是那么黑白分明的事情，是你做的不同选择。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:28",
      "text": "就是对他们也是要见和取舍。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:31",
      "text": "对，承担不同的后果。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:33",
      "text": "对，我想说的就是其实facebook在几年前也有这么一次转型。Facebook目前活的挺好的，希望给别的虽然他可能背弃了一些开源早期小创业公司青春期的理念，但是还是希望他能活得好一点，这样你我的生活也会继续也也会继续保持一个比较高的水准。我很难想象说将来要找一个开源项目，还要去适应不同的开源，版本，开源hosting网站的UI什么的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:07",
      "text": "想一想回头对起码我上次比如说我写这个写VPN的时候，可以在那个平台上直接搜一下，然后有那相应的关键词就可以找到所谓的试验项目，然后可以学习他们怎么用的对吧？对，不用再换五个不同的地方去找，然后不一定好用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:29",
      "text": "行，今天扯了一个多小时，虽然这期的主题是什么题没。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:35",
      "text": "从VPN.",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:37",
      "text": "开始是吧？从ratio VPN开始。感谢收听IP podcast网络旗下的埃踢技术主题娱乐节目内核恐慌，我们号称哈利暂时也没有干货，想听人听，不想听你就别听。你可以为我本本节目捐款，捐款地址是kero panic TFM slash donate。捐款金额随意，只要是八的正整数倍就可以。捐款不会给你带来什么，不捐也不会让你失去什么。我的口号是no heart feelings。如果你有任何反馈，可以发电子邮件到kernel panic at IPN dot LI。同时也欢迎你收听爱拼旗下的其他几档节目。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:12",
      "text": "爱迪公司未知道他一来了，流行通信、hi story、硬影像、无资源，不致选美和陛下观。应该说一句新年快乐，有点晚了，好吧，给大家拜个晚年。还没有出十五。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:27",
      "text": "这是猴年，对吧？Cold monkey新年好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:30",
      "text": "对，我们下期节目再会，拜拜。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本次对话涵盖了多个技术与服务主题，主要围绕后端即服务（BaaS）的概念，如Facebook收购后的PASS服务影响、GitHub的管理变革对开源社区的冲击，以及技术选型时的考量，如第三方服务的优势与风险评估和开源项目托管平台的关键性。讨论还触及了编程语言Swift的发展前景、API设计原则、不同语言的适用场景，以及开发工具的选择对提升效率的重要性。此外，对话者表达了对开源项目的正面评价，强调参与开源项目对于学习和技能提升的价值。",
    "qa_pairs": [
      {
        "question": "在德国购买一些小众的电子产品时，一般会去哪地方买？",
        "answer": "通常会选择亚马逊德国，大部分时候如果在广告上看到的产品，在亚马逊上都能找到。但如果产品非常小众或在kickstarter等平台上独家销售的，可能就比较难找了。",
        "time": "00:00:39"
      },
      {
        "question": "有没有在亚马逊上买不到的小众电子产品？",
        "answer": "有的，例如一些阿杜伊诺方面的开发板，在亚马逊上很难找到或者价格较高。对于这类产品，可以考虑替代方案，比如AliExpress，那里有很多选择，但要注意AliExpress不直接发往中国。",
        "time": "00:01:59"
      },
      {
        "question": "为什么会有国内买不到，但在AliExpress上能买到的现象？",
        "answer": "这是因为产品定位和市场需求不同，以及设计、包装和页面展示等方面的差异。国内市场的商品描述和设计通常较为花哨，而在国际市场如AliExpress上，卖家更注重简洁、专业的页面设计以吸引消费者。",
        "time": "00:04:55"
      },
      {
        "question": "为什么中国市场的商品设计普遍不如国际市场？",
        "answer": "这可能与市场成熟度、审美习惯以及设计成本有关。中国市场庞大，导致商家可能不太重视单个商品的设计，而国际市场的消费者可能更倾向于简洁、专业的设计风格，且国际市场的产品竞争更为激烈，迫使商家提升设计水平。",
        "time": "00:06:00"
      },
      {
        "question": "对于同样商品，在淘宝和AliExpress上的展示有何不同？",
        "answer": "淘宝的商品页面设计较为混乱，而AliExpress上的卖家自行发布的产品页面设计更为干净、专业，这可能是由于国际市场对于商品展示的专业性要求更高，而中国市场相对宽松。",
        "time": "00:08:29"
      },
      {
        "question": "对于中国使用习惯对设计的影响有何看法？",
        "answer": "认为中国用户有填满版面空白的习惯，以及广告无处不在的现象，可能影响了网络设计的简洁性。但同时指出，许多商家并非随波逐流，而是通过AB测试等方式优化文案和设计，以提高销量。",
        "time": "00:09:48"
      },
      {
        "question": "在国内合法渠道能买到什么在国内无法获得的商品？",
        "answer": "我在德国没有找到太多在国内合法渠道能买到但德国买不到的商品。",
        "time": "00:14:02"
      },
      {
        "question": "乐天商城是哪个国家的电商？",
        "answer": "乐天商城是韩国的，但乐阿里的express UI要比日本的乐天商城好一些。",
        "time": "00:15:11"
      },
      {
        "question": "日本电商是否发达？",
        "answer": "相对来说，日本的电商并不发达，尤其是与它在发达国家的地位相比。",
        "time": "00:15:33"
      },
      {
        "question": "日本和台湾在电商方面的状况如何？",
        "answer": "日本和台湾在电商方面都面临一定的挑战，由于市场增量有限，导致电商网站设计较为陈旧和平淡。",
        "time": "00:15:58"
      },
      {
        "question": "对于电商网站设计和整体模式，你们主要关注哪个方面？最近发生了什么有趣的事情与电商相关？",
        "answer": "我们主要关注的是整体电商模式，网站设计只是其中一种集中表现形式。Jeff at jeff hover，stack workflow的创始人，在其个人博客上写了关于购买滑板车配件时提到的一个经历，他想通过Ali Express购买一台用于搭建私有云服务的小型服务器。",
        "time": "00:16:35"
      },
      {
        "question": "小电脑选购时需注意什么？",
        "answer": "在选购小电脑时，尤其是用于路由功能的小型服务器，要注意其性能是否能满足高带宽环境下的需求，例如拥有双网口以支持光纤接入和无线交换机功能，并且要注意产品的质量与可靠性。",
        "time": "00:24:19"
      },
      {
        "question": "Ali Express上的产品与淘宝上有什么区别？",
        "answer": "Ali Express上的页面设计更规范，产品描述更详细，给人一种更靠谱的印象，而在淘宝上购买时可能会遇到商品质量参差不齐的问题。",
        "time": "00:25:53"
      },
      {
        "question": "scooter是什么？scooter和自行车相比，哪个更简单？",
        "answer": "Scooter是一个非常原始的代步工具，可能比自行车更简单，它可能没有链条等复杂结构。如果比较现代的自行车和现代的scooter，scooter可能更简单一些，但不一定更原始。",
        "time": "00:28:52"
      },
      {
        "question": "student computer中文怎么称呼？",
        "answer": "student computer的中文叫滑板车。",
        "time": "00:29:34"
      },
      {
        "question": "scooter作为隐喻是什么意思？",
        "answer": "scooter作为隐喻代表一种便捷、易于使用的短途代步工具，适合在一定距离内快速移动，比如5公里之内的路程。",
        "time": "00:29:51"
      },
      {
        "question": "使用滑板车的优点是什么？",
        "answer": "滑板车无需学习技巧即可快速上手，相比旱冰鞋或滑板更加方便，尤其适合需要在大型展会上频繁往返的工作人员。",
        "time": "00:30:27"
      },
      {
        "question": "scooter computer性能如何？",
        "answer": "scooter computer虽然不是最新的配置，但其性能仍很强劲，甚至超过许多人家里两三年前的台式机或笔记本电脑。",
        "time": "00:31:38"
      },
      {
        "question": "是否能找到适合路由器使用的、CPU能力强且无需GPU、价格便宜的硬件配置？",
        "answer": "目前很难找到这样的硬件配置，通常需要购买服务器级别的设备，而这些服务器设备体积大、功耗高，不适合家用环境。",
        "time": "00:32:34"
      },
      {
        "question": "是否有想过购买旧的服务器来替代？",
        "answer": "旧服务器虽然功耗大、噪音大，但如果要找小型、静音并能适应家用环境的旧服务器也很困难，而且价格往往不如新型号的小型电脑便宜。",
        "time": "00:34:47"
      },
      {
        "question": "对于写一个VPN的看法是什么？",
        "answer": "写一个VPN其实原理并不复杂，主要是通过在电脑上模拟出一块虚拟网卡，然后在操作系统内进行数据包的封装、路由和转发处理，最终生成一个简易的VPN。",
        "time": "00:40:36"
      },
      {
        "question": "那你为何选择用C语言来写这个东西？",
        "answer": "因为我之前发现用C写的代码不太好改，为了更好地理解其原理，复习了C语言和网络编程知识。在实现过程中发现C语言可以提供更好的效率和安全性，而且相较于Python等其他语言，修改起来更为方便。",
        "time": "00:43:26"
      },
      {
        "question": "这个项目具体是做什么的？",
        "answer": "我们正在做的是将一个操作系统性质的东西整合进一个docker container中，面临的问题是如何将数据、配置和log等独立出来，并根据服务器实现策略进行妥善挂载和管理。",
        "time": "00:45:06"
      },
      {
        "question": "遇到不同语言混合编写的复杂项目时，你是如何应对的？",
        "answer": "在处理C、Python等多种语言混合编写的复杂项目时，我发现需要在不同层级之间切换，这很像量子物理学中的能级跃迁，非常耗费精力。尽管如此，通过日复一日的工作，最终完成了这个项目。",
        "time": "00:47:53"
      },
      {
        "question": "你们的产品是用C和Python混合写的吗？",
        "answer": "是的，产品主要由C++引擎和用Python与C型态组合的class OS两部分组成，以及一些周边开发工具。",
        "time": "00:49:28"
      },
      {
        "question": "对于编程语言的选择，你有什么看法？",
        "answer": "我认为一个好的编程语言应该能在底层和高层之间有清晰的割裂，具备较好的适用性，既能写底层也能写高层，并找到性能和抽象层级之间的平衡点。比如Swift是一种既能处理操作系统也能开发应用的良好选择，而Java和C++在某些场合可能因语法复杂或需要频繁切换编程范式而显得不够理想。",
        "time": "00:51:07"
      },
      {
        "question": "在面对软件复杂度提升和多语言混合使用时，你如何看待软件质量的问题？",
        "answer": "随着需求增加和技术转型，软件复杂度提升导致软件质量问题愈发明显。例如，用过时的技术如Objective-C编写复杂应用时，会遇到抽象层级不足和性能瓶颈等问题。因此，选择合适的语言和技术对于提升软件质量和管理复杂度至关重要。",
        "time": "00:52:04"
      },
      {
        "question": "如果只想用一套语言解决既有底层又有上层应用需求的问题，是否只能采用某种方案？",
        "answer": "是的，如果要使用单一语言解决这类问题，可能没有其他选择，否则就需要混合语言，而这会导致范式迁移的复杂性增加。",
        "time": "00:57:33"
      },
      {
        "question": "是否有前端和后端都用同一种语言的例子？",
        "answer": "现在确实有这样的情况，比如前端和后端都采用JavaScript（通过Node.js）进行开发，它既可以用于前端也可以用于后端。",
        "time": "00:57:54"
      },
      {
        "question": "对于1.6版本中关于垃圾收集器（GC）的重大提升是什么？GVM（可能指Java虚拟机）在某些场景下的使用情况如何？",
        "answer": "1.6版本的一个重大改进是降低了大堆垃圾收集暂停时间，可能降低到十个毫秒以内，这对于大多数非实时性要求不高的应用来说足够好。GVM虽然功能强大，但在某些需要快速启动和低延迟的应用场景下，由于启动速度较慢，可能不适合作为首要选择。",
        "time": "00:59:07"
      },
      {
        "question": "目前流行的Swift编程语言有什么新动向？",
        "answer": "Swift最近在做API设计方面的改进，以解决其与Coco绑定的一些老旧设计问题，并发布了API design guidelines，旨在简化API使用和提高开发效率。新的Swift版本预计将在2016年底或2017年初发布，届时将会有重大重构和命名规范等方面的改变。",
        "time": "01:02:18"
      },
      {
        "question": "为何C语言没有像 Swift 这样的命名空间机制？",
        "answer": "C语言在诞生时并未预见到构建大型软件工程的需求，因此没有内置的命名空间机制，导致在同一个文件中的局部变量和方法命名相对自由，只能通过文件级别的包含方式来避免冲突。而现代操作系统级别的框架构建需求催生了类似 Swift 的命名空间支持。",
        "time": "01:10:38"
      },
      {
        "question": "是否有将C编译为JavaScript并在浏览器中运行的例子？",
        "answer": "是的，有人通过LLVM编译器将C语言编译成JavaScript，并在浏览器中执行。",
        "time": "01:10:56"
      },
      {
        "question": "在PHP中，两个冒号的符号有什么特殊的称呼吗？",
        "answer": "这个符号在PHP中有专门的称呼，它源自希伯来语，叫做PAAMAYIM，是错误提示中提到的“四点错误”。",
        "time": "01:12:53"
      },
      {
        "question": "为什么这个符号与希伯来语有关联？",
        "answer": "这个符号是由犹太人发明的，所以与希伯来语有关联。",
        "time": "01:13:14"
      },
      {
        "question": "这个符号在中文中应该如何表述？",
        "answer": "在中文中可以称为“斜杠BIN”，也就是四点错误。",
        "time": "01:13:22"
      },
      {
        "question": "Pass是什么，它的主要功能是什么？",
        "answer": "Pass是一个移动应用后端程序服务，它的功能包括但不限于为用户提供push notification服务，同时也负责存储用户数据等。",
        "time": "01:13:39"
      },
      {
        "question": "Pass服务为什么被关闭了？",
        "answer": "Pass服务被Facebook收购后，最近决定将其关掉，可能是因为业务战略调整或市场需求变化。",
        "time": "01:15:49"
      },
      {
        "question": "开发者为何不希望自己的服务被大公司收购？开发者在使用第三方服务时面临怎样的困境？",
        "answer": "因为一旦被大公司收购，该服务可能在短时间内被停止更新和维护，导致依赖该服务的应用无法继续正常使用。开发者在使用第三方服务时，需要在省时便捷的非标准服务和独立安全、可迁移性较好的标准服务之间做出艰难选择。",
        "time": "01:16:49"
      },
      {
        "question": "对于类似Pass这样的服务，其开源版本对开发者意味着什么？",
        "answer": "Pass的开源版本提供了一条迁移途径，让开发者可以在自己的服务器上部署和运行应用，但这需要开发者自行解决原服务提供商提供的非标准功能。",
        "time": "01:23:44"
      },
      {
        "question": "对于已上架的应用，如果服务提供商停止运营，苹果会如何处理？",
        "answer": "如果开发者未及时更新或维护应用，即使审核时通过了，当服务提供商停止运营时，应用可能会变成无用的壳子，但仍可能在App Store中存在，直到用户反馈或苹果采取相应措施下架。",
        "time": "01:21:10"
      },
      {
        "question": "GitHub最近有什么管理层面的新闻？",
        "answer": "GitHub最近中层管理架构发生了变化，部分高层管理人员出逃，底层员工也有大量辞职。这是因为GitHub随着体量增大，不再像早期那样实行扁平化管理，而是转向了类似军队的层级管理制度。这一转变导致了包括顶层管理员、管理人员和底层开发人员在内的很多人不满并离开了公司。",
        "time": "01:25:45"
      },
      {
        "question": "这个变化是否反映了创业公司成长到一定阶段的常见现象？",
        "answer": "是的，这正是创业公司向成熟公司转型过程中常见的一种情况，即创始人团队需要逐渐适应成人世界的管理困扰，公司在产品发布和内部管理等方面会逐渐变得更为保守和中庸，从而失去一些原有的锐气。",
        "time": "01:28:21"
      },
      {
        "question": "GitHub最近是否遭遇了开源社区的集体抗议事件？",
        "answer": "是的，有一个公开信表示，由于GitHub在管理大型开源软件方面的方式和私有代码管理不同，且对社区提出的改进意见未及时响应，导致一些大型开源项目集体撤出GitHub，转而寻找其他平台。",
        "time": "01:28:45"
      },
      {
        "question": "GitHub对此事有何回应？",
        "answer": "GitHub最近对此事发表了回应，表示听取了社区意见并决定进行改进。尽管如此，这仍可能是对平台公众形象产生负面影响的不祥预兆。",
        "time": "01:29:22"
      },
      {
        "question": "GitHub在源代码托管方式上采用的独特设计是什么？",
        "answer": "GitHub的独特设计在于它将import名字与import包所在的物理位置合二为一，以简化开发者导入包时的路径设置。虽然这种设计在一定程度上有其合理性，但也带来了实际问题，比如当包的管理地址变更时，开发者需要手动修改import路径。",
        "time": "01:31:04"
      },
      {
        "question": "对于GitHub的这种去中心化设计，您怎么看？",
        "answer": "这种去中心化设计的优点在于不存在单一官方包列表，用户不受制于集中服务的可用性。然而，它也带来了实际问题，如依赖于GitHub的用户在地址变化时需要更新import路径。尽管如此，在哲学层面，这种设计也各有优缺点。",
        "time": "01:32:38"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "探讨购买小众电子产品渠道与体验",
        "summary": "在德国，大多数时候人们通过亚马逊德国购买小众电子产品，但亚马逊并不总是有广告中看到的所有产品。对于特别小众或是开源项目的产品，Kickstarter是一个重要的购买渠道，尤其是对于欧洲本土的项目来说发货较为便利。对于一些非常小众的需求，如Arduino开发板，亚马逊上的选择有限且价格可能较高，因此存在对替代购买方案的需求。"
      },
      {
        "time": "00:02:18",
        "title": "探讨AliExpress与淘宝的差异及市场策略",
        "summary": "AliExpress被视为面向海外的淘宝，提供深圳等地生产的电子产品，以优惠的价格和丰富的选择吸引外国消费者。尽管AliExpress不向中国内地发货，但它展现了与淘宝相比，出口商品在品质控制、包装及页面设计上的高标准。这种差异源于国内外市场的不同需求和消费者期望，反映出企业在面对不同市场时采取的不同策略和态度。"
      },
      {
        "time": "00:06:49",
        "title": "中国市场的设计观念与消费行为分析",
        "summary": "讨论集中在如何中国市场的大规模和特定消费习惯影响了产品设计的重视程度以及市场上的竞争策略。一方面，由于消费者基数庞大，即使产品质量不佳，也总能找到买家，导致市场上存在大量不重视设计的产品。另一方面，中国设计成本相对较低，加之很多产品拥有者错误地认为自己对设计有最终决定权，进一步影响了设计质量。此外，比较了aliexpress和淘宝上同类商品的价格和设计，指出了面向不同市场时产品的设计和呈现方式存在显著差异。最后，讨论了中国用户对于网页设计的特殊习惯，以及这种习惯如何影响了线上购物平台的产品展示和营销策略。"
      },
      {
        "time": "00:13:20",
        "title": "海外生活对购物需求的影响及电商体验",
        "summary": "对话者分享了在德国生活期间，对购买来自国内的商品（尤其是中文书籍）的需求较为强烈，但除了这类精神消费品外，对于从国内购买其他物质产品的需求不大。对于通过非合法渠道购买便宜商品的行为持批评态度。同时，对话者对比了中国和日本、台湾的电商发展状况，指出日本和台湾在电商设计和模式上相对落后，可能由于市场体量较小所致。"
      },
      {
        "time": "00:17:01",
        "title": "选择高性能网络设备的经验分享",
        "summary": "讨论了个人对于寻找高性能网络设备的经验，特别是关注于路由器的选择。提及了对于传统托管服务的需求，VPN的使用，以及对于路由器性能的关注。通过比较不同路由器的性能，强调了在高带宽环境下，选择合适的路由器的重要性。此外，还讨论了购买渠道的便利性以及对产品稳定性的考虑。"
      },
      {
        "time": "00:25:46",
        "title": "探讨阿里Express与淘宝购物差异及产品可靠性",
        "summary": "对话者讨论了在阿里Express和淘宝购买产品时的差异，特别是产品的卖相和可靠性给消费者的印象。进一步，他们比较了产品选择和质量，特别是在寻找特定设计（如无风扇、铝合金壳子）的产品时的体验差异。此外，对话中还提及了乔布斯对个人电脑的比喻，以及对Scooter概念的探讨，展现了对技术产品深度理解和期待。"
      },
      {
        "time": "00:29:08",
        "title": "滑板车与小型电脑的便捷性及实用性探讨",
        "summary": "讨论集中在滑板车作为一种短途代步工具的便捷性上，强调其对于解决1到3英里距离内的移动需求特别有效。滑板车不仅易于学习使用，而且在特定环境下（如大型展会）为工作人员提供了极大的便利。此外，还提到了小型电脑的性能和实用性，尽管它们可能不再是市场上最时髦或顶级的产品，但其性能依然强大，对于大多数用户来说是非常实用和经济的选择。"
      },
      {
        "time": "00:31:54",
        "title": "探讨个人微型服务器的需求与VPN开发",
        "summary": "对话中，讨论了对于一种特殊的硬件配置需求，即寻找一种价格便宜、不需要GPU、但CPU处理能力强大的设备，却因市面上大多数选项要么性能不达标要么价格过高而难以满足。进一步探讨了利用基于ARM的处理器作为解决方案的可能性，但遇到了性能与兼容性的问题。还提到了使用旧服务器的成本和功耗问题。随后转向开发个人微型服务器的话题，讨论了基于Intel移动处理器的被动散热小电脑作为潜在解决方案。此外，还讨论了关于自己动手开发一个VPN的想法，包括使用Go语言进行编程的可能性和其带来的技术挑战，以及开源代码的讨论和使用体验。最后，分享了开发过程中的一些心得和技术细节，强调了理论知识和实践操作的重要性。"
      },
      {
        "time": "00:44:34",
        "title": "数据库容器化面临的挑战及解决方案探讨",
        "summary": "在数据库产品开发中，引入Docker镜像已成为一个普遍需求。这一转变要求将数据库服务及其相关进程在容器中运行，同时保持数据、配置文件和日志等的独立性。然而，由于容器的生命周期特性，简单的数据卷挂载不足以满足需求，还涉及到对原有代码逻辑的深度修改，如修改默认写入路径等，这要求开发者需在多种编程语言（如C、Python）间频繁切换，增加了工作的复杂性和心理负担。此外，维护同一套源代码同时支持传统安装和Docker镜像两个版本，还涉及到构建和测试过程中的额外挑战。尽管如此，通过这一过程也带来了对个人技能和产品贡献的满足感，尽管实施过程中存在种种挑战，但对于技术团队来说，这仍然是一个值得探索和实现的方向。"
      },
      {
        "time": "00:51:06",
        "title": "Swift语言的适用性及其对软件开发的影响",
        "summary": "Swift作为一种设计考虑周到的语言，旨在满足从操作系统到应用程序等不同层面的开发需求，体现出良好的适用性。与Objective-C相比，Swift在处理底层和高层应用时展现出更高效和简洁的特性，减少了编程范式之间的转换需求。讨论也涉及了软件工程面临的挑战，如软件复杂度的提升和技术转型期的需求变化。Swift的垃圾回收机制（GC）使其在某些非常底层的应用开发中不甚适用，但对于中等复杂度的应用开发表现良好。此外，讨论还触及了其他编程语言如Java和其在不同应用场景下的局限性。总体上，对话强调了一个编程语言的动态范围（适用的下限和上限）对于满足广泛的开发需求至关重要。"
      },
      {
        "time": "00:59:05",
        "title": "探讨Java虚拟机(GVM)的性能优化与应用实践",
        "summary": "讨论集中在Java虚拟机(GVM)的最新性能提升，特别是通过改进Garbage Collector (GC)减少暂停时间，使得对大多数非实时性要求高的应用已经足够使用。此外，讨论也触及了广告实时竞价系统的实现，强调了对于高效内存管理和选择合适的技术栈的重要性。对比了传统做法与新技术的应用，以及OpenJDK、HotSpot等不同JVM的特性，同时也探讨了其他编程语言如Swift的最新发展，反映出开发者社区对性能和效率的持续关注。"
      },
      {
        "time": "01:02:18",
        "title": "Swift语言的现状与未来发展",
        "summary": "Swift最近在进行API设计指南更新，以减少对Cocoa API的依赖，并计划在未来的版本中实现更多原生库的调用。目前Swift的标准库功能较为贫乏，开发者需要依赖Cocoa框架来完成复杂项目。Swift正致力于进行面子工程，即API的重构和设计，以适应现代开发需求，并计划在接下来的版本中减少对Objective-C的依赖，实现less verbals。尽管Swift在不断进化中，但苹果内部的大量生产代码仍基于Objective-C编写，显示出Swift作为一种新兴语言，在实际应用中的逐步适应和转变。"
      },
      {
        "time": "01:07:14",
        "title": "Swift API 设计原则及其对Cocoa库的影响",
        "summary": "对话中讨论了Swift的API设计指导原则及其如何能够应用于现有的Cocoa库，以减少开发者的困惑和提高代码的易用性。讨论重点包括Swift如何通过去除不必要的前缀如NS来简化命名，以及C语言由于没有命名空间导致的命名冲突问题。此外，还提到了其他编程语言如C++和PHP在命名空间处理上的不同方法，以及这些差异对开发者的影响。"
      },
      {
        "time": "01:13:37",
        "title": "解析Parse服务及对企业的影响",
        "summary": "Parse是一个提供给移动应用开发者的后端即服务（BaaS）平台，它简化了开发者在开发应用时对于服务器的需求，如推送通知和数据存储等，从而使得开发者可以更专注于前端应用的开发。Parse的关闭对依赖它的应用开发者造成了影响，强调了依赖第三方服务的风险。同时，讨论了开发者在选择使用第三方服务和自建服务器之间的权衡，考虑因素包括成本、时间、扩展性及维护等。"
      },
      {
        "time": "01:19:59",
        "title": "应对应用商店中僵尸应用与服务端维护问题的讨论",
        "summary": "讨论集中在应用商店中，特别是苹果应用商店，如何处理那些不再被维护的应用（僵尸应用）以及当服务端停止服务时对应用的影响。提出了一种解决方案，即应用商店可以定期审查应用，确保它们仍然可用，并提出应有机制让用户反馈应用失效情况。此外，讨论了Pass开源服务器提供了一种解决方案，允许开发者在服务停止前迁移至自己的服务器上，尽管这增加了维护成本。这反映出应用商店管理者需要更好地管理应用质量，以提供更干净、更高质量的应用环境给用户。"
      },
      {
        "time": "01:25:25",
        "title": "GitHub面临管理结构变革和人才流失挑战",
        "summary": "GitHub在成长为一个价值20亿美元的公司过程中，进行了管理结构的重大调整，引入了中层管理人员，打破了原有的扁平化管理模式。这一变化导致部分高层管理人员和底层开发人员离职，引发了关于公司发展方向和企业文化转变的讨论。同时，GitHub还面临着开源社区对其处理问题方式的不满，导致一些开源项目考虑迁移到其他平台。尽管GitHub尝试回应社区的关切，但这些变动和挑战可能影响其公众形象和开发者社区的凝聚力。"
      },
      {
        "time": "01:30:04",
        "title": "Go语言的包管理及GitHub托管平台讨论",
        "summary": "对话集中在Go语言的包管理特性，特别是其对import路径的处理方式，以及GitHub作为代码托管平台的角色和变化。讨论者认为，Go的设计选择有其合理性，但同时也引入了如需频繁更新import路径等实际问题。此外，也提到了其他语言的包管理方式（如Python的PyPI、Ruby的Gems）以及对中心化与去中心化包管理的比较。最后，提及了Facebook的开源项目托管转型和对开源社区的影响，强调了开源项目托管平台UI统一性的重要性。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "号称“哈利”但无干货"
                },
                {
                  "children": [],
                  "content": "收听方式：使用podcast客户端订阅"
                },
                {
                  "children": [],
                  "content": "网址：kero panic dot FM"
                },
                {
                  "children": [],
                  "content": "捐款信息：kero panic dot m slash donate"
                },
                {
                  "children": [],
                  "content": "捐款金额要求：八的正整数倍"
                },
                {
                  "children": [],
                  "content": "捐款无实际回报"
                }
              ],
              "content": "内核恐慌"
            }
          ],
          "content": "主题与节目"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "自制VPN的原因与动机"
                },
                {
                  "children": [],
                  "content": "使用不同编程语言（C、Go）的优缺点"
                },
                {
                  "children": [],
                  "content": "实现VPN的系统调用与技术细节"
                },
                {
                  "children": [],
                  "content": "开源项目与个人贡献"
                }
              ],
              "content": "VPN技术"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "Swift的特性和应用场景"
                },
                {
                  "children": [],
                  "content": "Go语言的使用场景及优点"
                },
                {
                  "children": [],
                  "content": "JavaScript（Node.js）与Python的比较"
                },
                {
                  "children": [],
                  "content": "语言设计对软件开发的影响"
                }
              ],
              "content": "编程语言讨论"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "GitHub的企业转型与内部管理变化"
                },
                {
                  "children": [],
                  "content": "社区对GitHub策略改变的反应"
                },
                {
                  "children": [],
                  "content": "开源项目的托管与迁移问题"
                },
                {
                  "children": [],
                  "content": "对GitHub服务的依赖与替代方案讨论"
                }
              ],
              "content": "开源与服务提供商"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "苹果软件质量下降的原因与影响"
                },
                {
                  "children": [],
                  "content": "选择编程语言时的考虑因素"
                },
                {
                  "children": [],
                  "content": "软件开发中的复杂度管理"
                }
              ],
              "content": "软件质量与技术选型"
            }
          ],
          "content": "技术讨论"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "高级程序员的技能要求"
                },
                {
                  "children": [],
                  "content": "学习新技术与编程语言的策略"
                },
                {
                  "children": [],
                  "content": "面对技术挑战的心理状态"
                }
              ],
              "content": "个人技能与挑战"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "创业公司向成熟企业的转变"
                },
                {
                  "children": [],
                  "content": "管理结构的变化与影响"
                },
                {
                  "children": [],
                  "content": "开发团队的效率与沟通"
                }
              ],
              "content": "团队合作与管理"
            }
          ],
          "content": "个人与团队"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "对未来编程语言与技术的预测"
                },
                {
                  "children": [],
                  "content": "技术选型的建议"
                },
                {
                  "children": [],
                  "content": "开源项目的未来方向"
                }
              ],
              "content": "技术发展的展望"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "学习新技术的方法"
                },
                {
                  "children": [],
                  "content": "增强个人技能的建议"
                },
                {
                  "children": [],
                  "content": "对开发者社区的参与与贡献"
                }
              ],
              "content": "个人发展建议"
            }
          ],
          "content": "未来趋势与建议"
        },
        {
          "children": [
            {
              "children": [],
              "content": "新年祝福"
            },
            {
              "children": [],
              "content": "下期节目预告"
            }
          ],
          "content": "结语"
        }
      ],
      "content": "对话内容脑图摘要"
    }
  }
}