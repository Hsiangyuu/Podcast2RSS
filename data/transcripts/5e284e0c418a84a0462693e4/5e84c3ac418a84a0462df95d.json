{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df95d",
  "title": "27. And You Have to Support It for the Rest of Your Life",
  "task_id": "dej8nby5r2mr9pog",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "欢迎收听IPN podcast的网络旗下的IT技术主题娱乐节目内核恐慌。我们号称哈拉克，但是也没有干货，想听人听，不想听就别听。本节目的网址是kernel panic dot FM。我们推荐大家使用podcast客户端订阅节目，详情请访问IPN dot IOSH FAQ。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:21",
      "text": "欢迎你为本节目捐款，捐款地址是kernel panic dot FM slash donate捐款金额随意，只要是八的正整数倍就可以了。捐款不会为你带来什么，不捐也不会让你失去什么。我们口号是programing is like sex，one mistake and have to support IT for the rest of your life.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:42",
      "text": "这个叫做什么accidental baby吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:47",
      "text": "就是executions，execution应该在保护级别进行。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:55",
      "text": "保护级别限制很多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:58",
      "text": "但是不会怀孕。不会触及到这个坑了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:03",
      "text": "好吧？大家还是小心。行行行，是的，最近好像国内开放什么二胎了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:11",
      "text": "是与时俱进，我们要讨论一下这个算了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:14",
      "text": "还是他一来了。OK对我觉得我们好像也扯不出个什么犊子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:20",
      "text": "其实二胎之前就是对于双方都是独生子女的家长开放的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:27",
      "text": "以前是开放叫做什么单独二胎，什么叫单独二胎，这个是怎么解释来的？反正如果两方父母都是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:35",
      "text": "这个独生子女的话就可以，然后现在是没有任何限制。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:40",
      "text": "想升两个就升就up to .",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:42",
      "text": "two OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:45",
      "text": "但也有人在扯扯这个事情，就是说为什么还有up to two这个限制。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:49",
      "text": "对吧？对，其实现在的人们的生至少城市人口的生育欲望已经非常低了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:57",
      "text": "我也觉得是这样，起码我的声音又要很低了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:02",
      "text": "好吧，但我相信也许二线城市还是会有一个增长点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:07",
      "text": "农村主要还是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:08",
      "text": "可能可是农村现在农村大量，前两天那个经济学人上还封面故事，就是讲中国的农村出现大量留守儿童，然后农村已经没有年轻人了，所以其实农村的生育率也是相当低的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:26",
      "text": "这个还有点意思，我一直不知道怎么算。比如说两个一对农民工去从农村去到一线城市打工，然后他到底生了两个小孩，算哪边的出生呢？他上不了户口，他是对，所以我说他他他算哪里的出生。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:41",
      "text": "算这个城市的吗？算应该是算户籍所在地的出生，就永远是统计。如果你要拿统计资料的话，永远是在户籍所在地拿。那他们要是想给，如果要是想给学学生想给孩子上户口的话，只能回到户籍所在地上了。如果不上的话，就是黑户，你统计不到对吧？但是如果上了的话，那只能是在户籍所在地，所以你统计的是户籍所在地的出生率。这么飞了，fuck。好吧，我们今这一期是27期，然后做一下听众反馈，但听众反馈是24期的，因为上了两期，我们都请嘉宾对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:22",
      "text": "对，就采访对嘉宾，然后没有对我们两个的吐槽。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:27",
      "text": "为什么二为什么上一期limit的没有反馈的下载量很高？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:34",
      "text": "他们都去那个V2EX反馈了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:38",
      "text": "对对对，这个非常合乎情理。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:41",
      "text": "因为我觉得对，因为我忘了说，我们每期这个pro panic都会在V2X的那个podcast节点更新，我相信大家都会有那个点击或者是去评论。然后我看了一下数字，就是采访薇推，采访李伟那一期，在那里有大概四千多次点击。然后我们平时大概是在几百次点击，所以是有数量级的区别的。然后它相当然当然相应的这个评论也是比较多的，一共有我现在看到有55条评论，应该是对还比较活跃的一个讨论组在下面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:20",
      "text": "我可能好多反馈其实都值得念，网站实在有点慢，因为的经济学很厉害。Real镜头下我的铜币，所以real你是靠这个帖子收很多铜币。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:31",
      "text": "真的我我的那个铜币已经翻番了不，我跟你说我的银币已经翻番了，我之前是二十多个银币，我现在已经五十多个银币了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:39",
      "text": "致富新途径。对于L大经历比较熟悉的朋友，可以从一分31小时32分左右开始停，前面1个小时就这样没跳过，所以前面一个半小时我们在扯什么蛋？对，就是下面有一个人说听完了，为什么我感觉几乎70%以上的聊天内容都曾经在另外的博客里面看过呢？比如V2UX从谷对迁移limit三个问题，以及KGG6间房和后来去加工工作的这个还是如果我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:08",
      "text": "觉得这个还是有有原因的，你之前只是看过对吧？这次你听过了还是有点不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:14",
      "text": "没错。而且我们的节目的意图不就是让没有看过的人可以有听过。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:21",
      "text": "听到8% 70.",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:22",
      "text": "的内容就知道limit曾经在log里面写过什么，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:27",
      "text": "哼对，29楼有个吐槽挺好的。IPN买过最不值得的一名大概就是coro panic点FM了。因为吴涛被I片到LS slash chron panic习惯了，这次我们已经改过来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:43",
      "text": "这个稿子了耶，可能拍dot FM还是蛮贵的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:47",
      "text": "好贵，一年要七十刀的续费的钱。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:51",
      "text": "对，所以我能捐款低薪，如果有点用处的话就用在这儿。对，可能连这个都不够用。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:59",
      "text": "你干嘛这么悲观，其实是够的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:04",
      "text": "Good to know more than that，我还有人非常怀旧的那个不是，就是livid。他把当初那个by company 2的APP的截图。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:16",
      "text": "发上来了。我们把这个链接贴到shero t里面，大家有兴趣。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:21",
      "text": "可以去看一下OK好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:24",
      "text": "这个正儿八经的听众反馈，有一条是来自叫陈震的朋友啊。那里面提到了几个问题，这是当然是对我们24期节目，也是20期，有个换专业。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:39",
      "text": "的事情说到对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:42",
      "text": "然后他说这个我和反馈的那个听众也很有相似的情况和想法，当然也做出一些让人惊讶的事情。我本科和研究生都是工程专业，但是一直心水计算机，所以尝试考博士到这个size，好像不是很现实。但是目前结果还未知，但是应该希望渺茫，所以未来大概只能继续将计算机当做兴趣爱好，做个学习的爱好者。其实工程专业去考去计算机还我觉得还好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:15",
      "text": "对我觉得要比the other way around容易。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:19",
      "text": "比什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:20",
      "text": "就是比反过来要容易一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:22",
      "text": "对对对，因为其实现在我觉得很缺那种具备足够的计算机的知识，然后同时又精通某一个专业。因为这样你才可以去帮助那个专业的人去改善他们的工作状况。写一些比如说对应的软件或者是一些工具，这样的东西出现了。对所以其实我觉得这个还是很好的一件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:43",
      "text": "没错，我觉得就好。这个计算机就好像英语一样，有专业英语对吧？也有专业计算机。你你你专门去学计算机，反而不太可能写出一个某一个domain application，这个只有那个domain的人来写才比较靠谱。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:58",
      "text": "没错，接着念他的那个反馈，节目最后提到了微积分学习的事情。因为我是工程专业的，大概可以略微说一些自己的看法。工程专业或者所有和力学相关的专业，应该都会发现微积分的知识是必不可少的。更广义的揣测，所有和连续物理世界相关的领域都离不开微积分。其实统计学如果没记错的话，很多概率模型都要用到并不简单的微积分运算。微分运算和积分运算作为一种和加减乘除并列的更高级的运算手段，对于大部分领域的后续研究都是基本的工具。所以本科学习中较大比重的微积分，个人认为并没有问题。至于大多数人觉得在日常生活中没有什么作用，这个没必要提。为什么没必要听？",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:49",
      "text": "他意思是我们在那一期里面说，大多数人觉得日常生活中没什么作用，这件事情其实没有什么必要说，因为大多数人的感觉又有什么用，你有什么意义？",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:00",
      "text": "对，二位主播有同感的原因大概是计算机科学中完全没有微积分应用。毕竟计算机是离散的世界，是数学中非常深入狭窄的一个分支。当然我也完全同意，概率论和统计的学习的确不太够，虽然当年也是被虐的死去活来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:21",
      "text": "这是怎么说呢？我觉得是这样子，我的观点是说不是说微积分不应该重点学，而是说这个概率统计学的还不够，是一个相对的概念对吧？就是说如果说你一个危机，当然他说这个日常生活中没有什么作用，所以怎么样我觉得可能是对什么通识教育的一个认知。就是说从这个实用主义的观点出发，就是说如果一个东西在现实生活中是更加有广泛应用场景的，而另外一个东西在现实生活中可能很多人用不太到。那么作为一个通识教里面，你去强调平时更加用不到的知识，是不是有点奇怪？或者说至少应该把那个概率统计放到和微积分同等重要的地位去去讲教授和这个教学。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:15",
      "text": "对吧？对我觉得可能对于计算机专业来说，这个微积分学学第一就可以了。然后那个概率和离散数学应该在比重三多一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:29",
      "text": "对，差不多是这个意思。当然什么各个专业，你记得这个是特殊的需求。没错，或者说你是不是说觉得国内这种理工科基础教育一刀切的方法不是很好啊，还是要针对各个专业有自己的偏重和擅长，我觉得还是应该考虑一下这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:50",
      "text": "对，教育是个大问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:54",
      "text": "对，下一条听众反馈是一位叫做gary的听众的来信，他是吐槽我们说说程序员的那个职业选择的。没错，他说这个题目可以聊一天你们高效的解决了听众反馈后花了1个小时聊游戏最后聊了半个小时这个题目，然后说意犹未尽。这个我们之后再找机会聊吧，我觉得还是有很多事情可以讲的对，毕竟这个是一个这是一个很水很湿的问题。然后就说还有很多这种，你想象一个场景，两个什么加班过度，然后两眼布满血丝的程序员对坐着什么相对无言，唯有泪千行，在聊各自的辛酸史。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:44",
      "text": "你老婆睡了吗？你那个腕管万管好了吗？对吧？还有你的这个背痛的挺好的，你的背痛的问题解决了没？鼠标手是不是还是依旧？还是有一种什么嘘寒问暖。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:01",
      "text": "的关切的感觉。立刻开始说，我为了改善症状买了一个轨迹球。另外一个说不是有那种竖起来的鼠标吗？然后就开始套了硬件。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:14",
      "text": "然后最后又扯到了什么人体工学键盘上面去，对吧？对，这就是死死宅。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:23",
      "text": "下一条听众反馈，舞蹈老师，real老师，你才是老师，你们好。首先恭喜节目复播，若有幸被朗读，恳请匿名，谢谢。第一次给你们写信，其实跟本期的内容没有太大的关系。这次又在节目听到了两个本该如雷贯耳的名字，dan JN shine和k Thompson。然而身为即将毕业的计算机系学生，一心想要成为成全的我，却如以往一样对这两个名词一无所知。或许是由于课业压力较大，平时在学习密码学和C语言的时候，所以他是学信三权，没有多余的精力去关注其背后的发展和历史。事实上，不知道这些故事也未必阻碍我们，也未必会阻碍我们写出优秀的程序，但我总觉得，如果想要深入研究某一个领域，一定应该了解到它的方方面面，从而接触到这些故事。他们并非是通往某一领域的钥匙，而是征服这一领域之后能证明自身能力的勋章。括号或许是比较糟糕的比喻。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:33",
      "text": "很好的一个比喻。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:35",
      "text": "是很好的一个比喻。哼就好像告白不是发起冲锋的号角，而是获得芳心的。叫什么来着？这句话是哪里的礼炮？对，这是知乎上面的，还是哪一句话说我应该跟一个女孩子告白吗？答案是告白不是拿来告诉对方我要追你的，而是追到了之后就是宣告这个宣告战果的。OK back to the feedback.",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:09",
      "text": "这也让我再次体会到，仅凭学校里的知识，很难对于某个领域有深入的了解。我相信这并非只是我一个人的情况。甚至在一所国内括号大多数情况下排名top 5的学校，很多周围的同学没有github的账号，喜欢用QQ传代码，写几十行的程序，要开visual studio，翻墙只为上facebook，很可能也没有听说过那几个如雷贯耳的名字，括号更不太可能收听贵节目。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:41",
      "text": "虽然不要哭较强的理论基础作为支撑，写出来的程序一般也能够达到要求，但总觉得这样以后会越来越困难。不过很多同学可能会专注于计算机科学的研究，这些未必这这些问题未必严重，但是以后想要专心写代码就会头疼了。之前几年一直没有认识到这些问题，从来没有在课外，也很少在课外拓展知识，积累实际经验。工作以后说不定就会变成V2EX上面被吐槽的奇葩程序员。不知道两位老师有没有这样经历过这样的阶段呢？如果有又是如何突破这一阶段？",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:20",
      "text": "这个怎么说呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:23",
      "text": "Everyone used to be a new.",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:26",
      "text": "就总会有一个最起码我觉得他起码意识到这个东西是有点意思，可以怎么说来着？如果说我们这个IT行业还有点人文精神的话，可能这也就是所谓这种东西，是不是？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:40",
      "text": "对我觉得其实就是一个law传承的问题，你说你law这个东西相遥，就你我去对follower，你要不去主动的去接触的话，你是不会知道的。而或者说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:54",
      "text": "你你你是需要有人去给你传承的。如果你前人没有告诉你这个东西，或者说你你你所处的圈子不对，那你接触不到这些，我觉得也是挺正常的一件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:06",
      "text": "对，或者就是你你根本就是只你在中文圈子里面就的确是很难接触到这个或者是tomson这种名教。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:15",
      "text": "教材里面不会讲吗？对，然后好像其实这可能这个跟中文技术资料的匮乏可能也有一点关系。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:25",
      "text": "就是说中国的教科书里面基本上就是绪论、前言讲一下，然后唇感就再也不涉及了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:32",
      "text": "纯干货不讲花边是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:34",
      "text": "后面就是把那个index或者是user manual给你翻译一遍。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:38",
      "text": "然后就不会有什么外国家在旁边有个小条告诉你说，你知道吗？这个谁谁是干嘛的，他还做过什么事儿？",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:45",
      "text": "就是sign，我记得最开始看那个英文书的时候，其实很讨厌santos，因为sanoh是一个会打断你的阅读flow的一个东西，那是我觉得是的，就是你正在读正文，然后旁边突然出来一个，尤其是那种不占据整个页面宽度的sid就他在。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:08",
      "text": "旁边那个那个小这个侧栏的留白那个小条有一个那种。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:13",
      "text": "对，然后我就会特别纠结，我说我我我是应该先把这一段正文读完再去跳3 nos，还是根据snaps的物理位置实体位置去读，先读3 nos再跳回去读正文。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:25",
      "text": "所以其实我我还蛮喜欢有这种赛道的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:27",
      "text": "我记得好像对我现在也挺喜欢的，但是那个时候可能有一种还是喜欢读干货？那个说对，因为其实如果有signal的话，你是可以选择的，就是你时间不够的话就不要读final。它signal te之所以是cycle al，是因为它没有那么重要。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:44",
      "text": "它optional content。作者觉得对，所以我觉得这个其实蛮重要的。起码可能我印象中大学的教材里面可能这种干货会比较满满，就至少国产教材里面干货会比较满满的。然后像一些洋教材可能就会把这种这些一些吃货混进去。其实我还蛮喜欢看那些吃货的，这样有一个别的不说，你起码有一个谈资了，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:12",
      "text": "对，就国外的教材比较接近于教学的教材，国内教材更像是考试的教材。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:18",
      "text": "好残酷。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:19",
      "text": "要不要这么直白，这是鸡精和鸡汤的差别好吗？就是你在你吃国内的这个鸡精的话，你得自己掺水进去，不然又能会大便干燥的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:36",
      "text": "Perfect analogy. 然后如何说怎么突破这个不用guitar。等一下他说大多数情况下排名top的学校是哪一家？",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:51",
      "text": "只有前二是确定的，后面三个一直在换。我想想交大、复旦这俩谁排第三就不一定。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:59",
      "text": "有时候我觉得经常这种大学掺和起来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:01",
      "text": "有什么浙大好吧，没有长没有某长者的话，可能交大应该还是要可靠一点。然后复旦之后南京。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:10",
      "text": "我觉得对对对，像我们这种十名左右的学校就没有这种担忧了。我可以说大多数情况下，top 10的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:22",
      "text": "中山大学还是要比中南大学高论如何。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:25",
      "text": "那你是不是就更不担忧这个问题了？对。Who cares? I don't给我发。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:31",
      "text": "吃完了这一期要except so.",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:36",
      "text": "他说周围同学很多人用github个这怎么说呢？文化还是因为现在好像学校交作业还是SVN的比较多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:48",
      "text": "主要是有一个非常讨厌的不可需要逾越的东西在哪儿？",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:55",
      "text": "不可说的因素是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:56",
      "text": "对，有一个不可说的因素在里面。然后另外一个就是还好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:00",
      "text": "也不一定对gate.",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:02",
      "text": "的学习抖学习曲线还是比较陡峭。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:07",
      "text": "上手还蛮简单的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:08",
      "text": "至少XKCD不是有一个漫画是最新出的吗？还是我忘了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:14",
      "text": "反正就等等我明白了，因为有可能这个跟后面那个有关系。他说写几十行程序都要开visual studio，说明是在windows上面对吧？Git在window上面是一坨屎，说的是。对，所以可能跟这个系统的选择或者工具链的选择还是有一定的关系。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:30",
      "text": "其实一个对，其实一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:34",
      "text": "就这么说，你我们节目你不喜欢命令行的话，基本上就没有可能用data了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:40",
      "text": "对，我们节目之前不是说这一期开始已经没有什么主题了，我们只是胡扯而已。但是备选的主题其实还是有，比如说common line，可以讨论一下各种shell，然后讨论一下common line为什么是为什么一直。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:58",
      "text": "赶赶赶赶快写的下去题干里面，不然就下期又没题说了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:02",
      "text": "说的是对，然后这个gate是一个其实是一个很奇葩的东西。如果你习惯了common line的话，你会发现get没有一个make .",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:11",
      "text": "so much。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:14",
      "text": "对，没有一个需要用到。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:16",
      "text": "的故意。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:17",
      "text": "的故意。对，唯一个故意甚至也是在compile下面实现比较。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:22",
      "text": "我想了一下，这get the great可能就是唯一就是好处。看那个就是那个commit history tig。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:30",
      "text": "对，就你只需要一个tick的工具，对，然后就够了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:35",
      "text": "然后用QQ传代码是什么样的精神？",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:39",
      "text": "因为不是说现在所有的大学生最常用的。我忘了我在什么地方看到了说现在90后的很常用的东西是QQ。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:49",
      "text": "我明白用QQ聊天我完全没有意见，我也用。之前我上大学的时候问题是说用QQ传代码是为了哪般呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:59",
      "text": "因为QQ可以传代码，而且所有人都开着QQ.",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:02",
      "text": "我为什么我我知道，但为什么要要传这为什么要传这个文件？这个文件是代码，why?",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:09",
      "text": "就让我看看你的程序怎么写的，不然你放哪儿了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:12",
      "text": "那你直接贴代码片段。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:16",
      "text": "如果太长了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:18",
      "text": "QQ的传输有限制吗？而且还有一个问题就是你是多个文件的时候是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:22",
      "text": "而且还有一个问题就是你我会觉得在对，而且有些人会用奇葩的字体是吗？就是非常宽的字体在QQ里面。Yes.",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:33",
      "text": "所以pace beam还是很有用的。但国内没有配置，配置病也不太好用。如果说多个文件的话，它是配置病，单个文件可能还行。所以其实还是邮件或者说纯文本邮件用的还不够熟练这个原因。因为其实在据我所知，gate出现之前，那个linux x kernel上面，他们做那个patch的时候都是通过邮件发。哼所以中国。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:02",
      "text": "的问题是不会用。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:03",
      "text": "diff。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:06",
      "text": "就是中国是email never took off。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:08",
      "text": "大学里面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:10",
      "text": "你这么觉得吗？我上大学的时候是四年发了40封电邮.",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:14",
      "text": "那就不错了。How is he?",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:16",
      "text": "怎么可能差不多，就除了申请学校的时候发了很多之外，你们平时都不发吗？我上大学的时候，20 0304年我发邮件给谁？",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:30",
      "text": "同学。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:31",
      "text": "我发邮件给老爸。我对我跟我曾经家书是用邮件发的，这么先进。可是有同学我们是我也不知道我的同班同学，因为我们是学新宣传，然后大家你们。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:49",
      "text": "觉得邮件不安全吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:52",
      "text": "不是，80%的人买了电脑之后，我们就手工把所有的寝室用局域网连起来了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:59",
      "text": "然后你们学校没有校园网。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:01",
      "text": "没有校园。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:02",
      "text": "what?",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:03",
      "text": "就校园网是一个不就我们只有自己拨号的上网的宽带，但没有校园内部的局域网。Don't ask me why，事实就是serious。不会，就你们什么在那个校园网上传AA片这种事情我都只听过。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:21",
      "text": "从来没有见过。那你有BBS吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:23",
      "text": "我们的BBS是一个PHP系统，没有那个telt，没有那个telnet，好像曾经有。云麓园我也忘了，但不会。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:34",
      "text": "真的假的？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:38",
      "text": "当然也跟学校有关。因为我最开始在的那个校区是一个被后来被合并的校区，所以他他本身的不是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:46",
      "text": "亲生子爹不爱是对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:50",
      "text": "好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:52",
      "text": "摸摸头。关键我我我上学的时候校园网还是蛮普及的。起码然后第一年的时候，校区是新的，在珠海那边，然后房宿舍也是新的，校园网都还接的可以百兆接入，应该是。但出出校区就奇慢无比了，因为出口带宽比较窄。但是在校区校园内部的话，有有各种服务器，有机房，然后内部资源互相访问。当时用什么飞鸽传输，QQ内部就是他各种内网传文件的工具，用的还蛮火的。然后电子邮件用的也是应该是蛮多的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:30",
      "text": "然后你看你那个时候也用QQ传文件。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:35",
      "text": "会有。对，也会有。那个时候QQ好像有出那个群组的功能。那个时候就在学校学学校里面发一些东西还是可以，但是用邮件的也不少，就可能有3分之1用邮件，3分之2用QQ，大概这么一个卖不对，OK应该是小文件，3分之1用邮件，3分之2用QQ大文件的话可能还是本地什么，就有个叫飞鸽传输的还比较多一些。没有，对，然后那个就是还有一个飞鸽传说和那个FTP，就是校园内网FTP很多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:07",
      "text": "我们有用公众FTP。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:09",
      "text": "对，然后上次我说那个故事，有个哥们儿在自己的那个皮带上面搞了一个开了个FTP server，然后我们想开放毛片资源共享吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:19",
      "text": "对对对，这些传说都是我们听说的地方，也不是听说我在浙大也见过他们那边的这个A片ID hok共享网络是多么的昌盛的，我们学校从来没有发生过。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:30",
      "text": "所以你看迅雷还是有群众基础的。对，所以说我就是说你如果邮件的需求还是去等一下。那你那你们毕业之后不用邮件吗？在工作的时候。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:45",
      "text": "毕业之后当然拼很多。我那我一毕业就出国了，你当然是一直拥有这。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:50",
      "text": "但是我的印象就是说哪怕毕业之后，我当然读商科。很多同学他们不管是申请工作简历也好，还是说日常同事之间或者跟客户之间沟通也好，他们用邮件的情况还是蛮多的。就business所以我不觉得在起码我接触那些人里面，有一件是一个很陌生的事情。所以我就在想为什么会用QQ传代码，而不是用邮件发diff可能跟那个工具链的教授有关系。因为大学就至少我们就所谓的这种综合性大学，而不是这个叫什么大专。它可能会偏向于说理论多一些，对这个工具的就比较怎么说呢？比较看不起。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:35",
      "text": "但其实如果visual studio有一个一键把diff导出文本文件的功能，我就想也许会用的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:43",
      "text": "人多一点。IDT不可能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:45",
      "text": "为这种事情怎么可能发生在微软身上。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:48",
      "text": "我也觉得是这样，所以还是一个其实line和gi的争端，就这个分分其然后碰巧大多数人可能还是选择的是这个windows平台，所以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:00",
      "text": "路径依赖。对对对，说白了就是路径依赖。所以这位同学也不用特别的在意这个什么工具链的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:08",
      "text": "是碰巧遇到两个比较龟毛，用那个那个comline也。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:14",
      "text": "然后如果你有志于继续发展的话，那将来其实你也会用该用的东西。谁谁年轻的时候没有荒唐过，不是OK OK。另外搭车我想问一个不务相关的问题是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:31",
      "text": "老师接着念他的反馈吗？这里是老师。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:34",
      "text": "提到自己在不同网站的账号是用不同邮箱注册的，我自己也想效仿，但不清楚该如何管理以及如何选择个人邮箱的服务商。哼很多账号似乎不能更改邮箱，那real老师都是重新注册的吗？望赐教，不胜感激。好，请赐教。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:54",
      "text": "如何选择个人邮箱服务商。很简单的，不用选了，就gmail。因为gmail有个hack，就是比如说假设你的这个gmail的账号是four gmail点com，然后你用for一个加号，后面是比如说bar IG秒点com发到这个地址的，还是会进到你four的那个邮箱里面去。然后你说for加这个at g点com也是会进到你的服务里面。就加号里面就填任何东西都会进到你的那个邮箱里面去。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:26",
      "text": "就是一个B所以你注册的时候就只需要填数，然后加号，然后再加上这些网站名字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:32",
      "text": "或者是你随机生成的一个代码。如果你不想被人猜出来的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:37",
      "text": "对，然后你在下一次在spam里面看到，是附加上。比如说美团给你发。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:45",
      "text": "美团。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:46",
      "text": "某网站给你发的垃圾邮件，你就知道这个网站把你邮件骂。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:52",
      "text": "对，不过这个东西也有点缺陷。就是说有一些这个网站的邮件地址的验证，正则表达式是不支持前面有加号的。他会说你这个不是一个合法的邮件地址。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:05",
      "text": "没错，因为一个合法的邮件地址的正则表达式是非常难以写出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:10",
      "text": "其实是正则表达式不能表达出来。一个合法的就不说错了，正则表达式的语法限制了他不能表达所有可能邮件地址OK。然后因为这。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:22",
      "text": "大部分人在对对在写一个邮件判断的时候，就写一个非常满意的判断。而这种判断就会导致一个明明valid的邮件，比如说附加82@gmail.com对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:36",
      "text": "比如说那个邮件的前面那一部分，就邮件地址前面的符号前面那部分就可以是中文。但是对很多人说这个没见过，不合法，对吧？他觉得不合法，他限制前半部分只能是A到Z0到9横线横减不是横线和下划线，然后再就是至少一个。对吧？这其实就很简单粗暴。但是你遇到了你也没办法，你也不可能说你每个真的遇到就去改。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:02",
      "text": "但是所以怎么解决这个问题也有了。像我们这种高阶用户，怎么可能会满足于用gmail这种后续的域名呢？对吧？自己注册一个域名，然后你可以找一个服务商，比如说那个web，你可以把那个wild cut wild card域名打开，就是简单说星号，只要前配符对通配符就发到任何艾特你邮件，不艾特你域名的邮件都会进入到你指定的一个邮箱。也可以。这样你就有无限数量邮箱可以用了，你想用什么用什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:37",
      "text": "然后他提到说很多账号似乎不能更改邮箱，其实大部分是可以改的。你直接不能改的现在都比较少了。比如我们目前为止吐槽这个就是微博了，就变态，为什么不能改邮箱？邮箱掉了或者换工作了，对吧？对，所以我是不是重新注册的，我不用。我因为我注册的时候就是用的这种方法做的。然后遇到那些不能改的，就特事特办。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:07",
      "text": "对，反正瑞瑞老师的邮箱就是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:10",
      "text": "随机随随。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:11",
      "text": "随便随便发什么都可以。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:13",
      "text": "对OK今天的这个听众反馈环节到这里结束。我们现在进入新闻新闻时间，在此处插入新闻联播片头。其实我好多年没看了，还是这个曲子吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:29",
      "text": "应该不一样了，应该是吧，只不过可能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:33",
      "text": "从单这是不是中国境内，除了国之外，第二个第二。严肃的音乐。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:42",
      "text": "第一眼说什么郭哥。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:43",
      "text": "对，还不一定还有解放军进行曲是吧，对吧？难说超不会。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:49",
      "text": "至少对新闻number .",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:53",
      "text": "one，最近出了一个就是IOS上出了一个很好用的网络调试工具，只能这么说，叫search SURGE。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:04",
      "text": "它除了能够列出你的程序曾经试图访问过那些网址之外，还可以做一些不可言说的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:12",
      "text": "两个网络请求改写、变更，或者叫做proxy的一些业务。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:18",
      "text": "从而达成一些不可告人的目的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:21",
      "text": "可以告人可以告人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:24",
      "text": "对，但我们不会告诉你。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:26",
      "text": "你自己去想。没错，那个什么，然后他的那个开发者最近叫刘亚，称，你也不知道是几声，怎么这么念了，就念轻声。刘亚是刘亚成，可能是。然后他在那个media medium上面这个网站发了一篇文章，讲设计的原理与实现。但是这个大致可以说一下，就是它是基于IOS9和这个OS10.11，应该里面出现了一个新特性，叫做network extension的机制去做的一些底层的互网络请求的网络的一些处理。然后他在这篇文章里面大致的描述了一下设置的主要的构成部件，还有它里面的一些每个部件是干嘛用的。如果说你对这个东西有兴趣，知道他能知想知道它能干嘛，知道它原理的话，就是一篇非常很好的一个文章，推荐大家去阅读一下。当然了顺便也顺手给search打一个广告，这毕竟是咱们国人自己写的一个很有用的工具，对吧？Surge跟VPN的区别在哪？你还是问了这个问题，设计是一个通用的网络层的一个工具，然后实现VPN是集中它一部分的功能，大概我可以这么解释。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:46",
      "text": "它实现了VPN跟比如说从某网站买来的VPN有什么差别？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:51",
      "text": "它可能跟IOS9里面它能做到这个局部代理，因为过去是全局代理，你要不用VPN要不用VPN对吧？对，但现在他用search这个方法可以做的更精细的控制。比如说对某些IP段用VPN，某些IP段不用VPN或者有些域某些域名用VPN，某些域名不走VPN这个规则是可以很灵活的，但是不用一直去手动维护这个片子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:18",
      "text": "对对对，然后当然非常爽的一点。但是这么好的应用，我们自然而然要给大家打广告推荐一下了，对吧？然后你当然这个设计不算便宜，在APP store里面卖十刀，算物有所值。是物有所值。对，比较贵的一个应用。但是考虑到这个东西的复杂性和有用性，推荐大家支持一下我们这个国产开发者的一个小工具。对，再强调一遍，它不是一个说到赞助，对，这是完全看起来纯纯有信心的对对，也是希望说有更多的开发者能够提供一些更好用的工具，帮助我们实现一些日常的一些业务。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:00",
      "text": "下一条新闻是一个挺好玩的东西，叫做一个新的图片格式，图像格式叫做free lossless image format left。无损的格式的话，也就PNG是现在主流的应用的无损压缩的格式，然后这个叫做flip和flip free lossless image for that。他的牛逼之处在于它压出来的文件比PNG要小。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:30",
      "text": "哼他。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:31",
      "text": "甚至连比一个他比你很多东西，他比PNG小大概3% 2 30。然后比其他的那些无损格式要跑，也是大概小最多30%左右，还挺有意思的。因为无损的话其实压缩的比例不是太高。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:52",
      "text": "Thirty five percent smaller than typical PNG file。对，好吧，你说在网络越来快的时代，压缩变小有有非常大的意义吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:07",
      "text": "有啊，特别在那个移动设备上面，这个带宽还是不太够的，因为主要网络情况不稳定。你说在家用宽带可能体会不到这种区别，但是你在这个3G4G上特殊信号不太好的时候，能小一点还是挺有用的。而且对于这个CDN来说就直接是钱了。因为现在很多比如说图片网站，它的要花很大一部分钱到CDN的流量上面去，是没错。如果说你按那个能够平均小额20%的话，等于你那个CDN的费用打了8折了，这还是很大一笔钱的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:47",
      "text": "游戏也是，但这种东西游戏里面的材质采用更小的更高压缩比压缩算法的话，整个游戏的安装文件就小了很多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:00",
      "text": "没错。但这种问题的麻烦之处在于它是一个新的格式。可能这个就是compliable里不是很好，就是设备的支持都会有点问题。之前google不是做了一个叫做web p的格式，哼就用于替代JPG和PNG。因为VBP它是可以从无损到有损之间是可以调的。然后就出现一个问题，就是比如说你用这个chrome浏览器访问google的很多这个网站，它会默认去给你提供这个YP格式的这个图片。那么你点这个右键另存为图片的时候就会发现，存下来文件其他方其他东西打不开，那你就比较尴尬了。你想在其他地方里面用的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:43",
      "text": "对吧？那其实flap也有一个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:45",
      "text": "没错，对，就会有同样的问题。所以我觉得可能它应它的应用场景还是在比如说你写这个IOS或者是这个安卓的这个APP的时候，你可以控制解码器那一段。你说你为了减小你这个资源资源文件的大小，那说你可以用这种自定义的这种格式，然后你自己做一个解压的。但这就引入另外一个问题了，就是说一般说这个像PNG这种标准格式的，就这种比较流行的格式的这个解码器，可能系统自带了，对吧？对你不用自己再写一个，但如果你用flip的话，你还得是再搭一个这个decoder进去。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:22",
      "text": "我可能再等50年。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:24",
      "text": "对，这就可能就有一点问题了。对，下一则新闻是163，就是网易邮箱好像最近出大事了。吴涛你知道怎么回事吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:36",
      "text": "有很多朋友都中招，但是具体的情况我们其实并不是并不很清楚，因为这是一次比较友善加引号的行为，就是在邮箱在这个事故发生的第一时间被厂商得到了通报，然后其中的具体的技术细节并没有被披露出来。当然如果你费心去找的话，好像是可以找到的，但我们两个没有费劲去找。所以仅就知道的情况来看，是163点com为域名的免费邮箱被泄露了大概1亿erp 1亿个账号。的的用户名和密码，当然密码不是明文，而是一个MDA hash，MD five hash.",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:24",
      "text": "那等于明文没什么区别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:27",
      "text": "就是去没有加soft，这是最大的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:29",
      "text": "就是你对加对，就是又没加速的，就是MD我就基本是等于明文了。没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:36",
      "text": "如果各位不知道的话，那IMD5。MD5虽然是一个哈希的算法，虽然理论上是它它是单向的。但是如果你在网上，比如搜reverse MD5就可以搜到一大堆彩虹鸟的网站。就是事先已经把MD5算出来，然后你输入一个MD5就可以找到那个对应的原来的明文的这么一个网站。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:03",
      "text": "就是这算什么？叫做cranking as a service。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:08",
      "text": "没错，就是一个硕大无朋的dictionary，一个硕大无朋的哈希表，逆向行情。对对，然后很多朋友都中招了。因为163作为一个历史在中文互联网世界历史最为悠久的免费web邮件服务，并且迄今还在活跃的免费web邮件服务，是很多很多用户国内用户都在用的，可能没有QQ多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:36",
      "text": "但没有QQ是目前国内第一大的件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:40",
      "text": "没错，应该没有QQ多，但是仍旧是非常大的用户群。因为那个时候QQ还叫IIOICQ的时代，163就已经推出邮箱了。我还记得163是当时中国电信最常见的拨号上网号码，当然我一般都是拨169，163的费用要比169高。是这样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:05",
      "text": "对，163更贵，169便宜一些没错。但问题是但这这两这两个不是一回事儿，169的是这个163，网易的163是163点com对，然后你说那个163电信是163点net.",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:18",
      "text": "不是我的意思，就是163 dot com为什么会被人记住？就是因为那个时候中国电信用163作为上网号码，然后网易就非常机智的注册了163点com然后。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:31",
      "text": "他不是注册的，就是说他是丁三石，很从哪里怎么连连哄带骗弄来。对，就他好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:38",
      "text": "many reference他弄了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:40",
      "text": "163点com对对对，弄死作为他的人，网易的主力域名，他当时还有好多，他有什么126点com的，有什么yeah点net。对，好像是这样。对，应该搞了一大堆。对他搞了一个邮箱服务集群。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:57",
      "text": "这个意思他还是非常会押宝了，就把鸡蛋分散的放在了他买了很多篮子拿来尽可能的搜刮鸡蛋。但是163 dot com无论如何是被人的最为铭记的一年。因为那个时候你一上网就要拨163了，然后你又163点com就非常理顺成章的control the control enter就进去了，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:21",
      "text": "对对对，当然了，他们这个光辉的历史也成为他现在一个光辉的历史，变成了历史的包袱。对，就现在因为这用户量这么大，然后他当时做那个什么网易通行证，好像是把这个打通了。但是这个我不知道他们内部怎么样，但可以一个比较合理的猜测是因为网易通行证是一个比较古老的系统。那他可能比如说他以前依赖的像MD5单向这个哈希不加盐的这个价格，它可能就改不过来了，那就给之后的安全造成了隐患。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:56",
      "text": "一切问题都是历史遗留问题。是这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:00",
      "text": "有时候还是要狠下心来把这个legal给干掉了。因为当时因为之后的那个那个数据库里面的这一块，我自认为还挺安全的，我做的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:11",
      "text": "原来如此，原来这一块是知乎要好吧，海口夸在这儿了。各位将来知乎如果被脱裤的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:18",
      "text": "各位可以找到这。我就可以明确的说知乎的那个那个数据密码是下一之后再有一层b craft，然后脱裤就脱裤，反正算不出密码来无所谓。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:31",
      "text": "I just got A.",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:34",
      "text": "所以我我我就每次都很开心，几乎我不知道有没有被多扣哭号，也可能有人拿过了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:41",
      "text": "但是只然并卵是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:42",
      "text": "偷回去也没用。对，然并卵，你解不出来有什么用？",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:46",
      "text": "忽然之间这个耳机里传来了某种自豪感。自豪感洋溢着房间。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:58",
      "text": "好吧，下下一条新闻是这个windows seven这么老的系统还有什么问题？",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:05",
      "text": "Windows 7老吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:07",
      "text": "很老了，都788.19，现在都十了。我靠，没有九是吧？有九吗？没有9.",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:15",
      "text": "跳过了9，windows seven eight nine又能789吃了，所以没有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:21",
      "text": "九好吧，没有讲他出了什么问题。Windows .",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:27",
      "text": "7 windows 7在前一阵子出了一个非常大的1蛾子，就是一堆人发的这个比较听话，老师与时俱进注重安全的windows用户。把这个自动升级打开了，然后猛然发现今天的自动升级有点不一样。就是那个标题是一串乱码，下载的地址也是一串乱码，补丁的这个内容描述更是一大堆了。然后人们就开始慌张了，因为有些人是在补丁已经自动被打好之后才发现的。然后坊间流言四起，就说windows已经被攻陷了，我们everyone is doom，听那种感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:13",
      "text": "然后这有这么严重吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:15",
      "text": "什么意思？",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:16",
      "text": "就这个实际上到底影响怎么样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:18",
      "text": "其最终结果其实是微软也找了一个梯队。就是说我们应该搞测试的实习生，把一个内部测试这个声音系统的布丁放了出来。这个补丁是完全无害的，就是一个之所以说就是因为那些东西只是占位符而已，所以实际上没有什么伤害。然后这个补丁也很快被从网站上撤掉了，所以他没有造成任何实际伤害。只不过tomorrow of story就是这件事情带给我们的思考。就是如果这件事情不甚是一个真正的实际发生了的这个安全灾难的话，那其后果可能是非常严重。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:06",
      "text": "所以现在要有有大面积有效的杀伤力，就是想办法把windows update这个东西搞下来，是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:13",
      "text": "没错，如果你想要真正的让全世界陷入瘫痪的话，那可以试试把windows的updates黑掉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:20",
      "text": "就感觉是skynet要做的事情，说不定skynet已经做了，我们不知道而已，傻傻的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:26",
      "text": "今天是万圣节，我们可以讲一讲，讲一点鬼故事，spooky的东西。想象一下这个世界，就我们所熟知的这个电计算机世界将以如何方式终结。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:38",
      "text": "错了错了，我们今天录制的时候是万圣节。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:42",
      "text": "发布的时候就不是OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:44",
      "text": "我已经过期了，无效。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:47",
      "text": "好忧伤。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:49",
      "text": "对，说这件事儿的一个主要的原因是因为提一个点，就是做我们就是听做这个系统设计也好，做架构也好，你永远永远要假设这个网络是不可靠，不可信的对对，那么你之后要做的一些事情就很重要了。比如说你可以你要得假设你下回来的那个通过网络传播的文件是被搞过的那你必须要环环验证，你必须要有这个什么verification，就是哈希，通过哈希的方式也好，还是什么别的签名的方式也好，对吧？没错，得有这么一个过程。然后永远不要说我因为我这个文件是通过HTTPS下载的，所以它就没有问题了。很难讲。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:34",
      "text": "对，但其实反过来说，这个信任链是一环套一环的。如果你说每一环都有可能出问题的话，那最终的结果就是回到我们上上期上上上期的那个的口号就是trust no one even有compiler，那你可能连硬件都不能相信。那最后你要相信谁？你总要在一个地方终结，说这个地方我没有办法，我只能选择相信，但不能对这。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:06",
      "text": "没办法，那你只能说尽可能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:09",
      "text": "但是你至少。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:10",
      "text": "可以避免的情况下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:11",
      "text": "对这些非常明显的可能出1蛾子的新源一定要加以警惕。没错，但是windows 7 updates的这个就所谓misfired时间，也还是给我们提了一个醒。就是这种单一的升级的源头，如果真的出了灾难，是有可能非常灾难性的在打击。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:37",
      "text": "好广，APP store被打中了，然后什么APP的source.",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:42",
      "text": "也被你搞了。对，这就是为什么我们要提倡这个反托拉斯，为什么要加速加快市场竞争，为什么要提供提这个鼓励自由市场？就是要尽量减少这种单点，什么single point of failure的的出现。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:59",
      "text": "最好你是坚持是什么？就是分裂派对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:03",
      "text": "没错，去中心化。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:04",
      "text": "这个应该对对对，你是要什么来着？Peer to be不是peer to叫做decentralized没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:12",
      "text": "比如说gate对吧？这个如果你用SVN的话，你的post垮了你就完蛋了。那用G的话就没有这个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:19",
      "text": "那还在是吧？没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:21",
      "text": "然后如果你如果我们人类多用几个操作系统啊不要说什么一个操作系统统一天下。那那也许如果真的出了什么非常大的1蛾子，也许还是有一部分人可以继续正常的从容使用他们的电脑，对吧？哼或者反过来，也许这个补丁的发布过程，如果要减少补丁发布过程的漏危险性的话，也可以把发布的服务器散落在世界各地。这样比较，但是如果攻击者从补丁的源头源代码上黑他的话，还是无济于事。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:00",
      "text": "对你只要有off single point failure，总是会有这种安全隐患出现。对，没错，所以没办法了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:10",
      "text": "我忽然想到一个，就是我们公司在搞一个叫做spot运动single point of truth，就是要把因为我们公司有一个非常复杂的ticket system，面向用户有一套ticket，然后面向内部有一套ticket.",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:26",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:28",
      "text": "然后面向程序员又有一套ticket，这三个ticket system是彼此不通的。然后有一个叫做sport的运动，就是要把所有的ticket汇总到同一个平台上，然后只在一个ticket里面追踪所有整个项目的进程和文档什么的。这个spot怎么做呢？Single point of truth其实就是把人手工，把所有DK汇总到一起，是一个非常浩瀚的工程。但是已经做了三五周了，还可能只完成了一半了。但是我觉得这个很快了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:06",
      "text": "三五周都完成了一半了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:09",
      "text": "毕竟是小公司。你想然后。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:11",
      "text": "那倒是有一点对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:13",
      "text": "然后这个让我想到的是跟刚才的这个要避免单点失败的思路其实是被是相反的。就是信息要尽量集中起来，但是安全性要尽量分散开。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:29",
      "text": "对，下一次不叫新闻，下一次是讨论是这个l cap ten，就是50点11分，他出了也挺久了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:37",
      "text": "我们都装，你装上了，当然装。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:39",
      "text": "对我也装。然后其中有一个对开发者来说，对我们这种常经常使命令行的人来说，一个比较大的改动。这是他的叫人称叫做rootless无根的特性。无根对也叫做system integrity protection。系统完整性保护。对，没错，这个翻译的还是挺好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:01",
      "text": "简单来说就是在OS30点11里面，默认情况下系统的一些根目录的东西，就是用户是不能改的。哪怕是你用studio用就用root user上面也是不可能改动那些目录的里面的内容的。比如说这个跟下面的user，跟下面的bean这些比较，就是系统核心的应用，你是没有办法去改动它的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:27",
      "text": "主要是四个地方。Slash system，flash bin, slash user, slash s in. 就是如果你对这个posix系统的标准命令数比较熟悉的话，基本上就是bin user和S3个被保护起来。然后slash system是oyston自由的一个放射成文件的地方。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:48",
      "text": "对，所以其实这是我们上期有聊到过，应该是在本土上，就是前几期有一期聊到过这个事儿，让卢涛你怎么看这个特性。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:02",
      "text": "我觉得这是苹果字。把这个flash user flash local slash bin改名为flash application之后，做的第二件好事可能就是防止用户轰掉自己的脚。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:21",
      "text": "对你想一不小心来个RRM空格斜杠回车，或者是更凶狠一点，RM空格横线RF空格斜杠回车你就挂了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:35",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:37",
      "text": "其实以上两个语句请不要在家尝试。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:44",
      "text": "不要随便听那个空，不要再讲了，你那个控制。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:47",
      "text": "你用10点11就无所谓。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:51",
      "text": "然后这个其实归根结底原因还是早期unix的用户在吃他们自己的狗粮的时候，采用一种非常实用主义者的态度，就是一个非常简单的原则就是用户只有两级，一个是一个是非常普通的用户，另外一个就是root用户。然后用root用户就是可以做一切事情一句号，对，就没有再详细的层级了。在那个没有ACL的时代，没有什么一个复杂。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:29",
      "text": "的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:29",
      "text": "窗口可以让你选这个用户可以干什么，可以具体的做哪些的时代。基本上这个文件的权限加上root非root就是你能对系统做的最好的保护。然后这一套东西被OS ten搬过来之后，基本上还是保持现状，一直到现在。而绝大多数对于绝大多数用户来说，他们里面是不会意识到这一点。但是只要你稍微折腾一下这个系统，你会觉得它还是相对来说比较fa frag。如果你对使用root之后会干什么？会可能造成什么样的危害？没有一个清醒的认识的话，你还是很容易轰掉自己的脚。而这个新的特性的话就是更进一步帮助用户来杜绝这一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:27",
      "text": "其实我觉得这个东这个特性最大的一个好处，就像我在24期里面讨论过的，叫做immutable system，就是不可变的系统。什么意思呢？就是说整个系统的那些文件经常都是不可变的，就是你不可以修改它的，就是你唯一能做的。比如说你系统升级的时候，就是替换掉整个系统的镜像，从而可以保证。因为类似有点像那个chrome OS那种，系统是整个本身是非常安全的。因为过去像windows也好，还是之前的这个S也好，一个最我最大的不安全因素。刚才除了你说这个用户操作，就是不小心操作失误，删掉了这个核心的文件，导致系统无法使用之外。这种可能也只有我们这种人才会干得出来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:10",
      "text": "但是对于普通用户来讲，可能最重要的是一个反而是安全性的考虑。就是说一些恶意软件能不能通过修改你系统一些重要文件的方式，隐藏在你的系统里面去。比如说一开机就启动一个什么东西，然后你又没有办法知道或者没办法删除它，对吧？对，但有了这个SIP的保护的话，就可以杜绝这种事情发生。对，也可以说你某种程度上说，没有通过沙盒机制实现了这个系统核心部件的安全性。没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:46",
      "text": "就是从今以后如果一个用户一个程序在要做什么的时候，跳出来让你输入root密码。99%的人包括程序员都会不加思索的直接输入自己的用户的用户密码，对吧？但是在SIP出来之前，这个其实是一个非常危险的举动。因为随时。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:07",
      "text": "肯定给你种个什么木马。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:09",
      "text": "不知道他要干什么，对吧？OS他并不会告诉你他具体要干嘛，而是OS他自己也不知道他在具体要干嘛，他只是在说，这个玩意儿要权限。那那我问给不给权限，用户说给他，然后我靠机器断了对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:25",
      "text": "这其实windows上面也有这个问题，就是用windows那个叫什么UAF还是叫什么那个玩意儿UAC。对它跳出来你自己windows比较就是怎么说比较啰嗦的一点在这里它会有一个details，你可以点一点details，然后他会说什么，这个程序它位于哪个路径之下，想要干嘛，或者他想要改什么，他会跟你说一句。但是也许一开始你会点。如果你是一个程序员的话，或者如果你是一个会读所有会读用户协议里面每一句话的德国人的话，你可能会去读这个里面到底写了什么。但是在一段时间之后，你还是会no brainer的直接点一下允许对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:06",
      "text": "对对对，所以这是一个典型的技术技术思维，没有考虑这个心理，就人的本性的一些东西的设计，是一个非常失败的产品设计。这是干啥？现在没什么更好的解决方案。Anyway其实我有一个很好，我有一个很大的问题就是在于在OSN有了这个SIP这个特性之后哈那我们还要这个root账号干嘛？没什么用了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:32",
      "text": "对，所以应该搞一个rootless账号是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:34",
      "text": "Rootless对这所以他应该是rootless系统，但是那还要去do干嘛？",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:41",
      "text": "好问题对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:45",
      "text": "因为其实你用那个，你本来那个账号就只分叫做administrator和Normal user两种类型的账号对吧？那root你反正也不能做什么administrator干不了的事情，要他干，要它有什么用呢？你就直接做一个普通的账号系统，然后不要速度好了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:11",
      "text": "我觉得可能还是在多用户的场景之下有一定用途。就你可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:17",
      "text": "多用户的情况下，你用自己账号去做自己的事情，但你不需要速度。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:21",
      "text": "你速度之后才可以做，才可以去管理别人文件。如果你是一个管理员的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:27",
      "text": "假如说我就说这个问题，就是说速度不是说你变成别的账号吗？你是变成root？对，那输入也可以变成别的，就是速度user。对对对，但一般来说是do就是不加参数的话是studious root，对吧？但我就问他，我的问题就在于root本身还有意义吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:50",
      "text": "所以像五本图那样就完全不是root账号了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:54",
      "text": "就是他也有他他也有，只是说默认是他们会不准登录的的，或者登然后你还是可以速度成root的。我就只是好奇在有SIP的情况下，要root账号本身有什么用，好像没有什么用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:09",
      "text": "Backward compatibility有可能。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:12",
      "text": "因为毕竟它在它是一个post系统对没错。然后还有一个挺好玩的问题，就是说如果这个系统本身是immutable的话，其实可以有一个事情可以做，就是节省空间。因为你知道那个SN还包括现在windows也一样，它是有一个叫做所谓的叫做recovery partition，就是恢复恢复分区。对这四个字恢复分区挥发。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:39",
      "text": "灰化肥会挥发，挥发之后出现恢复恢复分区。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:45",
      "text": "恢复分区的一个主要作用就在于你的之前在没有SIP的情况下，你把自己脚红掉，删掉了这个跟系统里面的重要文件之后，你可以通过这个recover partition把系统恢复到一个可以用的状态。像前面它有一些可能系统的一些核心的文件，它是在那里还会有一个备份的对吧？但如果这个本身是启用了这个SIP，就是系统的核心部件是不可修改的话，其实恢复恢复分区就没什么实际的意义了。因为你可以保证系统本体是不被修改的，然后就可以把那个恢复分区干掉，或者是至少重用一部分空间，通过hard link的方式对吧？这倒是就是hard link，不对，link好像不能跨区是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:34",
      "text": "不能跨partition。我应该是不A你得先mount才能好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:42",
      "text": "但我不太清楚这个具体实现方案是怎么样子。但是起码恢复分区是在正常情况下，是在有系统里面看不见的。对，所以我在想有没有办法同就是两个同用一套系统。因为毕竟恢复分区应该还是有个几个巨大。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:55",
      "text": "的会被恢复，恢复分区默认不会被mount上。所以其实在系统使用过程中，它是看不到的，它是不会被系统看到的那如果说。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:03",
      "text": "这个系统本身是保证可以不被修改的，还要你就不需要去来干嘛。对对我我就在想这个问题，是不是就没有什么必要性了？就把恢复分区里面内容放回这个跟系统里面就好了。因为恢复就一个最主要作用，就是说如果还有一个就是软件升级的时候，你可以直接上来安装系统。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:23",
      "text": "对软件此时如果那个软件补丁挂掉的话，就软件补丁是一个破掉了坏补丁的话，那你可以通过恢复分区来恢复坏。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:35",
      "text": "Anyway这还是一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:36",
      "text": "挺比较低调的。但对对，当然在这个SIP的保护下面，还是有几个地方是可以被改动的。他们仍旧是系统一部分，只不过这部分就是系统特意留出来让你去改的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:53",
      "text": "如果你给user那一块，程序员是user，对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:57",
      "text": "user那一块是user local.",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:01",
      "text": "只有user user local。对，sorry.",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:03",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:03",
      "text": "然后这其实要涉及到另外一个概念，叫做这个file system hierarchy standard对吧？对，这个其实一个很扯的事情就是说最起码在linux面它是有这么一个规范的。规范就是说整个系统的根目录下面这些文件数应该是长什么样。然后各个目录里面放什么东西，比如说就常见我刚刚提到像那个跟下病，跟下的boot，跟下的ETC such a更像S病这些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:36",
      "text": "是三不是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:39",
      "text": "Boot可能是你ux才有。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:41",
      "text": "这个有一个其实有一本书叫做linux haters manual。如果各位有兴趣的话，一定要去看一看里面对这个标准，所谓的这个目录数标准，大家吐槽就是虽然有这么一个标准存在，它的名字叫标准，它名字叫标准不叫。但就反正虽然是叫standard，有这么一个standard的存在，但所有人都只是把它当做reference来用。你只是模糊的知道这个目录大概可以拿来干什么。但是现在的实际情况就是没有两个linux发行版的这个目录树的形状是一模一样。这是一个非常。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:23",
      "text": "但有些很扯的一些问题。比如说像那个我问你，你知不知道bean和s bean的区别是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:30",
      "text": "S bean是super病，就是只有super user可以用的云。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:34",
      "text": "那他们两个哪些放哪些呢？这个界限是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:38",
      "text": "SP里面比如说reboot在SB里面，然后bin里面是什么VI之类的东西，就是很就是不会不会如果你用起来，可能脚被轰掉的东西都在SB里面。理论上是这样的，但是实际上也并不是这样的，就是在B里面还是有很多非常危险的工具，但。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:02",
      "text": "然后再问你个bin和user bin有什么区别？",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:06",
      "text": "User bin和你应该问user bin和user local边有什么区别。Bin bin里面就是slash bin n里面应该是系统的核心工具。而user slash里面则是就是在比较不其实这个在BSD上比较分得清楚，就是在那个kernel s space里面的工具都在slash bin，在user space里面都在user slash bin。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:36",
      "text": "然后user还是蛮好的区分。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:38",
      "text": "然后user slash local slash bin才是用户自己装的第三方应用程序。应该去的对对，如果你要去说的话，其实这个东西还是比较可以理解的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:52",
      "text": "但是在执行的时候就会出现各种边界模糊。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:55",
      "text": "非常多的1蛾子。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:57",
      "text": "然后就是你完全不明白你这样分完之后有什么好处。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:04",
      "text": "治愈的处女座。或者说最开始的设计者是个处女座。然后他的这个设计导致了后来的所有的处女座的linux右侧都转向了windows。因为你会觉得我靠最开始这个你看我刚才说的这三个分类是不是很有逻辑。但是你去看任何一个实际系统，你都会觉得我靠怎么每一个工具都每一个地方都放一些不该放的那些工具，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:33",
      "text": "就对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:34",
      "text": "乱七八糟的这是一个阴谋。这是linux使用者希望处女座别用来别来用我们的系统。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:42",
      "text": "不过早期它还是有它一定的客观的硬件基础的。早期像linux那些磁盘空间小，几百K的磁盘空间，对，就几兆的是很大的。后来有些应用它就没有办法。再就是第一个驱动的first drive放下所有的病，那些东西被迫把一些像后来才出现user病，它可以挂载到不同的一个驱动磁盘驱动器上面去。没错，所以才导致今天这个局面。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:09",
      "text": "后来我的理解就是很厚之后觉得说我们要这样来区分一下。因为过去是这样的那其实变得很奇怪。所以现在有一些发行，就是发行版，他们在做一个unify的趋势，就是简化。像刚才讲的这个bean和user bean的区别，因为觉得没什么必要了，因为现在磁盘空间都很大，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:31",
      "text": "其实就是做了这件事情，他非常勇敢的把这个bin这种非常反二进制，这种非常反正常人非常K的名字，汉斯的，对吧？这已经是更大。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:43",
      "text": "的改变了。因为过去说我们像在02上以及一个就一个应用，一个software package，它是要拆成好多好多小组件分到不同的地方的。比如说你这个可执行的binary的文件会放在bin或者是user bin或者local bin。根据你安装的方来来源不同，没错。然后它的这个文档会放在这个什么man里面，是什么？每个目录来的文档是user .",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:11",
      "text": "flash.",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:13",
      "text": "share，应该是share .",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:15",
      "text": "man.",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:16",
      "text": "之类的里面。对user是那他的他的这个什么low log文件，又是像这个叫var的log里面。然后它的一些其他配置文件是在那一些ADTC下面，ash什么一些目录里面，就非常就分分的很散。像现在像debian，乌邦图，都是坚持的这种做法。其实像ON这种说我不要你们分那么散，你一个应用就老老实实成为一个package，对吧？一个APP blow放在就一个目录，就是一个帮一个应用，然后一个应用就一个bundle这样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:48",
      "text": "但也有它的优劣，就各有好处。从应用性的角度来讲，肯定可能觉得后一种会比较高级一点。但是从这个系统重用和处女座的角度来看，可能觉得前一周会好一些是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:03",
      "text": "就是你是按照它的用途分类，还是按照它的使用的主题分类？",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:11",
      "text": "不过我其实我自己在就我自己在像那个VPS上面的做法也的也是经过了很多变迁。最开始的时候可能遵循这个就是linux file system，还有arc standard的方式。会把一些自己编译的或者说供安装的软件放在比如说user local里面，各个包里面B或者是excel里面去。其实后来发现不写太麻烦了，我就放到一个，我就放那个flash OPT就是optional。然后在每一个应用建一个目录，把东西都塞到里面去，这我发现管理起来是更加简单的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:47",
      "text": "其实我刚才就想吐槽说，我靠这个还有两个，就我们之前说的这个user b bin和user local变都还听起来像模像样。这个ETC和OPT是什么鬼对吧？什么at center和optional，我靠难道user local bin里面的东西不是optional的吗？难道那个而且难道什么对于apache consideration不应该有一个dedit location？那为什么要把它放在s sector里面呢？就用what fuck感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:26",
      "text": "对，就是整个FHS这套规约其实都很是一个avatar的东西。所以说因为历史沿革或者是过去遵守了这么多年，约定俗成，变成了这么一个很奇怪的没有什么逻辑和理由的怪胎。我还蛮支持很多现在很多发行版在做一些尝试，把它这个东西尽量简化，像你比如说像OSN的方式去看齐。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:50",
      "text": "没错，说回这个cap time的SIP，他所给你的这个官方推荐的四个放你自己写的程序的地方是一个是applications slash applications就是跟目录下面的那个applications，而不是用户自己的目录下面application。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:16",
      "text": "对，就这样造成一个问题。比如说你这个账号，你的电脑不是你一个人用，或者说你这个账电脑上有两个账号的话，对你是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:24",
      "text": "安装给下载用户，还是安装给所有用户尝试？",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:28",
      "text": "不是，他没有这个选项，你只能安装给这个，我下applications就是slash applications里面的那些帮助。只能有两种情况，属于某一个安装时候他的账户和属于这个root.",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:44",
      "text": "对不？我的意思是就是这个官方推荐的四个安装APP的地方，并不包括自己的home目录下面的slashes。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:59",
      "text": "但其实你是可以这么干的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:01",
      "text": "你是可以这么干的。但是你如果你这么干的话，你就你这个APP就是只有当前用户可以用。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:08",
      "text": "不，你都可以用，都可以都是可都是都是global ready bal的，只是说不可以删掉而已OK对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:15",
      "text": "不。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:15",
      "text": "这个SIP还有一个事儿，就是对于我们用这个home blue的这个用户来讲，有超级坑爹的事情。就是说如果你之前用的HOM pro，就你升级你是升级安装的10点11，而不是覆盖安装的话，你可能之前都有user local这个目录了，然后就可以把它权限改一下，不太可能出现，这就不用do了。但是如果你是全新安装的一个10点11，默认是没有user local这个目录的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:41",
      "text": "然后如果你这样提示或提示你，你不能进。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:45",
      "text": "对，然后他系统会提醒说你不能修改这个user。对，因为你你添加一个user local等于是修改user，没错，对吧？然后你就不得不很坑爹的说，手工关掉这个SIP的特性，把user local建好之后再把SIP打开。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:00",
      "text": "对，然后这个过程选择两次重启动。但就，你为了使用这么一个full of awesome的操作系统，重启了我两次还是可以的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:13",
      "text": "不过他们有也有说，其实这个home pro不用装到user local里面也可以用。只是说里面有些可能软件包，它的默认的路径是这么设置的。它可能会假就会它会假设某一些依赖的这个软件也好，这个library也好，它是已经在user local里面的了。这个时候你就比较坑。所以可能另外一种方式就是说我们去做一下这个清洁工作，把那个home blue里面的一些软件包的对这个user local的一个hard coded的依赖，把它改成一个可配置的东西可能会好一点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:48",
      "text": "Blue是可以在编译期的时候告诉当前的F的录的那个路位置在哪儿。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:58",
      "text": "对，但不是所有的那个formula都是这么都是都有这个灵活性。所以才说刚才要做那个清理工作，你一个一个去去检查那些formula有没有这个就是hard code的依赖。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:11",
      "text": "没错，我在公司的电脑上，其实就是因为我没有那个user local的权限，我就把linux brew，你知道home不是有一个linux branch吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:22",
      "text": "对，你为什么要这么坑？因为我们直接什么我没有root，这么可怜。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:28",
      "text": "对，然后就把他们一个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:30",
      "text": "rootless的人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:32",
      "text": "对，把他们全都装在到了PWD flash user flash .",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:38",
      "text": "OK能用吗？可以。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:40",
      "text": "OK还OK对，好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:42",
      "text": "那个SIP的还有这个叫做rootless的特性。说完了，下一个有点意思的事情是这算是难产，一千呼万唤是出不来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:55",
      "text": "pro 6发布了还没出来，其实对还没呢，还是是说已经发布了吗？周报批发半遮面的状况说是其实是的，是正确的。新闻的说法应该是这样的。Larry wall在十月初的时候，10月8号还是几号的时候，终于说了一句，大家圣诞节的时候就可以收到P26了。圣诞节是吧？那还快了，他说了一个released是今年圣诞节。OK. 对，所以after.",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:25",
      "text": "所以你期待这件事情吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:28",
      "text": "我也不知道。这就好像是有人15年前给你许了一个诺言，然后今天中午要实现了的感觉，你已经没有感觉了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:38",
      "text": "可能已然不用了是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:41",
      "text": "对，我记得那个时候还2000年的时候还对perl这种有句话怎么说来着？PHP是一种邪恶的语言，但它只是一个比较小的邪恶。因为他是一个诚实的业余爱好者写出来的对，PHP是小恶，因为它只是一个incompetent的业余爱好者，写出来的很好。Perl是个大鳄，因为他是一个技巧娴熟的，但是非常混蛋的专业程序员写出。Get OK.",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:24",
      "text": "对，就是这种感觉，就是那个时候pro还是一种。因为那时候也不是写没有写过很多程序，也没有涉猎过很多语言，总觉得pro这种看起来实际上是就连滚过键盘写出来的东西还挺有意思的。那个时候觉得我靠不知道pro 6又会有什么了不起的东西，对吧？但是15年之后，我就200年的时候，就是说我们要做pro 6。就200年的时候pro 6的那个specification已经出来了，还是已经开始draft了。然后一直15年之后才说，pro 6的1.0可能要出来。这是一种什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:11",
      "text": "不过其实他的这个语言怎么说呢？对他感觉还挺复杂的。基本上这么说，他我觉得他是一种属于叫做convenience over simple city。对，就是设计。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:24",
      "text": "C与pro是一种易于写但不易于读的语言。语言有些语言容易读又容易写，比如说python对吧？有些语言容易读，但是不容易写，比如说password或者fora fortran。Fortune不算容易读吧，也当然现在的观点fortune不是非常容易读，然后有些语言是非常容易写。但是就是一周之后你再读的时候，如果你之前没有写文档的话，你就会想要回到一周之前就是want to fuck。对，这个就比如说brain fuck和和perl就是这种感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:05",
      "text": "想不到已经降到这么低的等级了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:07",
      "text": "没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:09",
      "text": "不但是说到其实polo这种语法的这种便利性还是挺激励了很多人，可能卢比算是集大成者。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:18",
      "text": "对，而且pro其实也不是一个始作俑者，因为在pro出现的时候，什么bash之类的也shell，已经有了很多非常奇怪的符号，非常如果你不知道的话，你就是猜不出来的convention。只不过我把他们都翻译成大了，并且让pro变成了曾几何时最流行的语言。就像那时候pro 2000年左右的，甚至不用2000年90年左右的pro的hype的程度，就像现在的ruby可能比入会还要深一些。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:52",
      "text": "Back in the head dates of perl, 就是你会觉得我靠不会写两句pro都不好意思跟人打招呼。那个时候还没有PHP，你写网页要么用C用C用要么用pero，直到后来才有了什么PHPE或者SP这种让阿玛都可以去写个网页的东西出现。然后power在那个时候也是CGI和和一些比较常见的daily automation的最得力的工具。对，当时我也是因为这个动机才去学的，就是觉得我靠这是一个黑ker的语言。Which is true is still true.",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:34",
      "text": "只不过你看15年后当初的power hacker，比如说唐汉宗，你知道这个人吗？不是，唐汉宗是中文圈里面非常台湾人，中文圈里面的对perl非常有贡献的一个人。但是具体贡献是什么不记得，但应该15年过去，唐汉宗已经变性了，唐汉宗已经去做了变性手术，改名叫唐艳了。然后这poo还没有出来，就是这种感觉运动不仅沧海桑田连连人都已经对不在所以帕尔。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:11",
      "text": "勒这已经不算是一个新语言了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:16",
      "text": "pro 6绝pro绝对不行，pro是pro 6，pro 6，好吧，从这个因为。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:22",
      "text": "它的spec已经出了那么久了，大家都该激动过了，激动过了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:27",
      "text": "对，就好像一个怀胎十年的孩子生下来了，你说他是一个婴儿，还是说他是一个怪胎。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:35",
      "text": "他是哪吒。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:39",
      "text": "Second quotation the day.",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:43",
      "text": "好吧，这个就过一下，反正我们也不怎么用了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:46",
      "text": "大家其实如果你写过pero的，我相信我们的听众里面可能没有什么人是不写着pero长大的。但如果假设竟然有的话，就是你年少时写的pro在pro 6里面很多地方都不一样的。然后比如说一些pro 6里面，pro之前pro里面一些比较奇怪的语义，在power里面，不是pro 6里面都被改过来了。比如说什么area的index，我不记得具体是什么。就比如说我想想paro里面area要用at做前缀。然后如果你要去index里面的一个item的时候，你要把前缀变成刀了。因为Larry wall认为在你去index area里面的一个单一的量的时候，它是一个scala，所以要用dollar。就有很多这种word fuck的地方在pro 6里面都被修复了，或者说对就已经姗姗来迟了让你觉得我靠这还比较好理解。但除此之外，我也不是会有这个语言会重新听起来吗？我觉得不太可能。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:06",
      "text": "反正我对他们其实个人没什么好感，我觉得他这个设计理念跟我的就很难接受，只能说是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:14",
      "text": "但pro的好处就是有非常多的one line。如果你去花一些时间投资在pro上面的话，还是比较值得的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:27",
      "text": "唯一问题就是在于你经常记不住到底在干嘛。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:31",
      "text": "对你就得去搜，然后搜一个pro 6的1 line pro one liner就可以解决很多问题。而且在很多操作系统上面，不一定有ruby，但是基本上不会没有pero这种感觉。差不多了，就这样吧。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:49",
      "text": "那个pro 6的新闻就到此为止了，大家有兴趣的去去缅怀一下，就去看一下。有一个下面这个新闻是个大事儿，这个叫做lets increase t这个就是那个API？还是一个服务，它的那个证书已经被交叉的sign叫做叫什么签名过了。这可能要解释一下什么事。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:15",
      "text": "应该说已经被trusted，就是已经被信任。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:19",
      "text": "主流的浏览器trust就是信任了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:22",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:25",
      "text": "这怎么说呢？先说lesson craped是个啥，lesson craft t是一个一套服务，一套开源的软件和服务。它可以使得你部署到这个客户端，到你的服务器之后，它自动帮你去配置这个服务器的这个HDSSL证书。对和包括这个证书的签发，这个key的生成，还有包括这个证书的过期自动升级，自动重就自动重新申请，整套的流程都完了。可能这样说起来比较奇怪。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:03",
      "text": "为什么会是这种东西存在？一开始要解释存在一个什么样的问题，或者它的愿景是什么。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:09",
      "text": "对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:10",
      "text": "其实问题也是一两句话就可以概括了。就是现在大家上的网，每一个请求如果你不做特殊要求的话，都是明信片，就HTHTT明文的是明文的。任何就是你你在和别的电脑谈话的时候，你和那个电脑之间的任何内容都可以被中间经历的所有电脑看到。而HTPS的或者less encrypt的愿景就是希望把所有这些明信片都变成信件。就是默认上面是要盖一层信封的。如果你不去拆的话，或者说如果你不使点劲的话，你是看不到内容的这愿景应该是这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:55",
      "text": "但是此前存在一个什么问题呢？就是作为一个普通的站长来说，你要然后去首先你得花钱，这是最大的一个门槛。但也不一定也有免费的对，但是你在买那个服务的时候是花了钱的对吧？如果你用一个免费空间的话，它是不是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:13",
      "text": "证书也有免费的，但是限制比较。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:16",
      "text": "但是前提是你得去买一个什么domain之类的东西，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:22",
      "text": "不签发证书更懂。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:25",
      "text": "如果你没有独立报名的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:26",
      "text": "对不？这个没有区别。你这跟你你你用HTP也要买倒霉的，要买域名的。我觉得最大问题就是说好吧，大部分的这个SSL证书就是好用的，或者说这个兼容性比较好的，会比较贵。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:43",
      "text": "对，而且可能这个跟域名还有点关系。比如说现在免费的一般都是叫做单一域名的证书。比如说IPN的话就只能买，比如3W点IPN点LI这个域名的证书，它可能我可以免费。但我想说，比如说我要叉叉叉，就是前面它可以替换成任意的点IPN点LI的域名都可以用的话，这种叫做war证书的话，一年就得好几十刀到几百刀。根据你这个验证的程度不一样的，所以还是有据对价钱倒好说了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:14",
      "text": "最主要的是这个配置过程非常复杂。因为首先申请这个数字证书，你要做几件事情。首先你得验证你是这个域名的实际控制人，最近他在做几件事儿了。比如说有些比较简单的，他可以说你在域名上放一个什么特殊的指定的文件，它可以验证你的也可以。但一般的来说就是给你的这个，比如说刚刚才给这个web master at这个域名的一个邮箱，他发一封这个信，然后信里面有一个code，你那个code你收到code证明说你确实是这个域名的实际控制人。因为你是web master这个账号，但这整个就是挺坑爹的，完了之后你还得生成这个相应的公钥和私钥。对，然后把这个敲一大堆命令，然后用那个用那个用你的这个私钥去生成一个是公钥还是quest这一个这个就是certificate request去生成一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:09",
      "text": "specification request。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:13",
      "text": "对，然后证明，然后你再把这个significant request发给你的，这个叫做签发你的SL证书的机构。对，叫做一般叫做CA。然后他会根据你的情况再给你签一份证书回来。然后你再把证书打包到你有一个一个正确的格式，然后让配置你的这个web浏览web那个服务器，web server去漏的这个证书。然后使得当人家访问443端口的时候，能够正确的读取到这个证书，这过程相当繁琐和麻烦。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:46",
      "text": "因为我我维护那个IPN旗下的，现在比如说我们有十档节目，每档节目都有自己的网这个独立的域名。然后IPN自己还有一个域名，那就有11个域名了对吧？然后是这个名，我的，对，那个也是的，还有我个人自己的对吧？就十几一大堆的域名我都要去，每一个都得走这么一个流程，这个过程是很坑爹的。所以我们。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:10",
      "text": "一些。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:10",
      "text": "所以其实如果你用一套自动化的工具，或者这个工具链也好，还是一个服务也好，能够把这个过程减减轻一下负担，其实蛮好，并且免费。对，如果能免费就更好了，那let's encysted就是干这么一件事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:26",
      "text": "所以简而言之，let encrypt就相当于HOME brew之于less crept之于SSL，就相当于HOMEROU之于下载conflict making store这一堆。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:38",
      "text": "是一件这个比喻还挺好是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:40",
      "text": "一件非常好的事情。然后10月19号的时候，let's encrypt的真正书终于被所有浏览器所所信。这是个过程。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:52",
      "text": "讲起来还比较复杂。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:54",
      "text": "对你这个已经有几年了？四五年了，至少。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:58",
      "text": "没有，他是去年才开始做的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:01",
      "text": "OK对这个东西的主要的幕后推手是马吉拉和。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:08",
      "text": "现在是谁来着？",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:11",
      "text": "对，current sponsors mozilla, 然后这个全球最大的CDN阿卡迈，然后还有EFF，还有思科，还有EFS，对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:23",
      "text": "还有。University of michigan.",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:25",
      "text": "what? 我怎么没看到这是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:27",
      "text": "founder.",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:28",
      "text": "密歇根州立大学州。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:32",
      "text": "有点意思。就有了这套系统之后，刚才我说的那些繁琐的事情就可以解决了。但是有一个问题就回到刚才我们讲的sport single point failure。如果谁把that cry给黑了，所有用的这个let's快都是全都傻逼了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:52",
      "text": "其实还有一点就是说我们这个SSL用的这个CA体系，就是这个certificate authority相当脆弱的。因为现在这可能要先扯一下犊子，就是这个CAT到底是怎么一回事。简单来说就是说你在你的这个电脑里面，操作系统也好，浏览器也好，它一堆默认的这种所谓的CA证书。这些CI证书本身是就是一个怎么说来着？他本身是受信任的，但是他的信任是跟是是因为你操作系统的这个发行商觉得认为这些系统，这些CA机构是可以信赖的。然后这些这这些CA机构在签发二级证书，然后这些证书再去签发三级证书，给我们这些实际的域名的所有人，然后就等于是他们这些CA证书证明我们是假设说是IPN到LI这个域名的实际所有者，然后这个证书是合法的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:55",
      "text": "但是问题在于哪里呢？就CA证书和CA证书之间是没有功能区隔的。就是说CA就是这个certificate authority机构AA签发者是可以签发IPN点1I这个帧数的，B签发者也可以签发IPN点1I的帧数。你会发现在浏览器或操作系统内置的大概二三十个还是三四十个这种CA证书里面，有任何一家CA证书的跟证书的持有的机构出了问题。全世界的这个SSL证书都不靠都会有都不会不靠谱。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:36",
      "text": "对，比如说各位非常喜欢删除的这个CNIC的证书，是一个臭名昭著的流氓证书。我说对流氓的国度，当然是流氓的证书就。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:51",
      "text": "变成了一个木桶原理了。比如说你你你所有的CA证书组成1块1个源头，那你的安全就是里面的水。那你的安全性完全取决于里面最最水，就最差的那一块那个的安全性怎么样。其实这整个体系非常脆弱的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:08",
      "text": "就是它是本它本质上还是一个信任链的问题。好吧，你弄了一台电脑在上面做一些计算，然后计算结果我要去信任你的话，我要依赖谁呢？就是只能依赖你的机构。那你的机构要去找谁来为你背书呢？可能要去找一个主管部门，然后主管部门又要去找谁背书呢？然后这样一层一层追究，追追根结底还是要回到这个国家机器上面对吧？但是如果国家机器本身就是不可信任，那那这个系统不就是完蛋了吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:41",
      "text": "对，而且他这个玩的还不不在于这个危害，还不仅仅在于这里。就是如果假设如果你说中国的国家机构不可信，那你只影响中国的证书都还好是吧？或者说他是中国的证书不可信，会影响到所有其他国家的所有domain.",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:57",
      "text": "的问题是非常。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:59",
      "text": "对对对，然后最近这个赛门铁克就出了这么一个1蛾子。就是google发现赛门铁克签发了一堆根本不存在的域名的证书，或者是就不该他签发的那些这些证书他也在签发了，这就会有问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:22",
      "text": "对，这就好像一个外交官的卖护照一样，非常恐怖的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:28",
      "text": "对。然后在google跟萨姆铁克提出这个问题之后，萨姆铁克做了一次审计，就是security audit。然后说解决了这个大概几五，好像是五个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:38",
      "text": "这个错误签发了证书之后，google你google又google说又发现我操不止五个，有差不多有一百多个这个证书是你错误那个三的签发有问题的这就这个就把google惹毛了，因为google这种级别的服务很容易被这种来搞，对吧？所以他对这事情是很介意的。所以后来他们做了一个完全的审计，发现一共有160几个证书被被错误的签发了，还有2500将将近2500个证书给签发给那些根本就没有被注册过的域名，就完全是有问题的。就说明这个三门铁的内部的安全管理流程是一塌糊涂的对，然后就那个于是google毫不犹豫的直接打脸了，警告这个三节课，然后要求三节课今后就从明年2010年6月1号开始的所有的签发过程都必须公开。这个是一个非常严格的，非常严厉的一个要求。对，一个惩罚就是说你这个三根本不靠谱，就还有更有可能就是说如果你这个C再犯，就直接吊销你的这个C的权限了，对吧？没错，就是好像我们在我们的系统里面默默的关掉了CNIC的这个CA证书一样，对吧？是基于一些基础的的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:00",
      "text": "对，所以其实就很多人都在思考。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:03",
      "text": "怎么去能够干掉这个C就是significative authority这套这就C这套系统，因为确实太脆弱了，而且在现在这种政治环境又不太稳定的情况下，是很容易被拿来搞别的事情，网络环境是越来越恶劣了，简直是。所以暂时还没有什么更好的替代的，就简单好用的替代的方法。所以目前为止也就只能说首先说加快这HTPS的普及，然后想一些替代的方法，比如说这个叫certificate pinning，就是证书，就固定证书。就是说我之前访问过一次之后，就在流量界面记住这个网站的证书。下次访问这个网站的时候，如果发现它证书改变了，就会提醒用户说，这个网站的证书突然改了。因为一般情况下这个是啊就不应该这样，对吧？不会出现证书突然改变的这种情况，如果出现你就要小心。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:04",
      "text": "是吃的那个。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:08",
      "text": "有点那个意思。然后还有就是加强这个审计了，比如google那个夸克浏览器里面，它会向google发送这些证书的一些记录。然后google可以从通过一些技术方法去分析是不是某一个网站的证书被恶意替换了，对吧？对，但是总的来说，我觉得这套体系还是不靠谱的。替代的方案，比如说像我们叫web of trust。就是说如果我们不信任任何跟不信任单一跟证书的情况下，我们怎么去构建一个更加可靠的系统去解决这个问题。但这工程还是蛮复杂的，我也不是专业人士，那就不瞎逼逼了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:51",
      "text": "就留给各位听众作为今天的作业题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:55",
      "text": "脑力练习对吧？如何在不信任任何人的情况下开始信任所有人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:00",
      "text": "内核恐慌之脑。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:02",
      "text": "洞大开的环节。我感觉我们的油箱压力比较爆了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:06",
      "text": "其实可以做一个IMDB或者这个rotten tomato for websites。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:13",
      "text": "那你怎么保证这个website的本身的可这个可行。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:16",
      "text": "就是由它由这个rote头眉头for websites来颁发证书。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:23",
      "text": "明白，我就说你那你怎么保证本这个站点本身的安全性？就是来颁发他自己的增速去中心的自己。我也不知道怎么办，你还是要有一个你说我们讲web of trust，你始终是有一个起点的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:38",
      "text": "可以利用比特币类似的原理，就是每一台计算机要生成一个信任token的时候，都必须依赖所有其他的计算机。然后你在。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:49",
      "text": "这是一个突破的点。但是现在大家就觉得首先一个问题就是说这个延迟太高了。因为比特币的那个传播的它不是实时的。对，就怎么去协调这件事情还是挺头痛的。这个就算是家庭作业。对，我们今天扯犊子也就扯到这里差不多了。节目时间好像比往前短了一些，但是耶我们有没有什么主题可以再讲了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:18",
      "text": "对，所以刚才的moral of the story就是审计是重要的，信任是重要的，安全问题是重要的对，其实审计的重要性，我还是因为女朋友是个审计，所以才还是在最近两年才意识到了。此前我总觉得这个企业的自律，或者是啊有外部事务审计事务所的他律，是一个可有可无的东西。但你就和女朋友在一起之后才发现，我靠原来这玩意儿真的是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:50",
      "text": "然而并非如此。是对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:51",
      "text": "非常重要的一个东西。没错，我们所有人的身家性命其实都压在比如说google或者是微软的内部审计上。所以向内部审计致敬，也还有外部手机。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:09",
      "text": "好吧？感谢收听IPM podcast网络旗下的IT技术主题娱乐节目内核恐慌。我们号称hot core，但是也没有什么干货，想听的人听，不想听的人就别听。您可以为本节目捐款，捐款地址是kernel l panic dot FM flash donate。捐款金额随意，只要是八的正整数就可以。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:33",
      "text": "正整数倍。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:35",
      "text": "对，只要是八的正整数倍就可以。捐款不会给你带来什么，不捐也不会让你失去什么。我们的口号是no hot feelings。如果你有任何反馈，可以发电子邮件到cornel panic at IPN dot LI。同时也欢迎您收听I片旗下其他几档节目，还提供了未知道太医来了流行通信high story印象。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:01",
      "text": "无次元印象印象印影像无次元。上次我们在跟livid做节目的时候，最后我说我只念了七个，然后问说我念完了吗？如果说念完了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:16",
      "text": "然后漏掉了。对，海兰老师新开的这个博物馆和选美，我们下期节目再会。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:23",
      "text": "我们下期节目再会，拜拜。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本期播客深入探讨了Perl编程语言及其衍生物Perl 6（现称为Raku）的发展历程，特别强调了“便利性高于简单性”的设计理念，与Python、Fortran等语言进行了易读性与易写性的对比。讨论指出Perl的易用性及其对黑客文化的贡献，同时关注了Perl 6的延迟发布对社区的影响。播客亦转向网络安全议题，介绍Let's Encrypt简化SSL证书过程，强调了这一变化对互联网安全的正面影响。此外，还触及了证书权威体系的脆弱性，探讨了审计和信任在网络安全中的关键角色。播客内容丰富，不仅涵盖了技术层面如IT安全、操作系统特性，还触及了编程语言比较、开源项目，以及生活中的科技使用，如密码管理工具Surge的介绍。同时，讨论了教育、职业发展、个人兴趣等多方面内容，展现了技术在日常生活中的广泛应用。",
    "qa_pairs": [
      {
        "question": "大家好，我们这期节目主要讨论了哪些内容呢？",
        "answer": "我们这期节目主要围绕二胎政策的开放进行了讨论，包括二胎政策的历史背景、目前的开放程度以及城乡差异对生育率的影响。此外，我们还谈到了关于户籍所在地出生率统计的问题，以及农村留守儿童和城市人口生育欲望低下的现象。",
        "time": "00:01:27"
      },
      {
        "question": "对于听众反馈较少的情况，你们有何看法？",
        "answer": "我们认为可能是因为我们在V2EX平台上更新节目后，得到了较多的关注和评论，比如采访薇推的那一期就收到了四千多次点击和55条评论，这相比平时的几百次点击是一个数量级的差别，所以吸引了大量听众参与讨论。",
        "time": "00:03:41"
      },
      {
        "question": "节目中提到的听众反馈和讨论很有趣，其中有关于听众对节目内容的疑问，你们怎么回应？",
        "answer": "我们认为，虽然有些内容可能看起来似曾相识，但我们的节目旨在让没看过原有内容的人也能通过听节目有所收获。而且，我们也欢迎听众去V2EX的相关节点查看和参与讨论。",
        "time": "00:05:14"
      },
      {
        "question": "听众中有没有提到关于学科选择和教育方式的问题？",
        "answer": "有位听众反馈了计算机专业学生在通识教育中对数学（如微积分）的需求和重要性认知，讨论了理工科基础教育一刀切的问题，并建议针对不同专业应有各自的偏重和擅长。",
        "time": "00:10:29"
      },
      {
        "question": "对于听众反映的学生对计算机领域历史发展了解不足的问题，你们有何建议？",
        "answer": "我们强调了解一个领域的各个方面对深入研究至关重要，就像节目中提到的那些知名人物和故事，它们不仅是该领域的“钥匙”，更是证明自身能力的勋章。同时，鼓励学生在校期间不仅要关注课本知识，还要主动拓展课外知识，积累实践经验。",
        "time": "00:12:23"
      },
      {
        "question": "在中文圈子中是否难以接触到tomson这样的名教？",
        "answer": "是的，如果前人没有告诉你或者所处圈子不对，确实可能接触不到。",
        "time": "00:15:54"
      },
      {
        "question": "中文教材是否会详细讲述人物背景和事迹？",
        "answer": "不会，中文教科书通常在绪论或前言部分简述一下，后面就不再涉及人物详细信息。",
        "time": "00:16:25"
      },
      {
        "question": "教材中是否会包含一些花边内容或吃货（有趣但非关键的内容）？",
        "answer": "国内教材更侧重于干货，而国外教材可能会混入一些吃货内容，这样可以增加学生的谈资。",
        "time": "00:17:44"
      },
      {
        "question": "国内和国外教材的主要区别是什么？",
        "answer": "国内教材更像是考试教材，注重应试；国外教材更接近教学教材，包含更多实用性和探索性内容。",
        "time": "00:18:12"
      },
      {
        "question": "对于排名top的学校有哪些了解？",
        "answer": "前两名是确定的，第三名到第四名经常变动，像交大、复旦、浙江大学等学校排名较为靠前。",
        "time": "00:18:51"
      },
      {
        "question": "同学中使用GitHub等版本控制工具的情况如何？",
        "answer": "许多同学虽然在学校作业中使用SVN较多，但也有同学开始采用GitHub等工具进行项目管理。",
        "time": "00:19:36"
      },
      {
        "question": "是否有人因不喜欢命令行界面而无法使用Git？",
        "answer": "如果不喜欢命令行操作，基本上就没有可能有效利用Git进行版本控制。",
        "time": "00:20:34"
      },
      {
        "question": "为什么会有同学通过QQ传送代码而非使用邮件发送diff？",
        "answer": "QQ可以方便地传输文件，且大部分人都开着QQ，所以选择通过QQ传代码。然而，邮件作为更正式的通信方式，在很多情况下仍然被忽视。",
        "time": "00:21:59"
      },
      {
        "question": "如何选择个人邮箱服务商以及如何管理不同网站账号的邮箱？",
        "answer": "推荐使用Gmail作为个人邮箱服务商，因为它支持“+号”功能，可将不同网站邮件地址转发至同一Gmail账户，方便统一管理。",
        "time": "00:28:34"
      },
      {
        "question": "高阶用户如何解决邮箱数量限制的问题？",
        "answer": "可以自己注册一个域名，并找一个服务商开启wild card域名，通过正则表达式匹配规则，将所有非指定域名的邮件转发到同一个邮箱，这样就能拥有无限数量的邮箱。",
        "time": "00:31:02"
      },
      {
        "question": "很多账号是否可以更改邮箱？",
        "answer": "大部分账号是可以改邮箱的，只有少数如微博等平台不能改邮箱，遇到这类情况可采取特事特办的方式。",
        "time": "00:31:37"
      },
      {
        "question": "search SURGE是什么？",
        "answer": "search SURGE是一个针对iOS上的网络调试工具，不仅能列出程序访问过的网址，还可以进行网络请求的改写、变更或代理（proxy），实现一些特殊目的。它是基于iOS 9和OS 10.11中新特性network extension机制开发的底层网络请求处理工具。",
        "time": "00:33:26"
      },
      {
        "question": "Surge与VPN有何区别？",
        "answer": "Surge是一个通用的网络层工具，实现更精细的网络控制，如对不同IP段或域名使用不同策略，而VPN通常集中了部分功能。Surge相比全局代理更灵活，支持局部代理，并且支持更精细的规则设定，但它不是一个简单的赞助应用，而是有复杂性和实用性。",
        "time": "00:33:26"
      },
      {
        "question": "free lossless image format (FLI)相比于PNG有何优势？",
        "answer": "FLI是一个新的图像格式，其压缩后文件比PNG小约30%，比其他无损格式也小很多。在网络带宽有限的移动设备上，FLI能有效减小资源文件大小，降低CDN费用和游戏安装文件体积，但在设备支持方面可能存在一些问题。",
        "time": "00:36:00"
      },
      {
        "question": "163邮箱泄露事件的情况如何？",
        "answer": "163邮箱疑似泄露了大约1亿个免费邮箱账户的用户名和MD5哈希密码（未加盐），由于MD5的单向性，这些密码很容易被破解。163邮箱作为历史悠久且活跃的免费邮件服务提供商，此次泄露事件影响广泛。",
        "time": "00:39:36"
      },
      {
        "question": "Windows 7系统最近出现了什么问题？",
        "answer": "Windows 7系统近期出现了一个补丁更新异常的问题，补丁标题、下载地址和内容描述均为乱码，引发用户担忧。最终微软承认是内部测试补丁误放出，补丁本身无害，已被从网站撤回。此事提醒大家关注系统安全更新，避免因未知风险造成潜在伤害。",
        "time": "00:46:18"
      },
      {
        "question": "如果想要真正让全世界陷入瘫痪，可以尝试什么？",
        "answer": "可以尝试黑掉Windows的Updates。",
        "time": "00:47:13"
      },
      {
        "question": "今天是万圣节，我们要讨论的话题是什么？",
        "answer": "我们要讨论的是计算机世界可能会怎样终结的spooky场景，以及在系统设计和架构中，为什么永远要假设网络是不可靠和不可信的。",
        "time": "00:47:49"
      },
      {
        "question": "在网络设计中如何处理数据验证问题？",
        "answer": "在设计系统时，应假设网络中传播的文件可能被篡改，因此需要环环验证，例如通过哈希或签名等方式进行文件完整性校验。即使文件通过HTTPS下载，也不能保证绝对安全。",
        "time": "00:47:49"
      },
      {
        "question": "如何打破信任链并找到可信赖的源头？",
        "answer": "在构建信任链时，每一环都可能存在风险，最终可能需要在一个地方选择相信某个源头，尽管这种情况很难避免，但至少可以尽可能减少单点故障的出现。",
        "time": "00:48:34"
      },
      {
        "question": "Windows 7 updates的问题提醒了什么？",
        "answer": "Windows 7 updates的问题提醒我们，单一升级源头的故障可能导致灾难性后果，因此提倡反托拉斯、鼓励自由市场竞争以减少单点故障的发生。",
        "time": "00:49:11"
      },
      {
        "question": "是否应该追求去中心化的解决方案？",
        "answer": "是的，去中心化是解决单点故障的有效途径，比如使用SVN替代集中式的版本控制系统，或者将不同层级的操作系统分散开来，降低整体风险。",
        "time": "00:52:13"
      },
      {
        "question": "对于rootless特性（System Integrity Protection），它的主要作用是什么？",
        "answer": "rootless特性主要作用是防止普通用户通过修改系统核心文件导致系统受损，类似于不可变系统，确保系统文件不被随意更改，增强了系统的安全性，同时也限制了恶意软件通过修改系统文件隐藏自身的行为。",
        "time": "00:56:27"
      },
      {
        "question": "是否有例子说明了信息集中与分散相结合的情况？",
        "answer": "公司内部有一个名为“Spot”的项目，旨在将多个独立的票务系统整合到一个平台上，实现信息集中管理；同时，苹果公司的rootless特性则是将系统完整性保护分散到各个关键目录，限制用户修改核心文件，从而保证系统安全性。",
        "time": "00:56:27"
      },
      {
        "question": "在SIP特性存在下，root账号的存在意义是什么？",
        "answer": "虽然在启用SIP后，root账号的实际用途变得有限，但在多用户场景下，root账号可能仍具有一定的管理功能，另外也可能是为了保持向后兼容性而保留的。",
        "time": "01:00:11"
      },
      {
        "question": "在SIP保护下，用户可以修改哪些部分？",
        "answer": "在SIP保护下，用户可以修改的是user local这一部分，它专门留给用户去改动。",
        "time": "01:03:36"
      },
      {
        "question": "Linux系统中的file system hierarchy standard是什么？",
        "answer": "file system hierarchy standard是Linux系统中一个规范，规定了根目录下的文件结构应该如何设计，以及各个目录应包含哪些内容。",
        "time": "01:04:03"
      },
      {
        "question": "bin和s bin（或super bin）的区别是什么？bin和user bin有什么区别？",
        "answer": "s bin（super bin）是只有root用户可以使用的目录，而bin目录则放置了系统的核心工具。理论上，bin目录中包含的是所有用户都可以使用的工具，但实际上并不完全如此。User bin和bin类似，都包含系统核心工具，但在BSD系统中区分更明显，bin位于 kernel space，而user space里的工具在user bin中。user local bin则是用户自己安装的第三方应用程序所在位置。",
        "time": "01:06:06"
      },
      {
        "question": "早期Linux文件系统的划分是否有硬件基础？",
        "answer": "是的，早期由于磁盘空间小，几百K到几兆的磁盘容量很大，为了更好地管理存储资源，因此有了这样的划分。",
        "time": "01:07:42"
      },
      {
        "question": "是否所有发行版都遵循严格的文件系统分类？",
        "answer": "并非所有发行版都严格遵循这种分类方式，有些发行版开始尝试简化，比如将应用程序作为一个整体打包放在一个目录中，而不是分散在多个地方。",
        "time": "01:11:26"
      },
      {
        "question": "SIP推荐的自定义程序位置有哪些？",
        "answer": "SIP官方推荐的四个自定义程序位置是：/Applications/ Applications、/usr/local、/homebrew 和 /opt，但需要注意的是，home目录下的user local权限可能受限，需要特殊操作才能修改。",
        "time": "01:11:50"
      },
      {
        "question": "对于使用Homebrew的用户来说，遇到的坑是什么？",
        "answer": "Homebrew用户在升级系统或全新安装时，可能会遇到由于Homebrew依赖于user local目录，而该目录权限可能受限，导致需要手动关闭SIP特性并重建目录权限，才能正常使用Homebrew安装的软件。",
        "time": "01:13:15"
      },
      {
        "question": "C与pro等编程语言在易读性和易写性上有什么特点？",
        "answer": "C和pro这类语言在易读性与易写性方面表现并不理想。例如，C语言虽然易于编写，但不易于他人阅读；而pro虽然容易被新手理解，但一周后再次阅读时，如果没有编写文档，读者可能会感到难以理解。而像Python这样的语言则既容易读又容易写。",
        "time": "01:18:24"
      },
      {
        "question": "pro语言的设计理念和流行程度如何？",
        "answer": "pro语言的设计深受很多人欢迎，其语法便利性激励了许多开发者。它曾一度非常流行，尤其是在90年代至2000年前后，甚至比现在某些语言如Ruby的影响力还要深。同时，pro语言也因其简洁和强大的功能，在CGI脚本和日常自动化任务中扮演了重要角色。",
        "time": "01:19:18"
      },
      {
        "question": "pro语言经历了哪些演变？对于pro语言的个人感受如何？",
        "answer": "pro语言经历了长时间的发展，从早期的版本到pro 6，specification已经发布很久，语言设计上做了很多改进，比如修复了一些以前存在的奇怪语义问题，使其变得更加易读和易用。虽然对pro语言的设计理念个人不太认同，但对于它的高效性和简洁性，尤其是大量的一行代码（one liner）编写能力，还是给予了肯定。尽管记不住所有细节，但通过搜索可以解决很多问题，并且pro语言在很多操作系统上都得到了广泛支持。",
        "time": "01:21:22"
      },
      {
        "question": "let's encrypt是什么以及它的作用是什么？",
        "answer": "let's encrypt是一个开源软件和服务，旨在自动为服务器配置并管理HTTPS证书，包括证书签发、key生成和自动更新等流程，从而实现所有网页默认使用加密传输，保护用户数据安全。它的出现解决了传统SSL证书申请过程繁琐、成本高昂的问题，并且得到了浏览器的信任。",
        "time": "01:24:25"
      },
      {
        "question": "当前CA体系存在哪些脆弱性和问题？",
        "answer": "现有的CA体系基于信任链，任何一家CA机构出现问题都会影响整个体系的安全性。例如，一旦某个CA证书被曝光为流氓证书或内部管理流程出现问题（如赛门铁克的例子），可能会导致全球范围内所有证书的信任崩溃。因此，探讨替代方案和加强审计是当前面临的重要挑战。",
        "time": "01:31:55"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "内核恐慌：二胎政策与农村留守儿童问题",
        "summary": "本期节目中，讨论了中国开放二胎政策的背景及其影响，特别关注了农村地区留守儿童的现状。随着农村年轻人大量流向城市工作，农村生育率降低，留守儿童问题日益严重。此外，还讨论了关于统计出生率时，农民工子女的户籍问题及其对出生率统计的影响。节目最后，进行了听众反馈环节，回应了前几期听众提出的问题和建议。"
      },
      {
        "time": "00:03:21",
        "title": "播客节目反馈与社区互动分析",
        "summary": "讨论集中在播客节目《Pro Panic》在V2EX社区的反馈情况，特别是采访薇推和李伟的一期节目在社区中获得了四千多次点击和55条评论，显示出与平时相比有显著的点击量和评论量增长。讨论者分享了对于节目反馈的观察，包括对节目内容的重复性感知和节目赞助方式的看法。同时，也提到了社区成员对于旧版APP的怀旧情绪，以及节目费用的筹集情况。"
      },
      {
        "time": "00:06:23",
        "title": "转专业经历与教育制度反思",
        "summary": "陈震分享了自己从工程专业转至计算机领域的经历与挑战，表达了对未来只能将计算机作为兴趣爱好的可能性。讨论强调了具备跨领域知识的重要性以及计算机知识在专业改善中的应用价值。此外，讨论也触及了微积分学习的必要性及其在不同专业中的应用差异，提出了对教育体系中概率统计与微积分教学比重调整的看法，反思了一刀切的教育方法，强调了根据专业需求定制教学内容的重要性。"
      },
      {
        "time": "00:10:53",
        "title": "程序员的生活辛酸与吐槽",
        "summary": "讨论了关于程序员职业选择的话题，通过gary的来信引出，聚焦于程序员加班过度、健康问题等辛酸史。对话中描绘了程序员因工作压力导致的健康问题，以及他们之间相互关怀的场景。从吐槽中也反映了程序员对改善工作环境和健康的追求，如讨论使用轨迹球、人体工学键盘等。"
      },
      {
        "time": "00:12:20",
        "title": "计算机系学生对专业深度与广度的探索",
        "summary": "一位即将毕业的计算机系学生表达了对节目中提及的两位知名人物的不了解，尽管专注于学习密码学和C语言，但感觉对领域的全面理解不足。学生认为，深入了解一个领域不仅包括技术知识，还应包括该领域的发展历史和人物故事。此外，学生提到周围许多同学对GitHub的不熟悉，以及使用QQ传输代码的习惯，反映了当前计算机教育中存在的问题。学生希望获得如何突破这一阶段的建议。讨论还涉及了国内外教材的差异，以及如何通过实践和接触更广泛的技术资料来丰富知识和技能。"
      },
      {
        "time": "00:20:14",
        "title": "探讨编程工具和传输方式的选择",
        "summary": "对话中讨论了在Windows系统上使用Visual Studio编写程序的必要性，批评了Git在Windows上的表现，并讨论了命令行工具的重要性。进一步，探讨了使用QQ传输代码的习惯，及其反映出的工具链选择和系统依赖性问题。同时，也提到了电子邮件在编程和学术交流中的作用逐渐减少的现象，以及不同文件传输方式（如QQ、飞鸽传输、FTP）在校园中的流行情况。最后，讨论转向了邮件和即时通讯工具在工作和学习中的应用差异，以及对未来编程工具使用的展望。"
      },
      {
        "time": "00:28:31",
        "title": "管理多账号邮件地址的智慧之选",
        "summary": "讨论了使用Gmail的加号功能来管理不同网站注册的邮箱地址，以及遇到网站不支持加号时的解决策略。进一步探讨了使用个人域名来创建无限邮箱地址的可能性，以及大多数情况下账号邮箱地址是可以更改的，除非遇到某些特殊情况。此外，还提到了对于不能更改邮箱的网站，如微博，采取的应对策略。"
      },
      {
        "time": "00:32:29",
        "title": "介绍Surge网络调试工具及其特点",
        "summary": "Surge是一款在iOS上推出的网络调试工具，除了列出程序访问过的网址外，还能进行网络请求改写、变更等操作。开发者刘亚在Medium上分享了设计原理与实现，基于iOS9和OS10.11的新特性network extension机制。与VPN不同，Surge提供更精细的控制，如对特定IP段或域名应用VPN。此外，文章也强调了支持国产开发者的重要性，尽管其价格不菲。"
      },
      {
        "time": "00:35:58",
        "title": "新型图片格式FLIP：更小、更快、更省流量",
        "summary": "介绍了一种新的图片格式FLIP（Free Lossless Image Format），该格式在保持无损压缩的同时，比主流的PNG格式文件体积减小约3%到30%，并在与其他无损格式的比较中也显示出类似的优势。在移动设备和网络条件不佳的环境下，FLIP的这种特性特别有用，可以节省流量，减少CDN费用，以及减小游戏的安装文件大小。然而，作为一种新的格式，FLIP面临着兼容性和设备支持的问题，类似于之前Google推出的WebP格式。尽管如此，FLIP在特定应用场景下，如开发iOS或安卓应用时，展现出其独特的优势。"
      },
      {
        "time": "00:39:23",
        "title": "网易邮箱安全事件：1亿账户信息被泄露",
        "summary": "近期，网易邮箱（163.com）遭遇重大安全事件，大约1亿个邮箱账户的用户名和密码被泄露。值得注意的是，虽然泄露的密码是MD5哈希形式，但由于缺乏盐值（salt）的加入，这使得密码几乎等同于明文。MD5作为一种单向哈希算法，理论上是不可逆的，但在实际中，通过网络上存在的彩虹表（预先计算好的哈希值对照表），可以较为容易地将MD5哈希值转换回原文，这一过程被称为'cracking as a service'。尽管此次事件的具体技术细节没有被广泛披露，但显然，缺乏盐值的MD5加密方式大大降低了密码的安全性。"
      },
      {
        "time": "00:41:07",
        "title": "互联网安全和历史遗留问题",
        "summary": "讨论集中在两个主要话题上：一是网易163邮箱服务的历史及其用户量，以及如何因早期互联网的普及而成为记忆中的一部分；二是Windows 7系统的一个安全事件，误将测试补丁发布给用户，引发了对自动更新系统潜在风险的担忧。"
      },
      {
        "time": "00:47:26",
        "title": "万圣节谈网络安全与系统设计原则",
        "summary": "在万圣节这一天，对话围绕网络安全和系统设计的重要性展开。强调在设计系统时，应假设网络的不可靠与不可信，需采取如哈希验证等措施确保数据的完整性。特别指出HTTPS并不意味着绝对安全，因为信任链的每一环都可能存在问题。讨论还触及到单一升级源的风险，提倡反托拉斯、市场竞争以及去中心化来减少单点失败的风险。最后，通过公司实践中的single point of truth项目，探讨了信息集中与安全分散的矛盾，体现了在实际操作中权衡集中管理和分散安全的复杂性。"
      },
      {
        "time": "00:52:28",
        "title": "探讨macOS系统完整性保护(SIP)特性",
        "summary": "macOS在版本10.11中引入了名为rootless或系统完整性保护(SIP)的特性，此特性默认禁止用户修改系统核心文件和目录，如/bin、/user和/system等，以防止用户意外破坏系统。这一措施旨在进一步保护系统免受用户误操作的损害，特别是在用户可能不完全了解root用户权限可能导致的危害时。通过限制root用户的绝对控制权，苹果旨在为用户提供更安全的使用环境。"
      },
      {
        "time": "00:56:26",
        "title": "探讨不可变系统和SIP特性对网络安全的影响",
        "summary": "对话中讨论了不可变系统（immutable system）的概念，强调其如何通过禁止修改系统文件来增强安全性，类似于Chrome OS的安全模式。特别提到了SIP（System Integrity Protection）特性如何通过限制对系统核心文件的修改，来防止恶意软件的侵入和提高系统安全性。此外，也提出了在SIP存在的情况下，root账号的存在意义及其在多用户环境下的可能用途，同时也探讨了向前兼容性的重要性。"
      },
      {
        "time": "01:01:12",
        "title": "探讨immutable系统对恢复分区的影响及文件系统标准",
        "summary": "对话中讨论了immutable系统如何影响恢复分区的必要性，指出如果系统核心部件不可修改，恢复分区变得不那么必要，可以考虑重用其空间。同时，触及了系统升级时恢复分区的作用及SIP保护下的可改动部分。此外，还讨论了文件系统层次结构标准（file system hierarchy standard）及其在Linux系统中的应用和现状，指出尽管存在标准，但各Linux发行版的目录结构并不统一。"
      },
      {
        "time": "01:05:23",
        "title": "Linux文件系统结构和应用管理的变迁",
        "summary": "讨论重点在于Linux系统中文件和应用的组织方式，以及随时间演化的变更。首先区分了bean与s bean、bin与user bin的区别，讨论了这些命名背后的逻辑及其在系统管理中的作用。接着，指出Linux早期因为磁盘空间限制导致的文件系统布局，以及后来随着硬件进步，对文件系统结构进行简化和统一的趋势。特别提到了在VPS上的个人实践经验，如何从遵循Linux文件系统和ARC标准，到发现将应用集中管理更加便捷。最后，对ETC和OPT的命名表达了困惑，并支持当前一些发行版试图简化文件系统结构的努力，以及向OSN方式靠拢的趋势。"
      },
      {
        "time": "01:12:15",
        "title": "macOS系统安装和权限管理的挑战",
        "summary": "讨论集中在macOS系统下应用程序的安装位置选择，包括为单个用户下载还是为所有用户安装的问题。特别提到了操作系统对Homebrew的限制，如没有直接选项来选择安装位置，通常只能安装到预设的目录中，导致只有当前用户可用。进一步讨论了SIP（系统完整性保护）对用户修改文件系统的限制，特别是在全新安装的系统中没有user local目录时，需要手动关闭SIP来创建目录。此外，还提到了对于没有root权限的用户，如何通过修改默认路径来适应某些软件包的硬编码依赖。最后，提到了在没有root权限的情况下，将Homebrew安装到非默认路径的可行性和相关挑战。"
      },
      {
        "time": "01:15:55",
        "title": "Perl 6的漫长等待与语言特性讨论",
        "summary": "对话者讨论了Perl 6的发布历程，将其比喻为长期等待后的实现，但又显得不再那么期待，因为时间久远，需求可能已改变。Perl语言的特性，特别是其编写容易但阅读困难的特点被提及，与其他编程语言如Python、Ruby进行了比较。还提到了Perl社区的变化和Perl 6的一些改进，比如修复了之前版本中的一些语义不一致问题，但对话者对于Perl 6是否会重振Perl的辉煌持怀疑态度。"
      },
      {
        "time": "01:23:49",
        "title": "Let's Encrypt简化SSL证书管理",
        "summary": "讨论重点是Let's Encrypt如何通过提供自动化的工具和服务，简化SSL证书的配置、签发和更新过程，使网站安全加密变得更加容易和免费。"
      },
      {
        "time": "01:29:40",
        "title": "Let's Encrypt及SSL证书的信任与风险",
        "summary": "Let's Encrypt的SSL证书于去年被所有主流浏览器信任，成为推动HTTPS普及的关键力量。该项目由Mozilla、阿卡迈、EFF、思科等赞助，解决了繁琐的证书申请过程。然而，SSL证书的CA体系本质上是脆弱的，因为所有CA机构均可为同一域名签发证书，如果某个根证书被黑，可能影响所有使用该证书的网站，存在单点失效的风险。"
      },
      {
        "time": "01:32:35",
        "title": "探讨CA证书信任危机及解决方案",
        "summary": "对话中讨论了CNIC流氓证书和赛门铁克错误签发证书的问题，指出了当前CA证书系统存在的信任危机。通过对这些问题的分析，指出了信任链的重要性及系统中的脆弱性。进一步探讨了HTTPS的普及、证书锁定和加强审计等对策。此外，还提出了对Web of Trust等未来可能的解决方案的思考，以及对审计重要性的认识。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "特点：列出程序试图访问的网址，进行网络请求改写和代理"
                },
                {
                  "children": [],
                  "content": "应用场景：实现网络层的精细化控制"
                },
                {
                  "children": [],
                  "content": "价格：在App Store中售价十美元"
                }
              ],
              "content": "网络调试工具Surge"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "特点：无损压缩，比PNG小约30%"
                },
                {
                  "children": [],
                  "content": "应用场景：减少带宽使用，提升网页加载速度"
                }
              ],
              "content": "新的图片格式FLIF"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "概况：泄露了约1亿个账户信息"
                },
                {
                  "children": [],
                  "content": "影响：密码未加盐，存在安全风险"
                }
              ],
              "content": "163邮箱泄露事件"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "描述：用户接收到未知更新，引发安全担忧"
                },
                {
                  "children": [],
                  "content": "结果：微软解释为内部测试错误"
                }
              ],
              "content": "Windows 7自动更新问题"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "主张：默认情况下不信任任何命令行输入"
                },
                {
                  "children": [],
                  "content": "目的：减少系统被破坏的风险"
                }
              ],
              "content": "让命令行更安全的提议"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "功能：防止用户或恶意软件修改系统核心文件"
                },
                {
                  "children": [],
                  "content": "影响：提高系统安全性，但可能影响开发流程"
                }
              ],
              "content": "苹果系统SIP（系统完整性保护）"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "状态：历经多年，终于有望发布"
                },
                {
                  "children": [],
                  "content": "社区反应：从期待到淡漠"
                },
                {
                  "children": [],
                  "content": "特点：修正旧版本中一些设计上的问题"
                }
              ],
              "content": "Perl 6的发布"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "服务：提供免费SSL/TLS证书，自动配置和更新"
                },
                {
                  "children": [],
                  "content": "影响：推进HTTPS普及，提高网站安全性"
                }
              ],
              "content": "Let's Encrypt"
            }
          ],
          "content": "主题和内容"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "提议默认不信任命令行输入，提高安全性"
                }
              ],
              "content": "关于命令行安全"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "强调审计的重要性，即使是大型开源项目也需定期审计以确保安全"
                }
              ],
              "content": "关于开源项目维护"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "虽然经过长期等待，但社区对其发布的兴趣已减少，表明项目推出时可能已错过最佳时机"
                }
              ],
              "content": "对Perl 6的看法"
            }
          ],
          "content": "技术观点和建议"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "讨论了Let's Encrypt等服务如何降低HTTPS部署的门槛，加速网络加密进程"
                }
              ],
              "content": "HTTPS的普及"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "强调了开源项目维护者对安全审计的重要性，以及社区在发现安全漏洞时的响应速度"
                }
              ],
              "content": "开源项目的安全性"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "讨论了苹果系统中SIP（系统完整性保护）的引入，以及其对用户安全的影响"
                }
              ],
              "content": "操作系统安全特性"
            }
          ],
          "content": "行业观察和趋势"
        }
      ],
      "content": "IPN Podcast: 内核恐慌"
    }
  }
}