{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df8dc",
  "title": "49. Kerning Panic·字谈字串（六）Emoji（再次）拯救世界",
  "task_id": "p7g395y8prx6qz65",
  "transcription": [
    {
      "time": "00:00:13",
      "text": "大家好，今天是2018年1月9号，自弹自唱的第64期，也是内核恐慌第5 49期。这是自弹自唱与内核恐慌的串台的第六期。自弹自唱的是全球首家用华语制作的字体白云主题播客节目。我是主播汶川西半东营剧eric.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:38",
      "text": "我是主播黄浦江兵秦真宇。秦真宇，您正在收听IT技术主题娱乐节目内很恐慌，我们号称哈利克尔，但是没有干货，想听就听，不想听就别听我是吴涛。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:50",
      "text": "real太好了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:52",
      "text": "我们又来串台了。2018年新年快乐，新年快乐怎么样？你在舞蹈，你在瑞士滑雪还开心吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:04",
      "text": "挺好的，这一次滑的非常爽，而且我们赶上了仅有的两个好天气。然后回来之后就完全完蛋了，下雨了，把血都冲的乱七八糟的。你们怎么过的？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:17",
      "text": "我回家了，我好久没回家了。我时隔三年回到了汶川西半球。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:24",
      "text": "好，恭喜你。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:25",
      "text": "你说查祖谱查的怎么样？认祖归宗。",
      "speaker": "发言人4"
    },
    {
      "time": "00:01:30",
      "text": "衣锦还乡。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:32",
      "text": "我不发推了，因为我我上次看那个族谱，是我高中的时候，还特地这次有机会重新再翻出来。原来我们那个是一个箱子，十二本，但是里面大概就是四五本都是人的名字，家谱。然后四五。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:49",
      "text": "本都是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:50",
      "text": "那个坟墓，就是祖先的坟，在哪座山里面都是那些东西，然后只有真正实质性的东西，就是只有两本。然后就翻了一下家里的什么名胜，什么乱七八糟的，我终于查到了我们老家那个字辈，你们有自备吗？起名字的时候你。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:10",
      "text": "应该排你你应该是排什么。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:13",
      "text": "辈分是自备，就是排了一个自备，然后我们那个自备理论上讲应该是可以连成一首诗的，就是那样子的。我终于查。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:22",
      "text": "到了那首诗，苟利国家生死以上。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:28",
      "text": "我不会用这么常用的，好吧。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:30",
      "text": "其实没有你想象的那那么高端。然后就是什么李易传家宝、诗书裕后针之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:37",
      "text": "就弄OK好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:40",
      "text": "但你是单名，所以你就不按那个。",
      "speaker": "发言人4"
    },
    {
      "time": "00:02:43",
      "text": "对，咱们这一辈，咱们这一代其实全都没有了，就大部分都没有了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:47",
      "text": "也就是说有有这样的一个规定，但是你是不是按这个规定起，那就是各各家各房所以real你是光字辈。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:57",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:58",
      "text": "哇哦你们都是那个名门厨师，我连我就我爷爷那边往上数三倍就没有，就不知道谁是谁。",
      "speaker": "发言人4"
    },
    {
      "time": "00:03:08",
      "text": "你是真正的呗，下一个应该是煮的炸的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:18",
      "text": "等一下什么烹饪方法。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:20",
      "text": "顺序是什么来着？",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:21",
      "text": "酱爆汁杯丛丛，从丛草字开始吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:26",
      "text": "孤老自卑还是。阿拉就是说阿拉亨康，阿拉四川，阿拉四川自备的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:38",
      "text": "不扯了。郑宇新年怎么过的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:44",
      "text": "我就在上海附近，我元旦去了一下杭州。对我去参观了一下，我去参观一下中国美院传说中王树先生的那个作品群，那个建筑是吧？中国美院建筑好像，对，那个象山校区的是王树的作品群，整个校区都是他一手搞的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:04:06",
      "text": "锐欧就一直待在深圳吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:08",
      "text": "对，春节新年就是在家里休假，因为上个月就12月都一直在出差，挺累的，然后就在家里休息了一段时间。",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:18",
      "text": "好吧。看来大家休息都挺好。我们这里的话因为是串台节目，就不说太多的新闻了。但是我还是忍不住想说一两条，一条是古德隆查普夫老奶奶的字体终于被数字化了。大家知道查普夫先生，但是查普夫夫人其实也是一位特别有名的书法家，他的名字其实叫古德隆查普夫。冯黑色其实是他的娘家摄影师。应该如果。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:51",
      "text": "他有贵族风格，他有贵族头衔的话，很有可能是会延续下来的，不管是男女，哪怕结了婚也会延续。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:02",
      "text": "他是1918年的1月2号的生日，所以他刚刚迎来他的百年诞生。然后为了庆祝他的百年生日，他的那新字体终于他的那款字体终于被数码化了，这个字体的名字就叫黑色安提卡。德育里面这个antique是就相当于那个称心体的意思，还是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:27",
      "text": "古典体？Antique其实就是古典安全古典。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:33",
      "text": "然后大家可以去看一下我们那个链接，在photoshop里面，这次负责这个数码化的这位小帅哥叫芬迪娜迪纳乌鲁斯。我刚好十月份的时候碰到他，因为迪德是吗？费尔迪因费尔迪南德乌尔里希是吧？应该。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:57",
      "text": "是我费迪南。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:00",
      "text": "念起来。",
      "speaker": "发言人4"
    },
    {
      "time": "00:06:01",
      "text": "比较扯，有点难念了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:04",
      "text": "是对对，物理。他现在正在雷丁读博士学位，一直跟着艾瑞克斯皮克曼，在活字印刷的工作室，叫做P98A柏林。我们十月份type two和荔枝青耕一起去参去访问P98A的时候，刚好他在这个工作室里面，所以他带我们到工作室走了一圈。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:31",
      "text": "OK感觉如何？",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:33",
      "text": "特别好。然后他本人是一个身材特别高大，将近2米。我估计他的身高真的对对对，个子特别高。那时候他刚开完会回来，然后特别困，但是也顶着这个疲劳的身躯来带我们去看了一下。因为他那个工作坊更多的是那个木活字，这就是相对来讲比较大的那个火字。大家知道吗？在欧洲的话小的签字的话是用金属的那大大的都是用木活字。他们在那边印了很多什么海报什么什么的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:11",
      "text": "OK。好，这款字。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:13",
      "text": "已经在线上了，所以大家有空可以去看一下，非常符合。因为古德龙查普夫夫人他本是本人是书法家。可以看一下，其实很很有那个迪奥托马，就是他原来第一款那个字体的感觉。这次的复刻出来的数码老板也是没有小写字母，只有大写字母和小型大写字母。这样拍出来非常古典的感觉，就非常符合这个安缇卡这个名字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:47",
      "text": "所以是他他他开始做这个字体，就是拿来做做展示用的，是吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:54",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:55",
      "text": "雕刻的什么什么碑文字体。",
      "speaker": "发言人4"
    },
    {
      "time": "00:07:58",
      "text": "感觉像对。这款自他自己其实当年很早了，就是原来是有签字版本的，但是就一直都没有这个数码版。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:12",
      "text": "明白了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:13",
      "text": "好，我们在此也遥祝我查普夫夫人身体健康。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:20",
      "text": "活100岁，可以继续活下去。对，一定要好好活下去。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:24",
      "text": "一定要好好活下去。好，下面一条消息就热烈庆祝新版的ISOIEC的10646发布了。这次发布的时间特别有意思，是在12月的24号，也就是圣诞节前夜。这次发布的是第五个版本。其实这次发布的一个目的，就是为了和半年前的发布的那个unicode 10.0的版本进行一个同步。如果有收听我们上一次就是梁海来参加的那一期优尼科技和大家介绍优尼蔻的节目，就知道unicode和这个ISO的10646是有一个非常复杂的一个同步的关系。2两个2个文因为两个文件是分别是两个组织，所以他们并不是同步的。那uni扣是事先是10.0就已经在大半年前就已经发布了。那这次落实到ISO，落实到ISO的10646发布以后，这个就是变成因为ISO是国际标准组织，不国际标准组织，那这个新的标准就是官方性的，就会要有各国的标准化组织继续的来接受和在各国里面执行。OK, 实际内容其实就是跟那个uni KO的10.0是差不多的，有一些细细微的不同，但是我觉得已经没有必要在节目里面讲了，有兴趣的同学可以去看文档好。好吧，那我们是不是赶快可以进入正题了？",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:06",
      "text": "咱们捧哏的要热情一点好吗？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:13",
      "text": "你们都睡着了吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:14",
      "text": "同学们新年第一次捧哏。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:16",
      "text": "你们这么不是今天有三个捧着，三个捧着。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:18",
      "text": "实在是互相好吧。今天我们的主题是MOJ再一次拯救了世界。其实去上次我们我们其实这个自弹自唱节目，今天也是第六期了。但是目前为止收听率和好评最高的还是那期关于MOJI的那集。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:42",
      "text": "所以大家还是虽然看不到MOJ本身，还是会希望在会很喜欢在pocard里面听到这个事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:49",
      "text": "对，但是其实上次我们也是觉得时间不够，然后MOG其实背后还有很多更多的技术方面的东西还没有跟大家聊透。所以我们今天决定再花一期的时间和大家聊MG背后的一些技术的内容。首先要跟大家扯一扯sorer n gate PaaS这个事情。这个东西中文叫什么代理对是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:19",
      "text": "对，不知道怎么翻，就姑且这么翻译。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:22",
      "text": "你直译的话送给的就是代理，pair就是对，这个给给PaaS。因为最近在日本有人写的文章就讲说，感谢MOG加速了很多环境对这个代理队的支持。因为说实话以前一直都有这个东西，但是很多环境都支持的不好。而且但是因为它并不是非常常用。因为如果你要使用这个代理，对代理队的那些字，就unit那些字，就是你放在UTF16都是很后面就都非常罕用的那些字。所以即使你有bug大家也不去修，一或者说有些bug根本就没有体现出来。结果现在AOG大家经常常用了，大家都发现我我我要赶快去能support就支持IMOJ，才发现这一些乱七八糟的东西都翻出来了。所以我觉得还是有必要和大家再讲讲这个UTF16和这个surrender ate这个代理队的事情。OK因为最早来讲的话，就首先java cripe和那个windows的API手机好像原来都不支持。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:46",
      "text": "因为最开始的时候是没有UTF16的，最开始使用的时候那个UCS2最开始是早于unicode的标准的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:12:55",
      "text": "对，实际上是个历史遗留问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:58",
      "text": "对，就是在unique正式这个标准出现之前，当时就已经有这么一个需求，就是说要表达多个文字了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:07",
      "text": "就是对于宽字节的需求，导致其实跟GB2312那个历史源源流是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:13",
      "text": "对对对，就实践早于规范。对windows .",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:18",
      "text": "API windows API直到现在都是两套，一套是宽宽字符节的API1套是窄字节的API。一个是一个W结尾还是另外一个是C结尾，分别代表Y的和character。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:33",
      "text": "好像这个宽字节这个词是不是windows他们用的这个术语。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:40",
      "text": "对，所以你就像我刚刚API的那个，就如果有一个API比如说这个API的open window，然后这个API它只实际上只是一个这个函数，是名实际上是虚的。然后它实际的实现有两个，一个是window，open window, 比如说underline c然后这个就是用这个标准的asked的。然后另外一个就是open window underline w然后这个W代表W就是Y的就是宽字节，甚至什么python之类的也是。我不知道是不是受到影响，也有一个什么宽字节版本，或者是就是指的是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:16",
      "text": "对他那个python 2的时候，它是可以让你编译的时候选是默认是UCS2还是UCS4对.",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:26",
      "text": "所以现在其实还是要跟大家整理一下。首先是由UCS2，UCSUCS4对吧？这一头有UTF8、UTF16和UTF32。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:41",
      "text": "对对对，然后他们的对应关系是UCS20，UTF16的一个子集。然后UTUCS4是和UTF30架的，然后UTF8是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:57",
      "text": "另外一个东西。对，就是很早以前都是单字节，后来发现单字节不能用了，就是大家用双字节，然后UCUCH2是固定双字节对吧？对不对？固定的所有东西都是用两个字节来表示，双字节表示结果发现这肯定不够用了，所以把这个UCH2.",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:19",
      "text": "他们以为够了，但其实。",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:21",
      "text": "这个不够用，怎么可能够用？",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:24",
      "text": "你想遇见历史，对历史失败了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:27",
      "text": "二的16次方的话，才多少？才6万5536万千多个。所以这个就是所谓的我们在uni code里面摆位置的话，就是那个基本多文种平面。对，所以在那年那时候都才1991年的时候，就所有的我们的零平面，平面它分012345好多个面。第零个平面最基本的那个面，那才六万多个马尾，肯定是不够用的。但是当时觉得够用，就用了一个固定的双字节的，就我们现在叫的UCS2。然后发现不够用了怎么办呢？就是跟他去扩展这个扩展这个特别坑，就开始用了一个UTF16，它是个变长的对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:15",
      "text": "66是大部分是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:17",
      "text": "定长的对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:19",
      "text": "大部分是定长的就可以变。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:21",
      "text": "他的我们常用的部分就是UCS2，就是定场两个字节。但是他留了一个就刚才讲那个serry给pair代理队的方式，来支持一个扩展，然后让它变成一个更长的支持。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:33",
      "text": "32G3R主要是代孕，就是我需要这个东西，然后我需要这个东西，但是我自己包括我自己干不出来，所以我要找别的东西来帮我收出来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:47",
      "text": "这种感觉为什么被你说的那么奇怪？听起来sorry.",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:52",
      "text": "这个词，就因为他他没有用agent或者是broker之类这样一个surrogate。Gate这个词最常见的不就是代孕吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:05",
      "text": "是的，因为我们大部分常用的AMOG，比如说大家想象的就是比如说那个脸蛋儿、笑脸，那些MOJI原来排的马位都不在这个基本多文种平面，而都在第一平面上。所以如果按那个尤尼扣的马位的话，大家可以看到是在100000，就这五位数了都已经因此如果用普通的那个UCS2是没办法弄的，要两双字节是没办法弄的那就要用变长。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:43",
      "text": "在UTF16里面，就要通过这个代孕的repair，就代理队去用这个临时的两个组合去给他拓展成。这也不叫拓展，这叫什么？就代替成就是换成其他的那个代码，用两个字节加起来，猫换台词。对，所以这样就说当他这个字儿这个马位是在基本文在基本的多文种平面的话，他就直接用，他就不用这样搞来搞去的，就是超过这平面了，他没办法弄了，所以他就开始用代理兑了。对，所以这样的一个结果就变成UTF16的话，它就是一个变长的东西。它可能是单字节，也可能是双字节，也可能是四字节。如果你要用后面那些超过那些基本文学没有范围的东西，结果MOJI全部都是超过范围的。所以你用如果你想用MGI的码位，那你编码如果又都是UTF16的话，你就必须要用这个代理队。对，所以代理怼他们，他们就一直讲UTA16为什么要搞个这么复杂的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:00",
      "text": "它不是，它这个复杂性是来自于历史的，它它不是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:04",
      "text": "一开始就想想的吗？他本来搞了UCSR觉得够用了，然后不够用的只能修修补补，又不能大改，就只能在UCS2上做文章，搞出这么一个混合的一个东西。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:18",
      "text": "对，一个怪胎了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:19",
      "text": "而且我觉得这个还会有一个问题，你说到现在这个em这个增速，我觉得四字节很快也不够用了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:27",
      "text": "四字节不至于。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:28",
      "text": "我觉得四字也够用。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:30",
      "text": "应该够用，四字节也就多少。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:32",
      "text": "也就才四字节很多了。够。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:35",
      "text": "因为就是那个密，所以还好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:38",
      "text": "还早是吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:40",
      "text": "还早着呢，好吧，所以但是如果用大家都用那个UCS4和或者都用那个UTF32的话，就所有的东西都用四字来，都好浪费密码不是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:54",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:57",
      "text": "所以大家想来想去，大家还是用UTF8，大家都来用UTF8。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:02",
      "text": "这个世界多美好的，F8也比较浪费。如果你真要揪这个的话。",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:08",
      "text": "那对于我们中国人来讲是比较浪费。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:10",
      "text": "UTF8最大的优势是比较灵活。我觉得他。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:15",
      "text": "就这样的意思是没有歧义。对，就是他可以随意在中间断开是没有问题的。他可以自对他可以自己纠纠，那个叫什么来着？就是给一个任意文本，它可以在任意一个字节中间断开，就找到下一个那个code是从哪里开始的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:34",
      "text": "但是断的出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:35",
      "text": "这个什么UUTF32、UTF16、UCS也都做不到，你必须知道开头在哪里了。那你还有这个bad order的问题对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:43",
      "text": "对，有大头小头的问题。不过32也有大32也对，32肯定有大头小的问题。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:50",
      "text": "所以在这里有两个事情，一个是说在传输中，就存储过程中肯定是用UTF8比较合理。不管是从它的这个编码的效率的和它的这个不分大小端，然后也可以自纠错的这么一个属性来说，肯定是存储和传输的时候是UTF8比较合适。但是在计算机内部它运算和处理的时候，它最好是一个定产，或者是绝大部分是定仓的时候更加有效率。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:18",
      "text": "所以就为什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:19",
      "text": "导致现在一个结果，就是大家那些不你看那些软件系统在内部的internal representation的时候，要不就是选择UTF16，要不就是选择UTF32来做这个事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:31",
      "text": "对，方便对齐，最主要就方便对齐。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:34",
      "text": "可以random seek，对吧？对，比较简单一些。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:39",
      "text": "因为UTF如果用UTF8的话，就是只要马尾，即使是基本文平面，只是只要马蔚在800以上的，都要用三个字节来表示，所以还是很浪费的。相和那个UTF16比的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:57",
      "text": "而且他在那个变长的时候，你没有办法在文本中说我跳到1000个字符以外，中间就可能跳的很歪了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:06",
      "text": "是的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:07",
      "text": "对，32就不存在这个问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:10",
      "text": "那些如果是欧美国家的，他们一天到晚都在asked当自己的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:15",
      "text": "人们他们所以所以他们就不想用32，他们就想对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:20",
      "text": "这个简单一点的。对对对，但是他们又想用AOG.",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:26",
      "text": "所以现在有人跟我们一样的痛苦了，所以还不如用32简单.",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:32",
      "text": "还是很浪费的。所以以前就很多很多那种那些原来windows API，原来是指当只能正确处理双字节的，像那个C加加那时候y chart t它的那个定义就是16个比特的，所以它会把那个他是不是如果用，那它支持UTF16，还是说要看。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:01",
      "text": "具体怎么实现，这个就比较复杂了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:05",
      "text": "我看一个说法就是说它能能显示这个字节的字符，但是由于那个API不能处理，会把它给它当成两个双字节。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:14",
      "text": "的字符句。对，所以要看它的所在的那个环那个运行环境和API怎么支持了，这个东西就是个纯就是纯粹是个坑。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:22",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:23",
      "text": "因为谁干谁头疼。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:26",
      "text": "具体会有什么毛病呢？就是乱码。比如说你算那个总去数的时候就不对，那肯定对。对，就本来一个字就在就算成两个字了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:37",
      "text": "然后显示也可能会有问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:41",
      "text": "传输的时候就会有问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:44",
      "text": "然后传输现在我觉得还好，传输现在基本上至少我调码对吧？就是现代系统都是用UTF8来编码了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:51",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:53",
      "text": "对，就是问题还是处在内部的internal presentation的时候会有这个问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:58",
      "text": "它传输的时候又有点F8的话，它它的内部的他得把八转成16，他还得转一次。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:04",
      "text": "对，有个编解码的一个过程。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:06",
      "text": "对，而且这个是非常这是几乎日常一定要做的一个工作，所以目前的库也比较成熟。你不要自己去弄就好了，就是一定要用现有的解决方案，千万不要自己造轮子。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:22",
      "text": "那好吧，所以现在就那java现在的坑都解决了是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:30",
      "text": "Java从java 5之后就改用UTF16了，然后反正还是有一些问题的，据说但不太清楚具体是不是那么严重。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:40",
      "text": "基本上可以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:41",
      "text": "就是因为开始用UTF16了，所以就开始有坑了。哼这个代理是一个变长的问题。对，要处理代理代理队的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:54",
      "text": "有人说石榴说这个锅我不背。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:59",
      "text": "不是我的问题是你们实现的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:25:01",
      "text": "对，不管怎么样，就是用AMOG这样的，用以前这些罕用字，这些都800 800年用不到的。这个码位用出来了以后，还是督促了好多这些旧的环境要加强。对这个UTF16的支持，毕竟是个好事。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:19",
      "text": "对，这倒是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:24",
      "text": "好，然后下面一个问题就是我们上次没怎么讲那个MGI的字体问题是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:32",
      "text": "其实是对我自己的字体问题听起来有点奇怪，不过的确对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:38",
      "text": "首先MMG的字体默认是彩色字体，这本身其实在字体技术上就是一个很重要的一步。因为大家都知道，大家默认的字体黑白底黑字，就不带颜色的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:51",
      "text": "本来对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:53",
      "text": "现在大家最常用的，比如说如果你安卓手机用的就是这个noto color募集，那如果是苹果的设备的话，用的都是叫什么apple color募集。大家一看就知道这名字里面就有一个color，就是颜色，就是彩色字体。所以就是现在我们的字体技术，都已经支持这个彩色字体了。可是大家仔细再如果稍微的翻一下就会知道，我们其实无论是苹果的这个还是安卓的它这个note它其实里面内嵌的都是位图，就是都是PNG的图片。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:32",
      "text": "对，哼它其实。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:33",
      "text": "就是把一个个图片嵌到了这个字体文件里头去。所以如果大家是这么做的，对，note也是。对。所以如果。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:44",
      "text": "这个是谁谁家是用谁家是用偏svg的来着。对的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:51",
      "text": "好像是那个什么windows是吧？还就svg.",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:55",
      "text": "是那个，这个我们之前讲过，就是在我们讲MG的那一期第三期。",
      "speaker": "发言人4"
    },
    {
      "time": "00:27:01",
      "text": "那个adobe和firefox好像说的是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:04",
      "text": "对，就是adobe和firefox他们定了那个open type的svg的，其实应该是AOB主导的。然后five fox最先实现了这个。对对，然后现在adobe的photoshop和illustrator都能支持这个open type svg字体。然后他们自己也做了几个实验性的字体陆续在发布。",
      "speaker": "发言人4"
    },
    {
      "time": "00:27:27",
      "text": "对，所以这个的话就是大家如果装了那个阿斗比最新版的CC的话，他就默认给你装那装的那个彩色字体。它那个彩色字体的emerging就是矢量的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:41",
      "text": "对它其实就是一个SVG的S量图。",
      "speaker": "发言人4"
    },
    {
      "time": "00:27:44",
      "text": "svg的矢量图。对，所以但。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:46",
      "text": "google是用PNG的，PNG我一直以为是apple的私有技术。",
      "speaker": "发言人4"
    },
    {
      "time": "00:27:52",
      "text": "noto也是，google用的就是noto，noto的那个MOG这些都是PNG的对，所以大家就知道，因为大家都都现在的那个字体文件都是open type格式。其实open type格式里面，它既支持beat map这个位图的彩色字体，也支持矢量图的SUV。要不然你可以欠那个SUVG，或者现在open type它有一个叫CPAL的东西，那个叫什么color pilot table.",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:24",
      "text": "就是叫color，一个是color pilot。对，这个是微软做的那种MG的实现方式之一。它的作用原理就是说它必须要分色来管理这个图层，它是图层的概念。比如说我一个按摩指如果有三种颜色构成的话，我得把这三种颜色分开做成三层。然后这三层分别存储，然后再用一个表来存它们的颜色，最后就把它们叠加起来。",
      "speaker": "发言人4"
    },
    {
      "time": "00:28:53",
      "text": "为什么要做这么复杂呢？",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:54",
      "text": "对，这其实是一个折中。我觉得可能在这个图形处理上的效率会高一些。因为如果你要做一个svg这样子的矢量的按摩机的话，你就得支持渐变色。然后windows那个就是它不需要支持渐变色。另外它有个好处，就是它应该某种程度上很容易跟原拿那种单色的字体直接兼容。对，因为它每一个每一个层本质上还是一个单色的矢量轮廓，就跟传统。",
      "speaker": "发言人4"
    },
    {
      "time": "00:29:24",
      "text": "绘制三遍而已。可能比如说对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:27",
      "text": "如果你有三种颜，你只要三遍，然后叠加起来就可以了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:29:31",
      "text": "那我就感觉还不如直接用PNG算了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:34",
      "text": "对，偏见。因为偏见是之前是apple基于那个true pe直接扩展的一个私有实现。但我不知道他现在有没有开放这个专利给别人。",
      "speaker": "发言人4"
    },
    {
      "time": "00:29:43",
      "text": "现在已经变成了一个普通的open type的格式了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:48",
      "text": "他说不定写进open type标准了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:29:50",
      "text": "对，写进去了。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:52",
      "text": "他他之前实现了一个表叫SBIX，我们当时还讨论过这个表是代表了什么意思，就他那个缩写一直没有一个，就没有一个官方的说明这个SBIX这四个字母代表的是哪个缩写。",
      "speaker": "发言人4"
    },
    {
      "time": "00:30:08",
      "text": "H应该是extend.",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:12",
      "text": "哼。BI是什么bit什么东西的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:30:16",
      "text": "bit man bat index, bit index之类的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:20",
      "text": "你是说苹果的那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:23",
      "text": "对，苹果之前用的一个叫SBIX的一个表来实现的这个MS的M模子的这个PNG的实现方式。其实它不只是不只支持PNG，它支持很多位图像，什么JPEG，什么tif，还有apple最喜欢用的PDF.",
      "speaker": "发言人4"
    },
    {
      "time": "00:30:41",
      "text": "它也是支持。因为它有一个彩颜彩色字体的话，它有个CBDT的表叫color bit map data table。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:57",
      "text": "这个是之前google确实问他们最早的自己定的一个公共标准。对，就是有两个表，一个CBDT1个CBLC是吧？",
      "speaker": "发言人4"
    },
    {
      "time": "00:31:09",
      "text": "对嗯对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:10",
      "text": "然后两个表合起来，对，CBLC那个也是支持位图的是吧？",
      "speaker": "发言人4"
    },
    {
      "time": "00:31:18",
      "text": "因为CCB的B就是bit map.",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:23",
      "text": "所以这种也是一种位图的技术。对，都是位图的这俩都是位图的。对对对，那就跟那个apple的还不一样，apple那个还是私有的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:31:36",
      "text": "但是不管怎么样，那你可以塞这个表，对吧？对对对，十张图的话，刚才说就是用那个CPAO，就是cut a pillet。我现在在看那个文档，它那个颜色是用叫BGRA。BG2就是那个红红绿蓝，就是三原色。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:00",
      "text": "RGB对，RGB, RGBA.",
      "speaker": "发言人4"
    },
    {
      "time": "00:32:03",
      "text": "是随便了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:04",
      "text": "然后那个A就是那个二维码，好吧，RGB我还是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:10",
      "text": "第一次意识到你，你难道你在你在在你的这个思想里面，你一直是在你脑海里面，你也是把RGB你记成BG2了吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:19",
      "text": "没有，因为我一直在他去念RGB，但是对我现在照着这个文档念的。但是BGR他写的他他是他他按字母序，就我我吓我一跳，我那我也觉得念起来怪怪的，但是他的文档里面就是这样写的BGRA值，所以他就还有一个他就这样排这个色号。的对对对对，还有一个阿尔法通道。我想说的是就除了那个三原色，那个RGB的话，还有一个阿尔法通道就透明的。所以就是现在总的来讲就是你虽然在说的是字体的问题，可是你现在为了用MG，其实我们在讲图像和图形的问题了。就比如说我们要讲它到底是个位图还是一个矢量图的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:11",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:12",
      "text": "所以这个东西都搅在一起了，变成以前来讲，文字是文字，图形是图形。所以但是这个MOG就是因为它就是一个它其实是一个展现形式，是一个图。所以现在在一个open type特性的一个字体文件，我们还要再考虑它是矢量图还是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:29",
      "text": "为这印证了什么？这印证了中国那句古话，书画不分家。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:42",
      "text": "我觉得这个是unique的一个贪念，他们太贪了，他们想把什么东西都稳住。",
      "speaker": "发言人4"
    },
    {
      "time": "00:33:49",
      "text": "所以美女当年如AMOJI要不要进unique这个事情本身的话就是炒得很厉害，就是这一个潘多拉的盒子一打来的话就无穷尽了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:03",
      "text": "这个也是在我们上就我们上次。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:05",
      "text": "我觉得unicode，unicode它毕竟是个code，因为它不是个code，这是一个非常fundamental的东西，我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:19",
      "text": "你可以他也可以说是一种扣的，就看你以什么对象来扣的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:25",
      "text": "就我的理解，一个code怎么叫unis t不叫united。如说对它它不是。",
      "speaker": "发言人4"
    },
    {
      "time": "00:34:30",
      "text": "一个书写系统，emerging不是一个书写系统，你就最最典型的一个对我觉得最典型的一个特征就是unicode是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:40",
      "text": "没有读音的对对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:43",
      "text": "但但很多符号也没有读音。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:46",
      "text": "这个你也讲不清楚。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:49",
      "text": "对它就是一种code，我觉得对，它它能它能归到code里。因为它不是就它不叫unis cripe才叫他就能满足球。",
      "speaker": "发言人4"
    },
    {
      "time": "00:35:00",
      "text": "好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:02",
      "text": "这个已经他已经成既成事实了，而且大家这么喜欢，我们现在没有办法再翻回去翻案讲这个事情。现在我们再来讲另外一个问题，就是很烦的一点就是有一些东西它既可能是以文本形状出现，又可能是以这个MOJI形状出现的。比如说沙漏，或者像那个箭头，上下左右的箭头，就是原来unicode它已已经已经有一部分文本样子的东西。但是我们现在又有这个AMOJI的版本，表情符号版本，所以有时候会混在一起，那就要搞一个优先顺序和指定说，这时候我希望它是以M级的样子出现，或者这时候我希望它是以文本的样式实现。然后这个实现方式居然有很多很很神奇的用法。我去翻了一下这个文档，才发现说如果你要去指定，其实是有三种做法，其中有有两种做法是特别神奇，是要去指定这个语言。其实说说到语言的话就是language。大家可能如果熟悉这HTIM，大家都知道，大家要进行网页的语言声明说这个语言是什么什么样的。然后现在才发现ISO就是这个unicode和这个国际组织居然造了一个语言，就这个一个语言代码，这个是A给MG的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:42",
      "text": "这个专门给MG对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:45",
      "text": "没错。ZSYE和ZSYM这两个分别。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:52",
      "text": "代表什么呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:54",
      "text": "ZSYE就是MOG，那个E就代表MOG，所以这个展示出来就是那个MG符号的那ZAYM就是用文本形式。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:06",
      "text": "所以这是什么意思？",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:08",
      "text": "他没什么意思。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:11",
      "text": "不可能，快唱出来什么意思？",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:14",
      "text": "没有什么，因为什么呢？首先他那个Z后面都是一些零散用的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:21",
      "text": "对，那个SY指的是symbol，那个Z是不是就为了把它排到这个表的最最末尾的对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:37:29",
      "text": "垃圾桶那一堆是吧？对对对，Z就是最最后面。所以原来的symbol SYM symbol的拼写不就是SYMBOL吗？对对，所以那个ZSYM所以很早以前就是加入到这个规范里面来了。但是它因为这是simple，它虽然说是符号，它还是以文本形式，就黑白形式出现的，就是像字儿一样的。然后它的那个ZSYE就是MOJI，就像图形形式。所以你如果把这按这个表演与与跟他并列的是什么？比如说是汉语，比如说日语，日语不是JJP之类的，你JAJP，你比如它指定成这个语言的话，它是日语，然后我可以如果给把它指定成那个ZSYE就是E的话，它就是表示MG对，你看我们的AOJ已经堂而皇之的成为一个语言了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:30",
      "text": "所以将来要是有人拿这个傻不拉几的拿这个语言列表来写一个drop down list，你会发现里面你可以变，你可以生。明自己是一个native magic speaker。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:41",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:44",
      "text": "请问你和人交流不是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:46",
      "text": "啦啦的说一大堆AMG是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:50",
      "text": "那怎么说？没法说。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:53",
      "text": "对，不就像盲文一样吗？盲文不是也没法说出来吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:58",
      "text": "就只能在那比划。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:00",
      "text": "不是叫什么忙，不是忙，叫手语。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:02",
      "text": "不手语是比划的对，他那个那个布莱叶，那个布莱叶点盲点字，点点点。对，肯定大家应该就可以想象。你比如说你这样变成这个，如果你写到那个语言声明里面去，肯定不好用。你这比如说你整个网页的网页声明那个语言都变这个MG它可以局部声明，它可以局部。对，对，不好用。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:27",
      "text": "所以后来才发现，其实还有另外一个机制，那就是说叫unicode它有个叫EMOG的locale的extension。大家知道locale叫这我们中文locale中文叫什么？本地设置本地设置的扩展。然后这个扩展是横杠EM来进行扩展。所以你可以用一个比如说在一个语言里面，比如说是美国英语，英语不是EN，然后hyphen美国UUS，然后在还写个EM就扩展，然后再嗨粉text。然后就说明我这时候用的是文本文文文本状态的根的意思是所有的这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:16",
      "text": "emerge的符号都有一个对应的文本形态的。这个不一定这个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:22",
      "text": "形态这是有意的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:24",
      "text": "有些有嗯有的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:40:25",
      "text": "有有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:26",
      "text": "的没有。",
      "speaker": "发言人4"
    },
    {
      "time": "00:40:27",
      "text": "问他，他们这个转化规则是什么样子？",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:29",
      "text": "有有定义的，就是都有定义。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:32",
      "text": "不是我的意思，就是比如说你看你列的这个EENUSUEM emerge，然后如果我要切换成下面那个text的话，那哪些会被转化成那种黑白的这种情况。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:44",
      "text": "都是有定义的。你去看那个码表里面。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:47",
      "text": "它它都写着的对，其实就是简单来说，那些MOG的码位跟只有纯text形式的这个符号的码位，其实并不是完全一样的。他们实际上他们后面要多加一个unicode的一个符号来区分它。但其实它我觉得是个历史遗留。比如说像箭头这样的东西，它肯定在MOG产生之前，它已经有已经给它编码了。对对对，所以那个时候它本来就是text形式的。后来新加了一些MOJ进来，然后发现我也可以做一个MOJ的箭头。所以我不知道他是不是为了节省码位，所以就重用了那个码位。再加一个标志符来区分它是M级还是不是M级的那。",
      "speaker": "发言人4"
    },
    {
      "time": "00:41:34",
      "text": "那那这里还有一个问题，就是说如果有有一些对应关系，它是一个一一映射，还是说其实是一个不能就是一个不能不可逆的一个操作。就是我从那个emerge就是杠emerge这种语言的extension切换成这个text之后，还能再切回来吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:56",
      "text": "只要你的这个软件可以处理，然后你有相应的字体就可以。",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:00",
      "text": "不是我是这个问题。比如说就好像中文的这个繁简的转化，它是不可逆的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:08",
      "text": "对，他他这个他这个其实是从这个角度上来说，他应该是可逆的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:13",
      "text": "它是可逆的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:13",
      "text": "就它不会丢失信息。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:15",
      "text": "相当于对对对OK因为就是我觉得它的语义信息并没有丢失掉。",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:19",
      "text": "因为这些东西在那个uni扣它这个马位上里面原来都有定义的。如果大家去翻，就是你比如说那个箭头，那个箭头的它它都会写，比如说左箭头右箭头它都会有一个。比如说AOG style是什么样的，text style是什么样的。他本来在unique的马薇薇的时候，他就有定义了。然后你再在这边再进行这个选择的时候，他就依照那个定义去显示就完了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:47",
      "text": "OK那也就是说是一个怎么说，我可以这么理解吗？就是emerge的那个码位对应成那种文本的形式的时候，它是一个一对一的，但是有些是比较一对一，这个叫什么来着？那个数学里面。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:02",
      "text": "有一个性质就是满射全映射。你想说这个是吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:06",
      "text": "但是也不是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:07",
      "text": "因为有些是没有的。我知道我知道你的这个意思。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:13",
      "text": "就是我想怎么解释清楚这个概念，就是有一些那种emotion的图案，图案是没有的对应的文本形态的。但是如果它有的话，它一定是一个一一对应的关系。是对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:28",
      "text": "明白了OK对，就现有的情况来看是这样的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:43:31",
      "text": "是的，像比如说你有一个什么西兰花的一个eo JI的形式，但是你就没有西兰花这个文本形式，就是原来的那个莲花。对，不是有西兰花花吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:45",
      "text": "那那我再问一个问题，就是什么现在已为上一版不是出了各种肤色人种。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:51",
      "text": "对吧？对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:53",
      "text": "他他要做成这个文本形式怎么办？",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:57",
      "text": "首先这个我们后面会讲，肤色的话它其实是有一个肤色定义符。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:04",
      "text": "我知道，但是它转化成文本之后就没有颜色这个表达形式了，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:09",
      "text": "所以它会退化成两个，这显示出来的它就变成两个符号，就是原来一个人，然后一个带那个肤色符，它其实就是阴影，就是不同浓度的阴影它会显示什么？这当然也要看环境了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:29",
      "text": "要看环境看。对，实际上新造的MG他们通常不会再特意造一个文本形式。对，就那种有文本形式的多半都是因为它本来是个文本符号，然后后来MG也把它做了一个MOZE的版本。所以这时候就是我刚发了一个页面，这个是经常会遇到的一个符号。就是它原来是有这样一个纯文本形态的符号，但是emerge进到UNIQLD之后，AMOZ的部分里面也有这样一个符号。然后那个符号是一个图像形式的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:45:03",
      "text": "就重了。像比如说圆圈、方块，还有比如说这个上下左右箭头，就是重灾区，都都会有这种问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:12",
      "text": "明白。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:14",
      "text": "然后再再接着讲，大家发现说如果我要切换这个普通字符和MOJI都要靠语言来讲的话，的确是太坑了。于是大家就想出了第三种办法，就是应该乖乖的用VS。VS是叫什么？叫variation sequence叫什么？变体序列，变体序列没错。对，所以就不能切换语言，他就另外再加个变体序列。它之所以需要序列，就是说我在原来这个码位后面再加一个马位，让它变成一个序列。然后补充说明说我这时候要的是普通字符的形状，或者说我就我规定要用这个的形状。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:01",
      "text": "为此这个uni扣专门指定的在unicode有好多好多的变体序列符符号，然后V有好多的VS然后他就指定第15号的VS用来指定代表是来指定用文本形式显示。第16号的这个VS是用表情符号显示。所以你只要像比如说一个在一个左箭头里面后面再补一个加一个15号的这个变体序列的话。那最后就是强制说，我这前面这个马尾一定要用文本形式来显示。那其实就是说我后面补充说明又加了一个马位，所有这些加码位会变成什么样子呢？在这个uni扣的这个码位表里面也都是有定义的。OK, 其实我们TIB的网站上也出了好多这个问题，对吧？郑宇。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:57",
      "text": "啊哈这个就是我刚刚给你们发了一个网页链接里，这是我们在我们经常写博客可能会用到的这样一个字符。比如说你用一些markdown的编辑器，如果你写一个脚注，它帮你自动生成那个角度的跳转回去的符号。它会加上这个符号，然后这个符号恰好就是一个回车。",
      "speaker": "发言人4"
    },
    {
      "time": "00:47:20",
      "text": "就像那个回车的那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:22",
      "text": "它是一个返回符号，就是一个返回箭头，类似这样一个。然后这个符号恰好就是我们遇到的那种，它本身有一个text形式的，但是它也有一个MG形式的这样一个符号。然后这种符号如果我们用了这个正确的VS来指定它强制显示哪一种形式的话，那么现在的操作系统和浏览器都会显示的。对，但如果你没有加这个VS，也就是我只放了这个马位的。对对对，就没有后面加更多的东西。那么在不同的环境中有的时候会显示的不一致。",
      "speaker": "发言人4"
    },
    {
      "time": "00:47:59",
      "text": "谁知道它会变成什么样子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:02",
      "text": "如果去制定的话，其实这应该算是一个实现的错误。我觉得我们现在发现不一致的最明显的就是IOS的这个surfy，或者说它的web view上面会出现优先显示MOG形态的这种情况。那么按照unicode的标准的这个定义来说，它应该是优先显示纯文本形式的。但这个可能是当时我不知道是不是苹果为了绣它的这个MG字体，所以将尽可能能显示成M字符号的字符都显示成对就是。",
      "speaker": "发言人4"
    },
    {
      "time": "00:48:35",
      "text": "在IOS，在移动端的话就尽量都都显示成那个emerging了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:41",
      "text": "对，但mac上的这个sport就没有这个问题。",
      "speaker": "发言人4"
    },
    {
      "time": "00:48:46",
      "text": "所以我与其这样不可控，我还不如说硬加上这个指定服务，让他强制指定变成我所要的样子。对，所以要加的这个东西就叫VS，就叫变体序列。而且注意这个变体序列它也是一个特殊的控制符。对于可能熟悉什么中汉字，什么一体字的朋友们，就经常会想到什么我们叫什么一体字的变表意字的一体字序列，那个就是IVS。我们就是这个idio graphic这个表意字的一个变体序列。就经常比如说比如说茴字有4种写法之类的，那现在就有这个IVS在一个汉字后面补上，各种各样的给他编号，一号回字，二号回来，三号回来、四号回字，强制指定让它显示成某个一体字的样子。这个东西的话其实在现在，因为在日本的需求是非常大的那现在就是新的这个操作平台和环境里面都可以实现了。反正在中国国内的话，因为对一体字的要求不是很多，所以倒不是支持的很广泛。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:08",
      "text": "我插一个问题，就是你日人民最喜欢用的M值是哪一个？之前不是评选过吗？就是全球有什么苹果是那个笑哭的那个吗？那笑哭的不是全球的是吧？全球最常用的。对我也是高频用那个日本。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:30",
      "text": "的有吗？我不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:34",
      "text": "他好像有专门评论，就是选全球每个国家的。哪个国家是最喜欢用那个拜用手拜拜的那个姿势，那不是太中国吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:47",
      "text": "好像拜拜。",
      "speaker": "发言人4"
    },
    {
      "time": "00:50:49",
      "text": "泰国人不是每说一句话都要合掌会出来所有的泰国人说话都必须要合斩。我不觉得那可能肯定是泰国或者东南亚人民。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:00",
      "text": "最喜欢去泰国看新闻，他们那个就就主持人结束之后都要拜拜一下去，那他们普通人说话就是必须的，比如说萨瓦提克就必须平时两个泰国人在街上，你不说也是还蛮正常的。但是理论上。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:16",
      "text": "讲就必须得要的就是你说萨瓦迪卡，但是不合展的话，这个就等于就不在意，不礼貌是吧？就是没有再打招呼，其实就是感觉对，对于泰国人来讲，就是我为什么说这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:35",
      "text": "所以你查到那个讲到那个对最受欢迎的emerge日本最受欢迎。因为你刚才说的那个日本人对英语的需求很高。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:45",
      "text": "我刚才说我我刚才说的是日本人对那个一体字的需求很高。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:49",
      "text": "一体制造人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:53",
      "text": "日本现在都都流行用各种贴纸了，是吧？已经不用戴脖子。",
      "speaker": "发言人4"
    },
    {
      "time": "00:51:58",
      "text": "如果那样你看了，如果你用line的话，那大家都是还是用贴纸的，对吧？就像用微信的同学都都用贴图。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:09",
      "text": "对对对，我表情包一度是从来不贴图的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:14",
      "text": "好烦。好吧，我们还是说回MOG。我们下一个话题就是合成MOG的问题。也就是说不是并不是一个MOG就对应一个码位，而且这个MOJI的合成还有各种各样的问题，我们上次并没有就说清楚，所以这次再跟大家总的来讲一下，因为上次说的零零碎碎的。首先就是MOG里面有单体，然后还有的合成就是所谓的MOG sequence，就是有序列号。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:46",
      "text": "序列里面基本的常用的序列常用的话是有三个。一个是叫做combining sequence，就组合序列。那就就比如说那个键位，比如说那个键帽，就比如说这个键盘一号键盘，比如说像那个电话电话的键盘，如数字12356789，还有井号。如果后面加上那个2013和数字E2013，这个键它叫叫key cap，就是那个键帽。这个马尾它会自动组合成一个，就比如一号键的这样的一个MOG，所以你看上去是一个一号键的一个EMEMOJI，但可是它实际上它是一个数字一的一个马位和键帽这两个码位组合而成的，这个是所谓的组合seconds。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:44",
      "text": "第二个就是大家经常常见的这个modifications，就是比如说那个肤色会在凡是和人脸有关系的这个图后面可以加上肤色的话是现在有几层？123456有六个程度，六个程度是吧？好像六个黑度好吧，六个黑度fit a trick定义的六个程度是由白到黑。所以比如甚至这个人不仅是人的脸，包括人的各种器官，包括手、腿、脚，比如说鼓掌那那那那个也可以的。哪些可以加，哪些可以不加，这在这个unicode也是有有定义的，就是说这个范围内的的东西是可以配合这个肤色肤色定义符的。所以你可以，所以圣诞老人好像老人也是可以的，因此圣诞老人也有各种各样的肤色的版本。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:52",
      "text": "黑人圣诞老人可以。",
      "speaker": "发言人3"
    },
    {
      "time": "00:54:54",
      "text": "但是梅花鹿就没有，对不对？那个鹿的话就是不能配合这个人的肤色的版本，所以有的是可以加，有的不能加。能不能加是事先有定义的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:11",
      "text": "第三个主人为什么你们笑那么奇怪？",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:15",
      "text": "第三个笑点是什么？你解释一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:18",
      "text": "我也不知道，我只是想笑。那没有我。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:22",
      "text": "因为我刚才。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:23",
      "text": "举例的不好，我应该说比如说鱼也是不能加上肤色的，比如说黑鱼就变成烤鱼是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:32",
      "text": "对，其实我如果我们仔细想一想这个问题还蛮可笑的，就是凭什么unique的规定了哪个东西能加，哪个东西不能加胡子？实际上如果我有最终掌握。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:45",
      "text": "所有的种族问题的封杀大权。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:48",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:50",
      "text": "而且肤色。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:50",
      "text": "没有任何的权就是话语权。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:53",
      "text": "对，就这个肤色而且没有任何的意义，你肤色也不能区分种族什么的这种对，就是你不能严格的用肤色来区分种族，所以就没有任何的意义。",
      "speaker": "发言人4"
    },
    {
      "time": "00:56:03",
      "text": "反正这个事情很扯的。然后接着讲第三种就是emerge的flag sequence。Flag就是旗帜，这次这个好像我们上次没说过，比如说我们看起来，比如说中国的国旗是一个EMOJ，但是它的背后其实是至少是三个马位。首先是一个旗，一个空旗就代表一个旗帜的一个马位，然后加上比如说中国是CN对吧？就这个区它有个专门搜的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:36",
      "text": "那个国家代码。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:39",
      "text": "对它有专门的一个叫regional indicator，这叫什么区域指示符的这样一个东西。其实这区域指示符就是26个字母，然后就专用的这个专门用在旗帜上的这种组合的那比如说这个旗帜，然后旗帜专用的C旗帜专用的N那就是CN的旗，也就是中国的旗。这三个那马未接拼在一起的话，显示出来是中国的国旗，但是它背后是三个马尾。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:16",
      "text": "那你说第三个是什么来着？第三个是什么？就是开始是一个空旗，然后是国家代码。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:22",
      "text": "第三个是什么？国家代表是两个数，两个拉丁字母。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:27",
      "text": "比如说C三个。明白，所以也不够用。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:33",
      "text": "所以这个也是有定义的，也的确是不够用，但是还是有定义的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:39",
      "text": "好吧。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:40",
      "text": "然后这还会有涉及到后面的东西。然后这是主要的常用的这个AMOJI的就是这三种了。然后还有次要的就是各种扩展型的，扩展型的就比如说就最近的IOS，它现在经常加的，比如说各种家族和家各种家庭，还有职业的这种MG，这种MG是自由组合的，所以并不是，所以是有的字体有有的字体没有。比如说现在这些家的各种各样的家庭，不是现在奇怪。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:16",
      "text": "的家庭组合。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:18",
      "text": "这是两个男人中两个男人和一个男孩组成的家庭。所以大家就发现这个家庭不有各种各样的组合吗？一个男人和一个女人族，然后带两个男孩就这样子，因为各有各种各样的家庭，所以给它拼合起来，那这个拼合用的是一个ZWJ，就是我们所说的这叫什么零宽组合，零宽结合器是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:47",
      "text": "With .",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:47",
      "text": "joiner .",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:48",
      "text": "joiner joiner。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:52",
      "text": "所以像比如说我刚才说的，比如说两个男人和一个孩子，三口之家，我们看起来是三口之家这样一个MOG，但是实际上它的背后是一个两个一个男人，然后加上这个加号就必须要用那个zero with jona，加上一个男人，再加上一个小孩。所以你看起来表面上是一个MOJ，可是背后是五个马位OK，比如说就是家庭，还比如说职业，比如说职业的话，一个女性的山地车运动员，为了什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:40",
      "text": "OK, 是某种语言的单词练习。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:43",
      "text": "是啊这他终他们终于发明了中国的部首，偏旁部首。",
      "speaker": "发言人3"
    },
    {
      "time": "00:59:48",
      "text": "这样的所以你你你看起来这是一个女性的山地车运动员的这样一个图。可是它背后是首先它是一个山地车手的一个图，有一个女性符号，而而且还有一个符，因为它是女性人，所以他还有肤色，还可以加上肤色，中间还要再用这个zero with joiner给大家念起来。你还要如果你再印，这样的话至少后面是有4个到5个的马尾才能实现这样的一个图OK，是目前上已经定义下来的这样一个序列。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:37",
      "text": "另外还有一个叫AMOG的tag序列，就是加标签这个标签。加标签这个事情，uni KO的草案其实已经有提交了，但是前段时间被撤回，所以目前来讲还不是，它只是一个提案还没有实现。大家我把这个链接发给大家，是在UTS的第52号提，大家可以去看。然后这里面很扯，它就是加一个标签。意思是比如说我可以显示人的头发，从白头发到黄头发到红头发，到黑头发，以致秃头。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:18",
      "text": "因为他。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:21",
      "text": "给每种头发都都加了一个标签。首先是他有个有个有个杯子，有个杯子就是说我这是头发标签，在头这个标签上面写贴上程度，比如说是黄头发或者是秃头，对，就是这样的。接下来在一个是，所以你可能要在一个比如说是男孩的头发上面标签加上一个黄颜色，来体现一个金黄色头发的男孩的一个MOG，也是可以实现的。刚才还有说可以用于改变目前的这个emo g的方向，一些MG它画出来是有方向的。最最有名的就比如说那个手枪，目前的手枪好像。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:16",
      "text": "是只能朝右。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:18",
      "text": "只能朝右是吗？还只能朝左。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:20",
      "text": "好像被改成在麦克上，在IOS上被改成四水枪。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:27",
      "text": "水枪，是水枪，好像只有只能朝左。这样的话，有时候你在表示谁射杀谁的时候，谁打谁的时候，就有就会有方向性的错误。因此因此在这个提案里面，他他先加一个方向标签，然后在这个方向标签就写上里面的具体的值。比如说我是向左指还是向右，这就不能。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:54",
      "text": "向右上方772度的方式打。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:59",
      "text": "对，这个方向的值应该怎么设呢？还有刚才说的，就是像刚才real比较担心的是国旗不够用。其实现在已这个是已经可以实现，比如说英格兰旗，大家知道英格兰它不是一个国家，它是个地区。那英格兰的国，英格兰这个旗是什么实现呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:20",
      "text": "小心英格兰人来了找你拼命。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:23",
      "text": "它只是一个地区。所以但如果像比如说旗的话，国旗的话，像英国的国旗，我们刚才说了它你看看是一个英国国旗，可是它背面首先是这个旗帜的一个马位，然后加上旗帜的U旗帜的K就是UK的旗，就是英国的国旗。然后他这个新的加上tag以后，他可以好啊，对不起，不是UK是GB great brain。所以英格兰是这个C加上GBENG就是great england。所以一共是这六个马尾一串加起来就是这个英格兰的旗。所以这是一个草案，大家还还在讨论，但是有目前已经有些实作是可以出来的。我真的不敢想象，就比如说刚才那个男士变成秃头的那样的一个M9会会被画成什么样子。我想以后是不是应该还对胡子也应该进行定义一下。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:32",
      "text": "这进一步的凸显了这帮人想把unicode用来做任何事情，就是表示任何可见的东西。",
      "speaker": "发言人4"
    },
    {
      "time": "01:04:42",
      "text": "一吨。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:44",
      "text": "你在想什么？Unicode uni什么意思？",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:47",
      "text": "你都unio。对，野心太大了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:50",
      "text": "不过作为一个技术来讲的话，就是说我这个技术只要规范定出来以后，它可以实现的功能是强大的。他可以讲他的意思就是说我这个技术很好啊。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:02",
      "text": "说明为了炫耀这个技术也不至于搞成这样。我觉得所以。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:06",
      "text": "你们知道巴别塔多难造了吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:08",
      "text": "是这样的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:09",
      "text": "但是刚才说的就是这个没有通过的这个草案，在通过加标签的这个想法，其实这个思路倒是很很普通。就是你先做一个tag，然后再定义这个tag的值，对吧？这是很正常的一个思路。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:31",
      "text": "其实有点鸡贼，就是他还是想审马威，他他没有那个霸气到说你来一个我给你个新马威，就你还得用一些东西给它组合成上亏。对我觉得unicode迟迟早有一天说好吧，我把这马位继续的扩增，扩增到你想要多少钱？",
      "speaker": "发言人4"
    },
    {
      "time": "01:05:52",
      "text": "他还是想用那个偏旁部首的，对吧？那老祖宗的办法。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:59",
      "text": "就中国人早在几万几几几有文字的时候，有文字是什么时候？2000年.",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:05",
      "text": "5000年谁知道？",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:06",
      "text": "没有，中国有5000年，这就就发明文字是什么？就是有案可查。第一个，甲骨文在这个时候就已经想到这个问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:16",
      "text": "公元前应该也有了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:06:18",
      "text": "那当然有了，公元太晚了，不到你就不用想公元了，这公园太晚了。这公元前多少年，就一块钱，想不到这个问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:29",
      "text": "你看什么要是爱斯基摩人也来搞这个unique的，他起码把这个血片要搞成50种不同类型的血。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:38",
      "text": "这是个miss这是个miss好像就是并这种这这件事情并不存在的，但是我们其实没有那么多语言来描述雪。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:47",
      "text": "但是阿拉伯语里面有很多种骆驼对吧？古汉语里面有很多很多，古汉语里面很多马，还有很多鱼？",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:57",
      "text": "汉字而且其实这东西英国人语言里有没有并不正常，像日本人发明了爱墨子，他们也没想象那么多的图片，但是现在还是可以搞出那么多。所以全球人民的智慧是可以让这些东西无限多下去的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:07:14",
      "text": "不管怎么样，反正现在的技术已经达到这个水平了。所以大家往往看上去是一个简单的emerg，可是它的背后谁知道呢？它可能是一个马位，也可能是56七八个马位组合而成的。所以是下面就涉及到下一个问题了，就是所谓的自卫错的问题的对吧？对，这个翻译叫自慰促，这可能大家都听不懂。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:42",
      "text": "Aster class是中文一边，中文一边一般被翻译成醋。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:46",
      "text": "醋从就是一团东西，然后graph in graph in一般来讲我们翻译成自慰，就是像因为在英语音学里面，区别意思的这音还是有叫一个音位意义的对对，那就在文字里面就是区有区别，这个就是在书写语言里面的一个最小单位，我们就叫它自慰。那么这个自慰处听起来好奇怪。Graphing .",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:19",
      "text": "caster，抱歉，我邪恶了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:23",
      "text": "就是你要看起来就是人看起来是一个字机器。可因为刚才也说了，我们一个A看人看起来是一个MOG，但是机器他后面认的可能是一个码位或者是五六个码位，比如说在数数的时候，这到底是几个字儿，那这个东西的话都说说不清楚。因此其实在unicode里面，它uni KO有个标准附件的第29号，它这个名字叫unique tax sixteen，就叫文本分割法，就专门来规定。你怎么样看起来就算是一个字，怎怎么在怎么使怎么来定义这个词的界限和字的界限。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:06",
      "text": "就是考虑什么？就是为了分词吗？还是为了什么？",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:09",
      "text": "其应该是给这个unicode的实现给了一个文档，就是你怎样来实现这个东西。",
      "speaker": "发言人4"
    },
    {
      "time": "01:09:15",
      "text": "给一个reference。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:17",
      "text": "其实这个最早是为了给那些泰文和比如说印度的那些文字来做的。因为还比如说藏文大家也知道，泰文的话它可能是在中间一个字，中间一个基本字母以后，它可能会在这个字的上下左右添加各种东西。对嗯所以对于泰文来讲，即使他添加了上下左右的东西，但是他对于泰文来讲，这还依然是一个字。那马位的话那那他他是好多马位，而且你已经把它认成一个字以后，比如说你在删除的时候，你要必须把它认成一个字，你在删选中的时候，你必须需要给他整个选中，或者你让不让他选中部分去修改或怎么样，或者你删除的时候，你必须要整个删除还怎么样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:10",
      "text": "这也不能删除一个字的部首。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:12",
      "text": "对吧？那这里删就说删了半个字，这个是什么鬼？这是有时候对好几级。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:23",
      "text": "所以这个我感觉很奇怪，发现我。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:28",
      "text": "所以这个东西其实都是还要要有定义的。要首先在马威这边在unique的层面要有定义，然后再让这叫什么user engine去依照这个定义来进行实做，要不然的话就大家会乱七八糟的。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:46",
      "text": "然后另外一个比较典型的就比如说韩文，可能大家会比较清楚，韩文其实它是一个声母韵母这样拼起来的。因此其实在韩文音这里面，他h an汗，比如说那个韩字一个him，一个一个non，它可以是三个字拼在一起，一旦拼起来的话含这个这就那这就是一个字了，你不能就是想选择。但这会涉及到什么呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:18",
      "text": "我一直觉得韩文其实挺神奇的，就是他明明是它其实字母，然后它组合的方式就是地地道道的汉字组合方式。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:28",
      "text": "所以unicode为了解决韩文的问题发生了很大的波折。就是一开始就说你韩文就不要占这个一个马位了，你就组合的就不要这样组合的马位，你就一个一个拼。然后又又出现了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:44",
      "text": "就来一个就来一个苹果。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:47",
      "text": "来个一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:49",
      "text": "这样会有一个很大的问题是什么呢？就是在检索的时候会有问题。你比如说你搜索的时候，你韩文文章你肯定要以整整个字去搜，你不能以一个生物去搜。你一搜搜出来是不是全片到处都都选中了就变成对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:08",
      "text": "但我们也有部署减字法。",
      "speaker": "发言人3"
    },
    {
      "time": "01:12:10",
      "text": "对，但是比如说我在一篇文章里面我要搜。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:15",
      "text": "问题是韩文没有部首。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:17",
      "text": "对它是一个拼音，它是一个拼音文字。",
      "speaker": "发言人4"
    },
    {
      "time": "01:12:20",
      "text": "它那个它是把拼音用部首方式组合在一起，我觉得这个太神奇了。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:26",
      "text": "这样会给他这个检索和检索会造成很大的问题，因为会退一万步来讲，我们这个所谓的叫信息化处理是一个信息交换的一个过程。你的交换来交换去不能会有这个错误和遗漏。这完全没有达到目的，搞来搞去的消变信息就变变了，这或者有有遗失了，然后传递有问题的，这个是很大的问题。所以他就必须要有规规定，就是你人看起来这个一团东西是认真是一个字，那么你机器要怎么处理？对然后那具体到我们的这个MOG里面的话，就是像刚才说了，因为MOG它可能我们看起来是一个MOG，但是然后后面可能是三个马位或者四个马位。比如说在数数的时候，当那个当数字的时候，这个到底是几个字的时候就会有问题。好像我今天看一个资料，就我对ruby不熟。Ruby云他那个string，他在数这个量子的时候，他就是用马未来数字数，这显然就不对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:49",
      "text": "对一个马尾部分的语言里面都是这么干的对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:52",
      "text": "一个马尾就不是一个数。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:56",
      "text": "他只会。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:57",
      "text": "输这个更高更高级的信息，他没有或者说更高信息更麻烦了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:03",
      "text": "他们需要专门的库来实现的。所以现在不是像推特的，他现在数数他不是也变了。不是他前段时间把那个140变成280了，好像英语可以写280个字了，可是中日韩还是以140个字。地狱骑士我真很好奇，他他他还特地给我一位，就为这个中日韩选开了一个叫例外。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:34",
      "text": "这个太扯了，他也不是专门为中，应该是还我还是得西方中心主义，就是把他们认为应该扩展的部分扩展了，其他的部分就通通视作两个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:47",
      "text": "就是要以大家能能表达的这个总的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:50",
      "text": "信息量来数，那你信息量来数的话，本来140字的那个中文就是可以一篇小段落了，一大段落了。所以我觉得像什么微博，就学什么那140个字，那140个字学过来用汉字写的话，就本来就就跟那个英文的140个根本不是一个层面上的东西。在信息量上来讲的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:16",
      "text": "对对这是一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:18",
      "text": "让我们字符极大，这是这完全是一个是一流。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:24",
      "text": "这完全是一个历史一流。我们表意字符的话就是本来信息量就是很大。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:29",
      "text": "对，对你不可能通过字数来衡量信息量的，这个方式是非常不科学的，你也算不出来。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:37",
      "text": "你到底能有多少商。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:39",
      "text": "对对对，比如说你这个汉语，简单来说我们知道文言的汉语显然这个长度更短，就他用的这个次数更少，那你这个白话文的汉语就用的次数更多。所以你单纯用字数来限制这个信息量，其实是一个非常没有道理的事情。就在即使是在同一种语言当中，推特早期它限制这个次数纯粹是一个技术原因，或者说是一个模拟技术短信。它是模拟了这个短信时代的短信是。",
      "speaker": "发言人4"
    },
    {
      "time": "01:16:08",
      "text": "短信也不是技术原因，短信是就所有这144这个觥筹，就是为什么我们现在很多东西都是140字，或者为什么twitter今天是140字，全都源自于一个德国人，就是当初设计短信标准的那个人。他在科隆还不是什么地方，杜塞尔多夫夫附近有一个实验室，他在那边做了大概几个月的研究，就是用给别人写便写便签，或者是给别人发短的电子邮件之类的。然后他最后得出一个结论，说140个字对于德语来说满可以满足90%以上的短消息的要求。然后他就把牛逼牛逼，他就把短信标准定成了160个字符，应该是对160够吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:57",
      "text": "德国人这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:58",
      "text": "是不够了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:00",
      "text": "德文单词那么长。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:03",
      "text": "真的这这不是这不是什么这不是什么urban legend，这是一个我记得在在哪个地方看过报道，我回头把那个链接发到收到里面，就这一切都要怪一个德国人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:18",
      "text": "然后现在就搞的这个twitter，他那个算算字数的那个方式很奇怪。现在就比如我们今天讲的MOG，它虽然说英文是允许280个字字了，但是MOG的话他还是把一个MOG当成两个字来算。所以比如说你一个笑脸的话，只能打140个笑脸，不能打280个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:46",
      "text": "280个笑脸。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:52",
      "text": "所以推特做这件事情的考虑点其实不是为了存储。",
      "speaker": "发言人3"
    },
    {
      "time": "01:17:55",
      "text": "对吧？对，我而且他他因为他就他这个数数肯定还是首先是列了，应该是列了一个白名单，就是从马未开始考虑。要么他肯定是要首先是认这个字儿，然后再根据这个字儿来数这个数，他数数他肯定是用加法竖的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:18",
      "text": "为什么是用ja说那他肯定是在前端先javascript写后台API的时候再审一遍。",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:26",
      "text": "对，要不然的话你现在一边说的话，他就会写完，你还够写几个字，就必须要有动态的算。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:36",
      "text": "所以就很扯，还有个indicate.",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:42",
      "text": "所以现在我们才发现原来数也是一个非常难的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:49",
      "text": "我觉得取决于你想要花多少的决心在里面。就比如说你可以按那个unique的我们上次介绍过的那个cluster就是cluster的方法来就是均一化先把它均匀化。然后算了一个被均匀化出来了之后的东西是多少字，那就是多少字。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:06",
      "text": "军医化，你怎么军医化？",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:08",
      "text": "我们上次不是介绍了优衣库规范化的方法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:12",
      "text": "规范化。我们再说到这次就是有一个因为我刚才说了有组合，这个他经常会有会引出一个bug。像刚才说的IMOJI有一个刚才说的键帽，比如说那个电话号码的一和一号键一号键的的这个问题，就是和这个自卫促的这个定义就有问题。比如说我在输入的时候，我先输入数字一，再输入那个键帽。根据uni q的规定，它会自动会缩合成这个一的这个MG。你再输入一个键帽，就单纯那个键帽没有那个剑的话这三个马位摆在一起，其实这个是不符合这个优优扣的标准的这是一个错的序列。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:11",
      "text": "但是不管怎么样，用户看起来就是前面两个缩合成了一个MOG，然后后面是一个空的一个键，对吧？用户看起来是两个东西，然后这时候用户按下删除键的时候，理论上讲就是说后面那个空的键帽是删除。但是根据这个尤尼扣的定义，这个键帽和是必须要和前面这个看成一团东西的，是认成一个字的。所以只要你一删除，连并前面的那个一号键，你一起都被删掉了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:47",
      "text": "OK我好像遇到过。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:49",
      "text": "这个问题，所以就会有有各种各样的问题。我在咱们这个show note，咱们的online里面，我又打了几个键帽，你们可以试着删除一下，就是一一不，你以为是会把最后一个字非常删除，结果是一团字一整个class全。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:14",
      "text": "被删掉了OK。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:18",
      "text": "还有时候根据不同的环境，有的可以复，现有的不能复现。比如说这国旗，所有的国旗至少是后面背后是三个马位。如果你如果那个马位都是连续的话，可能在删除的时候删错的话就会出现那个显示错误。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:41",
      "text": "可能也看你你这个文本编辑器的本身的处理能力了。对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:21:46",
      "text": "如果你没有文本。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:47",
      "text": "每个会原地删了好多次才能删掉一个。",
      "speaker": "发言人4"
    },
    {
      "time": "01:21:50",
      "text": "对，如果文本是比较满意的话就做不到。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:57",
      "text": "这个就是因为大家用的这个API，不用的那个库不一样，你都很难统一的，就比较麻烦。",
      "speaker": "发言人3"
    },
    {
      "time": "01:22:05",
      "text": "所以还是建议大家说不要自己造轮子，不要自己去搞这个东西。你以为好像你解决了你手头目前那个问题，但是你肯定没有想到可能会漏掉的其他的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:20",
      "text": "对，而且说说回刚刚推特那个事情，就是我们说推特他数这个字数，其实他数字数它有很多很复杂的其他逻辑在里面。比如说他会把UIL当成一个固定长度的字符串来计数，无论这个URL有多长，知道它是合法的。UIL它就是。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:38",
      "text": "一团东西对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:40",
      "text": "对对对，就是它不会根据这个UL实际的字符数量来计数，它是记成一个固定的数字。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:46",
      "text": "图片链接也是一样吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:49",
      "text": "对，就是所有的这种媒体多媒体性的这种链接，然后还有URL它都会用一个固定长度的字符串来给你替代，就作为它的这个字符串的长度。所以你也可以把你的文字信息伪装成一个UL往里面写，特别像中文这种不需要分词的UI也是支持汉字的，应该，是的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:23:14",
      "text": "这UIO长度也有限制，要最长的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:16",
      "text": "对对对，但你这样就可以远远超过现有的140汉字的限制。",
      "speaker": "发言人4"
    },
    {
      "time": "01:23:22",
      "text": "问题是你表达不出来。因为那个111在很多推特客户端里面，他不会完全展示的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:28",
      "text": "也是他会说对对对，而且有可能会被生成的。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:35",
      "text": "所以刚才也说，你就会可以想到会有各种各样的隐藏的方法，或者各样的耍赖皮的方法，这个就很可能会被利用。而且有时候就往往会被利用，发生这个安全漏洞的问题。所以这个东西的话还是大家千万不要自己乱搞，干脆其实目前来讲的话，最稳妥的一个办法还是就让那个OS处理，就是用最标准，用最新的API。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:06",
      "text": "不过外部的好像还就得。",
      "speaker": "发言人4"
    },
    {
      "time": "01:24:08",
      "text": "自己处理，我也不方便，所以这个还是要多多测试。不过今天又回到这个主题，就是因为现在大家在以前可能有一些问题，并都放的也是放的bug留在那也是留在那儿了。就因为MOG为了实现MOG，后面需要有这么多个支持，所以大家也再一次的再把这些技术再重新再整一遍。来自己再去看一下自己写的软件，自己的环境是不是都按标准的unique去做。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:46",
      "text": "像刚才说的那个像国旗，国旗它对那个自慰醋，好难念。就是那个cluster的那个定义，它其实你的8.0版本和9.0版本是有有改进的。因为在国企原来定义就是说凡是国企旗和琦琦一凡是两个国旗连在一起都是被都会被认成一个字的。就是按照原来的定义，后来才发现好像这样的一团国旗都被认成一个字，这肯定是不合适的。所以现在的9.0的版本就是最新的版本。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:29",
      "text": "现在就是说就在奇数个是可以被断开，那偶数个是不能被断开。这样能够保证这个国情。对，现在这个就是这样写的。刚才你不是说一个词，然后就是给这个其的这个区，它这个叫regional indicated，就都是两个字母代表组合成一个区域的图。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:54",
      "text": "但不对，ISO的那个国家代码有有三位数组合的没有？",
      "speaker": "发言人3"
    },
    {
      "time": "01:25:58",
      "text": "他现在定义都是就2两2两2组合定义成就的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:03",
      "text": "那个那个标准有两个real那个标准有两个，一个是三位，一个两位的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:08",
      "text": "就是因为两位不够，有两位的不有不够用的，有不够用的时候，它是regional indicator，不是country indicator，对吧？这个也是个政治的概念了，就是区域和国家，就是中国台湾怎么办？对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:25",
      "text": "对，国行的手国行的iphone是没有中华民国的国旗的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:34",
      "text": "这就就就很奇怪了，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:37",
      "text": "这个都是可以回避的。不过这些都是有uni o的这个文档可以引用的那关于刚才那个区域和甚至比如说引用的那个语言代码也是吗？大家知道，而且语言代码有两位也有三位，也是ISO也有很多层级的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:55",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:56",
      "text": "也要看他他这个unicode它引用的是哪一个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:03",
      "text": "太坑了太坑了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:05",
      "text": "所以大家看了发现，其实unicode里面有更多的坑，欢迎大家往里跳。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:15",
      "text": "不过我好像那天看下一版本的unicode的，好像有光头，就是MOG就更新。不知道他是怎么实现的，这个什么红头发的男孩什么什么的，估计下一版的那个MOIIOS更新的话就会上了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:33",
      "text": "大家就可以看了，你给我实现一个红头发的光头男孩出来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:38",
      "text": "所以我在想他那个头发，就是那个tag那个标签被虽然那个提议被否决了，可是很多实作字体他可以先出来。那那那后面怎么调优，那个是他机制后面怎么改的问题了。好吧，今天我的我们的主题就差不多了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:03",
      "text": "虽然不太清楚这个拯救世界的点是什么，不过还是蛮有意思的。Reader at wasn't又学到一些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:15",
      "text": "而且还能拉出你们来做一期节目，多不容易。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:19",
      "text": "对，我们这个就靠你们续命了，简直是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:28",
      "text": "好了，你们可以收尾了。OK, 感谢收听IT技术。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:31",
      "text": "主题娱乐节目内核黄，我们号称哈克尔，但是也没有干货，想听就听，不想听就别听。您可以为本节目捐款，地址是kero panic dota、fx flash donate. 捐款结构随意，只要是八的正常储备就可以。捐款会给你带来什么，不捐也不会让你说句什么。我们的口号是no heart feelings，如果你有任何反馈可以发电脑。Hi at court, panic dot FM. 同时也欢迎你收听real主持的风投圈，我们下期节目再会。别，振宇你也收个尾啊啊啊。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:08",
      "text": "到我们了好吧？也感谢大家也也再次感谢大家收听周宇。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:14",
      "text": "这个捧哏的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:15",
      "text": "今天一直不在状态没有我刚刚在在看一些until de的马尾，我在看那个flag的，我刚发现英格兰的那个国旗叫国旗，他他居然他居然要非常长的一组这个second才能对，才能实现。他他为什么要这么长？",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:34",
      "text": "就是GBENG，GB是great britain.",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:38",
      "text": "然后他他在前面还要加一个黑色飘动旗帜的符号。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:44",
      "text": "这就是你可以你不加那个的话，那个旗帜就不是飘动的，它就是一个方形。就好像我觉得这个其实就是英格兰是个地区级，就好像我猜如果有巴登弗腾堡州周期的话也是一样的。对，甚至如果你要加一个什么士旗的话，有可能会更复杂。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:03",
      "text": "所以它可能就是因此它首先那个飘动的旗的那个旗标，就是和国旗的那个那个旗是不一样的。而且他不仅用了两位，他肯定就是后面有金融是要有三位或先用国家，然后再用地区这样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:20",
      "text": "对他不是说要用那个什么tag来实现，对吧？就用那个什么tag，这个也这也。",
      "speaker": "发言人4"
    },
    {
      "time": "01:30:26",
      "text": "算是一种tag.",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:28",
      "text": "好像对，它并不是用单纯的国旗的那个，就他不算在国旗的那个规范里面，它算在那个tag的那个规范里面，对吧？就是他后面加了一个tag，这个tag来标明除了这个国家后面的一个具体的地区，这样子的一个组合。对，他是这样实现的吧？对，是应该是这样。是的。对，所以这个也可以解决刚才real的那个问题。就是说万一两位的国家代码不够用的问题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:31:01",
      "text": "我们节目不是结束了吗？钱生俞。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:09",
      "text": "OK好，也。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:11",
      "text": "再次感谢大家收听全自创。",
      "speaker": "发言人4"
    },
    {
      "time": "01:31:17",
      "text": "我的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:21",
      "text": "为什么。",
      "speaker": "发言人4"
    },
    {
      "time": "01:31:22",
      "text": "给我录一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:24",
      "text": "第64期节目？也欢迎大家来信跟我们交流和反馈。我们的邮箱地址是4 cast at the trip点com PODCSTHTHETYPE点COM。同时大家也可以通过这个邮箱地址在paypal和支付宝上给我们捐赠。如果大家想在社交网络上关注我们我们在新浪微博、twitter和微信上的ID都是the type THETYPE，在facebook上搜索type is beautiful也可以找到我们。好，就到这里，感谢大家收听我们下次节目，再见，拜拜拜拜，拜拜。",
      "speaker": "发言人4"
    }
  ],
  "lab_info": {
    "summary": "本期播客聚焦MOJ（emoji）的深入探讨和技术交流，主播们讨论了emoji与Unicode标准的紧密联系，以及标准发展对emoji设计的影响。他们提及Unicode标准在处理中文字符上的挑战，强调了emoji在数字文化中的广泛应用和全球文化交流中的重要角色。主播们分享了个人经历，强调了正确理解和应用emoji对于促进跨文化沟通的重要性，并对emoji的未来发展方向表达了乐观态度。最后，他们鼓励听众在使用emoji时更加负责任，共同促进健康、有效的数字文化环境。",
    "qa_pairs": [
      {
        "question": "汶川西半东营剧eric，你回家过年了吗？",
        "answer": "我回家了，时隔三年回到了汶川西半球。",
        "time": "00:01:17"
      },
      {
        "question": "秦真宇，您正在收听IT技术主题娱乐节目内很恐慌，新年过得怎么样？",
        "answer": "挺好的，这一次滑的非常爽，赶上了两个好天气。不过回来后因为下雨，情况有点糟糕。",
        "time": "00:01:04"
      },
      {
        "question": "郑宇新年怎么过的？",
        "answer": "我就在上海附近，元旦去杭州参观了中国美院王树先生的作品群。",
        "time": "00:03:44"
      },
      {
        "question": "黄浦江兵秦真宇，你们好，新年快乐，今年春节是怎么过的？",
        "answer": "我在上海附近，元旦去杭州参观了中国美院王树先生的作品群。",
        "time": "00:03:44"
      },
      {
        "question": "锐欧是否一直在深圳过年？",
        "answer": "对，春节新年我在家里休假，因为上个月一直在出差，挺累的。",
        "time": "00:04:08"
      },
      {
        "question": "古德隆查普夫老奶奶的字体被数字化了吗？",
        "answer": "是的，她的字体“黑色安提卡”终于被数字化了，这款字体是基于她的手写字体设计的，由迪德·芬迪娜·迪纳乌鲁斯负责数字化工作。",
        "time": "00:05:02"
      },
      {
        "question": "这次串台节目主要聊些什么内容？Surrender n gate PaaS这个东西是什么？",
        "answer": "我们计划详细讨论MOJ在技术上的拯救世界作用，以及背后的一些技术细节，特别是关于sorer n gate PaaS（代理对）的事情。Surrender n gate PaaS是一种代理对技术，最近由于MOJ的普及，很多环境开始更好地支持这一技术，以处理非常用且位置较后的字符。",
        "time": "00:10:49"
      },
      {
        "question": "在UTF16编码中，为什么会出现代理队（surrogate）的概念？",
        "answer": "当字符超出基本多文种平面时，无法直接使用单个字节表示，所以需要通过代理队来代替，即用两个字节组合成一个新的代码以适应更大的字符范围。这样，在基本多文种平面内的字符就直接使用，而在超出该平面的字符则使用代理队进行编码。",
        "time": "00:17:43"
      },
      {
        "question": "现在看来，四字节在存储和传输中是否足够使用？",
        "answer": "虽然目前四字节可能看起来够用，但考虑到未来的发展速度，四字节可能很快就不够用了。",
        "time": "00:19:30"
      },
      {
        "question": "UTF16编码的复杂性是源自一开始就设计好的吗？为什么现在倾向于使用UTF8而不是其他编码格式？",
        "answer": "不是，这个复杂性来自于历史上的逐步演化。最初可能设计了UCS2，但随着需求增长，发现需要对UCS2进行修改和补丁修复，最终形成了目前的UTF16混合编码方案。UTF8的优势在于其灵活性和没有大小端问题，能够在任意位置断开并重新连接，具有较好的纠错能力和普遍支持性。虽然在内部处理时，部分系统选择UTF16或UTF32以方便对齐和提高效率，但在传输和存储过程中，UTF8更为合适。",
        "time": "00:20:35"
      },
      {
        "question": "早期在内部处理文本时，为何没有直接采用更高效的编码方式如UTF32或UCS4？",
        "answer": "主要是由于历史和技术实现上的局限性，导致在内部处理时选择了像UTF16这样的变长编码方式，而非一开始就设计高效的固定长度编码。",
        "time": "00:21:19"
      },
      {
        "question": "对于只处理基本多文种平面内的字符，是否应该选择UTF8编码？",
        "answer": "是的，对于只处理基本多文种平面内的字符，使用UTF8编码相对更为合理，因为它能有效避免额外的字节开销。",
        "time": "00:21:39"
      },
      {
        "question": "Java中对于MGI字体问题的解决情况如何？",
        "answer": "Java从Java 5之后改用UTF16编码，尽管如此，仍存在一些问题，但总体上已有所改善。关于MGI字体默认为彩色字体的问题，不同的平台和应用采用了不同的方法来实现彩色字体，如苹果设备和安卓设备分别使用了不同的技术方案，其中苹果采用的是open type格式支持的矢量图（SVG），而google的noto字体则是使用PNG位图。",
        "time": "00:25:38"
      },
      {
        "question": "OpenType格式中的颜色管理机制是怎样的？",
        "answer": "OpenType格式支持通过Color Pilot Table（CPAL）以及其它表如CBDT（Color Bit Map Data Table）和CBLC（Color Bit Map Layout Table）来管理彩色字体中的颜色，这些机制可以实现渐变色和与单色字体的兼容性，同时也支持不同的图像格式，如PNG、JPEG、TIFF和PDF等。",
        "time": "00:30:23"
      },
      {
        "question": "在Unicode中，是否所有符号都有对应的文本形态？",
        "answer": "Unicode中大部分符号都有对应的文本形态，但也有部分符号仅存在于MOJI形态，没有对应的文本形态。对于有对应关系的符号，是从MOJI形态到文本形态的一对一映射关系，遵循一定的规则，并且是可以逆向转换的。",
        "time": "00:43:13"
      },
      {
        "question": "在Unicode中，如何处理肤色人种的不同显示形态？",
        "answer": "Unicode为肤色人种编码时，虽然在文本形式下可能无法直接表达肤色，但可以通过肤色定义符实现。在MOJI形态中，某些符号可能带有颜色表达，而在文本形态中则可能表现为两个符号，一个代表人物形状，另一个代表肤色浓度。",
        "time": "00:44:09"
      },
      {
        "question": "UNICODE是如何将一些符号如箭头从文本形式转化为表情符号形式的？",
        "answer": "在Unicode规范中，一些符号（例如箭头）原本就有纯文本形式的编码。随着MOJI的引入，也为其分配了新的编码。为了区分这两种形态，会在MOJI编码后添加额外的标志符来表明它是MOJI版本还是文本版本。如果软件支持并有相应的字体，可以从MOJI形态切换回文本形态。",
        "time": "00:44:29"
      },
      {
        "question": "如何在不依赖语言切换的情况下，控制普通字符和MOJI的显示形态？",
        "answer": "为了解决仅依靠语言切换显示形态的问题，引入了变体序列（Variation Sequence），通过在字符码位后添加特定的变体序列符（VS），可以指定该字符应以文本形式还是MOJI形式显示。Unicode中定义了多个变体序列号，如15号代表文本形式，16号代表表情符号形式，通过正确使用这些变体序列，可以在不同环境下确保字符按照预期形态显示。",
        "time": "00:46:01"
      },
      {
        "question": "在新的一代操作平台和环境中，变体序列是如何实现的？",
        "answer": "在新的操作平台和环境中，变体序列（称为VS，即变体序列）可以实现对特定字符进行强制指定，使其显示为某种表意字的一体字样式。例如，通过在汉字后添加编号来实现不同的变体形式，如“回”字的不同写法。这种操作在日本需求较大，但在国内并不普遍。",
        "time": "00:48:46"
      },
      {
        "question": "泰国人是否经常使用特定的问候方式？",
        "answer": "泰国人非常注重合掌这一礼仪，即使日常对话也常常会使用这种问候方式，而在泰国新闻节目中，主持人结束时也会行合掌礼，这是他们的文化习惯。",
        "time": "00:50:49"
      },
      {
        "question": "日本最受欢迎的emoji是哪个？",
        "answer": "日本最受欢迎的emoji与全球最常用的可能不同，日本民众对英语的需求较高，但具体最受欢迎的emoji没有明确指出。",
        "time": "00:51:35"
      },
      {
        "question": "MOG中有哪些种类？",
        "answer": "MOG（Multiple Octet Graphical）中包含单体和序列号，其中常用序列有三种：组合序列（combining sequence）、修改序列（modification sequence）和旗帜序列（flag sequence）。组合序列用于组合不同字符，如数字与键帽的组合；修改序列用于添加肤色变化以适应不同肤色；旗帜序列则用于表示不同国家的国旗。",
        "time": "00:52:46"
      },
      {
        "question": "EMOJI的“笑点”是什么？",
        "answer": "“笑点”实际上是一个表情符号，它可以配合其他符号来改变含义，比如将一个正常的脸部表情与特定标签结合，使其表达出“笑点”或“笑哭”的意思。",
        "time": "01:00:37"
      },
      {
        "question": "MOG中的标签序列是什么以及目前的应用状况？",
        "answer": "标签序列（tag sequence）是一种尚未实现的UNICODE草案，旨在通过添加标签来提供更多样化的表达可能性，如改变头发颜色、指示方向等。虽然该草案已被撤回，但其中的理念已引起关注，并有部分实现案例。",
        "time": "01:00:37"
      },
      {
        "question": "在阿拉伯语和古汉语中，是否存在对骆驼和马的不同描述？",
        "answer": "是的，阿拉伯语中有多种描述骆驼的方式，古汉语中也有很多不同的马和鱼的描述。",
        "time": "01:06:47"
      },
      {
        "question": "是否所有语言都能无限增加词汇量？",
        "answer": "全球人民的智慧可以使得各种语言拥有无限多的词汇表达。",
        "time": "01:06:57"
      },
      {
        "question": "“自卫错”是什么意思？",
        "answer": "“自卫错”在中文中一般被翻译成“醋”，它是一个音位，在文字书写中作为区分不同意义的最小单位。",
        "time": "01:07:46"
      },
      {
        "question": "文本分割法（Unique Tax Sixteen）的作用是什么？",
        "answer": "文本分割法是为了定义单词边界和字符边界，确保在Unicode标准下，即使是一个看起来像一个字的字符，也能被正确识别和处理。",
        "time": "01:08:23"
      },
      {
        "question": "Unicode制定规则的初衷是什么？",
        "answer": "Unicode制定规则最初是为了处理泰文、藏文等语言中复杂字符组合问题，以及解决像韩文这样的拼音文字如何在计算机系统中正确存储、检索和显示的问题。",
        "time": "01:09:17"
      },
      {
        "question": "在MOG（可能指某类字符）中，怎么定义和处理？",
        "answer": "在MOG中，一个字符可能由多个马位组成，例如数字在计数时可能被视为一个字符，也可能由多个马位构成，这需要有统一的标准和实现方式。",
        "time": "01:12:26"
      },
      {
        "question": "韩文的处理方式有何特殊之处？",
        "answer": "韩文虽然是拼音文字，但其组合方式类似汉字，Unicode为此进行过调整，以适应搜索、编辑等应用场景的需求。",
        "time": "01:11:18"
      },
      {
        "question": "推特为什么限制中文、日文和韩文的字数为140个字符？",
        "answer": "推特早期限制字数主要是受到短信时代的技术限制，以及模拟短信标准的影响，并非针对中文、日文和韩文的特定限制。",
        "time": "01:15:39"
      },
      {
        "question": "Unicode对推特等平台数字符数量有何影响？",
        "answer": "Unicode规范要求在计数时应考虑字符的实际形态和意义，例如将一个字符与其组合的部分视为一个整体来计算，这导致推特等平台在处理包含组合字符的文本时出现了一些复杂逻辑和限制。",
        "time": "01:22:40"
      },
      {
        "question": "在推特等平台上，如何处理超过140汉字的限制？",
        "answer": "可以利用一些隐藏的方法或耍赖皮的方法来尝试突破，但这种方式可能会导致安全漏洞问题。目前最稳妥的办法是让操作系统通过标准、最新的API来处理。",
        "time": "01:23:35"
      },
      {
        "question": "对于编程中的bug和不规范的问题，有什么建议吗？",
        "answer": "建议开发者在整理和重构现有技术时，要对照标准来检查自己写的软件和环境是否都按照最新的、unique的标准去做。",
        "time": "01:24:08"
      },
      {
        "question": "Unicode中关于国旗和区域指示符的定义有何改进？",
        "answer": "在Unicode 9.0版本中，对于国旗和区域指示符的定义有所改进。例如，现在奇数个国旗可以被断开，偶数个则不能，以保证国家标识的准确性。同时，区域指示符由原来的两位变为两位或三位组合定义，以应对国家代码不够用的情况。",
        "time": "01:24:46"
      },
      {
        "question": "是否存在针对区域和语言代码的规范？",
        "answer": "是的，区域和语言代码都有其特定的规范，并且它们也有不同层级的标准，如ISO标准就有两位和三位的区分。Unicode会引用相应的标准来确定其规范。",
        "time": "01:26:37"
      },
      {
        "question": "在IT技术主题讨论中，是否有提及未来可能加入的新元素？",
        "answer": "讨论中提到了下一版本的Unicode可能存在新元素的加入，比如一个红头发的光头男孩表情包，但具体实现和调优细节则是后续的问题。",
        "time": "01:27:15"
      },
      {
        "question": "对于英文国旗GBENG的表示方式，它是如何实现的？",
        "answer": "英格兰国旗GBENG的表示方式是通过组合国家代码和区域标识符来实现的，它不仅包含了国家GB（代表Great Britain），还通过一个tag来标明地区级的英格兰。这种实现方式解决了两位国家代码可能不足用的问题，并且遵循了相关规范，不属于国旗规范本身，而是属于tag规范。",
        "time": "01:30:28"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "自弹自唱与内核恐慌串台第六期：新年欢聚与家族探索",
        "summary": "在2018年1月9日的这一期，主播们分享了他们的新年庆祝方式，包括旅行和家庭团聚。他们讨论了家族历史的探索，特别是关于家族字辈和祖先坟墓位置的发现。此外，还提到了对家族传统的遵守和变化，以及对某些家族成员烹饪技艺的幽默评价。"
      },
      {
        "time": "00:04:17",
        "title": "古德隆查普夫字体数字化与ISOIEC 10646新版本发布",
        "summary": "近期，著名书法家古德隆查普夫的字体“黑色安提卡”成功数字化，这款字体保留了原汁原味的手写风格，只有大写字母和小型大写字母，非常适合用于展示。此外，新版ISOIEC 10646在圣诞节前夜发布，此次版本更新是为了与半年前发布的Unicode 10.0版本同步，标志着国际标准化组织对新标准的官方认可。"
      },
      {
        "time": "00:10:03",
        "title": "MOJ背后的技术解析",
        "summary": "本期节目聚焦于MOJ如何再次拯救世界，尤其深入探讨了其背后的技术细节，包括sorer n gate PaaS（代理对PaaS）的概念及其在UTF16和代理队中的应用。讨论强调了MOJ加速了环境对代理队支持的进程，揭示了因MOJ的广泛应用而暴露的各类技术问题，如bug修复和对罕用字符的支持。此外，也提及了早期Java和Windows API等技术在这一领域内的局限性。"
      },
      {
        "time": "00:12:44",
        "title": "UCS2到UTF16的编码演进历史",
        "summary": "在Unicode标准正式出现之前，由于对宽字节的需求，导致了UCS2的产生，作为早期的编码标准。随着字符数量的增加，UCS2的双字节固定长度无法满足需求，从而引入了变长的UTF16编码，以解决扩展性问题。此外，讨论还涉及到Windows API对宽字节和窄字节的不同处理，以及Python等编程语言对宽字节版本的支持情况。这一演进过程反映了实践需求推动编码标准发展的历史。"
      },
      {
        "time": "00:17:02",
        "title": "UTF-16编码及其复杂性探讨",
        "summary": "讨论集中在UTF-16编码的复杂性上，特别是如何处理超出基本多文种平面的表情符号和其他特殊字符。UTF-16通过使用代理对来解决这些问题，导致其成为一种变长编码，可以是单字节、双字节或四字节。此外，还讨论了UTF-8的优缺点，强调了其在存储和传输过程中的优势，如高效性和不区分大小端的特性。同时，指出了在计算机内部处理时，定长编码更为有效。"
      },
      {
        "time": "00:21:17",
        "title": "UTF编码选择及内部表示问题探讨",
        "summary": "在软件系统开发中，UTF-16和UTF-32编码因其在内部表示时的对齐便利性和支持随机访问的能力而被广泛采用。讨论中指出，UTF-8虽普及，但因处理变长字符时的局限（如不能直接跳至文本中某字符位置）而显现出不足。特别地，UTF-16对于非ASCII字符的支持优于UTF-8，但引入了处理代理项等复杂性。此外，历史上一些API和编程语言（如Windows API和C++的wchar_t）仅支持双字节，进一步复杂化了编码问题。讨论还触及了因编码转换不当导致的乱码问题，强调了使用成熟库进行编码转换的重要性。最后，提及Java自Java 5起采用UTF-16，虽带来新挑战，但也促进了对旧环境的加强。"
      },
      {
        "time": "00:25:32",
        "title": "彩色字体技术的发展与应用",
        "summary": "讨论了彩色字体技术的重要性及其在不同平台（如苹果、安卓和Windows）上的实现方式。在安卓和苹果设备上，常用的彩色字体实际上是通过嵌入PNG图片实现的，而Windows则采用了SVG格式。此外，提到了Adobe和Firefox推动的OpenType SVG字体标准，以及Adobe在Photoshop和Illustrator中对此格式的支持，展示了彩色字体技术的当前趋势和未来发展方向。"
      },
      {
        "time": "00:27:39",
        "title": "探讨字体格式与图像处理技术",
        "summary": "对话内容涉及了SVG矢量图和PNG位图的使用，以及Google采用的Noto字体和苹果的私有技术。讨论还涵盖了OpenType字体格式，该格式既支持位图也支持矢量图，并提到了Color Palette Table和Microsoft的MG实现方式。此外，还讨论了分色管理和图层概念的重要性，以及如何通过不同的技术来提高图形处理的效率。最后，探讨了苹果的SBIX表和色彩管理的细节，包括使用BGRA格式表示颜色。整体上，这段对话深入讨论了字体文件和图像处理技术的复杂性和多样性。"
      },
      {
        "time": "00:33:29",
        "title": "探讨Unicode与字符编码的复杂性",
        "summary": "对话中讨论了Unicode编码的特性及其在表示文本和表情符号（AMOJI）时的复杂性。指出Unicode不仅是一种编码方式，还是一个基础性的系统，强调了其在处理不同书写系统、符号及其读音方面的特殊性。进一步讨论了某些符号既可以作为文本也可以作为表情符号使用时的混淆问题，以及解决这一问题的优先顺序和指定方法。此外，提到了一种神奇的用法，即通过指定语言来解决这一混淆。最后，提到了ISO与Unicode合作创造了一种特定于AMOJI的语言代码。"
      },
      {
        "time": "00:36:42",
        "title": "探讨MG符号及文本形式的表示方法",
        "summary": "对话集中讨论了ZSYE和ZSYM的含义，其中ZSYE代表MOJI，表示图形形式；ZSYM代表以文本形式出现的符号。讨论还涉及了这些符号在语言列表中的应用，及其如何影响沟通方式，暗示着对于特殊符号编码的理解和应用，及其在技术文档和网页设计中的潜在用途。"
      },
      {
        "time": "00:39:27",
        "title": "Unicode中EMOG Locale Extension的探讨",
        "summary": "对话中讨论了Unicode系统中的EMOG Locale Extension，这是一种允许在特定语言环境中扩展字符集的机制。通过在语言标签后添加特定的标记，如“-EM”，可以表示使用了扩展的字符集，这些字符集中包含了对于文本形态有明确定义的符号。讨论还涉及了这种扩展机制的可逆性，即从扩展的字符形态转换回标准文本形态时，信息是否完全保留。特别指出，一些符号在扩展集中有对应的文本形式，但并非所有符号都能进行一对一的转换。对于新引入的符号，如不同肤色的人种符号，转换后会失去颜色信息，只保留基本的符号形态。此外，还提到了某些符号如箭头、圆圈、方块等，在标准和扩展字符集中都存在，但形式不同，这可能引起显示上的差异。"
      },
      {
        "time": "00:45:12",
        "title": "解决字符显示问题的变体序列方法",
        "summary": "讨论集中于如何通过使用变体序列(VS)来解决字符在不同环境下的显示问题，特别是在文本形式和表情符号之间的切换。变体序列作为Unicode标准的一部分，允许在原字符后添加特定的序列码，以强制字符以预期的形式显示。此外，还提及了对于一体字的特殊需求和在日本对于表情符号的使用情况，强调了VS在满足特定显示需求中的重要性。"
      },
      {
        "time": "00:52:45",
        "title": "探讨Unicode中Emoji的组合规则与文化意义",
        "summary": "对话详细讨论了Unicode中Emoji的三种基本组合方式：组合序列、修饰符序列和旗序列，及其文化与技术层面的意义。首先，组合序列通过键位和键帽的结合展示特定表情或符号，如特定编号和emoji的组合。其次，修饰符序列允许在与人脸相关的emoji后添加肤色修饰符，反映了对多样性与包容性的考虑，但同时引发了对于肤色符号使用逻辑和文化敏感性的讨论。再次，旗序列通过将国家代码与通用旗符号结合，展示不同国家的国旗。此外，还提到了Unicode对于家庭、职业等符号的自由组合，以及提案中的标签序列，尽管这一部分仍在草案阶段。整个对话不仅展示了Emoji编码的复杂性，也反映了社会文化对于技术标准制定的影响。"
      },
      {
        "time": "01:01:16",
        "title": "探讨Unicode扩展及标签应用的可能性",
        "summary": "对话内容涉及Unicode的技术扩展，特别是对头发颜色、方向性符号（如手枪emoji的方向限制）和国旗表示的讨论。提出通过添加标签来实现对emoji更细致的定制，如改变emoji的方向或增加新的表示（如英格兰旗）。讨论还触及了Unicode企图覆盖所有可见事物的野心及其面临的挑战，同时比较了不同文化中对特定事物（如雪、骆驼）描述的差异，强调了全球人民智慧在丰富Unicode方面的潜力。"
      },
      {
        "time": "01:07:42",
        "title": "Unicode编码和多语言文本处理的挑战",
        "summary": "讨论集中在Unicode编码系统如何处理不同语言的文本，特别是如何定义一个“字”及其在计算机系统中的表示。Unicode的第29号标准附件“unique tax sixteen”（文本分割法）被引入以解决如何识别和分割不同语言文字的问题，尤其是对于像泰文、韩文这样有特殊书写规则的语言。此外，还讨论了Unicode在处理韩文时遇到的挑战，例如，韩文由声母和韵母拼合而成的特性使得其在计算机系统中难以分割和检索。对于编程语言如Ruby在处理字符串时，因为简单的按码位计数方法导致的问题也被提及。最后，提到了社交媒体平台Twitter对字符数限制的调整，以及对中日韩文字的特殊处理，反映了在实际应用中对Unicode编码系统处理多语言文本的考量。"
      },
      {
        "time": "01:14:34",
        "title": "探讨中西方文字信息量差异及社交媒体字数限制",
        "summary": "讨论集中在中西方文字的信息量差异，特别是如何在社交媒体上体现。提到中文由于其表意特性，信息量大，140字的限制在中文和英文中的实际表达能力存在巨大差异。进一步讨论了Twitter的字数限制历史和技术背景，以及如何计算字符数引发的技术问题，如emoji和特殊字符的计算方式。同时指出，不同技术实现可能导致的显示和删除操作问题，强调了遵循现有技术标准的重要性。"
      },
      {
        "time": "01:22:18",
        "title": "探讨Unicode和社交媒体字符限制的复杂性",
        "summary": "对话深入讨论了Unicode编码在社交媒体平台上的应用，特别是如何处理URL和媒体链接的字符计数，以及这些平台如何应对文字和符号的显示限制。讨论还涵盖了Unicode对于不同国家和地区的表示方式，以及这些表示方式在技术实现上的挑战。此外，还谈到了社交媒体安全问题和编码标准更新的重要性，强调了遵循最新API和标准的必要性以避免潜在的安全漏洞。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "日期：2018年1月9号"
            },
            {
              "children": [],
              "content": "节目：自弹自唱与内核恐慌的串台"
            },
            {
              "children": [],
              "content": "期数：自弹自唱第64期，内核恐慌第549期"
            },
            {
              "children": [],
              "content": "主播：汶川西半东营剧eric、黄浦江兵秦真宇、real、郑宇"
            }
          ],
          "content": "主题与节目信息"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "全球首家用华语制作的字体播客节目"
                    },
                    {
                      "children": [],
                      "content": "MOJ的普及与技术背景"
                    }
                  ],
                  "content": "MOJ的定义与用途"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "从单字节到双字节，再到变长编码的演变"
                    },
                    {
                      "children": [],
                      "content": "UTF-16与代理对的讨论"
                    },
                    {
                      "children": [],
                      "content": "字体的位图与矢量图的区别"
                    }
                  ],
                  "content": "字体技术的发展"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "MOJ字体默认为彩色字体"
                    },
                    {
                      "children": [],
                      "content": "对SVG矢量图的支持与实现方式"
                    }
                  ],
                  "content": "彩色字体与SVG支持"
                }
              ],
              "content": "MOJ和字体技术"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "代理队与UTF-16编码问题"
                    },
                    {
                      "children": [],
                      "content": "MOJ对Unicode标准的挑战与推动"
                    }
                  ],
                  "content": "Unicode的复杂性"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "语言代码与区域指示符"
                    },
                    {
                      "children": [],
                      "content": "对不同语言和文字的支持问题"
                    }
                  ],
                  "content": "国际化与语言编码"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "自动化与手动编码问题"
                    },
                    {
                      "children": [],
                      "content": "字符串计数在不同语言环境下的差异"
                    }
                  ],
                  "content": "字符串处理与计数问题"
                }
              ],
              "content": "Unicode与国际化问题"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "特定表情符号的广泛使用"
                    },
                    {
                      "children": [],
                      "content": "MOJ表达的文化差异"
                    }
                  ],
                  "content": "MOJ在社交媒体的普及"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "文本形态与图形形态的转换方法"
                    },
                    {
                      "children": [],
                      "content": "语言代码在形态转换中的作用"
                    }
                  ],
                  "content": "MOJ与文本形态的转换"
                }
              ],
              "content": "社交媒体与表达符号"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "代理对与UTF-16编码导致的问题"
                    },
                    {
                      "children": [],
                      "content": "MOJ字体的位图与矢量图实现"
                    }
                  ],
                  "content": "实现问题与bug"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "新版本的Unicode带来的变化"
                    },
                    {
                      "children": [],
                      "content": "对现有软件与环境的兼容性挑战"
                    }
                  ],
                  "content": "Unicode标准的更新与改进"
                }
              ],
              "content": "技术实现与挑战"
            }
          ],
          "content": "主要讨论内容"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "讨论强调了标准化的重要性，以及技术更新对现有环境的挑战。"
                },
                {
                  "children": [],
                  "content": "MOJ的普及不仅推动了技术的发展，也带来了新的文化表达方式。"
                }
              ],
              "content": "对话覆盖了MOJ技术、Unicode标准、国际化问题以及社交媒体中的表情符号使用等多方面内容，反映了当前技术实现中的挑战与未来发展方向。"
            }
          ],
          "content": "总结"
        }
      ],
      "content": "对话脑图摘要"
    }
  }
}