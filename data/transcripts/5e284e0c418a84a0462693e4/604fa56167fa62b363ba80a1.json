{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "604fa56167fa62b363ba80a1",
  "title": "63. Kerning Panic·字谈字串（十）宗师级程序员的排印解决方案",
  "task_id": "klrbn2ywgl4895zy",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "我现在感觉耳机很有问题，因为我现在是用的是那个air pods。等一下我换一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:06",
      "text": "不也不要用那个无线的搞，找个有线的耳机，不然会很不稳定的。人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:11",
      "text": "主要是我那个手机没什么电行，我换好了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:14",
      "text": "好不好意思。所以这回那个苹果十二的背上那个贴的充电就有用了。那里可以去边充电，然后下面插一个无线耳机。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:23",
      "text": "没有，因为我买的是mini然后这个电那就感觉超小用用到一天晚上就差不多就不够了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:29",
      "text": "真的很差的吗？我还想说那天我去店里试了一下那个mini的手感，我觉得还挺不错的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:34",
      "text": "Mini是很好啊，就是很好，那它肯定电池就没有其他那么大。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:39",
      "text": "可能就是很纠结这个事情，好烦。他能不能把那个摄像头剪到只剩一个，然后腾点空间给电池。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:48",
      "text": "你就跟苹果说吧。好了，我们开始录。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:10",
      "text": "大家好，今天是2021年的3月16号，自弹自唱的第147期。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:16",
      "text": "同时也是内核恐慌的第63期.",
      "speaker": "发言人3"
    },
    {
      "time": "00:01:19",
      "text": "这也是自弹自唱与内核恐慌的串台自弹自唱的第十期。自弹自唱是the type旗下全球首家用华语制作的字体排印主题播客节目。我是主播汶川西办东营局艾瑞克。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:33",
      "text": "我是主播黄浦江边清蒸鱼钱蒸鱼。",
      "speaker": "发言人4"
    },
    {
      "time": "00:01:37",
      "text": "恐慌是一档大致以计算机科技为主题的娱乐podcast。我们号称硬核，但是也没有什么干货，想听就听，不想听的就别听。我们的网址是PAN dot ICU。您可以在网站上找到订阅我们的节目，订阅我们节目的方法以及联络我们的方式。我是吴涛。",
      "speaker": "发言人3"
    },
    {
      "time": "00:01:54",
      "text": "我是real.",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:55",
      "text": "有台主播你们好。我们居然已经开始做第十期的串台了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:59",
      "text": "两位数了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:01",
      "text": "托你们的福，我们才能够保持这个更新的节奏。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:05",
      "text": "没关系，反正这一期的话主要是吴涛在说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:08",
      "text": "我只负责听。是这样吗？我怎么为什么我事先没有得到通知。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:14",
      "text": "现在你知道了，所以让你写这个提纲。因为这次我们来串台的一个非常重要的主题，宗师级程序员的字体排音解决方案。我们要来终于可以来拜一拜我们的高德纳大先生吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:28",
      "text": "是的，其实我不知道你们两个，就是我跟real都只是用邋遢写过写过论文而已。你们两个或者说不如我们四个人轮流来说一说怎么知道拉太和或者说泰和这段事情的。我我我先说吧，我应该是在本科的时候知道的这个人他的事以及他写的这本书。但是那个时候我对tech这个东西还没有什么概念。我在本我大概是在本科的时候接触了外部编程，然后学了什么HTMLSSS之类的。然后那个时候正好是赶上了web前端开发的一次革新。就是在在我上大学之前，web开发基本上就是你在你在photoshop或者是whatever什么dream wever之类的地方里面做一个设计。然后把这个设计切成很多小块儿，然后这个设计工具会帮你转换成一个table，然后你用编程语言去等于轮流转换这个table里面的每一个块。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:30",
      "text": "然后在我上大学之后就我大学毕业之后，外部开发的标准变成了你要以语义的方式去描述整个文档的结构，然后用CSS去改变每个文档的样式。然后大概就是在这个时候，我隐约听说了在在桌面出版界也有这么一个东西就叫他。但是真正用到它还是到了德国之然后写硕士论文的时候就大概明白了这个东西它的来历以及它的用处。然后怎么说，用自己对HML和CSS的理解去去使用它，然后碰得头破血流。然后在历经了坎坷之后，终于把论文搞出来了。这大概就是我跟tape拉type的全部的渊源。",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:12",
      "text": "然后我在毕业之后，2010年刚刚加入TIB的时候，对TIB的贡献之一就是我在2010年写过一篇computer modern的故事，就是高德纳发明的，不是他发明的。他电子数字化的这款字体，然后用来排他的这个POCP的这本书，基本上简短的解释了这个垃圾和整个的渊源。各位如果有兴趣的话，可以去看一下那个文章在在type点com，然后你可以在上面搜computer modern，然后应该能搜到这篇文章是2010年2月05号写的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:49",
      "text": "当然我们也会把这篇文章的链接放到今天的show note里面去，大家可以去看2010年时候的文章。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:58",
      "text": "行，我说完了。那接下来谁？Rex不是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:05:01",
      "text": "rex心系站长。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:05",
      "text": "那个real你说一下。",
      "speaker": "发言人3"
    },
    {
      "time": "00:05:07",
      "text": "我第一次接触应该是用来拉开写那个时候，对等一下这玩意到底怎么念，我们要不先普科普一下拉泰。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:15",
      "text": "你念的是对的太狠。",
      "speaker": "发言人3"
    },
    {
      "time": "00:05:17",
      "text": "是拉不是勒对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:19",
      "text": "拉我反正我一直念拉太。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:05:22",
      "text": "其实有人练勒的，但是一般我们都练拉好的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:27",
      "text": "我当时是在上大学本科的时候，写作业，我因为我不是写字，就是手写很丑，然后我就不想手写。我都一直从大概应该从大学开始，基本上交作业都没有手写过，除了考试是必须手写的。那个时候都是用这个电脑排版好，然后就是去打印，然后再交。后来是因为学科的，就是你有几个课程的关系，它会涉及到比较多的公式和数学的一些排版，还有像一些这种图形什么的。然后我就想说找一个特别好用的一个工具来解决这个问题。当时word肯定是不行的对吧？当时word很久已经没有，就是那个数学排版工具实在是太垃圾了。所以后来就兜兜转转，当时也在玩像那个linux那些系统，然后就在找到了这么一个工具，应该是受了谁的蛊惑来着，我想想应该是王莹。如果没错的，没记错的话。对，当时他不是写了有有几篇还影响挺深的一个文章，其中就是在兜售拉太和这个东西，然后我就去学了一下，然后费了牛逼自尽，装上了一个我们叫什么一个distribution。然后就开始用那个写作业，后来是写毕业论文，然后去国外上学写作业和毕业论文差不多也就这么改，之后就再也没用过，差不多是这么一个过程。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:55",
      "text": "所以你的论文也是用拉推和写的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:58",
      "text": "我毕竟读CS，那肯定你还是要对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:02",
      "text": "这两者之间有必然的关联吗？就是我是我相信大部分我们的听众里面，读4S的人也未必是用拉泰克写的辩论。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:11",
      "text": "或者这么说，如果你想用lta写写论文，然后你又不是CS的，你其实是不是很尴尬？",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:17",
      "text": "那可不一定，拉泰克其实现在基本上你觉得现在拉泰克最大的用途是在哪儿？我觉得他是学学业界任何业界需要公示的地方。但实际上computer science并不是一个最需要公示的地方。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:33",
      "text": "OK but anyway那个时候我需要，然后但我当时有一个在我们在学校外面租房子住，有一个室友他是工程的，就是那种engineering。他好像也是是用那个拉钛写毕业论文比较多，因为他们论文也比较长，有比较多复杂的计算的过程，所以他们也是用那个的，所以反正就是都在用。你就反而是用word的那些是比较相对来说少一点点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:59",
      "text": "对，征宇你是怎么用上？你是怎么接触到tag的吗？你介绍一下好了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:05",
      "text": "其实征宇也是本科用拉泰和写的论文。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:10",
      "text": "怎么可能？我觉得我应该引用那个，就是你们先聊，我有点事先走，我其实没有我其实至今没有用过太和来做任何事情。应该说对我怎么知道泰和的，我觉得我是因为先知道了你们，所以才知道了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:08:30",
      "text": "太这我们受宠若惊，我们简直居然做到了什么新进火船的这样一个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:37",
      "text": "对我对他的认知其实是一个就像刚才瑞和吴涛也说的，他是一个在公事领域非常有用的这样子的一个排版工具。但其实我曾经大概在可能在五六年前，一度有有想过要去用泰国。因为我当时有一个非常实际的需求，就是我当时差不多每个季度都会有一个类似像内部刊物排版的这样一个工作。那个刊物的页数非常的多，大概是在千页这样子的一个数量级的。所以我当时其实有想过要用tag去做一个比较自动化的排版的流程，但后来一直一直没有动力去做这个事情等等。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:17",
      "text": "你说你每个月要排1000页的内部刊物。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:20",
      "text": "每个季度左右。对，每个季度三个月左右。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:23",
      "text": "每个季每三个月要排1000页。Oh my, 我不禁心里涌起了一丝怎么说同情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:31",
      "text": "什么内容？好奇的问一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:34",
      "text": "是我当时在的一个团队，我们自己做的一些出版物。其实这个大家可以找到的，我当时在那个团队叫郑健。然后我们的当时的出版物是以季刊或者半年刊的方式来发布的，其实是将大家写的一些文章合起来。当然这个一千页的开本是一个A5左右的开本，而且字号相对算是比较大的，所以工作量可能没有那么的多。但大概也有这样子的一个量级。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:59",
      "text": "A5就是A四的一半，1000页的A5，那也有500页的A4，那也是非常厚。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:04",
      "text": "的一本书对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:08",
      "text": "我知道振宇一直都在做政绩，但是我没有想到当时有每个季度一千多页的量，因为我我也没认真看。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:19",
      "text": "有的时候会少一点，可能几百页，多的时候会比较多。OK你们继续，艾瑞克来说一下。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:26",
      "text": "好，伦宁。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:27",
      "text": "对我也是在大学的时候，第一次知道太和的。每次在这个串台的时候都要说到我的大学的第二学士是计算机的这样一个黑历史。但是我那时候第二学位的这个论文是不并不需要用那么多公式。所以我们当我们当时的第二学位的论文是不是用泰和写的那我第一学位大家也知道我是学日语的，那就更是不用大家都用word。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:59",
      "text": "那我用泰和的是因为因为我高中也是学理科的，所以就要做一些什么卷子之类的那那些东西都是用word排的这个公式，然后觉得很难用到了大学本科以后，有那个同学介绍说咱们理工科的，真的就是理工科同学。比如说他们都用tag，所以我就拿来用了，可是这个东西太难用，就是因为要组装，就各种各样的包什么搞不清楚。所以我当时就是为了解决临时的问题，我干脆就是用一个tag先排出需要的公式，生成PDF以后，然后再把这个PDF转取以后再嵌到我平面。是比如说我用那个illustrated给它嵌进来，我只是为了排这个公式而临时给它嵌进来而已。我从来没有用tag就做一个完整的一个文档，或者中文的文档，从来我我从来没有做过。我只是为了导出一个单独的一个公式，然后就生成一个东西就做过而已。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:57",
      "text": "其实我要就我要补充一下，就刚刚才其实我们都一直在讲，是不是因为为了这个数学公式才用的这个才我后来我刚翻了一下我之前写的那些什么作业和那个论文的那些文档，还还刚刚还在电脑里面。其实发现数学公式也不算特别多，但是其实有很多像什么程序代码，你知道就是读CS它很多是那种伪代码，并不是真的那种你要用这个等宽字体排印的那种。真的我们可以编译的那种代码，它很多是伪代码，是不等宽，然后有各种很多稀奇古怪的什么箭头符号那种东西的对吧？比如典型的一个，比如说这个grammar的那些lexus那些东西。然后还有一个就是当时我想起来了，当时为了用这个东西是为了画这个叫做什么来着，automated自动机的那个那个图形。然后当时用了一个泰拉泰克，有一个专门这种，因为拉塔比较灵活，它可以做很多的插件。但是有一个非常好用的插件，应该叫做TIKZ。如果没记错名字的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:04",
      "text": "tags对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:06",
      "text": "怎么念我不知道，反正它的就是四个字母。TIKZ应该是tix，我念TZ对它就非常灵活，等于是套类似于您可以认为是一个可编程的绘图的一个语言。在在然后嵌在那个natta k里面就可以可以做各种各样的非常精美的图形。比如说你要这个箭头转个35度半，然后再和另外一个圆圈连起来，再穿过那个圆心这种之类的事情。就是你用任何其他的现成的工具都是没法去描述这个东西的，精确描述。所以就用当时其实公式倒并不是我用他的最核心的一个事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:44",
      "text": "我后来发现，然后还有一个事儿，就是刚才郑宇也提到这个让我也想起来，就是如果说你的那个文档不要说1000页了，就超过比如说100页。然后你用这种任何这种所见即所得的编辑工具，word也好，当时还试过各种什么open office这种东西。它的那个性能是直线下降的，就是已经超过几十就三位数的页码就基本上没法用。那个时候我记得用的那个那个电脑的性能也一般。然后如果是特别长的文档，如你一次编，因为那个lax每次都要编译一次才能输出那个PDF的结果，那编译时间也还蛮长的。后来就是分成那个章节对吧？我只我在当时我在写这个章节，我就只编译当前那个章节，然后最后再合在一起的时候，我在这个合在一起在编译，这样就可以节省那个时间。虽然也不是所见即所得，但是整个他的那个feedback loop还是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:37",
      "text": "比较快的对。就实际上你的书大到一个规模的时候，你就必须用管理源代码的方式来管理他们。其实作家也同样面临着类似的一个问题。比如说你会遇到什么版本控制或者是插图方面的问题。这个时候所见即所得实际上并不是一个非常好的解决方式。",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:57",
      "text": "总结一下刚才大家的的自我描述，我们会发现公式实际上是tag的一个killer APP。这其实跟我现在的观察也相似。就是lathi k虽然是一个非常怎么说高大上的系统，但是它目前它的发展的这样一个定位，实际上是在一个非常精细的领域。就是公式编辑以及部分的插图方面。",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:26",
      "text": "你说我们现在这么多出版物，有哪个出版物你听说是用纯粹用latek来来编排的吗？好像也没有。那他现在可能是一个个人出版的specialized的一个巅峰。但是我觉得他在公共领域好像没有获得那么广泛的应用。至少你跟什么page maker.",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:46",
      "text": "或者是啊这个就是看领域了。反正我觉得理工科类的还有，因为理工科类的所有的论文，还有那些期刊的话，他他既收拉teacher的论文，他自己出的话也是用太和出的，就是期刊。然后在日本的话，像比如说像理工科类字典，它整本字典都是用泰和出的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:07",
      "text": "真的，整本字典是用拉泰和。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:10",
      "text": "来做的对，有的，在日本是有的，研钵数学词典的第四版就是全部都用那个拉泰和写的。OK如果说确切的话，是P拉take的two e那个版本。你做的那首先因为它是字典，然后肯定是有一个批处理的东西。因为你知道字典的，它每个词条它是非常有规范化的一个方面的一个东西。然后它又是理工类似的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:34",
      "text": "里面有很多公式。对，我的理解是很多人入门邋遢，比如说他要写个论文，但是大部分写论文的人，就是我们说900分之90的人写了论文之后，可能就不会再写第二次论文了。他对于很多人来说，拉肽的学习过程可能是个一生一次的事情。就是OK大概跟追姑娘差不多，你可能追一次你就不用再追第二次了。但是真正会一直把拉泰克用不下去的人，大部分都是会跻身学术界的，或者是学术出版界的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:08",
      "text": "你就非学术界基本上不会有这种工业化或者是产业化的需求。除非你是在排版行业生活的哈那基本上不会有这个需求。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:20",
      "text": "就是我我觉得你一个人写论文，其实就是大概是一个个人出版的这么一个巅峰了。你写一个了不起三五百页的论文，用那个级别，对，这已经是巅峰级别的一个拉抬的应用了。然后在在个人出版领域，但是在公共出版领域可能一本数学词典。而且我觉得数学词典用拉开的一个很大原因也是因为公式。我们是不是应该还是跟着讲稿来，我觉得好像有点带偏了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:53",
      "text": "没关系，因为我们是串台节目。说实话从自谈之憾这边过来的听众很多都是设计师，所以他们就从来就没有接触到，也不知道来配合是个什么东西。所以我觉得还是要得从头到尾给大家解释一下。刚才也说了，因为这个东西挺局限于理工科类的。那其他领域的人可能也都不知道，即使是理工科类的朋友们，他们可能就一辈子也就是为了写论文用一下而已。然后之后就再也没用过对配。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:23",
      "text": "这个前因后果可能也不是很清楚。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:25",
      "text": "对，所以还是要从我们的大师高德纳先生开说起。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:30",
      "text": "考古开始。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:33",
      "text": "行，那我来吧，就我们今天这个podcast标题，所谓宗师级程序员其实指的就是一个人。这个人叫做donut ete，他有一个中文名叫做高德纳。他从1969年开始写一本书，这本书叫做the art of computer programing，这本书的简称是TAOCP。他到现在应该还没写完，据我所知都还没写完。这本书是有中译版的，各位有兴趣的话，可以在网上看一下预览。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:04",
      "text": "对，有吗？有中译版我都不知道。对我在我在。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:07",
      "text": "中国应该是买了中医版的第一卷这样。然后他在1969年的时候开始写这本书。第一卷的排印用的是monotype的牌子机，就是那个时候是完全机械的牌子机对吧？自动驻排畸，对，一个非常硬核的这么一个，他很喜欢猫牌子机，然后他是当时在美国的model type的牌子机排的。然后他第二卷什么时候写好呢？是七年七年之后才写好，七年之后是约1976年.",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:38",
      "text": "不对不对不对，1976年他是第二卷要重排的时候。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:45",
      "text": "那就对，OK那就是第二卷的一个revision完成的时候，他不得不转向激光照，不是激光照排，就是普通的这个照相机照相排音机排版。但是他拿到了那个叫所谓gally proof，就是样板的时候，他他大概说了一句话就是black，就这么一个感叹词。就是觉得我靠这是什么？",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:12",
      "text": "你这句话的翻译叫这什么事。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:15",
      "text": "就是我去这种感觉，然后他非常失望，以至于他做一件只有宗师级的程序员能做的事情，就是他决定自己开发一套系统来完成排版这件事情。就是from scratch。然后它首先它发明了一种编程员，这种编程员叫web，就是跟我们那个万维网的web没有关联，它就叫WEB这种编程语言。然后他用这种编程语言，首先开发了一种字体，这种字体叫meta font不他开发了一种用于画字体的系统，叫做meta fund。Meta这个前缀就是什么什么的什么什么。比如说我叫meta fox就是fox fox，然后它这个meta d就是fund。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:04",
      "text": "那么meta fund的用处就是你你用一个数学公式，类似于数学公式的方式描述出比如说一个字母的几个点，它们之间的相对位置。比如说我说M这个字母的相对位置是下面的三个点彼此的距离是一样的。然后上面的两个点跟下面的三个点是怎么相连的？OK, 然后meet funds可以帮你生成出这个字体的，怎么说点阵化的表示来，这是metal phones，然后他用web写的另外一套系统就叫做太TEX。然后这个tag的功能就是把你的文章排列出一个可以用于打印的格式来，这个格式叫做DVI。然后他用自己发明的这套工具来排了自己的书，大概就是这么一个。听起来好像没有那么怎么样，但是在我们看来就是一个武学宗师开创了一个门派，然后专门拿来做一件事情这么一个级别。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:04",
      "text": "然后他这套系统就从此开源了，然后广为流传，一直活跃到今天。并且这中间有一个比较推波助澜的事情，就是美国数学学会AMS等于说签订了tech，就是他们的排数学公式的这么一个工具。所以导致基本上整个数学界就采用了钛这套东西。那那数学我们知道实际上是就条条大路通向数学，所以反过来导致整个科学界基本上在你在使用这个公式的时候都一定会碰到它。然后大概现在的状况就是这样了，就是太还仍旧是一个被维护的这么一个程序。当然它已经有点过时了，这个我们一会儿会提到。但是直到现在它都是在一个稳定维护并且发行中的这么一个程序。这个程序的历史可以追溯到上个世纪的70年代，大概就是这么一个过程。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:00",
      "text": "然后有一个就是我在PIB上写的那一篇文章，company modern. 大家如果去看了的话，会发现那个字体可能有点眼熟。因为如果你ever看过一篇比较正式的论文的话，那么它有很大的可能性。现在我觉得可能没没那么流行。但是至少在比如说十年前或者五年前，你去看任何一篇论文，它有可能有八成的概率是用computer modern排的。所以当你看到一篇文论文，它是用computer model来排的话，那它有很大的概率就是用attack来写。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:31",
      "text": "大概是这么一个状况。我跟大家补充一下，就是这个时间点。首先高德纳先生他现年83岁，所以大家首先要看想到这是一位老先生，而且还健在。对，他还接得起他那套计算机程序艺术。他本来是想是说一共出七卷是吧，结果后来他现在写第四卷，开始写分册了，所以不知道他一共要出多少本。然后这个时间点，如果说我们自然资产的听众，可能知道我在节目里面讲过很多次。就是我们在做印刷的时候，整个技术有三大技术革新，就是从签字到兆牌到现在的桌面出版。这个事情发生在美国的六七十年代，其实就是当时从这个金属活字到这个照相排版转变的这样一个过程。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:22",
      "text": "高老先生他当时出卷出到第三版，是1973年。那时候那个出版社就已经把这个自动做排畸的蒙蒙娜姬就已经卖掉了。所以出版社他自己已经没有这个蒙娜就签字做这个自动做排畸的东西。所以当时他的75年的第一版再版的时候，特地把这个书本送到欧洲的。因为当时欧洲还有老的这个机器可以用，所以特地到欧洲去重新排来给高德纳用。然后等到76年第要等第二军再重打的时候，实在是没有。因为这个花费太大了，从欧洲再倒一次的话，这个成本太高，所以只好用这个招牌机给他排。然后老先生如果当事人就看，这都什么鬼，所以他就重新自己做了一个tag这个排版软件。这个tag最初的发布的时间点是1978年，也就是43年前。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:20",
      "text": "43年前高德纳老先生还是一个38岁的，不三三十对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:25:25",
      "text": "38岁的。对，壮年。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:28",
      "text": "就跟你现在差不多。我好老不他。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:31",
      "text": "试试该是写写你自己的出版系统了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:34",
      "text": "对，说的对，我要在这怎么说VR里面弄一个属于未来的这么一个排版系统。我今天把话搁这儿了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:25:45",
      "text": "所以等到现在就是到后之后我们也会讨论。可能大家现在站到这个高度，然后就讲，为什么还连什么unicode都不支持的？Unicode是什么年代的事情？就是他当时写tag的是1978年，那时候uni扣还在娘胎里面还没出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:01",
      "text": "那个时候asking都不是一个比较广为使用的standard。",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:06",
      "text": "所以七八年那个take诞生，然后高德纳在1990年的九月份，他就宣布说这个tag发到3.1版本以后就不会有重大更新的。除了修bug，他其实就是这个项目其实就已经打句号了，刚好是3.1版本。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:25",
      "text": "我有一个疑问，就是他3.1版本之前是1.02.0这样的吗？还是他一上来就是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:32",
      "text": "应该是的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:33",
      "text": "因为这里有个梗，就是tag以及跟tag相关的很多软件，它的版本号都是一个叫什么超越数，还是叫什么无理无理数。无理数的它是比如说tech的版本号是派，然后meta phones的版本号是E.",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:50",
      "text": "就是那个自然对数的第二点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:52",
      "text": "自然对数的底还有一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:54",
      "text": "什么软件，它是它的版本号是0.99999999就是一，他无限接近于一。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:02",
      "text": "大概是这样。高德他是一个很喜欢这种各种梗的人。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:06",
      "text": "他是一个很geek的人我觉得他是对那个时代的你那个时代的风格的geek他非常他他非常严谨，然后又特别的还是相对来说比较比我们这个时代的geek要严肃的多了。但是他的内心里面仍旧是一个geek。比如说他他的TOCP，如果你在里面找到了一个bug的话，他会给你寄一张支票，这个支票的金额是3.14美元，好像还是多少钱。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:34",
      "text": "不是，那个支票是多少钱来着？反正是二的正整数倍，不是，反正是二的倍数就是是吗？二的多少次方之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:44",
      "text": "我记得好像是跟本台的捐款类型是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:48",
      "text": "对，其实刚刚吴涛说到那个tag所包含的第一套的这个字体，就是所谓的computer modern，大家应该是非常眼熟。因为为什么呢？就是我们其实在大概十来期节目前讲到了另一位自己设计师叫mars full benton。他所设计的他所指导设计的有一款很著名的自己叫century。而这个computer modern其实它的这个字形的设计，是跟century非常的接近的。或者说century是computer modern的一个直接的复刻的版本。所以在这个意义上，century作为一款非常流行，曾经也是跟monotype绑定的这样一套字体。大家也可以在过去以及在今天，甚至在将来的很多出版物上都会看到它的影子。",
      "speaker": "发言人4"
    },
    {
      "time": "00:28:32",
      "text": "我打岔问一个问题，这个叫computer modern的字体，它看起来一点都不mode。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:38",
      "text": "它的modern指的是一种风格，这种风格叫modern风格。",
      "speaker": "发言人4"
    },
    {
      "time": "00:28:42",
      "text": "所谓的在字体中的现代体看。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:43",
      "text": "modern的时候，是我们还没有出生的时代。对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:47",
      "text": "他所谓的modern是那种时尚杂志的modern .",
      "speaker": "发言人4"
    },
    {
      "time": "00:28:50",
      "text": "c modern的一个直系亲属，实际上是d dot迪多。对对对，迪多字体是一个在18世纪出现了这么一个字体。然后那个时代人们会认为说我们现在处于现代，在在那之前是古代。实际上也是这样的，就是从大概从19世纪初，人类进入了这个所谓什么大爆发。有反正有一个英语有一个词叫great什么什么的一个时代。然后我们现在还处在这个时代中，这个时代可以视为现代的开端。所以你加了modern其实也蛮正常的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:22",
      "text": "其实我们自弹自唱在第137期讲过本顿父子的世纪传奇。其实在这里面我们就讲述了当时的美国的，其实他本顿父子是工程师，他们制作的这个century字体，也就是现在这个computer modern的直系的老祖宗模板。如果在上述到我们说是这整个对于字体来讲，这所谓的现代体，那就要追溯到说日字体的什么博多尼。然后要讲到迪多，那么大家也可以翻到我们自弹自唱的，我们在第125期讲过迪多，然后在第131期讲过博多尼，这大家可以回去听一下就知道就是当时的所谓的它当时的现代体是一个什么样的一个东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:09",
      "text": "Real你说为什么他们可以一下子就说起来，我们之前哪一期讲了什么，为什么咱们就做不到？",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:16",
      "text": "好问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:19",
      "text": "你们需要打印一个例子。",
      "speaker": "发言人4"
    },
    {
      "time": "00:30:22",
      "text": "你们是怎么做到的？你们身边有一个小秘书吗？还是或者你们把所有的每一期讲了什么，全都随时随地摆在手边。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:31",
      "text": "我们只是有个列表而已，我们做了140多期，40 140多期，然后我们一期就一个主题，那一期我们就我们花了一个半小时就讲本顿父子，所以个一搜搜还是可以搜到的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:44",
      "text": "武大，我给你出个主意，你可以把我们的首页打开，我们也有个列表。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:50",
      "text": "你用像素字排的，我看不懂，这太难读了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:59",
      "text": "所以你们找到高德纳老先生发的多少钱了吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:04",
      "text": "刚才谁在查，我以为他前阵子也是查了，没有，我我我来查。Can check conclude reward check.",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:14",
      "text": "他每个漏洞的奖金是2.56块，因为这个2.56块是16进制的100美分.",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:23",
      "text": "这是第一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:24",
      "text": "对，然后他有些人拿到的支票上面写的是零X高了1.0。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:30",
      "text": "然后是每次你每下一个人得到这个支票的人，就会在那个数字上乘以2，直到现在是多少？32 327.68.",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:42",
      "text": "但是也才三百多美金，那高德纳也其实也不算很多钱了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:47",
      "text": "不是，你要知道这个是每次沉吟，这个是很恐怖的故事。你们还记得印度印那个棋盘的故事吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:54",
      "text": "2005年的时候，总金额就已经超过2万美元了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:58",
      "text": "所以高德他就疯掉了，他就是说我不更新。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:02",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:02",
      "text": "这是非常恐怖的，就是逼迫他自己少写bug的一个驱动力。你知道吧？为了防止破产，要尽量少的出现bug，因为下一个bug随时可以让你倾家荡产。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:15",
      "text": "不过刚才也说了，它的版本号接近于pi其实一个非常新的一个时间点就是在今年的二月份，2021年的二月份刚更新了一个版本。然后这个版本号是3.141592653半就已经到2653了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:35",
      "text": "其实也还好，你想一下其实也很容易背了下来，也没更新几版。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:40",
      "text": "对，你能背几段？",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:41",
      "text": "你能背到几位？看C592653589798 28 5462643.",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:45",
      "text": "以前是可以的，现在不记得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:47",
      "text": "大概我能背到50位还是多少位，real能背到100位好像。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:54",
      "text": "所以我想确认一下到这个2653的版本，实际上就是指的是3.9版本是吧？",
      "speaker": "发言人4"
    },
    {
      "time": "00:33:01",
      "text": "你数位数的就数它后面有几位就好了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:04",
      "text": "但是没有很多大的修改的，主要是那些bug修bug而已，没有重大的功能更新。其实就是对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:12",
      "text": "tag本身的内核实际上已经比较老了。也而且而且它本身并不是一个特别复杂的系统对就是你把它本它底层的那个太和engine可以用其他方式来实现。现在实际上比较流行的是一个叫PDF tag，另外一个叫z tag。应该是这两个引擎现在是用的比较广泛的PDPDF tag主要是做那个标点悬挂比较好，然后PDF type还支持直接生成PDF，而不是要先经过那个DVI内部。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:43",
      "text": "就是有各种前缀的。太和他们之间到底是什么关系，其实还挺复杂的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:48",
      "text": "这个事儿你还是要跟大家讲一讲的。到后面tech.",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:53",
      "text": "有点像u unix。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:55",
      "text": "然后对，特别像开坦克。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:57",
      "text": "对，以tag为源流眼了很多其他的发行版，其中最为人所知的，或者说我们现在最一提到太或者说我们一现在一提到这套排版工具，不会说我我我用太和谐了什么什么，而是会说这个东西是用拉太他写的。就是因为拉泰克是泰和的最知名也是最早的一个扩展手段。就是tick有点像一个它有点像拍thon，它有点像一种编程语言。然后一个人他的名字叫做lesly lap，应该是他也是一个老先生，今年80岁，然后他给他做了一套扩展，就是他用泰和写了很多很多东西。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:38",
      "text": "比如说你太打个比方，这个tag原来只能设字体和字号，然后他用tag做扩展可以让用他用旧的命令生成了一个新的命令。然后这个新的命令你可以说，比如说我现在要开始写一张，然后我要现在要开始写一个新的结。然后这个张和杰应该是怎么样被decorate。然后他最重要的贡献之一就是他在这个latek里面做了一个包管理系统。这个是等于说是一个革命性的这么一个创造。然后有了这套包管理系统之后，就有很多人创造了很多包。然后你用拉泰克，你就可以使用别人写的这些包来扩展你的来达实现你的这个排版的一个目的，这个就是拉泰。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:27",
      "text": "对，所以这里本质上泰和其实只是一个非常底层的，非常这种就是它是一个内核，它是汇编语言的一个东西。但是它并不对，它并不就是如果你直接去用它来排版，其实非常痛苦的。因为各种指令都很原始，所以这个later它其实做的是说我在上面打包做了一些抽象对吧？你看有有结构了？然后就是开始出现所谓的这个形式和这个内容有一点点的分离的感觉。然后你可以引入了这个包管理，其实是模块化了，让大家能够更好的在上面去做进一步的扩展。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:03",
      "text": "他们的语义就是说其实配合基础的排版引擎，然后他们是叫红包是吧，就那个macro o package。红包吗？中文叫红包吗？听起来怎么这么喜庆。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:14",
      "text": "肯定是啊，就红包，不然还能叫什么红这个词就是随着microsoft对不对？或者办公软件，基本上在90年代在中文世界就铺开了，这玩意儿就叫红。你一台湾叫聚集，聚集可能听起来还比较好奇怪比较好一点，但是红这个词已经被被传开了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:38",
      "text": "我们是不是重点要跟大家讲一下太和的一些特点？好啊。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:42",
      "text": "但是太和有什么。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:43",
      "text": "特点难用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:45",
      "text": "这最大特点就是免费开源，这是最重要的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:49",
      "text": "说的也是我前两天在做功课的时候，搜到了一篇一个奇人写了一篇奇文。然后我觉得还是可以在这里念一下的。就是他那个蛇精病历数了泰和的种种弊端，然后其中有一段是这样的，我来念一下，你说中文。好，我我我来翻译一下。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:07",
      "text": "他说因为tech是免费的，所以它限制了与其竞争的系统和和这个想法发展。如果tag没有被研究出来，并且没有被免费的让人使用，那么能够保持这个数学公式的structure结构的这些替代的方案。比如说mass ML，这个我们一会儿提到叫mass markup language。还有mathematic就会比较早的被开发出来，并且也有可能会更为广泛的使用。他言下之意，拉tag是一个比较差的这么一套工具。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:46",
      "text": "所以当时因为他免费大家都用了，所以大家就不思进取了是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:50",
      "text": "他的意思是，接下来他他紧接着就说了类似一段话。他说free software就像一种病毒。然后free systems有这个能力可以去使得任何其他的protocol协议或者是设计，包括那些比较好的协议和设计。他有让他们全军覆没的这样一种潜力。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:15",
      "text": "听起来很像比尔盖茨当年对自由软件的自责。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:18",
      "text": "对，worse is Better. 然后他说其中的一个例子就是the vary unix systems，就是各种各样的unix系统以及他们所对应的协议。然后他说这些系统和协议has done huge irreversible damage to society。他说这些东西对整个社会产生了不可逆转的巨大的伤害。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:42",
      "text": "这是worse is Better。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:45",
      "text": "这可能是我们今天就或者我这过去20年里面听到的对于自由软件的最大的一次最最严苛的一次指控。我以前没有想过这件事情，但是如果你说他不，我们来说想想他说的有没有道理，可能是有点道理的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:05",
      "text": "但是看你站的立场是啥了。你如果是那些想做这个商业软件，想靠这个赚钱，然后说你要通过这个compete on quality？你要通过这个品质的竞争，那确实是啊，那很多你就干你那个你那个人就干不下去了。那很多比如说你需要聘请这个专业人员来设计制作，然后比如说这的的这些系统，那你肯定就干不过免费的，你就死掉了呗。我们看到过去这个软件的整个历史，不就是在不断的去蚕食那些商业软件本来可以卖钱的的那些领域，对吧？现在连操作系统也是，那个unix出来之后，对吧？Linux之后你还有什么其他？就是非就除了什么windows，除了这个mac它底下那个BSD还在这个就是有一些这种商业的在运动之外，但那些非常小众都已经非常式微了，都销就是商业软件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:04",
      "text": "都已经消亡了。对，就好像他提到的这些various unique systems。这它这里面unix system包含很多东西。其中unix最最原本的那unix后来被卖给了谁？一个ATNT还是谁？他那个真正unix的商标实际上是卖钱的，反倒是后来的什么BSD和linux的支流，把这个卖钱的unix给打败了。比如说当时的为什么现在会有AWS，就是因为当时亚马逊觉得像microsystem的那个salaries的那些服务器太贵了，然后他们转向linux然后sn就倒闭了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:47",
      "text": "对，生涯也会倒闭。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:49",
      "text": "对，然后亚马逊发现自己可以用10分之1的价钱达到之前100倍的容量。然后他决定把之前多出来这些容量租给别人用于是就有了今天的A8S诸如此类的事情实际上在一次一次的上演。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:04",
      "text": "但是如果你这样讲的话，虽然tech它本身是自是免费的。Tag本身这个take是美国数学学会的商标，然后mea FONS也是当时那个出版社，就是Edison wei出版社的商标，这些商标都是有注册的，就跟那个unix一样，但是它本身是免费的开源的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:26",
      "text": "他们免费事实上不自由，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:28",
      "text": "可以这么开源，他们开源，所以有人骂这个配合吗？可是配合的支持者就是说我们配合多好啊，我们免费开源，跨平台跨设备，这个是最关键。就是说同样的输入可以得到同样的效果。哪怕大家知道这个take原来是四十多年前开发的这样的一个引擎。但是当时高德纳就说你不无论用任何一台电脑，输出的效果都是一样的，这个特别厉害。跨设备的意思是不仅是屏幕显示，还有无论后来有打印机，哪怕后来后来有那个post scrip出现。然后我们比如说有PDF，甚至像哪怕是日本特别专用的写焉家公司，他们自己的电商的电商招牌机。你只要用的是这个太和大出的文本，最后出输出的效果都是一样的，这个是特别厉害的一个东西的例子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:27",
      "text": "我们要不接下来就讲一讲tag作为一个软件，它的user interface是怎么样，也就是它的用户操作界面是怎么样。这我觉得可能对于很多设计师或者是没有接触过tag，但有想要试一试的人来说，比较重要的一点我。",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:43",
      "text": "觉得可能要介绍的是工作流。因为垃圾事实上是没有一个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:48",
      "text": "你是首先你要学会使用命令行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:50",
      "text": "对它事实上是没有一个标准的操作界面的，就你可能装了某些特定的tag的版本。这个我一会儿会讲，这就是然后你会有一个编辑tag的环境，但是没有一个东西说你一定要打开这个。比如说photoshop或者是page maker，你有一个主程序要运行在latter这边是没有的。就你可以按照自己喜欢的方式，用一个你喜欢的编辑软件去做你想要做的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:18",
      "text": "本质上它是编程，它没有一个所谓的你说有一个什么专用的程序来使用它，对吧？你就是其实是做任何一个文本编辑器都可以写。所以我刚才讲你说你要开始使用这个，你一定要接触的那个UIU的interface，首先你得学会使用命令行。怎么开始去完成这个转化的过程。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:38",
      "text": "这也是它的特点之一。就是我们把过整个过程说一下，就用户是只要有一个文本编辑器就可以了，它写的是一个文本文件，记事本也可以。对，配合它是纯文本，所以它它非常便于传输编辑。你只要你喜欢你个人习惯用的这个文本编辑器就可以，你用什么都可以，然后要导到引擎里面去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:01",
      "text": "当然传统的拉take的话，它要中途要先生成一个DVI文件。这个DI其实DVI是device independent的，就是就设备独立。它是有一个中途文件，然后这个DY文根据它的驱动，最后再生成什么BDF或者是打印。当然了，现在的这个拉泰克他们就可以现代垃圾配合，比如说luan垃圾和它就可以直接从这个文本文件直接给导出PDF了。所以这是两个层两个步骤的。用户直接他要一边他要写一个像命令行一样的一个纯文本，要再通过这样一个引擎去生成PDF。所以它是一个两个步骤东西，而不是所谓的可见即所得，所见即所得，对吧？What you see is what you get, 这是一个它的一个最大的不同。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:51",
      "text": "但其实也有人在上面做一些尝试，就是说有人做了这种专用的编辑器。然后你这边输入这个拉开盒的指令，然后是可以几乎实现所见即所得。但是和所有的所见即所得的这种排版软件一样，它还是面临着非常不好用的问题，所以也不是非常的广泛。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:11",
      "text": "就是它还是有代码的。知乎那个公式编辑器，其实它提供了一个让你点的那么一个界面。就是你你点一个什么，比如说根号，然后它下面帮你插入拉tack的那个根号的命令，类似于这些东西，其实现在要比直接手写的还是要多一些。",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:29",
      "text": "不就这种还算是这种还是是一个非常短的那种编写然后编译的一个循环。它还是没有脱离刚才我说的那个命令行的本质。这里面我说这种就是可以，对它基本上就只能做公式。对，你可以相对完整的做出的这种编辑器。最最成熟的应该是那个叫做这怎么念lex。LYX它的网站是LYX点ork点ORG的这个，你可以去看它有截图，它相对来说是更加接近于就是你编辑word的那种感觉的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:59",
      "text": "不过话说回来的话，就是我们现在用配合都是大家会想到用公式。可是当年对高德纳先生，他可是真的是要排梳的，他这个很很厉害的。比如他会算那个段换行位置，两端对齐。这其实这都是做很专业的成文排版的东西，他还特地为此去学排版，所以高德钢琴很厉害，可是我们现在主要用的，男孩用的还是拿去排排公式。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:26",
      "text": "其实这里就有一个问题了，其实就是可以探讨一下，为什么排就是排公式和普通的这个排版，它有什么样的特殊之处。使得他必须要专门做这么一套系统。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:40",
      "text": "公式很复杂，这个大家也都知道，尤其是在签字时代，那个那个公式可就说是超级复杂了。大家要在这个字符的周围塞不同的签空，对吧？哪怕一个根号就是一个很复杂的一个东西，根号上面还有那个长度什么就乱七八糟的，都都要有复负荷的那种。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:01",
      "text": "我觉得数学公式最麻烦的地方就在于它相对如果我们只是考虑一个最简单的文本的排印，它其实主要考虑是相对来说是一个一个维度，就是你那一行到底要处理怎么样，因为它行与行之间通常来说不会有太大的相互关联，除非你是断行的那个影响之外，对吧？但是数学公式它本质上是一个二维的一个画画。你可以这么理解，你比如说我们常用的这个叫什么来着？上标下标就是那个指数符号或者角标符号，对吧？它存在说有一个大小的问题，而且数学公式很多是可以所谓的嵌套的对，就你说A的平方，你要想的那个结果是那个平方的那个角标会无一逐级变小。这种需求在普通的这个文字排版上面，它其实不存在的。就相对来说它把这个灵活性是要求非常高。然后要求你控制它的这个相对位置，它的首先维度上就变得更广泛，而且它的大小的精度又又要求更高了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:56",
      "text": "这排数学公式实际上面临着一个双倍的双双层的问题。一个是uni o的或者说编码需要解释解决的一个问题，就是那些重音符号或者是那些字儿。首先有字儿的问题，字符的附加的这些零件的排版就是定位的问题。它还有一个问题，就是他要把所有这些东西在一个非线性的方式组合在一起。它是面临是一个二维的一个一个空间，还不仅仅是一个三维的问题。所以你要解决这个问题，实际上是要用比UNIQL的更加复杂的一套方法来完成它的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:30",
      "text": "你还是提到刚才一点，他出现的时候还没有uni克这件事情，所以当时他要去在数学公司里面大量出现的是什么希腊字母，各种奇奇怪怪的这种数学符号，你就从来不会想到过的。就是现在连unit库存里面都不齐全的那些符号，它都要在这个系统里面实现出来。然后还要考虑它各种在二维两个维度上面去的如何相对排布，相对大小，以及每个字形还要处理的好看，对吧？这个就太难了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:00",
      "text": "对，这的确是一个非常只有宗师级成员能解决的编制问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:49:06",
      "text": "这个你不排数学公式你都不知道吗？就比如说sine x那个sine是必须要用正立的罗马体，然后变量X是要用意大利斜体，就是不做理工科排版都不会意识到这个问题，是对吧？单位的话物理量的单位是必须要用正立的罗马体，但是物理的变量都必须要用意大利斜体。像这个东西你跟一般人来讲的话，他都没有注意到。是哪怕虽然你平时从小跟中小学，你看数学课本都是那样排出来的。然后等你自己来排的驴觉总是没有那个味道，就感觉排出来不像。这是这就是因为它其中有很多它有各自的这样的一个排版规则。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:45",
      "text": "在对写公式跟排公式，甚至自动生成公式之间的关系是难度是天长地。",
      "speaker": "发言人3"
    },
    {
      "time": "00:49:52",
      "text": "远不不过我觉得这里还是我要我我我要夹带私货吐一下槽。就是我觉得虽然说它有各种各样的难度，其实我觉得很多问题都是自找的对吧？没有其他哪个行业有这么多龟毛的需求。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:07",
      "text": "比如说刚才你听到，这是eric讲的这个对同一个的概念里面还要用不同的这种字符形态来去描述它。你想手写的数学题不存在这种区别，对不对？你可能都是写个sn然后都是你的手写的那种字体。然后你就区分一个大小写，区分一个罗马的字母，希腊的字母。当然也可能也是因为字母26个你不够用了，你才会讨论这种东西。但是到了这个数码排版之后，你发你就发现我有各种各样的这种工具，这种可行性之后，你就说我要规定说这种这个sine要用这么一个标识来写，然后我的那个罗马字符上面加个尖儿又是什么意思？就很多问题其实是就是研究数学和做这些照排系统，或者说是编辑他们自己给自己找的麻烦。所以咎由自取，自作孽不可活，搞得这么麻烦也活该。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:59",
      "text": "你要这样说话，这不是代数的他的宿命所在吗？他用字母代替数，他他这个肯定是数字母肯定是越来越不够的。一开始我们只用拉丁字母而已，然后希腊我们的希腊字母都是数学老师教的，我相信这个其他字母怎么也都是数学老师教的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:18",
      "text": "是啊，我我跟我的我的我的意思就是说对他本来是有一些有可能有其他解决方案的。比如说为什么一定？比如说那个叫什么来着？Sum的那个操作符号，一定要是这么一个规定的一个格式去描述的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:30",
      "text": "那个大是西格玛对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:32",
      "text": "西格马，然后下面一个N等于一顶上到多少到无穷，然后这边是一个什么东西，为什么一定要是这种结构的？明明有更简单的方式可以写到。给自己找这种麻烦。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:40",
      "text": "对吧？就是real说的这些东西让我想到了很久以前读过一篇文章，就说数学为什么会有现在的非常难的reputation？原因之一跟它采用的这套符号系统是分不开的。就是数学的这一套符号系统就好像五线谱或者是或者它是一个门，它是一个历史延承下来的这么一套自成系统的一个东西。就假如说我们有一个数学的公式的理想模型的话，它并不是适合于它不是设计出来的描述这个理想模型的最合适的系统。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:17",
      "text": "但是这个系统的存在导致于很多人他也许有数学天赋，但是他因为没有办法去理解这套符号系统而浪费了他的数学天赋。就好像那些很有些很很可能音乐上面很有造诣的人，他不懂五线谱一样。有些人是靠着自己的数学直觉可以克服这个的。比如说什么印度曾经有过一个数学天才，叫什么拉拉努马金之类的一个人。他就是一个靠着自己发明出来的数学符号达到了很多。怎么说，那些科班出身的人没能达到数学高度。但是不是我们每个普通人都可以有这样的能力的。但是这套数学符号对于我们每个普通人造成的障碍确实确确实实在那儿。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:58",
      "text": "就好像你在你比如说你在知乎或者whatever什么地方，你想要本来用自己的输入法写字，写的开开心心的，忽然你想要插入一个数据公式，然后你发现你自己的输入法没完全没有办法帮你插入这个公式，然后你去找怎么样来画一个公式。很多人ended up with在纸上画写一个数学公式，然后拍一下那个纸的照片，对吧？在知乎上很多答案都是这样的。但是也有一些人去会会去研究说，我怎么样用一个比较怎么说正统的方式来生成一个公公式的图片。然后他会发现tag这套东西。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:37",
      "text": "这里面还有一个很核心的问题，就是说它这套符号系统是通过各种演进过来的，它并不成体系，也没有什么规则可言。然后各它其实是各种不同流派最终互相妥协融合的一个结果。对，就导致一个事实的问题，就是说就不要说你你我我们这种非数学专业的你肯定看不懂。哪怕你学数学专业的人，你还是要你看到一篇特别特别前沿的这种数学研究，你还是得去看他他他在那篇论文的引文里面会先逐步定义他用的这套，专门讨论这个话题的。他就想一想五号题是怎么样子，就等于他还在不断的自我研发，就是叫我们叫什么来着？DSL对吧？Domain specific language这种专用领域的语言，它还在不断的延续。而所有的这些都是没有一个通用的一个标准的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:26",
      "text": "而且数学符号内部自己也有流派，就是什么就哪怕我们学上学的时候也会学到说，比如说一个矢量的标法，可能你如果你有粗体的话应该用粗体，然后没有处理的话，你要在上面画一个什么箭头之类的对对，然后有些流派可能已经消失了。比如说我们现在使用的积分，虽然是号称牛顿发明的，但是我们使用的这个大S的这样一个积分符号，实际上是莱布尼茨的标法，牛顿那个标法是非常复杂的。但即便如此，我们的那个微分还是有两种方式，对吧？一个是什么？用那个字母，那字母叫什么来着？西塔。然后另外一种是用撇。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:09",
      "text": "对吧？那个怎么念我不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:11",
      "text": "我也忘了我一直念西塔。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:12",
      "text": "好像是念西塔。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:13",
      "text": "但肯定不是西塔。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:15",
      "text": "那不是西塔。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:16",
      "text": "就像有一个像小弟一样的东西，是不是？",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:19",
      "text": "而且他们当时发明的符号的时候是手写的，肯定不是排印的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:23",
      "text": "对，刚刚才我吐槽的另外一件事情，就是现在我们牌印上规定的各种非常细节，或者说是为了美观也好的这种要求，其实你在手写上是复刻不出来的。你手写，但你可以写的稍微正楷一点，稍微写的直立一点。但你有斜，还有各种弯，还有各种加花，对吧？但其实你在手写里面并没有那么多的工具可用，对吧？取决于你手写的这个。整齐度也就是在板书上面写的很快的话，其实也就很快的一笔带过。去他在手写过程中和你真的排行的存在一个跳跃的一个过程。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:57",
      "text": "我先插播一下，就是我刚查到了，首先求导是用D就是字母DDX比DY然后我刚才说那个符号或者说我们刚才试图找到的符号不是一个希腊字母，而是它是偏微分的符号，它就是D纤维分符号，D是全导数符号D的变体。对，但它是低的。另外一种写法就是对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:20",
      "text": "有一个草书的斜体的那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:22",
      "text": "DD是什么？是difference differences吗？Derivative应该是吧？Derivation对岛。对，就是什么网络这早就忘光了没？",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:34",
      "text": "所以这个东西就是他们在发明这个符号的时候，就是用现当时他们觉得最方便的方式发明的。然后他们就肯定就没有想到后面这个技术发展以后的问题，对吧？他们觉得手写当时是这个手写起来很方便。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:49",
      "text": "他其实也不一定是为了方便，他是为了就是为了记录一个思维。因为数学这个东西很抽象，所以他你有就有时候记不住那么多概念的时候，你要靠一个notation把它写写在这个纸上，然后帮助你去做一些抽象的一些运算。就是你让我们去什么求导，做变形的时候都并没有去说考虑它的原理。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:11",
      "text": "他在手写的时候，他就想说就用另外一个方式的话，他就用一个草书的字体来写。但可是后来想要排印的时候，那我就得就就麻烦了，排印的时候我就得必须要用另外一个签字来做。这个像国际音标的当时也是一样的。国际音标大家知道有各种各样莫名其妙的符号，可是当时已经有签印了。所以作为铅印来讲，他们很方便是把字母倒过来，这个对于铅印来讲是很方便的。所以比如说什么的发音的话，就是倒过来的小写字母E吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:42",
      "text": "对，free一下就好了。手写你要倒写也不方便。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:45",
      "text": "这个是在签字的时候是很方便，可是反过来在电脑里面你要输入那个拼音就超难的，直到现在你要输都很难输，对吧？国际音标这套东西对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:55",
      "text": "是是是，其实太和他在解决数学公式的时候，其实也面临着这个问题。就是说他要输入那些各种各样的奇怪的符号的时候，他都是用一个命令的。就是他要线性化成一个键盘上，就是asking什么quality键盘上存在的这些按键，你它对应那个把它用一串命令来指代某一个符号。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:18",
      "text": "就跟我们现在转译一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:20",
      "text": "对吧？是的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:24",
      "text": "就是我觉得type面临的问题跟HTML所解决的问题是是一样的。当然HTML出现要比tape晚很多，或者是HML出现比tape晚很多。但他们面临的问题和解决问题的方式实际上是相似的。只不过泰克可能因为它出现的比较早，所以他没有那么考虑周全。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:43",
      "text": "在这里其实有一个很好的问题，就是说到底形式和内容是不是能够分离。我觉得tag或者是latek也好，它证明的这件事情是实现不了的。就是说HTML和CSSCSS1个写语义，一个写样式，这件事情只是一个美好愿望而已。因为真正你落实到具体的那些非标准化文档的那些细节的时候，你会发现你没有这种形式和内容分离的细节了。比如说就刚才这个情况，这个sum对吧？然后从1到100的这个积分集到多少，然后再取个什么样的技术。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:16",
      "text": "你如果要去用这个完全形式和内容分开的东西去描述它的话，tag其实是不支持的。类tag也是不支持的，他从来没有支持过这件事情。最终你还是要去描述它的相对位置。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:27",
      "text": "一定要支持语义的话，可能只能用max ML之类的my就是mass mark ob language或者mah m对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:59:35",
      "text": "所以也就是刚才你念那一段的对这个的一个指责。就是说你除非有一套完整的这种语言去支持描述一个结构。就本质上泰和也好，拉泰和也好，他去描述一个公式的时候，它并不单纯的是描述那公式的一个结构。它其实描述那公式长什么样子，大概长什么样子，大致结构是如何。你并不能从就所谓什么意思。如果说你能够拥有一个用这个latta去描述一个结构的话，理论上你是可以去paras去去去叫什么呢？去解析它的结构，得到你想要的那个公式的一些，比如说变形和运算，它是可以自动化的对吧？但在在这件事情在tag里面是无法实现的，它的形式和内容在微观的层面上是融合在一起的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:17",
      "text": "你不要对teg要求太高，太和它原来一开始它就是一个排版引擎而已，它跟这个结构一点关系都没有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:26",
      "text": "我知道刚才不是在讨论，就是说拉才在说这个内容和形式的分离是对应于HTM和CSS这个关系。但其实我觉得在这里面其实并没有很好的体现出这一点，他只是有这种倾向对吧？但其实在实现层面上，他并没有非常彻底的去贯彻这件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:44",
      "text": "艾瑞克说我们不要去指责拉泰克这件事情，但问题我们现在面临一个问，也就是tag是业界标准。如果我能就作为一个魔鬼代言人，我站到刚才那篇批驳tag的文章的观点上来说一句话，tag他实际上的确就是一个业界毒瘤这么一个状况。它你用泰克写出来的公式面临的一个问题就是它没有办法被很轻易的被part逆向pass，对吧？而且尤其是现在，比如说知乎，你在知乎一篇文章里面生成一个svg格式的公式，这个svg格式描述的公式原原本本的就是一个公式怎么画出来的？它跟这个公式的语义毫无关联，对吧？毫无关联我们可不可以说tag的存在导致了整个数学的语义表示在互联网上的存在。处于一个支离破碎。",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:36",
      "text": "的这个我觉得也不能这么指责，这个是一个结果，但是它并不是核心原因。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:42",
      "text": "对，是的。但是我的意思是说不能说泰和就因此不该被指责了。对，因为它是它作为一个事实标准，它带来了现在业界的这么一个现况，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:52",
      "text": "我我我明白你说的意思，我想表达的点是说，这件事情你换任何一个软件都是不可能实现，那个mark up language也没有实现这一点。就是因为这个问题出在于那个底层我们要表示的那套体系，那套数学符号本身就不支持这一点，它的结构不是那么的清晰明确的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:12",
      "text": "就是数学符号本身真的问题。而不是描述他或者排就给他排版的其他的这些没错引擎的问题。然后这个讨论就没有结果了。那我们在说什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:26",
      "text": "这是不可能有结果的。因为我们不是可以左右这个历史进程的人。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:30",
      "text": "对，我们只是作为历史的批判者。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:33",
      "text": "滚滚长江东逝水，对吧？我们只是两个渔樵就在这边喝酒，然后讨论这些事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:39",
      "text": "对，所以我觉得还是回到之前那个评书里面，我觉得这目前这么去去概括他，这个是比较中肯的一个评价。相对来说我觉得泰和只是一个底层的，不涉及说内容还是形式的这么一个排版引擎。对，因为排版引擎本质上是展现的是一个形式，对不对？它并不是体现的主要内容。你不可能去通过读泰和的源码，你去读懂这本书怎么样，你还是要看他最终compile出来的那本书长什么样子。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:07",
      "text": "Land port在上面做的一个重大的一个贡献是说在一个无结构的体系上面引入了micro的这么一个宏观的一个结构，是实现的章节吧？这个section然后实现了数学公式的一些，实现了这个包管理，实现了模块化。但是，具体的在非常微观的层面上，他肯定还是无法完全的结构化的。就好像我们现在说，哪怕是说当年提这个HTML和CS的这个形式内容分离，提到现在我们现在去看web，它这两个事情还是互相连接在一起的，你就到微观层面上还是无法分开的。所以我觉得这里面也就是我们的技术理想和客观现实之间的妥协点。就是这样子。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:54",
      "text": "我很好奇你们对那个W3C那个mass m没有什么有什么作何评论？",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:03",
      "text": "X300L就像暴力一样，你如果没有解决问题，你就用更多的暴力。大概这个感觉max ML它本质上就是用XML来就是。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:12",
      "text": "叠床架屋，就不停的加东西，啰啰嗦嗦的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:16",
      "text": "XML就是这样，XML作为当时的一个银弹，90年代的人觉得好像你用原数据去描述数据就可以得到，就可以让数据更好的被处理。但是人们会发现原数据本身也是数据，然后你需要给原数据加上更多的原数据。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:34",
      "text": "子子孙孙无穷尽也。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:36",
      "text": "但我觉得max ML虽然是一个非常复杂的文档，它本质上也不是让人来写的和让人来读的。它的存在的意义就像XL一样，它是为了保存信息，然后给信息加上原信息。虽然他的手段非常的拙劣，或者说非常的啰嗦，但是他还是起到了他的应有的目的的。我觉得。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:55",
      "text": "My smile, 其实你不用多看，my smile就是HTML for公，大概这种感觉就是它你可以把所有的符号用那个监括号括起来，然后标这个监控号里面的文本，就是告诉你这个符号是干嘛的。它维系了一套数学的公式的语义，而且他基本上没有涉及说这个语义应该是怎么用用什么样的方法来表示的。所以理论上你可以用一套类似于CSS的东西来描述一个max ML生成的秒，用max mail来描述的一个数据公式。而max ML本身只负责为描述这个数学公式里面每一个元件之间的关系。大概这样它的最大的问题就是你要编辑它或者是你要生成它是非常麻烦的。但是你读起来其实还是比较简单。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:49",
      "text": "mah ML这个名字就很难念。Mathematic mark up language这个东西，它本质上就是把tag的理想用XML这个标记语言重新实现一遍。但其实他们两个都没有实现刚才我说的那一点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:07",
      "text": "不是我觉得这个还是差别蛮大的。因为泰和就是我们介绍几个泰和的最比较基本的命令，就像HHTML有什么，EM有什么strong一样。太和是有比如说text BF bold face或者是text IT诸如此类的。就是你说text BF描述的是什么？描述的是它的风格。就是我说接下来这个部分要用粗体来描述，可是这个粗体的意义是什么？它跟这个东西的实际语义是毫无关联的。但是max ML这边它的每一个标签都是跟这个语义相关的。你不能只说这个东西需要用粗体，你必须在麦max ML里面描述这个粗体标出来的东西是什么。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:53",
      "text": "不就粗体这个概念在那里面不存。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:56",
      "text": "他实际上在理念上是要比这个。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:59",
      "text": "他其实要表述的说这个数学结构怎么回事，就是他表述的是一个将我就开始提出的第一个问题，就是数学公式的那些各种notation的结构，他想用一个通用的方法把它描述出来。其实这个东西本来就是一个对很困难的一个事情，就几乎不可能完成的任务。所以它本身的复杂性是来源于数学公式本身的复杂性。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:20",
      "text": "但他还是描述出了数学公式之间的关系的。好像lisp比如说lisp你用lisp可以描述出任何足够复杂的，任何复杂的数学公式都可以用lisp描述出来。只不过lisp的那个描述你可能就是不非常反人类的对吧？但它是可以的。Max ML实际上做到的事情跟list p差不多。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:39",
      "text": "对，就是说引入一个树状结构去描述一个数学的notation，把它拆解出来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:47",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:48",
      "text": "那那这么比的话，它其实应该说是应该是他选择的那个载体不好，这个maf MML这个坑实在是太深了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:00",
      "text": "所以我们接下来要往。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:01",
      "text": "什么地方讲，给大家说一下各种。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:04",
      "text": "环境下的太和OK对有到底有多少种叉叉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:07",
      "text": "太茴香字回字有几种写法。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:09",
      "text": "那就多了。我跟你说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:11",
      "text": "OK假如你听我们的节目，然后对泰国产生了兴趣，那么首先最重要的一件事情就是活得太狠。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:19",
      "text": "会有这样的人吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:21",
      "text": "为什么每次你都要拆穿我？",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:22",
      "text": "首先你要获得哪一个呢？",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:25",
      "text": "或者说假如你是一个即将要写论文的人，然后你想要尝试一下这个传说中的宗师级程序员使用的解决方案。那么你需要获得一个你所使用的操作系统上的态环境。因为在座的四位都是mac用户，我们要先从麦克说起，我当时用的是就叫mac，mac tag里面那个很老了，但是我要是没记错的话，mac tag是现在已经停止开发了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:53",
      "text": "还有更新版的。你现在去搜这个mac tech，就是macd ITEX这个东西，它会让你去到一个mac time 2020的发行版。对，说到这个就要先解释一下什么是发行版。本质上买海苔他是做了一个事儿，就是他把常用的那些工具包都给你打包在一起。然后你可以一次去下载完，安装好就可以开始用了。你不用考虑今天到需要到底你哪些组件，然后之间相互作用是怎么样，这样子你可以大致略过这个问题，就有点像linux是一样，对吧？我们现在不，我是说你要去装1 linux对吧，你先选一个发行版，你要选什么ubuntu斐多之类？你要他们把那些打包的工作给你做好了，你去用一个现成的版本就可以了。那麦克上面可能还是用这个比较简单一些。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:43",
      "text": "然后如果你在windows上的话，应该去下载。据我所知应该是mik tag，就是MIKTEX。这个我没用过。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:53",
      "text": "这个我不知道现在还是不是我我上本科的时候，当时用过用windows写写那个系统，然后我装的确实是这个系统，就是mimic mac还是mac太好用吗？也没有什么其他好选的，你就你是存在说能用和不能用的区别，其他的你都你对于一个新手，你根本就属于不能用的状态，就不用考这个问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:15",
      "text": "你知道吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:15",
      "text": "OK如果你用linux的话，你需要自己手写一个tag的这么一个系统。Lu x上没有tag的包，所以就是比较尴尬。这件事情应该有的，什么A.",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:28",
      "text": "各种没有。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:30",
      "text": "我在说我在胡扯。就linux上的tag实际上是最好的一个distribution tech。Live这个东西应该是目前最积极维护，然后也是用户基数最大的一个群体。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:44",
      "text": "也是我印象中体积最庞大的。他当时我记得是在多少十几年前，那个时候互联网状态想象一下它的一个完整安装包都已经小要小10个GB了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:56",
      "text": "你想象一下，但是不管你在在哪个平台上要用哪个发行版，你的工作流程基本上是一样的，就是你要先写一个纯文本的tag文件，然后用你的工发行版所提供给你的，通常是一个叫做latek或者是PDF拉tech的程序去处理你写好的这个文件。然后它会帮你生成出一个PDF文件来。但这里面有很多坑，虽然我刚才讲的这个过程听起来轻描淡写，但实际上这里有很多很多坑。比如说你写的东西要不要支持中文，是不是要支持CJK然后你写的东西是不是要支持插图，就是除了刚才real提到那个take z之外，你要不要支持其他格式的插图。如果你要的话，你必须做出选择。然后你必须注意你的插图是怎么生成的，以什么格式来提供给它，诸如此类。然后你可能会就你的领域需要用到一些你的领域才会使用的包。如果你的领域比较大众的话，这个包可能是有很多人维护的。你的领域比较小众的话，那么很有可能你必须自己亲自去解决一些问题。太阳能用户群里面有一句话说你you have to know everything to do anything。",
      "speaker": "发言人3"
    },
    {
      "time": "01:12:10",
      "text": "这个我深有体会。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:11",
      "text": "你面临着的是一个非常陡峭的学习曲线。必须说。然后如果你的论文的时间比较赶的话，那我劝你还是另寻一条别的途径。有模板。",
      "speaker": "发言人3"
    },
    {
      "time": "01:12:23",
      "text": "我举个例子大家可以体会一下。如果说我们我们说我们节目也有很多很多是程序员听众。我们当时说这个学习wam这个编辑器是一个非常陡峭的学习曲线。然后当你成学完之后是非常好爽的。那么学习太狠或者任何和版本的上手来讲，它比那个曲线陡峭多了。对你本质上是要学习一门全新的你中你也不知道什么原理，并且它的整个过它的整个这个设计理念和设计思维都是来自于50年前的一套编程环境。本质上你在做这个事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:57",
      "text": "其实最终就是说自谈自创，听众朋友们是很有可能是tag的这个目标用户群，这完全重合。既是程序员又要知道怎么排版。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:10",
      "text": "所以公司的这个封装做的不是特别好，露出的东西太多。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:15",
      "text": "而且本质上你还会得得会排版。而且事实上我也知道有我们听众里面有同时加入我们两个群的听众，有太和高手的确是有的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:27",
      "text": "我们之前也我记得好像是我们有一个朋友，还做过tech相关的开发，就是之前请过的江江。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:35",
      "text": "所以这些什么tech高手听完这期节目是会被气的吐。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:40",
      "text": "对吧？我觉得他们也能够理解，毕竟这是一个我们要在短短一两个小时里面解释清楚这件事情本身就是一个不可能完成的任务。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:50",
      "text": "所以现在太和了，是不是在mac上也是可以用的，它好像已经变成一个跨平台的，应该是可以的，应该是可以的对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:13:58",
      "text": "那个那个make tech也可以在跨平台用了。大家都在想办法去挤占别人的地盘。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:04",
      "text": "对，而且这个东西实际上是比较惯性导向的，就是你之前用什么，你可能之后就一直用什么。因为大部分使用了tech的人，实际上是本身的发展没有太多兴趣的。他们有更多只是一个用户自己领域的问题需要去解决。他们可能一开始用什么，或者他们的师兄用什么，或者他们的学校用什么。就他们学校会给一套那个模板，然后这个模板在什么环境之下测试的，他们就会去用那个环境，大概这样一个11个1个模式。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:34",
      "text": "对，因为你要去了解从零开始，没有任何别人给人家你的帮助的话，其实是非常困难的一件事情。我吴涛我问你个问题，因为这里面估计也只有你有可能干这件事情的。你写论文或者写作业的时候自定义过红。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:54",
      "text": "有啊。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:54",
      "text": "那你自定义的红到哪个程度了？",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:57",
      "text": "没有？很复杂，就是大概四五个命令，了不起了。然后定义成一个红。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:03",
      "text": "我从来没有我自定义的红。我就我这么说，我其实从来没有真正意义上写过泰和，我其实都在都在写拉泰和，就是泰和底层那些命令我从来没有碰过。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:14",
      "text": "那这儿我倒是可以介绍一下，就是泰和底层大概是一个什么样子。对，首先说tag，最古早的就是原汁原味的太会有时候也被人们称为plain tag。它的底层是用一种我们跟之前在提到的叫web这种编程员写的。而web看起来是什么样的？高德娜的另外一个理念叫做literature programing文学编程。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:43",
      "text": "这个文学编程这个东西就是他写web的时候发期间发明出来的一套开发理念，你可以这么理解。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:51",
      "text": "然后他这套理念大概的意思就是说我写程序要像写一篇文章一样，就是我要有啊起承转合。就是他要他说我要用人类的语言，用读者能够理解的语言去描述这个程序。然后我这个程序本身是嵌在我的写的文章里面的，这个说法可能比较抽象。具体来说就是说他一开始会，比如说他用写注释的方式来写，说我这个程序是干嘛的。然后我现在要开始一个section，这个section里面包含了以下variable，然后这些variable每个variable是拿来干嘛的。然后用web，你可以去分析你刚才写的这篇文章，把里面你所有提到的。比如说你刚才说我要一下要使用42个variable，然后是每个variable它都有一个描述。然后用web可以把这些variable描述抽抽离出来，然后生成一个程序，这个程序是可以编译的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:45",
      "text": "那么这个程序是什么？具体是什么程序呢？在古早的plain tag里面，这个程序是pascal的一个自己。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:53",
      "text": "不过我们的节目听众就不用解释pass卡是什么了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:55",
      "text": "是吗？对，然后它的web有另外一个模用有另外一个工具，这个工具的用途是的作用是把你刚才写的这篇文章排印出来，就是生成tag来达到一个更加易于阅读的这么一个状态。就是说它他的所谓literature programing的理念里面实现了两件事情。一件事情是让你写出来文章变成一个可以执行的程序。另外一个功能是让你写的文章有一个适合阅读的presentation这么一个功能。OK这是plain tag。然后这个plain tag因为它用的是password，然后如果你要坚持使用它的话，你等于你每一个环境里面都要有一个pasto编译器。而众所周知，pascal这个语言现在已经式微了。所以后来有个人写了一个东西叫做weB2C就是采用C语言来描述这个web里面的程序，大概就是这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:17:59",
      "text": "后来有一个越南人，他在捷克的一所大学里面念博士的时候，写了一个程序叫做PDF tag。然后这个PDF tag它又跳跳过了之前我们一开始介绍的那个PD tag要生成一个DVI的这一步，就是它开改为直接生成一个PDF文件，然后这个东西是用的是weB2C就是说现在事实上最广为使用的这么一个引擎是PDF type，它是基于weB2C的。然后它最基本的最核心的这样一个东西是C语言的一个子集，大概就是这样。然后现在还有一个引擎叫做lua tg然后lua tg就是试图把tech的整个引擎暴露给lua这个本质上还是嵌入到C里面的这样一个烟。然后你可以用lua来做一些比较高层的开发，大概底层是这样一个现状的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:56",
      "text": "没有，如果你要说这个太和的发展的话，刚才那个越南人他是不是叫韩韩特谈是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:05",
      "text": "我我不会念，我也不会念的，还是不要侮辱越南人，对不起，肯定是念错了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:12",
      "text": "我觉得但是因为后面就有很多这样的扩展，对吧？中国的话不是李亚玲他们这也在做，他这个是那个是什么p tag NG是吧？这个我还真不知道，他是从用C语言开发的的，当年他是YINY的tag重新开始写的一个东西，然后直接是然后就可以直接输出PDF的。这里那是010，这个东西现在还存在吗？对，010他自己在维护。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:41",
      "text": "这个名字有点耳熟。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:43",
      "text": "对，他的真名叫马启源，然后在知乎上也是很活跃的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:47",
      "text": "OK太厉害了，一个人维护这么一整套东西。路亚泰和补充一点，他其实是为了解决原始的那个泰和不好编程扩展的问题。所以他其实把路亚的那个比较一个就是如果本来是一个非常简单的语言，它在很多游戏里面是作为这种控制语言存在的。因为它很好的可以很方便的嵌入到CC里面去，对吧？魔兽世界，然后lua test，就是说它整整个把这个lua的解释器嵌到这个tag里面去，然后你很多事情他也能不方便做的。其实对绝大数来讲，就是基本上但凡任何事情你需要编程控制的，你都转到路上去，会比较就是你用起来会比较舒服一些。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:29",
      "text": "然后那天也做了这么一个事儿，当时我记得还有好几个，当时还存在就是从到UNILE的过渡的那个阶段，还有那个叫什么XE tag，我不知道这个怎么念，就是它的XETXZ type z tag是吧？Z tag对，然后还有各种变种，什么PDFZ tag那种，这就实在是太多了。我当时看的头都大，但好像现在反而该发展的发展，然后也就他也经过了现代化的过程，现在留存下来还在活跃开发，然后功能比较全的好像也就那么两三个了。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:04",
      "text": "c type应该是可能现在最怎么说高级或者说最feature complete的一个发行版了一个引擎了。它首先它一开始出发，刚出发的时候就是以全面的unicode的支持为触发电脑。然后它还支持open type之类的。你就是你用z tag的话，你就可以使用你机器上装的文本，装的自己。对，这是很大的一个坑，就是你可能说我想要用tech来排我的东西。但是如果你使用，比如说tech live的话，你会发现自己没有办法使用系统上有的字体，这是很蛋疼的一件事情。但是你要是用z type的话，就可以绕开这个坑。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:43",
      "text": "Z type本最开始的时候，他就是在那个mac OS上面去开发的。所以他当时搞了那东西，成为了这种先进的字体排印技术，各种连字，nature，各种这种高级的open type特性在其他的当时，在其他的type发行版里都是不能支持的。因为它完全不是一个一个不是一个体系，也不是一个技术路线。它然后它是一个年代的东西，完全不是一个连的东西。但是当时那个ZTA他把这两个结合在了一起，然后当时给到我们看到的一些实现的效果，那是非常惊艳的，by the way，那个版本版版本号无限接近于一，就是0.9999，就是这个z tag。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:24",
      "text": "就像刚才我们讨论的这个a tag，还有z tag，包括像PDF tag，他们跟我们最开始讲的这个tech live这样这类的发行版是什么样的一个关系呢？还是说后面我们说的这些像拉tag这样的东西，他们只是负责排版的这个功能，他们只是一个排版引擎。是这样的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:44",
      "text": "这个解释起来又复杂。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:46",
      "text": "ZTAK应该是比较像引擎的一个东西。但是ZTAK面临一个问题，就是如果你要从头开始支持UNIQLD和open time的话，你会需要更多的工具。所以g tak除了实现tag这个程序之外，它还有一些别的什么，就是类似于比如说要去处理uni QLD的，或者说用处处理open type的那个字体格式的一些工具。就等于它有核心的那些程序之外还有一些扩展。而PDF tag的话就是完全只是重新实现了tag和拉tag这两个程序。他们基本上都是引擎，但是他们的规模是不他们的覆盖范围是不一样的。比如说有些一个可能只是一个内燃机，另外一个除了内燃机之外，还有一个power train在那边。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:33",
      "text": "那他们跟tech live这样子的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:23:35",
      "text": "然后tech live就是比如说tech live应该用的是PDF拉太，或者它两个都有，它既有太和也有PDF太和。然后他把所有这些东西外面加上一套编辑器，加上工作流，然后加上一些校对工具之类的，然后打包给你。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:54",
      "text": "说了他和line，我们是不是要讲一下他这个所谓的他这个官方开发组叫做TUG的这个tech user group应该怎么翻译？粉丝群粉丝群。",
      "speaker": "发言人4"
    },
    {
      "time": "01:24:05",
      "text": "tag不是tech life的官方开发组，他tag是的，所有的太tag的用户的一个群组。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:14",
      "text": "对，tag而且高德纳一开始就经常会在里面发些东西，在很早以前然后会做一些更新什么的，都都一直都在这个tag。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:26",
      "text": "Anyway我们跟大家解释介绍一下这个社区。我之前看过他们写的一些论文，跟自己排名有关的，我倒是看过一两，还有一些采访稿。",
      "speaker": "发言人4"
    },
    {
      "time": "01:24:37",
      "text": "因为本来泰和它就是一个排版引擎，所以他们必须要研究排版，所以很多他们研究的排版的论文就发在这个tag上面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:47",
      "text": "我就tag。至于太和的关系，你可以认为有点类似于gnoo之于这个unique或者是index的一个关系。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:57",
      "text": "这不就是python跟pg之间的关系吗？跟PUG之间就是这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:25:01",
      "text": "对对对，它有一个这种是一个比较泛的那种用户的组织。然后很多这种项目都是挂在这个组织的名下，是不是被这个组织sponsor的。比如说我们看到刚才提的那好几个泰和live，mac太和，my mac太和，它都是在这个组织的旗下，然后由这个组织的这个成员，然后再开发维护就大概是这么一些。然后还有一些是非组织的，这就在tag这个tag group以外的，有这种各种专业分支的领域的那也有对吧？他就不严格，是大一统的这么一个群体了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:36",
      "text": "因为它原来的名字就是叫tech user group，对吧？泰和的用户组，所以就是简称TEUG。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:42",
      "text": "对你只要用都可以在里面去申请加入。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:45",
      "text": "然后他们他们有一个叫做boat，就拖船，因为tag本身是拖船的意思，所以他们文字游戏。他们后来发很多那些发的文章，就都都发在那个talk board里面。那里面其实如果刚才说的很多采访去采访高德纳先生，还有个还有各种字体设计师，还有排印的一些研究的论文，就都会发在talk boat里面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:13",
      "text": "对，说到这里，我提另外一个东西其实非常有意思的。就是刚才我们讲的泰和那个拉钛和银行，它其实还是偏向于这种文档文稿，这种长篇的论文为主。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:24",
      "text": "还有一个大的分支的一个流派是基于泰和来做一些更加fancy，就是你想都不想想不到的一些这种图形。你不会觉得他是用这个tag编出来的那个排印出来的东西，但确实是。然后这套体系叫做这个context，有个T了，就给你叫context，就是那个context的那个词。但是它的中间那个TEX是那个text的拼法，就是大写的T大写的X然后大小写的E这个是干嘛呢？当时我有一段时间非常痴迷这个东西，就是就你们写PPT要不就是用powerpoint，要不就是用那个的power point是PPT。你写这个幻灯片就是数码幻灯片的时候，你要不就用powerpoint是PPT的，要不就用那个keynote对吧？这个结尾是点key的文件，但是你也可以用太和这套逻辑来写这个slides。而且当时我记得我有很多上课的这种教授，他们的这个板书，他们也有板书的，就是用这个tag来排版出来投射到上面去的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:31",
      "text": "但是你如果直接用原始的那个太或者拉太和你说你把这个正常的它是定义一个，比如说letter或者是A4的这个纸是一个长条的一个结构，你投到那个屏幕上，4比3它是一个宽的结构。不太合适。我说你可以说，那我重新把那个纸横一下，好像也可以凑合着用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:48",
      "text": "对，但是还是排出来那个东西是比较无趣，对吧？我们知道很多这种板书或者这种slide，它需要有一些有趣的东西，有需要图形，各种箭头去指点，各种甚至是渐变过场动画什么的。这些在传统的拉抬里面都是非常难以实现的。然后就有人搞了这个context这套系统，它可以实际上非常完美的这种就是各种图形，精确的这种图案的生成。然后你可以做一些动画、特效。你看到那个结果，你不我会认为那个东西是用tag做出来，但它确实是这个大家可以去试一下，然后就有个叫做context garden点net，这个网站上是他们的一个相当于是官网的东西。你可以看一下它的一些示例文件，那个是非常fancy的一个东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:35",
      "text": "OK我明白了这个context。至于你就像review JS之于我。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:41",
      "text": "可以这么理解，就本质上你是在编程化的方式去生成你的那个幻灯片，而不是用这个鼠标在哪下点点点的方式来生成那个幻灯片。你可以精确的描述每一个动效的，每一个数学描述你都可以实现出来。这个是当时做出来的，非常令人惊艳。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:59",
      "text": "如果你不想使用tag的话，你可以试试我刚才说的这个review JS。就是你如果你觉得PPT太古hard core，然后你想要使用编程方式来解决你的幻灯片问题，你可以试试我刚才说的review点JS。它是基本上就是你写javascript，然后来生成你的幻灯片这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:19",
      "text": "我想起来了，刚才我们说到了mac上面、linux上面和windows上面。但实际上还有一个现在就是我们现在处在这个网络时代，还有一个更简单的解决方法，就是如果你想要使用tag的话，现在有很多所谓的在线太编辑器SARS。然后有些是对software service在云上的对，就好像现在我基本上写python程序或者写什么小程序的时候，需要写一个脚本的话，我已经不会在本地去写它了。我就去比如说repel点IT或者是什么，诸如此类的online.",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:54",
      "text": "一些云编程对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:55",
      "text": "对，拉泰克也有这样的云编程环境，其中比较知名的一个叫overleaf。对，它是可能现在用户群也蛮多的一个。虽然我从来没有用过，但是有我曾经看到有人用过，然后好像反响还蛮好的。网址就是overleaf dot com。然后你在上面注册一下，你就会得到一个编辑tag的环境。然后它会给你实时的，就像那个rapper一样，给你实时的生成一个PDF。对还蛮好用的，而且好像价格也不是很贵，尤其是对学生来说，一个月9块钱。就比如说你要写半六个月的论文的话，你一个月9块钱，我觉得实在是相当便宜的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:35",
      "text": "太方便了。然后你一举忘掉如何安装和整这个环境的痛苦的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:41",
      "text": "而且随时随地都可以，你不用担心本地数据丢失之类的问题，它是保存在云端的，还是相当推荐的对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:49",
      "text": "这叫什么来着？Cloud native .",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:52",
      "text": "tag 2就1976与20221的完美结合。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:57",
      "text": "这个我印象非常深。当时我在我我用的应该是2000 0几年的时候，就是前后，就是2000 0几年到2010年这段时间，这个十年，这个decade直接就那个时候还没有这种云的这种态度出现。但是因为那个时候的这个cloud的这个info就是旧设施，还没有非常的完善，其实非常不好用。但如果说假设我现在让我丢到一个学校里面，让我再写一篇，我估计我也不会在自己家上安装这个破玩意儿。一次性的要的还是去这种用这种云环境比较简单一些。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:31",
      "text": "对，是的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:31:32",
      "text": "所以一个标准的这个太和的编写的这个就当你编的那个流程是这样。但是我就说可以描述一下，当时你看到你电脑屏幕上应该是什么。比如我通常是一一半屏幕，就屏幕对开，左右两边对吧？然后一边是这个源代码，就是那个太和大太太的这个原始的那个点，太和那个source code。然后一另外一边是生成的那个PDF的那个窗口，对吧？然后把那个编辑器的工作流程设为你这边只要一保存这个太和的源代码，那边就自动在后台编译生成那个PDF，然后在右边及时的展示出来，这样就可以勉强实现所见。等大概一秒钟、2秒钟、3秒钟之后所即所得。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:17",
      "text": "然后当时有一个非常有趣的或者很tRicky的一个实现的难点。就是说如果你这篇文章或者你编写的这个文档有十几页长，对吧？然后你想要肯定是说你当前编写的那边保存的时候，刚好是它刷新出来在右边的那个PDF的那个也是对应到你大致位置的这一行，但是不能严格一一对应。这个当时也很多tRicky的办法在做这件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:41",
      "text": "这个话根本没有找到怎么解决。你刚才说你的典型编辑界面，但我的典型编辑界面就只有源代码而已。我会concentrate，我先把内容写完，然后再一个一个去解决太带给我的种种头疼的问题，就等于先写再排版这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:32:59",
      "text": "所以你是站在编写源代码的时候，脑子里面在浮现出他应该想要的效果，然后之后再去debut。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:06",
      "text": "对一个人肉render的这么一个过程。",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:10",
      "text": "所以你写markdown也是这样子，先一遍markdown source写完，然后再render h阶段看一下，再preview一下。而不是说这种赛道赛的方式。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:18",
      "text": "对，差不多是这样OK.",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:19",
      "text": "那就看你取决于你写什么东西了。如果你还是一个长的普通的文档的话，那可能还好点。因为比如说写论文的话，你论述的东西如果还是很长的话，你还是想去集中的先把这个论述的这个逻辑先写清楚。但是如果你要在渲染一个公式的时候，你得先想象一下，猜一下，然后渲染出来看一下。这个好像又跑位了，不行了，回来调调就会出现这个事情吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:46",
      "text": "不，因为我可能用法比较奇怪，因为我用这个东西最常用的倒不是写论文这种长文的，而是写作业的时候。因为我当时我写字不是很丑，有时候瞅到以至于我自己都不知道我写的草稿上面是什么东西。所以我写作业的时候，其实我其实是在电脑上用泰和拉泰和这个方式去一步一步去进行演算的。所以我一定要看到那个最终结果，在想下一步是什么？你用那个做算术是吧？对对对，就有点这种感觉。比如说我要把那个图画到那个下一步怎么来着，我再用那个来画，对吧？我不会说我在草稿纸上先把这个作业写的差不多，然后再腾一遍，腾到这个拉开里面。我不是这么干的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:26",
      "text": "还是看你写的内容怎么样。每个人写作的那个环境和事情的内容不一样，用法就不一样了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:32",
      "text": "对，尤其是如果你有很多公式的话，它要求你在写公式的时候，你能够确定知道自己的拉泰克的公式是写写的是对的这实际上对于很多人来说还是蛮难的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:42",
      "text": "很难的一件事情就是你想象一下应该是对的，结果渲染出来并不是这个样子，经常会出现这种情况。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:49",
      "text": "对对我我忘了说，还有一个我其实应该说是一个三屏的，还有一个是那个泰和的拉泰和的那个对应的手册。因为你记不住那些符号或者是那些公式到底是哪个，你得不断的去翻，然后包括那个TIKZ的绘图的工具，它也有一个非常完整的也是一本书了，本质上的一个PDF的册子。你要去找它里面到底是怎么去画这个箭头，怎么画到那里去，就是你是要随时去找这个reference的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:18",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:18",
      "text": "所以就很烦的是这其实tech除了我们讲常用于这种数学、理工这种之类，它还有一些这种奇奇怪怪的其他的用法。比如说有人在用这个做音乐，我也也有看到乐谱也可以用这个太和的方式，写出非常严谨的美观的乐谱。还有当时我看到还有很多，反正就是非常小众的用法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:38",
      "text": "但因为我不是我不是做那个方向的这个人，我我我不太理解它底层原理是什么。比如说我一直没有理解他用泰和写5G5线谱是什么一个原理，你们知道吗？或者写音乐的那些东西，他应该也是有什么记号，各种专用的这个红之类的，但是我从来没用过，我这我从来不知道是怎么实现的，因为当时我还做过另外一种一些比较crazy的事情。就是我不是觉得泰和的那个宏编程有一些语法什么的不是太灵活。我甚至还在在为了写一个复杂的一个图形，它可能是要如果要手工去写会非常的麻烦。我甚至是用比如说用python写了一个小程序去生成输出的那个结果是拉泰，然后再做成PDF，得到我就是想要的那个图形，非常的matter这个过程。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:33",
      "text": "但事实上那个web的一个功能就是他先去读取那一段程序，然后生成一段可以被岳泰和来执行的命令。执行的程序，它基本上也是一个代码生成器。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:47",
      "text": "做乐谱的那个是叫什么music tech？",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:50",
      "text": "是不是叫music tech，应该。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:53",
      "text": "但是x music .",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:55",
      "text": "c但我就看人的结果用过，但我不知道他到底是一个怎么一个用法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:00",
      "text": "但不过他还就就是一个还是一个红包。对所以我们今天很很关键一点就是说，我们所有在谈这个排版的时候，它是和字体配套的。这个事情很关键。就像高德他当时他做tag的时候，他他自己做了一套字体，然后这个字体对应的这个排版如何调用之后才能做出精细的排版。否则的话他想着实现这个，他没办法调用，对吧？我们现在平面设计师经常就是比如说我用in design这个平面设计的这个页面的软件，所见即所得。但是in design它需要调用的是open type这个字体里面的高级排版特性。所以说到底就是这个排版引擎和这个字体它是相辅相成的那两边东西得配套好，要不然的话就是很多事情你是在字体层面做，还是到排版引擎做的，很多事情你想不清楚，有的时候会然后高德娜就说什么事情都我来。有了这个computer modern的字体，有了太和，他就可以赋予这个作者所有的权利，fully control of your work. 所以高德娜他自己很开心。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:13",
      "text": "如果你知道怎么用的话，打个非常大的引号，就是你要学会那套东西才行。大宗师不是那么好当的，你要拿着玄铁剑，你得先拿着起来会武才可以。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:25",
      "text": "它是control free，这是毫无疑问的对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:28",
      "text": "这其实也是我们在排版工作中遇到的一个难题。我们知道其实无论是早前还是现在当然更适合字体其实已经成为了排版程序的一个构成部分。如果没有一个在功能上符合这个目标排版需求的字体的话，我们实际上是无法完成整个排版工作的那这一点无论是在tag里面，甚至我们在这个web上面，就在网页上面也越来越是这样。我们需要更多的open type feature来实现一些复杂的排版，甚至只是为了实现一些复杂文字的排版。而这些文字的排版都没有什么特殊的需求，它都不是写公式，也不是记乐谱，他只是想把他自己国家那种语言的文字记录下来。我们就需要用到这样一些复杂的特性，这也是我们现在越来越难以纯粹的将这个内容和样式分离开来的一个原因。",
      "speaker": "发言人4"
    },
    {
      "time": "01:39:22",
      "text": "其实我比较好奇，就是因为我之前在用那个拉tag的时候，有大量的这种情况是没法用通过这种中间插入到word或者是这种word office的方式里面去实现的那就必须要在里面同时解决。当时有一个非常tRicky的一个需求是这样，比如说你要插一个图对吧，那个图很多不是有那种所谓的label文字的那种标签。你想要那个文字标签的字体形态、风格和大小，有可能那个文字标签本来就是个数学公式，对吧？有可能文字标签本来是一个就是一个要跟正文的那个呃字体和排音方式要一致的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:59",
      "text": "如果说你用一个第三方的这种图片插进去的话，就会出现这种各种各样奇怪的问题。比如说最简单一个情况，就是有我看到很多人就是他不用那个拉拉拉开和TTAKZ去生成图片的这种情况下，他是说我在外面找一个通用的画图工具把它画了，做成一个PNG或者是这个svg，或者是那个叫什么EPS这种矢量图形，或者是位图图形。如果他那个不能用矢量来描述的话，然后他再导入到这个word里面去，这就会导致一个什么问题呢？因为它本质上是两套脱节东西。那个图片对周围的文字是没有这个意识的。那么你缩放那个图片就会导致那个图片里面的那些text label，那些文字标签的大小和外面的那脱节了，就完全不一样，脱节了并不联动。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:45",
      "text": "对，甚至你我们看到国内很多那种用word写论文的人，你那个论文一看就是word写的，为什么呢？因为它里面的插入的那个图片是比例是不对的，然后那个字形和和周围的文字是完严重脱节对吧？它字号都不一样，然后这个字体都完全是不是一个东西了，这些都是在tag里面解决的比较好，它是你嵌入了一个tag那种native那种图形，它的那个文字label它还是用泰和来排版的，它会非常的一致。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:15",
      "text": "不，你那个图也必须要因为配合他的那个方法来画。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:20",
      "text": "对对，所以我觉得他必须是在同一个语境里面去，就是他没有这个割裂感。对，甚至你那还有像我之前刚才讲那个context那种非常诡异的需求，它可以实现什么呢？就是你的你假设你想象一个页面上有一个插图，插图里面有一个箭头，箭头里面指到你这一页上某一段话的某一个字，上面有一个符号，它可以指到那个上面去。这个在普通的那些里面，那个插图的方式无法实现的。体系里面就是它是互相是之间是能够互相理解对方的结构的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:51",
      "text": "他们说的是同样的语言，所以他能指的能定位，能定得到。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:55",
      "text": "对对对，如果你插图的话，你就单纯那种普通的，比如说是这个PNG，你是无法从PNG插图里面去指向你的文档里面的某一个字的，因为他都不知道你要插向哪一个文档，对不对？这个还是有一个非常不一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:10",
      "text": "体验的对，但其实这样子的这个排版，它它其实之所以它能排的这么准，它是因为所有的东西都是在一个封类似接近封闭的环境中实现出来的。如果从这一点来说，如果假设我们很极端，我们说我们写一篇论文，我们每个字都用photoshop来排，那它最后就是一张位图，它必然每一个细节都可以排得很准。之所以我们用word来排，有的时候发现有一些图片的里面内嵌的那些字体的样式跟整个文档的样式脱离了。是因为有可能他这个图片并不是这个作者自己做，他只能从什么地方拉了一张图片过来，这个图片里面有一些文本，其实这个图片的生成环境都不是由他自己来控制的那自然会产生。",
      "speaker": "发言人4"
    },
    {
      "time": "01:42:54",
      "text": "一种对的好处。就是说他如果说你都用，比如说你都用TIKZ来做图，它那个图的那部分代码是可以单独拷贝出来的。所以你只要再做一些小小的修改，就可以让那张图无缝的嵌入到你自己那份文档里面去。你是有那个源代码的，而不是只有一个最终的结果。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:14",
      "text": "所以这当年高高老师说的，我用配合的话，我是不管你用什么设备，不用用什么环境，最后生成东西都是一样的。对，这个就是他当初用做太和的最基本的一个目的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:28",
      "text": "对，所以我就很好奇，就是现在我们用的这种商业应用的排版工具，它是怎么解决这种类似的这种需求或者是问题的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:36",
      "text": "如果你在他自家的一个封闭的环境里实现，其实adobe提供的工具也足以实现这样的需求。比如说你在in design里面排一个很复杂的书籍，这书籍里面可能有一些图片，甚至图片上面会有一些小的文字标注。如果你这个图片是用photoshop做的，或者是用elastic做的，然后你把这个eleven做好的图像文件一个外点link的方式，可以link到这个ensign内部，或者直接插入进去，成为这个ensign文档的一部分。那你也可以几乎保持说，它不会产生任何意外的情况，它都是受你控制的。然后你也可以随时再编辑那个图像文件里的内容，保持一个两边实时的同步更新。",
      "speaker": "发言人4"
    },
    {
      "time": "01:44:19",
      "text": "而且是native的更新。它可以实现说刚才我说那种情况，就是某一个图片里面的一个元素，一个箭头指向这一页这个图像以外，你这但是还在这一页上的某一个文字的某一个角落。随便举个例子。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:36",
      "text": "你的意思是假如说我下面这个被指向的文字，它因为比如说修改文本而被重排了，所以这个箭头还能不能始终指向它，是不是？",
      "speaker": "发言人4"
    },
    {
      "time": "01:44:45",
      "text": "对，要跟着他走，不然没有不要没有意义。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:48",
      "text": "对这部分可能在平面设计软件里还比较受限，因为这样的需求不强，可能或者说对平面设计师来说，如果产生了这样子的情况，他有可能需要人工来解决这种情况。因为他有可能觉得机器自动给他重新安排的这个结果并不满意。所以这个需求不那么的强。",
      "speaker": "发言人4"
    },
    {
      "time": "01:45:09",
      "text": "就相当于real的要求是他们要有所谓the ability，就是可以互相交互。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:18",
      "text": "所以这也是就是用tag中间我产生的一个非常奇妙的一个感觉。就是说你能感觉到它的强大，但是你也能感觉到他对你的制约。就是说有些他给你定义好的东西，你就只能那么去用它。比如说那条线要怎么走，如果你要你当然你完全可以重新把那个红包打散，自己写一个让你足够满意的红包，对吧？是那个过程是非常痛苦的，以至于我就说将就一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:45:42",
      "text": "就用这个自己画轮子。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:46",
      "text": "对，这一张人是很很痛苦的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:45:48",
      "text": "其实real说的这种情况更像是我们现在在用这个web排版里面实现的一些特性。也就是他有我们用一个很俗的词，就是他有一些responsive的特性在是是是它能根据你这个呈现媒介的改变，甚至包括你能实时的修改一些文本，但是还是保持着一些关键的排版特性的稳定性。",
      "speaker": "发言人4"
    },
    {
      "time": "01:46:09",
      "text": "就是那个PDF不是有一些这种可编程的功能，它可以嵌入javascript然后做一些交互。当时有一些那种比较疯狂的text的那种这种这种就是先锋，它可以直接生成可交互的PDF。比如说最简单的是用那个contact做那个幻灯片，对吧？幻灯片不是有所谓的快进下一页页首页尾，或者是到某一下一个章节的标题，这种都有的。它可以在BDF里面实现一个导航栏，都可以通过这个来实现，非常的厉害。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:38",
      "text": "对，PDF时间表单也是可以的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:46:39",
      "text": "你可以填表。对它，而且它会自动数据收集。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:44",
      "text": "但这个我觉得现在反倒是有一点式微了。就是我发现越到后来，因为pat说本说白了它最终还是99%是为了打印的那个场景设计的排版。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:57",
      "text": "它核心是一个排版，你们所对他的过度使用其实都是误用。",
      "speaker": "发言人3"
    },
    {
      "time": "01:47:03",
      "text": "对对对，就他还是为了这个打印出来在在使用的。但其实现在我们看很多，我其实已经很少把一篇论文打印出来再看，都是在电脑屏幕上看。就是说是否还有必要拘泥于这个配置，这个页面，这个概念对吧？都已经其实这个一代概念已经开始在逐步淡化了。像太和他花了很多时间去研究说，我要为了把这一片文字和这个公式完美的塞进一个固定的尺寸里面空间我要做什么标点挤压，我要做各种什么这种这叫什么分词，各种happy nation，各种就这种变种，这种操作的这个公式这么行，一行写不下，到底应该在X还是Y，哪里哪个地方断开这种非常细致的规则。但随着这种无线就是相对来说灵活的这种展示界面的存在，它好像这个需求已经不那么强烈了。那无非看不下，我就把那个浏览器窗口拉宽一点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:05",
      "text": "对，在节目里最开始实际上我就提到了这一点。我觉得现在拉太对或者说tag本身的定位是一个比较精准的小众的局局限在插入公式这一部分。你拿真正拿来拿泰克来排版的人，实际上是就是你越来越少了。对，在整个的个人出版领域里面，实际上是已经是很小的一部分。就反过来说宗师级的解决方案实际上是不适合。",
      "speaker": "发言人3"
    },
    {
      "time": "01:48:37",
      "text": "普通人的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:48:39",
      "text": "对他将排版这样一件其实高度依赖于视觉结果的这样一件工作，给你添加了一个比较抽象的中间的这样一个过程。它需要你用一些相对抽象的方式去描述你的排版，而不是像早期的平面设计师一样，他们甚至将一个剪贴画剪下来，直接粘到纸上的某一个位置。这样子的一个直观的过程。对我觉得这是他比较难上手的一个原因。",
      "speaker": "发言人4"
    },
    {
      "time": "01:49:07",
      "text": "你使用这个东西是需要经过一套你并不就或者说违反直觉的训练的。这个我觉得在很多设计师这边实际上是一个很大的阻力，违反直觉这件事情在设计师这里是行不通的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:22",
      "text": "也不叫违反直觉，就是不直接not .",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:25",
      "text": "intuitive，他没有那么直观的意思。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:31",
      "text": "他不是not interior，他是counter intuitive，他是反直觉的对对对对对，creativity exact就是他说的是反人性的，你知道吗？它本质上让你变成一个叫做什么来着interpreter对吧？脚本解释器你要去运行这段结果，大概在在你的脑子里面肉就是叫什么人脑去演算这个tag排版算法的结果，得到说它大概会长什么样子，然后你再得到那个PDF，在看到底是不是你想的那个样子，会不会什么bounding box overflow这种东西就出来了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:04",
      "text": "这实际上就是编程对于人的异化过程。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:07",
      "text": "他是宗师的工资，他不是普通人的工资。",
      "speaker": "发言人4"
    },
    {
      "time": "01:50:11",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:14",
      "text": "但是一开始刚才说到那个连字分段词的的那个算法，其实他做的挺好的。而且因为你人工排版的时候，你可能只能顾着这一行来排。但是他现在就是所就是所谓我们现在阿杜比的算法是在单行道排版器和段落排版器。它可以在根据这一整个段落的数行，它能根据它这个公式计算出一个最小的调整值，然后得出最佳的最佳方案。这个东西就是电脑上层做的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:47",
      "text": "这还不是最狠的，太狠做的更狠。在这里他可以做全局的优化，就是说这一整页里面我觉得是不是要在这里断，会导致后面三个五个自然段之后的那个排版的。所以违反了一个更大的一个代价，它有一个整篇的全局优化的这个过程，它有好多个参数。对，而且我印象最深的就是说它在相当长的一段时期内，他的那个就是编译编译那个泰和文本到最终这个DVI也好，PDF的结果，它不是这个one pass的，它不是一遍就完了，它可以multi pass。就是它去不断的去进行全局优化。然后使得说你你他你得到一个整通篇文稿里面最小代价去违反把那些排版规则的总和的一个总成本。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:32",
      "text": "对，像这一类事情的话，就是计算机所擅长的部分。哪怕你是一个很训练很几十年的一个高级的一个排版师，也不会比这个计算机它做的是经过计算以后，根据这个算法计算出来的这个演化采取的一个最优值会好，对吧？所以这部分配合是很厉害的。是但是反过来讲，如果就对于那个公式排版里面比如说你要等号对齐加多少宽什么的，控制多少这个东西的话，需要人再重新去反渲染的话，这个的确就是说不是机器所擅长的东西，然后需要人进行非常多的干预。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:14",
      "text": "当时我印象非常深的一个点就是说当时因为我自己写论文，这里面跟普通的排版有点不太一样。就在于比如说比如说我我我问一个，我理解应该是这样子。就是说比如说你拿到一个别人的书，你要排你是不能改书的内容的，对不对？对，但是因为我是自己写论文，我知道写到了最后那一句话的时候，刚好就多了那么一行。然后你无论如何都调不回去，然后就不多一页空白页的时候，你说你干脆把最后那段话改一下，缩短一点点好不好？",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:41",
      "text": "编辑其实是有这个权限的，编辑在排版之中起到的作用有时候就是这样。他觉得对这篇文章可能排了一一整页加一句话。那我把那句话改一改，或者把这个篇幅缩一下，然后跟过作者沟通一下就好了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:52:56",
      "text": "所以编辑有这个权限，但是排版师没有这个权限。对，比如你想这是一个非常有名的作家，一字千金的，你敢改字吗？不敢的对，有违约了会出事故的。所以编辑如果觉得有必要，他他可能倒回去和作者去联系这个事情。再难的东西你的排版都能排得好，这才是你排版师的厉害之处。你拿去改字，这个算什么，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:22",
      "text": "那所以本质上你看排版师本质上也是一个人肉的那个对吧？那个就是layout的auto layout的计算器。你要知道怎么排查，怎么变得好看，你脑子中有各种各样的规则，对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:37",
      "text": "一个人肉的。Page maker的。我刚才查了一下，我才发现page maker这个东西已经在2004年的时候就早就没有了。我的天哪，我靠。",
      "speaker": "发言人3"
    },
    {
      "time": "01:53:45",
      "text": "我这些我一直想着找个机会再取证你，但是就没有机会。",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:49",
      "text": "十几年来我都活在一个谎言里。",
      "speaker": "发言人3"
    },
    {
      "time": "01:53:53",
      "text": "对，我们现在都用in design，而且你在design都二十多年了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:57",
      "text": "对我我知道我其实我天天就是我刚才所有提到page maker的地方，我想说的其实都是in design，就是那个我甚至我知道我能想起来那个logo是写的ID但是我就somehow把它叫成了pagemaker上上个世纪的记忆。",
      "speaker": "发言人3"
    },
    {
      "time": "01:54:11",
      "text": "实在是用in design的话，先不考虑钱钱的问题，它比较贵，我有可能拿它来写毕业论文吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:19",
      "text": "取决于你写什么级别的毕业论文。刚才我想说的一个事情，就是不管是tag还是design，实际上都有一个问题。就是它如果你要使用比较专业的plot工具的话，他们还是必须使用第三方的东西。就比如说math plot lib公式很多就会卖类。",
      "speaker": "发言人3"
    },
    {
      "time": "01:54:38",
      "text": "对它就是没有很好的公式处理工具。",
      "speaker": "发言人4"
    },
    {
      "time": "01:54:41",
      "text": "就是画绘那种根据数据绘出来的图对吧？它是没法支持这一点的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:47",
      "text": "或者是你画一个什么三维界面的，三维里面的流行之类的东西，你你你要怎么用的TZ来画，不可能的。所以这些东西其实还是有局限，可以的TZ可以画可以的OK可以画一些简单的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:55:02",
      "text": "然后刚才我不是说我用python写了一个代码输出这个然后tax的命令来直接绘图吗？输出的就是TIKZTXZ的那个代码。然后它实现了一个我想要的图形，为的就是解决刚才我说的那个问题。就是他画出那个图形中间是有一些text label是需要跟周围的长相一致的那你用任何其他的工具是没有办法实现这一点的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:55:27",
      "text": "然后这又退回来。这个本这个软件的本质就是因为tag它是开放的开源的。如果你有这个需求，你自己去写个红，写个包，你自己造个轮子，然后你就可以添加功你就可以添加功能了，对吧？那你自己拿去用去，但是对于阿杜比公司来讲，应地带是他们专属的。然后你这个需求太小了，我干嘛要给你做，对吧？然后这个东西你看就回到。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:50",
      "text": "了那个开始无套念的引用那一段对自由软件的指责，对吧？确实in design是一个设计的非常好的工具，它具备非常他凝聚了非常多工程师多少的辛苦劳动的结果。当然他得到的结果也是非常的这种professional专业的这种结果。但是他不能解决我这么一个特别定制化小众的需求。所以你看在这个研究领域，在这种特别是那种探索边界的那些人，他总是要遇到这种h case。所以还是要用这种开放的，这种开源的自由的软件才能够实现它的那种可能。全世界就只有他这么一个人，在20年时间内用了这么一次之后，再也没有人想过这个需求。硬件肯定是不会做的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:56:36",
      "text": "其实还是看你怎样衡量这个排版的工作量。比如说我们用in design，理论上你完全可以人肉的实现，所有公式编辑器可以实现的。这个事情你排一个公式，它结构很复杂，但它再复杂，他无非就是在一个二维的平面上。",
      "speaker": "发言人4"
    },
    {
      "time": "01:56:52",
      "text": "把这人工排它也可以？",
      "speaker": "发言人2"
    },
    {
      "time": "01:56:54",
      "text": "文字放到固定的位置。对，就应该在完全有这个能力，而且做这件事情未必很复杂。就是他他的学习成本首先非常的低，其二就是他未必很复杂。如果你的公式量不是非常的多。",
      "speaker": "发言人4"
    },
    {
      "time": "01:57:08",
      "text": "那就就就你这个如果就不成立了这个意思，你这个如果不成立。",
      "speaker": "发言人2"
    },
    {
      "time": "01:57:14",
      "text": "是说到你在做这个技术类书籍。如果我没记错的话，小零件的CJKV information processing应该第二版就是用一个zmp，第一版好像是page maker拍的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:57:24",
      "text": "小林就随便写一个技术文档，都是用in再写的这么。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:28",
      "text": "硬核的吗？他自己页一页就排吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:57:31",
      "text": "对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:31",
      "text": "他自己做。对对对，他是自己写的。高德所以。",
      "speaker": "发言人4"
    },
    {
      "time": "01:57:36",
      "text": "说到底的话，对于他来讲的话，因为写文章是关键用的工具是什么？就是其这次要对于他来讲，他用的上手他就用，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:47",
      "text": "这就好像中国有好多企业内部交换文档全都是PPT1样，就不管干嘛都是一个PPT发过来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:57:53",
      "text": "所以我们本质上是需要一张数码白纸，对吧？不要给我加那么条条框框，我自己把它摆在那里，这是哪里你所需要的，就是说让怎么让我能够自由的通过一个规则能够摆在那里而已。",
      "speaker": "发言人2"
    },
    {
      "time": "01:58:05",
      "text": "数码纸张其实就是PDF，它是一个容器。那那你怎么再怎么打印，怎么画，这个是另外的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:12",
      "text": "但是PD没法直接生成，你得有一个工具才能生成它。所以keynote PPT反而是比较相对来说简洁直观的。但确实也是有我看到很多人最终他搞不定了，他就直接开一个PPT，弄成白板删掉所有文字，然后一个一个摆一下他需要的那个相对位置也可以。本质上是你在白纸上用手写，然后再把它拍成照是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:58:37",
      "text": "PPT是我我在我在研究生的时候交的提交的论文的学术会议。他应该是他应该也是h boy下属的一个学术会议，官方推荐的海报排版公司，甚至他给的官方对，就是你的论文有可就是你的paper有可能有两种发表的形式吗？一种是presentation，就是你去那边做一个演讲。另一种就是poster，就是你在会场贴一个海报，然后你站在海报旁边等别人来跟你交流这样子。然后他的官方给你的这个排海报的排版模板就是一个power point的一个文件。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:11",
      "text": "这里面有各种什么会议的logo、元素，这个指定的字体样式都给你定好了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:59:18",
      "text": "对吧？没有，很简单，就是他会给你一个比较简单的框架。因为那些会议一般它没有什么logo，它可能他可能主要还是侧重展示你自己的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:28",
      "text": "它有一个格式。对，有一个大致同样的通用的格式，标题是什么？作者是谁？会议名称某某第几届什么什么conference之类的。这种会给你定好了那个模板，这就这中间是一个大白板，你自己写。",
      "speaker": "发言人2"
    },
    {
      "time": "01:59:42",
      "text": "但其实你最后交的这个海报，如果跟他这个格是有很大的差异。但是基本的文本信息是对上的话，它其实不会干涉你对这个设计的改变的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:52",
      "text": "你达到目的就可以了，毕竟不是一个商业发行。说到底的话，对你们现在再来讲讨论说太和有各种各样的不好的地方。当时无非就是高端的，他自己想把自己书印好了。人家很牛，他自己为了自己排出，他自己写了一个拍卖引擎，自己做了一套自己然后他写出来了，但是他觉得挺好的，于是他就开源出来了，大家也都可以用，就仅此而已，事情就结束了。你们爱怎么用，你们这爱怎么这怎么怎么导，这是都是大家后来的事情了。他原来的目的就想只是想他觉得原来那个招牌排出来那个班，他自己的书太难看了。然后他希望他想对他的作品有full control，完全的控制。所以他写出来这样一个东西，而且也只有像他这样的大事，才能就把自己的字体和渲染引擎写出来。",
      "speaker": "发言人1"
    },
    {
      "time": "02:00:55",
      "text": "而且好像自从那之后，从来没有人想过这件事情的。都我感觉已经没有人有这种胆量去尝试这件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "02:01:07",
      "text": "对，这件事情太跨学科了。他对字体排印的知识要求也非常高。我记得高德好像还跟tap服有过很深度的合作。对，没错，这我们也可以讲一讲。对。",
      "speaker": "发言人4"
    },
    {
      "time": "02:01:17",
      "text": "没有。他他他当时其实是没想那么多了，他就觉得这个太难看，然后自己写个。他当时一开始觉得说这事情花几个月就能搞定的事情，然后他才发现他太乐观了，是个大坑。",
      "speaker": "发言人1"
    },
    {
      "time": "02:01:33",
      "text": "而且他一开始就是他决定要做这个字体的时候，他其实也想了，他还想用别人的东西。而且他那时候失落，不是那时候已经有那个实验室有一些东西吗？的打印机什么，他去问就是说我能不能用。施乐跟他谈判的基础就是说你可以用我的设备，但是最后做出来的东西又归于我施乐，然后他就不愿意了。这个东西最后做出来应该开源给大家用。所以他的后来一想不行，想来想去我还是得自己重新做。",
      "speaker": "发言人1"
    },
    {
      "time": "02:02:04",
      "text": "然后他发现穆既然目前所有的东西他不能去改动现有的字体，那他只好去重新再做一个字体。他要去学习的时候发现你这现在现无论是那些矢量和那些点阵的字体都不能满足他要求。那我就干脆直接向现成的字体设计师去学如何画字，然后再用他的这个程序教电脑如何画字。",
      "speaker": "发言人1"
    },
    {
      "time": "02:02:32",
      "text": "其实他做的那个meta phone的话是真正的在画这个字。因为我们现在用的这个矢量字体它只是轮廓，就是把那个字体的勾边勾出来。但是meta phone它是真正他教他的那个代码是在写这个字应该怎么写，一笔一划怎么写。",
      "speaker": "发言人1"
    },
    {
      "time": "02:02:51",
      "text": "对，就最终它是渲染出一个位图的格式了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:02:55",
      "text": "它的那个是矢量的。但最后他他最后必须得渲染成位图，最后给呈现出来，对吧？因为这个渲染这是最后的事情了，但是他的那个代码最后是他的确是叫这个点位移移多少，这个笔画是怎么样的，然后最后在上面长肉是什么样的。3 metford其实是在画了个字，他之所以有这样一个思路，就是因为他在做字体的话，他是直接找这个字体设计师。他他就当时就去找碴屠夫，他们说比如说我画个字母A的，先画右边1比1左边一笔，然后那个衬线怎么加，然后再削掉一点，就一步一步真的就是按写字的那个步骤是写出来的，一笔一笔写出来的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:03:37",
      "text": "就是meta fund是这样的，就是meta fund的机制它是矢量的，但是metal fund绘制的结果好像是位图。",
      "speaker": "发言人4"
    },
    {
      "time": "02:03:46",
      "text": "它是个rush rise。你要指定一个他，你在调用meta fund的时候，你要是你是要指定单位的，那这个单位是拿来干什么的？肯定是拿来画，就是拿来定位的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:03:58",
      "text": "对，因为要meta fund你还得有字体知识，而做meta fund的厂商非常少，现在应该已经绝迹了。",
      "speaker": "发言人4"
    },
    {
      "time": "02:04:06",
      "text": "对，因为特别难写，因为他要等于教电脑怎么写这个字，因此就是要六十多个参数，就是老多参数了。这个对于一个设计师。",
      "speaker": "发言人1"
    },
    {
      "time": "02:04:21",
      "text": "而且他是非常不直观的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "02:04:23",
      "text": "你是其实是输，你是在写代码。对对，设了好多遍，你首先我一个新的字体要设多少个变量，你得想对吧？然后一个参数都要赋值，然后怎么让它怎么动起来，怎么怎么加撑线，这个对于一个普通的设计师来讲太不直观了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:04:41",
      "text": "对，原来是这样。所以其实现在也没有人在用这个meta fund做字。",
      "speaker": "发言人2"
    },
    {
      "time": "02:04:49",
      "text": "然后当时我记得我用的时候，其实已经是过了那个时间段。我用的那个时候还有两个并行的系统，就是太和系统。要去引用一个系统自是非常困难的，但是还要转换格式，要转换成一个太阳能够正，不是说你丢一个TTF或者是open type给他他就能能能用了。但是后来越到后来，像什么z tai和特别是ZTA和出来之后，它是可以直接调用系统字体。因为它是mac上面的，mac上面他本来就是把这个open type那套做成一个系统级别的这个API可以暴露给上面的这个应用程序。所以它并没有像最原始的那个tape那种，你还得自己用自己的什么把它放到那种格式去描述这个字体。当时还有好多这种所谓的中间格式，什么放t one，那些还中间还要转转很多遍，后来都是可以直接就调用系统里面存在的open type或者true type字体就可以了，就不用再考虑什么meta font了，包括这个甚至这个computer model。后来也有人转成那个true type还是open type的格式，放在那个库里面就供直接使用了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:05:53",
      "text": "而且这很重要一点就是说大家感觉这个字体就是它的一个造型，这个造型轮廓而已。其实更重要的对于排版的来讲，是以很多里面的matrix，就是它的那个度量信息里面记录了。比如说这个基线是在什么位置，然后这个字这里酱瓿是有多高声部有多高，这些东西都必须要让排版引擎进行读取它它才能调。要不然的话他找不他不认得这个字的话，他没办法调你上下标，你要给他挪多少位置之类的，极限要提高多少，这些东西都都必须要字体里面先要有这个信息，然后要让排版引擎知道。",
      "speaker": "发言人1"
    },
    {
      "time": "02:06:31",
      "text": "大家知道泰和和原来和和open type，它原来根本就不是一个体系的这个东西。所以他们两个人这两个东西之间，让他们互相推交流到这个信息，然后让他互相知道这个事情，本身就是一个很难的对，原来的话高德纳他因为meta phone的是他自己做的，他所有他自己新定义了一套matrix。让太和能调用他自己做东西就他自己调用。对，这个就正如阿杜比他自己open type，他这个spec就是阿杜比他自己开发的。他然后在in design，又是他自己的软件，所以他自己的软件调open type特性就调的特别好。所以你在方阵的软件里面，排版软引擎里面，你要用阿杜比的open type特性，就特别难受，就调不出来。因为他们不是一个系统的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:24",
      "text": "那这些国产的这些系统软件，它难道还要说要求用国产的字体格式才行吗？就是他怎么解决这个问题呢？",
      "speaker": "发言人2"
    },
    {
      "time": "02:07:32",
      "text": "在很久以前，在方阵软件必须要用方正的字体。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:37",
      "text": "以前是不就是方正自己有一个格字体格式的对。",
      "speaker": "发言人2"
    },
    {
      "time": "02:07:41",
      "text": "没错，是的。但后来也是终于可以用TDF了也也能也能也能用open type，这也是很后面的事情了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:48",
      "text": "那那现在这个业界不都统一到这个对出type open type这两个格式了，那现在所有的现代排版软件都得支持吧？",
      "speaker": "发言人2"
    },
    {
      "time": "02:07:59",
      "text": "啊，对，但是你也知道，open type不有一是微软，微软和阿杜比做的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:06",
      "text": "OK这跟WPS之类的差不多，其实对支持的程度。",
      "speaker": "发言人3"
    },
    {
      "time": "02:08:10",
      "text": "也可以不一样。因为你想一个字体里面，现在的open type字体它的特性非常复杂，它有很多指导你怎样去排版的特性。而最早的一个true f的字体，它其实指核心的功能就是描述一个具体的gliff，它的轮廓是什么样的，就比较简单。方正其实他以前就是通过排版引擎来实现很多排版的特性。但是现在可能业界更希望大家能够遵循open type这个字体里面已经写入的一些排版特性，来实现一些排版。",
      "speaker": "发言人4"
    },
    {
      "time": "02:08:42",
      "text": "就是这个权利到底是在排版师那里，还是在自己设计师那里的问题呢？",
      "speaker": "发言人2"
    },
    {
      "time": "02:08:46",
      "text": "在在哪个层级你要说好，你就互相能调用就可以。像配合和meta fond都是同一个人做的，所以他自己想清楚，他自己做互相调用就很顺。那你到另外一个系统去系统压榨这个搞不清楚。",
      "speaker": "发言人1"
    },
    {
      "time": "02:09:02",
      "text": "是因为毕竟互相都不能直接干预对方的这个成果。他自己设计师也不能说我自己只能用在哪些领域，他也不知道你应用场景是什么，只能给到你一些通用的建议对吧？然后排版室那边这就是hint，对，hint. 然后排版室那边也只能说我根据我现在手上这个工这个作品的特殊的情况，选择要不要启用你的那个，还是说我自己自自己定一个规则说了算算了，对吧？因为有些特殊情况你要特殊处理的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:09:33",
      "text": "搞一个很简单的，就是网页排版，连一个行高都算不清楚，就是这一点。不同系统的，它读取的open type特性里面那个字段的行高的那那个数据字段是不一样的。每个浏览器读出来的数数值数值都不一样，它算出来的位置就不都不一样，它渲染出来东西都不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "02:09:53",
      "text": "所以这一套有什么国标之类的吗？还是说他只有行业标准，就大家各自去想办法解决。",
      "speaker": "发言人2"
    },
    {
      "time": "02:09:59",
      "text": "最典型的open type就是一个商业标准。这行业巨头首先提出来的，因为是大厂商做的，所以大家自然而然的也就都跟进。",
      "speaker": "发言人1"
    },
    {
      "time": "02:10:08",
      "text": "从这个侧面来讲的话，高德纳是一个人挑，就是一单枪匹马做了一套系统。然后我们在这边拿来和整个业界做出来的一套系统相比，这是这就是大宗师的风范。",
      "speaker": "发言人3"
    },
    {
      "time": "02:10:20",
      "text": "对，不是错了，是大多数做的时候，业界这个事情还不存在。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:24",
      "text": "没有这个业好吧。",
      "speaker": "发言人3"
    },
    {
      "time": "02:10:25",
      "text": "业界还不存在的，没有这个行业四十多年。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:29",
      "text": "前70年代的事情。对，所以那时候桌面排版是什么？那时候还没有mac.",
      "speaker": "发言人1"
    },
    {
      "time": "02:10:35",
      "text": "那个时候PC都没有，还桌面排版。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:39",
      "text": "对。所以从这个意义上讲，其他真的是一个传奇，就是一个人开创了一个领域。但是而且这个领域的这个成果到现在还是被被一些比较像他一样比较喜欢走极端的人所使用的。而其他的赎民，或者说没有那么geek的人们，则在使用着另一套可能更user friendly的系统。而他们的最终的结果几乎是。",
      "speaker": "发言人3"
    },
    {
      "time": "02:11:06",
      "text": "不分伯仲的。我不知道你们，但是有时候我会觉得太和排出来的东西太有风格性了，就是你一看就知道这是太和写的。但是反过来一个用word或者是word.",
      "speaker": "发言人3"
    },
    {
      "time": "02:11:18",
      "text": "也很有风格。",
      "speaker": "发言人2"
    },
    {
      "time": "02:11:19",
      "text": "还有用艺术字。",
      "speaker": "发言人1"
    },
    {
      "time": "02:11:22",
      "text": "用in design排出来的东西，你就会不太知道说这个东西到底是怎么来的。有时候太风格化可能也不是一件特别好的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "02:11:31",
      "text": "这也是程度的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "02:11:33",
      "text": "他有点千篇一律，很多人他不会配置那些太很多个性化的参数，因为调个性化要牵涉到很多这种参数的变动，其实有时候不一定能得到好的结果。",
      "speaker": "发言人2"
    },
    {
      "time": "02:11:42",
      "text": "对，还是那句话，you have to know everything to do anything. 还是蛮难的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:11:47",
      "text": "就哪怕是最简单的，你就换一个字体。你比如说你就不是你就看不惯这个computer model这种圆滚滚的这种长相的字体。当时我就有这个问题，我说我选我换成那patino对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "02:11:58",
      "text": "我用的是parao。",
      "speaker": "发言人3"
    },
    {
      "time": "02:12:00",
      "text": "对，但是你一旦你用pantin's，你就要考虑你的那个公式的问题了。因为公式的它当时很多pantin's的这个就是没有希腊字，希腊字母罗马字母它是不齐全的，或者你必须要用那个代替自己，你就发现公式的特别难看，这是其一。第二个就是说数学排版，特别是公式排版的。但那间距那些那些就是那些matrix，就是那些数值标注，它是根据那个字体来定制的。然后你换一套字体，它写在字体里头了，他他他你就换个字体，就发现那个就是更难看，对吧？就没有了，就很麻烦。所以到时候大家就最最偷懒的方法就是直接啥也不改，直接写对吧？写内容就好了，不要管还是这个问题，而且不要去定制他的长相。",
      "speaker": "发言人2"
    },
    {
      "time": "02:12:40",
      "text": "所以用太和做出来的东西都是一样的。然后大家都知道，这是一看就知道，这是太和谐的。也是一个传奇的鸡生蛋和蛋生鸡。",
      "speaker": "发言人1"
    },
    {
      "time": "02:12:52",
      "text": "但我不知道如果说以后的那种论文，如果不需要考虑是一个页的形式存在，它可以是一个score对吧？一个长卷轴的形式出现，那其实很多排版的难题可以降很多维度。",
      "speaker": "发言人2"
    },
    {
      "time": "02:13:05",
      "text": "对你你的意思是把排版都转嫁到浏览器上了，浏览器的引擎实际上就是一个排版引擎，你不需要静态排版了。然后不是。",
      "speaker": "发言人3"
    },
    {
      "time": "02:13:16",
      "text": "动态版本就是一坨屎。现在就是你看CSS排版现在的能力那么差。",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:20",
      "text": "就在这一点太难了，这真的太难了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:13:23",
      "text": "没有需求，就是这个问题，浏览器厂商天天要考虑各种安全问题，还要给你搞这种非常坑爹的排版。那怎么去死吧。",
      "speaker": "发言人2"
    },
    {
      "time": "02:13:33",
      "text": "你在外部排版，你连对方用什么字体都不知道了，你得猜。",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:37",
      "text": "现在不用了，现在有refund，可以指定了，但只是说最终体积的问题还是不太好说。",
      "speaker": "发言人2"
    },
    {
      "time": "02:13:45",
      "text": "对，不过我们自弹自唱也花了两期时间就讲web排版的事情，大家可以回去听。",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:53",
      "text": "这次他没有说是哪一期，我已经很欣慰了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:13:57",
      "text": "你一定要逼我说吗？",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:59",
      "text": "偶尔我也能依稀想起来内核恐慌聊过什么。",
      "speaker": "发言人3"
    },
    {
      "time": "02:14:02",
      "text": "因为刚好就是前两期，不远。",
      "speaker": "发言人1"
    },
    {
      "time": "02:14:05",
      "text": "OK。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:06",
      "text": "今天也聊了好久就好了，差不多多了。我们说了这么多，我好难解，是不是要收尾了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:14:13",
      "text": "同学们好吧，来澳洲好。",
      "speaker": "发言人3"
    },
    {
      "time": "02:14:16",
      "text": "我们今天的节目就暂时告一段落。我们今天也是我我们需要在这里提一下这个事情。我们今天也是首次尝试在club house上面同步我们直播的，同步我们录播的这个内容，然后一个直播的形式是我们的。我们这房间还剩下多少人？现在还剩下三十多个人我我们死忠粉丝，也非常感谢大家一起跟我们完成了这期节目的录制。自弹自唱听众如果想跟我们交流或者反馈，都可以写邮件告诉我们我们的邮箱地址是podcast at the type点com POD cst at THETYPE点COM。同时大家也可以在新浪微博，在推特以及在微信上面通过搜索the type THETYPE这个账号关注到我们在facebook上搜索the type，或者搜索type is beautiful，也都可以找到我们。",
      "speaker": "发言人4"
    },
    {
      "time": "02:15:12",
      "text": "您刚刚收听到的节目是内核恐慌，一档尽量贴近计算机主题的娱乐podcast。我们号称硬核，但是也没有什么干货，想听就听，不想听的就不愿听。我们的网址是PAN dot ICU。您可以在网上找到订阅我们节目的方法，以及联络我们的方式。如果您期待我们更频繁的更新节目，欢迎您到爱发电。我们捐款详情可以在我们的网站上找到。先发电后催更，文明催更从你做起。如果您觉得意犹未尽，也欢迎您去收听real和黄海主持的节目风头圈，real和任宁主持的节目提前怀旧，以及基本不由吴涛主持的自弹自唱。",
      "speaker": "发言人3"
    },
    {
      "time": "02:15:47",
      "text": "好，感谢大家收听。本期节目是由erik在big store上剪辑制作完成的，我们下期节目再见。",
      "speaker": "发言人1"
    },
    {
      "time": "02:15:55",
      "text": "拜拜。你还会说这是。",
      "speaker": "发言人3"
    },
    {
      "time": "02:15:57",
      "text": "meta信息，就是我很注重meta的知道吗？就像我们会刊不是有封面吗？那个照片是谁在是几月几号，在什么地方拍的？有时候我把那个拍照设备也写进去，然后我们的编辑就说有必要写吗？",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本次讨论深入探讨了排版技术，特别着重于TeX及其衍生系统的应用与特性，涵盖了TeX的历史、影响力以及与InDesign、Word等软件的对比。讨论强调了字体在排版中的重要性及排版引擎与字体间的互动，分析了排版技术如何塑造文档的视觉效果。此外，讨论触及排版技术的发展，包括开源项目的进展与未来创新方向。特别地，对话详细讨论了LaTeX在数学、科学和工程领域的应用优势，尤其是处理复杂数学公式的卓越能力，尽管其学习曲线陡峭，但提供了无与伦比的灵活性和定制性。讨论还涵盖了LaTeX社区的活跃性、资源的丰富性，以及不同操作系统上的使用与安装建议。同时，提到了MathML等LaTeX的替代系统及其优缺点。总之，本次对话全面展示了LaTeX在学术出版领域的重要性，同时也指出了作为排版工具的挑战和学习路径。",
    "qa_pairs": [
      {
        "question": "你对现在用的air pods耳机有什么问题？",
        "answer": "我现在感觉耳机有问题，尤其是air pods，打算换成有线耳机，因为无线耳机可能会不稳定。",
        "time": "00:00:00"
      },
      {
        "question": "关于手机电池续航能力怎么样？",
        "answer": "手机电池行，我换好了。苹果12 mini的电池容量较小，用到一天晚上就不够了。",
        "time": "00:00:23"
      },
      {
        "question": "对于苹果12 mini的电池大小是否感到失望？",
        "answer": "是的，有点纠结，希望苹果能把摄像头简化，腾出更多空间给电池。",
        "time": "00:00:39"
      },
      {
        "question": "关于本期播客的主题是什么？",
        "answer": "本期播客主要讨论宗师级程序员高德纳的字体排印解决方案及其相关话题。",
        "time": "00:02:14"
      },
      {
        "question": "主播们是如何接触到拉太（LaTeX）并开始使用的？",
        "answer": "拉太在不同的场景中被不同的人用于编写论文、设计出版物等，如网页前端开发革新期、硕士论文写作阶段以及排版复杂文档时。",
        "time": "00:03:30"
      },
      {
        "question": "拉太克（LaTeX）在科研和学术领域的具体应用有哪些？拉太克（LaTeX）对非CS专业的学生来说重要性如何？",
        "answer": "LaTeX在需要精确控制格式和大量公式、图形排版的领域尤为有用，比如计算机科学、工程学等学科，尤其对于写论文、排版内部刊物等任务来说非常便捷高效。尽管LaTeX并非所有非CS专业的学生都必须使用，但在需要处理复杂公式、图表以及需要专业排版的学科中，它是一个非常实用的工具。",
        "time": "00:08:37"
      },
      {
        "question": "是否有听众分享自己使用LaTeX的经历？",
        "answer": "多位听众分享了自己在本科时期利用LaTeX进行作业和论文写作的经历，以及在特定需求下，如排版大量内容或特殊格式文本时选择使用LaTeX的原因。",
        "time": "00:05:27"
      },
      {
        "question": "在处理特别长的文档时，使用所见即所得编辑工具如word或open office会遇到什么问题？",
        "answer": "当文档超过一定页码时，这类编辑工具的性能会直线下降，无法应对大量页码的编辑。同时，由于这类工具并非专为长文档编译而设计，编译时间也会变得相当长。解决方法可以是将文档分成多个章节，分别编译并最后合并，以节省编译时间。",
        "time": "00:13:44"
      },
      {
        "question": "对于公式编辑和部分插图的需求，是否有专门的工具比所见即所得更适合？",
        "answer": "是的，在公式编辑以及部分插图方面，所见即所得并非理想的解决方案。实际上，对于需要精细控制和大量公式编辑的场景，如学术论文、数学字典等，专业排版系统如LATEX具有很大的优势。",
        "time": "00:14:57"
      },
      {
        "question": "是否有出版物是完全使用LATEX来编排的？",
        "answer": "虽然大部分出版物并未全部采用LATEX编排，但在理工科领域，尤其是论文写作和期刊出版中，LATEX使用较为广泛。在日本，一些理工科类字典甚至整本都是用LATEX编排的，例如研钵数学词典的第四版。",
        "time": "00:15:46"
      },
      {
        "question": "LATEX的学习和应用主要是在哪些人群之中？",
        "answer": "LATEX的学习过程对于大部分用户可能是一次性的，尤其对于只写一次论文的人而言。但对那些会持续使用LATEX的人，通常是学术界或学术出版界的专业人士。",
        "time": "00:16:34"
      },
      {
        "question": "高德纳先生是如何因为一次不满意的排版经历而决定自己开发排版系统的？",
        "answer": "高德纳先生在1969年开始编写《计算机程序设计艺术》这本书时，第一卷排印过程中对当时机械排版系统的失望，促使他决定从零开始开发一套全新的排版系统，包括编程语言（WEB）、字体描述工具（METAFONT）和排版引擎（TEX），从而有了LATEX的诞生。",
        "time": "00:20:15"
      },
      {
        "question": "LATEX的发展历程如何，以及它在数学界的应用情况？",
        "answer": "LATEX最初由高德纳先生于1978年发布，至今仍在稳定维护和发行中。它因美国数学学会AMS采用并推广，在数学界迅速普及，并逐渐影响整个科学界。尽管随着时间推移，LATEX已显现出一些过时之处，但它至今仍在被广泛使用。",
        "time": "00:22:04"
      },
      {
        "question": "computer modern字体中的“modern”是指什么？",
        "answer": "在字体设计中，“modern”是指一种风格，它代表了时尚杂志的现代风格。实际上，当我们提到computer modern时，它追溯到的是19世纪初的一个时代，那时人们认为现在处于现代，而在此之前是古代。现代体的概念与当时被称为“迪多”（Didot）的字体有关，迪多是一个在18世纪出现的字体。",
        "time": "00:28:50"
      },
      {
        "question": "computer modern字体与哪些字体有关联？",
        "answer": "computer modern的一个直系亲属是d dot（迪多）字体，而迪多又是从博多尼字体发展而来的。在之前我们自弹自唱的节目中，第125期讲述了迪多字体，第131期讲述了博多尼字体，大家可以通过回听了解当时的现代体是什么样的。",
        "time": "00:29:22"
      },
      {
        "question": "你们是如何快速回忆起之前讲过的主题的？",
        "answer": "我们通过制作了一个列表来记录每一期的内容，并且因为我们每期只讲一个主题，所以可以通过搜索列表快速找到相关内容。",
        "time": "00:30:31"
      },
      {
        "question": "是否可以打印出高德纳关于bug奖励的记录？",
        "answer": "虽然之前有人查找过相关信息，但目前没有明确提到可以打印出具体的bug奖励记录，不过高德纳设置的每个漏洞奖励是2.56美元，这个数额是16进制的100美分。",
        "time": "00:31:14"
      },
      {
        "question": "高德纳因为bug奖励机制变得怎样了？",
        "answer": "高德纳因为这个bug奖励机制变得非常谨慎，甚至不惜降低版本更新频率以减少可能出现的bug，以免因此破产。",
        "time": "00:32:02"
      },
      {
        "question": "太和引擎（LaTeX）的最新版本号是多少？",
        "answer": "截至今年二月份，太和引擎的版本号是3.141592653，已经更新到了大约3.141592653589798285462643这个数值，但没有进行重大的功能更新，主要是修复bug。",
        "time": "00:32:15"
      },
      {
        "question": "太和引擎（LaTeX）与PDF tag和其他发行版的关系如何？",
        "answer": "太和引擎是底层内核，类似于汇编语言，而像PDF tag和z tag等其他发行版是在其基础上进行扩展和封装的，它们支持更多功能，比如直接生成PDF以及更好的模块化和包管理系统。",
        "time": "00:33:12"
      },
      {
        "question": "太和（LaTeX）的主要特点是什么？",
        "answer": "太和（LaTeX）的主要特点是免费开源，这使得它能够迅速发展并占据市场，同时也限制了与其竞争的系统发展。有观点认为，由于太和的免费性，导致社会上对于高品质排版系统的探索停滞不前。",
        "time": "00:37:07"
      },
      {
        "question": "如何使用太和引擎（LaTeX）进行排版工作？",
        "answer": "使用太和进行排版需要通过命令行操作，没有标准的操作界面。用户可以使用自己喜欢的文本编辑器编写代码，通过太和引擎实现跨平台、跨设备的统一输出效果。",
        "time": "00:42:50"
      },
      {
        "question": "拉泰克(laTeX)与传统排版方式有何不同？",
        "answer": "拉泰克的最大不同在于其采用纯文本格式进行编辑和传输，用户只需使用任何文本编辑器编写类似于命令行的纯文本文件，然后通过特定引擎生成PDF。而传统排版方式如DVI文件生成流程更为复杂，需要先生成一个中间文件，再根据驱动程序转换为其他格式如BDF或用于打印。",
        "time": "00:44:01"
      },
      {
        "question": "是否存在尝试实现接近所见即所得的拉泰克编辑器？",
        "answer": "有人尝试开发专用编辑器以实现更接近所见即所得的效果，但即便如此，这类编辑器仍存在易用性问题，并非广泛使用。知乎的公式编辑器提供了一种图形界面方式，用户可以通过点击选择符号来插入拉泰克的命令，相较于纯文本输入有所改进，但仍不够直观便捷。",
        "time": "00:44:51"
      },
      {
        "question": "为什么数学公式排版有其特殊性，需要专门的系统？",
        "answer": "数学公式复杂且具有二维特性，不同于普通文本的一维排印，公式中存在上标、下标、大小调整以及嵌套等需求，对排版精度和灵活性要求极高。此外，不同字符形态（如罗马体、斜体等）和各种数学符号的使用也增加了排版难度。原始的拉泰克系统就是为解决这些问题而设计，但随着需求增加，出现了更复杂的符号组合和排版规则，导致排版难度进一步提升。",
        "time": "00:47:01"
      },
      {
        "question": "数学公式的排版规则是否存在问题？",
        "answer": "确实存在一些问题，例如某些概念在数学公式中需要使用特定字符形态，而在普通文字排版中则无需如此精细区分。这些龟毛般的细节问题部分源于数字化排版带来的可能性和复杂性，使得原本在手写情况下不需过多考虑的细节成为必须解决的技术挑战。",
        "time": "00:47:56"
      },
      {
        "question": "数学符号系统为何难以理解和掌握？",
        "answer": "数学符号系统是一种历史演进形成的专用语言，它的非体系化和各流派妥协融合的特点导致了其复杂性和多样性。对于非专业数学人士来说，理解和运用这套符号系统是一大障碍，即使对于数学专业人员而言，面对前沿研究时也需要查阅引文中对特定符号的定义。同时，数学符号在不同流派中可能存在差异，且其手写形式与印刷体有所不同，增加了理解和应用的难度。",
        "time": "00:52:17"
      },
      {
        "question": "在数学表达中，为什么需要使用特定的符号和notation？",
        "answer": "因为在数学中有很多抽象的概念，为了方便记忆和进行抽象运算，人们会通过特定的符号和notation将这些概念写在纸上，帮助理解和操作，比如求导或公式变形。",
        "time": "00:56:49"
      },
      {
        "question": "在手写和排印时，符号如何处理？",
        "answer": "手写时可以使用草书字体书写特殊符号，但在排印时可能需要转换成另一种字体。像国际音标中的符号，在铅印技术中，可以将字母倒转来代替某些发音，但在电脑输入拼音时较为麻烦。",
        "time": "00:57:11"
      },
      {
        "question": "对于输入数学公式中的各种符号，早期是如何解决的？",
        "answer": "早期通过命令对应键盘上存在的按键来线性化表示各种符号，即用一串命令指代某个符号，类似于现在的转译过程。",
        "time": "00:57:55"
      },
      {
        "question": "标签语言（如TaX）与HTML在处理形式和内容分离方面有何异同？",
        "answer": "TaX和HTML都面临形式和内容分离的问题，但TaX并未实现完全分离，它无法像HTML那样做到语义和样式的明确区分。在微观层面上，它们的形式和内容往往是融合在一起的。",
        "time": "00:58:43"
      },
      {
        "question": "标签语言是否可能导致了数学语义在互联网上的碎片化？",
        "answer": "虽然标签语言（如TaX）的广泛应用可能加剧了数学语义表示的碎片化现象，但其根本原因在于数学符号本身的结构复杂性，并非仅由标签语言决定。",
        "time": "01:02:12"
      },
      {
        "question": "对于MathML这种更复杂的标记语言有何看法？",
        "answer": "MathML是一种基于XML的复杂标记语言，旨在提供更精确的数学公式的结构描述，虽然其编辑和生成较为麻烦，但在读取时相对清晰，主要关注点在于描述数学元素间的关系，而非具体的排版样式。",
        "time": "01:04:55"
      },
      {
        "question": "如何获取和使用TaX环境？",
        "answer": "在Mac OS上，可以下载MiKTeX发行版来安装TaX所需工具；在Windows上，也有类似的操作；而在Linux系统上，则需要自行配置相应的TaX环境，因为Linux系统中没有现成的发行版可供直接使用。",
        "time": "01:08:53"
      },
      {
        "question": "tech用户群体对排版的需求是如何导向工具发展的？",
        "answer": "tech用户群体往往对排版有特定需求，导致他们倾向于选择或定制适合自身领域的解决方案，而不是寻求通用的排版工具。用户习惯通常会让他们继续使用已经熟悉的环境，即使这意味着需要解决一些特定问题。",
        "time": "01:14:04"
      },
      {
        "question": "在Linux上使用tag进行文档排版时，用户需要经历怎样的流程？",
        "answer": "用户需要先写一个纯文本的tag文件，然后利用发行版提供的latek或PDF拉tech程序处理这个文件，生成PDF。但这个过程中有很多潜在问题需要注意，例如是否支持中文、CJK字符集、插图格式等，并且需要注意插图是如何生成和提供的。对于特定领域的用户，可能还需要解决一些定制问题。",
        "time": "01:10:56"
      },
      {
        "question": "学习和使用tag是否存在较高的学习曲线？",
        "answer": "是的，学习和使用tag面临一个非常陡峭的学习曲线。由于其基于50年前的设计理念和架构，对于非专业人士来说，要掌握并有效利用它确实具有挑战性。",
        "time": "01:12:23"
      },
      {
        "question": "是否有跨平台使用的工具，比如可以用macOS上的太和？",
        "answer": "太和已经发展成为跨平台的工具，可以在多个平台上使用，包括macOS。",
        "time": "01:13:50"
      },
      {
        "question": "您个人有没有自定义过tag的使用？",
        "answer": "我自己没有进行过复杂的自定义，只做过基础的修改。",
        "time": "01:15:03"
      },
      {
        "question": "tag底层是什么样的技术架构？",
        "answer": "最原始的tag（plain tag）底层使用的是类似web的编程理念，采用literature programming（文学编程），将程序嵌入到文章中描述，通过分析文章生成可编译的Pascal程序。后来出现了用C语言描述web程序的weB2C引擎，以及直接生成PDF的PDF tag等变种。",
        "time": "01:16:55"
      },
      {
        "question": "Z tag相较于其他tag发行版有何特点？Z tag、PDF tag和其他tech live这类发行版之间的关系是什么？",
        "answer": "Z tag最初在Mac OS上开发，全面支持Unicode和OpenType特性，能够解决tech排版时字体使用受限的问题。它不仅包含实现tag的程序，还有一系列处理Unicode和OpenType的工具，相比其他tag发行版覆盖范围更广。Z tag和PDF tag类似于引擎，而tech live则是在这些引擎之上加上了编辑器、工作流工具和校对工具等，形成了一套完整的排版系统。TUG（tech user group）是一个围绕tag的用户社区，而非官方开发组，他们在排版研究方面有许多成果发表在该社区中。",
        "time": "01:24:05"
      },
      {
        "question": "泰和live等项目是否隶属于某个组织？",
        "answer": "是的，这些项目大多挂在这个名为tech user group (TEUG)的组织名下，由该组织的成员开发和维护。",
        "time": "01:25:01"
      },
      {
        "question": "泰和用户组（TEUG）是什么？",
        "answer": "泰和用户组（TEUG）是一个比较泛化的用户组织，很多项目都以这个组织为依托，其名字来源于它的英文原名tech user group。",
        "time": "01:25:36"
      },
      {
        "question": "加入TEUG需要满足什么条件？",
        "answer": "任何人都可以申请加入TEUG。",
        "time": "01:25:42"
      },
      {
        "question": "他们内部的交流平台是什么？",
        "answer": "他们内部有一个名为boat的交流平台，类似谈板，用于发布文章和讨论，其中包含了各种采访、论文等内容。",
        "time": "01:25:45"
      },
      {
        "question": "泰和银行除了处理文档文稿外，还有其他分支流派吗？",
        "answer": "是的，还有一个大的分支流派是基于泰和制作更加fancy的图形，这套体系叫做context，并且可以用来编写幻灯片（slides），甚至可以实现复杂的动画和特效。",
        "time": "01:26:24"
      },
      {
        "question": "如何使用context系统制作幻灯片？",
        "answer": "使用context系统，用户可以编程化地生成幻灯片，精确描述每个动效和数学公式，从而实现高质量的幻灯片制作。",
        "time": "01:28:41"
      },
      {
        "question": "如果不想使用太拉太和，有没有其他编程方式可以生成幻灯片？",
        "answer": "可以尝试使用review JS，它允许用户用JavaScript编写代码来生成幻灯片，提供了一种编程化的解决方案。",
        "time": "01:28:59"
      },
      {
        "question": "网络时代下如何在线使用太和？",
        "answer": "现在有很多在线的太编辑器，例如overleaf.com，用户可以在云端实时编辑并生成PDF，无需本地安装软件，十分便捷且支持多人协作。",
        "time": "01:29:19"
      },
      {
        "question": "对于使用太和进行编辑和排版的典型工作流程是什么样的？",
        "answer": "典型的工作流程可能是一边编辑源代码，一边实时预览PDF输出，通过不断调整源代码以达到理想的效果。对于需要精确控制排版和图形显示的用户来说，这一过程可能需要反复调试和优化。",
        "time": "01:31:32"
      },
      {
        "question": "在排版工作中，为什么需要更多的open type feature来实现复杂的文字排版？如何解决这类需求，以保持排版的一致性和避免割裂感？",
        "answer": "现在无论是网页还是文档排版，都越来越依赖于字体功能，尤其是open type feature。如果没有符合特定排版需求的字体，就无法完成复杂的排版工作。即使是简单的文字记录，也可能需要使用复杂的排版特性。在tag中可以嵌入native图形，其文字label会用与文档相同的排版引擎进行处理，从而保持一致性和联动性，即使缩放图片，文字标签也能相应调整大小。同时，在同一语境中处理图像和文字，确保它们相互理解和定位。",
        "time": "01:38:28"
      },
      {
        "question": "在使用拉tag或TTAKZ时，遇到了哪些无法通过普通方式解决的需求？",
        "answer": "例如，在插入含有特定样式标签（如数学公式或需要与正文字体风格一致的文字标签）的图片时，第三方图片工具无法实现精准的排版和样式联动。当将外部制作的图片导入到word文档中时，图片中的文字标签大小、样式会与周围的文字脱节。",
        "time": "01:39:22"
      },
      {
        "question": "商业应用的排版工具是如何解决类似问题的？",
        "answer": "在Adobe的封闭环境中，如InDesign，可以通过link外部图像文件或将图像直接插入文档内部，并保持对图像中文字标注等元素的实时同步更新和精确控制，以满足复杂排版需求。",
        "time": "01:43:36"
      },
      {
        "question": "在web排版中，如何实现响应式排版和交互性？",
        "answer": "在web排版中，可以利用响应式特性，根据屏幕尺寸变化自动调整布局，同时保留关键排版特性稳定性。另外，通过嵌入JavaScript等编程功能，可以创建可交互的PDF，实现导航栏、表单填写等功能，满足一定的交互性需求。",
        "time": "01:45:48"
      },
      {
        "question": "当前对太和（tag）的使用情况及它面临的挑战是什么？",
        "answer": "现在太和主要应用于插入公式这一部分，专业级排版用户越来越少，因为它要求用户采用较为抽象的方式来描述排版，而非直观地粘贴图像。此外，其反直觉的训练过程和编译编译过程使其在设计师群体中难以普及，尽管它的算法在单行道排版和段落排版上做得较好，并且能够进行全局优化。",
        "time": "01:50:14"
      },
      {
        "question": "计算机在排版方面的优势是什么？",
        "answer": "计算机在排版方面的优势在于其能够通过计算和算法实现最优的版面设计，比如根据公式和规则自动调整文字间距、对齐等，而这是训练有素的高级排版师也可能不如计算机精确和高效。",
        "time": "01:51:32"
      },
      {
        "question": "编辑和排版师在处理文章排版时权限有何不同？排版师在工作中扮演的角色是什么样的？",
        "answer": "编辑有权限根据需要修改文章内容以适应版面要求，比如调整句子长度或删减内容；而排版师通常没有这样的权限，尤其是对于涉及知名作家作品时，不敢随意改动文字内容，以免违约。排版师本质上是一个“人肉”的layout自动布局计算器，他们需要掌握各种排版规则，确保版面美观，并且具备处理复杂格式和定制化需求的能力。",
        "time": "01:52:56"
      },
      {
        "question": "在学术出版领域中，InDesign与PageMaker有何关联？",
        "answer": "InDesign是目前广泛使用的排版工具，取代了PageMaker的地位。尽管InDesign功能强大，但在特定专业领域如数学公式编辑和高级绘图方面仍存在局限，需要依赖第三方工具或编程实现自定义需求。",
        "time": "01:54:19"
      },
      {
        "question": "是否存在针对特殊需求开发排版工具的例子？",
        "answer": "有实例说明，有开发者基于开源软件如Zmp（可能是ZmP而非PageMaker）或InDesign编写代码输出TIKZ/PGF等命令直接绘图，以解决专业排版中的特定问题，比如精确控制图形与文本的位置关系。",
        "time": "01:55:02"
      },
      {
        "question": "对于技术类书籍或论文撰写，是否推荐使用InDesign？自由软件对于满足特定个性化排版需求的重要性是什么？",
        "answer": "使用InDesign撰写技术类书籍或论文取决于具体需求和排版复杂度。对于公式量不多的情况下，InDesign可以实现人工排版，学习成本低且效果专业。但如果需求定制化或涉及复杂图形，开源软件如Python结合专门工具可能更适合这类探索边界的研究工作。对于追求高度定制化和专业需求的研究者而言，开源自由软件能够提供高度灵活性，让他们能够根据自身需求编写和修改排版工具，而商业软件如Adobe InDesign可能无法满足这些小众或高度定制化的场景。",
        "time": "01:55:50"
      },
      {
        "question": "现在是否还有人在使用meta fund做字体？meta fund在字体设计流程中的作用是什么？",
        "answer": "现在没有人再用meta fund做字体了。meta fund是一个自定义格式，用于描述和转换字体格式，以便在不同的系统和应用程序中使用。随着技术发展，现在可以直接调用系统级别的open type或true type字体，减少了对meta fund的需求。",
        "time": "02:04:41"
      },
      {
        "question": "meta fund与TrueType和OpenType等格式有何区别？",
        "answer": "meta fund是独立开发的一套字体描述格式，而TrueType和OpenType是由Adobe开发并与许多排版软件紧密结合的标准格式，它们在行业内得到广泛应用。",
        "time": "02:07:24"
      },
      {
        "question": "太和系统和open type之间的信息交流是否容易？open type特性在不同系统间是否存在差异？",
        "answer": "太和系统与open type原本不是一个体系，因此让他们互相获取和理解信息很困难。早期meta fund能够提供这种能力，因为它有自己的matrix定义，并且与太和系统有较好的兼容性。是的，open type字体特性非常复杂，不同系统读取和处理同一特性时数值可能不同，导致渲染效果有所差异。",
        "time": "02:04:49"
      },
      {
        "question": "排版引擎如何识别和处理字体信息？",
        "answer": "排版引擎需要读取字体中的matrix和度量信息（如基线位置、字的高度等），才能正确调用和排版文字，而这些信息必须先存在于字体中。",
        "time": "02:05:53"
      },
      {
        "question": "国产系统软件是如何解决字体格式问题的？",
        "answer": "以前方阵软件必须使用方正的字体，后来逐渐支持了TDF和open type格式。现在业界主要统一到这两种格式，但不同软件对open type的支持程度可能不同。",
        "time": "02:07:48"
      },
      {
        "question": "当前业界是否都支持open type格式？",
        "answer": "是的，现代排版软件都需要支持open type格式，因为它由微软和Adobe共同开发，成为了一个商业标准。",
        "time": "02:07:48"
      },
      {
        "question": "网页排版中的字体排版难题是如何产生的？是否有机构在制定关于字体和排版的国家标准？",
        "answer": "网页排版中字体行高等特性受浏览器引擎限制，不同浏览器处理同一open type特性数据的方式不同，导致排版结果不一致。open type是一个商业标准，由行业巨头提出并被广泛采纳。至于字体和排版的具体标准，可能没有严格意义上的国家标准，而是遵循行业惯例和国际标准。",
        "time": "02:08:10"
      },
      {
        "question": "设计师和排版师在字体使用上的权利是如何分配的？",
        "answer": "设计师和排版师之间需要互相协作，提供通用建议和特定场景下的规则选择，因为各自对字体最终应用的上下文了解有限。",
        "time": "02:09:02"
      },
      {
        "question": "是否存在针对不同应用场景的排版标准或建议？",
        "answer": "在排版领域，确实存在针对不同应用场景的建议和规范，但设计师和排版师需要根据具体情况灵活调整，因为完全统一的标准难以满足所有需求。",
        "time": "02:09:02"
      },
      {
        "question": "是否有一种国标或行业标准来规范open type的特性使用？",
        "answer": "open type是一个行业巨头提出的商业标准，大部分厂商都会跟进支持。对于某些特性，如行高数据，不同浏览器读取的结果可能不一样。",
        "time": "02:09:59"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "自弹自唱与内核恐慌第十期串台：宗师级程序员的字体排印解决方案",
        "summary": "本次对话内容跨越了多个话题，包括对AirPods和有线耳机的偏好，iPhone Mini电池续航的不满，以及对摄像头改进的建议。此外，还提及了自弹自唱与内核恐慌的串台节目，强调了这是它们合作的第十期，节目中讨论了字体排印主题，特别提到了高德纳作为主题之一。"
      },
      {
        "time": "00:02:28",
        "title": "从Web前端到桌面出版的革新之旅",
        "summary": "发言者在本科时期首次接触到Web开发的技术革新，经历了从使用Photoshop等工具进行网页设计到采用HTML和CSS进行语义化编程的转变。之后，对TeX的了解和使用进一步扩展了他的技术视野，尤其是在德国撰写硕士论文期间。此外，他于2010年加入TIB，并贡献了一篇关于Computer Modern字体的文章，探讨了高德纳如何数字化这款字体以排版POCP书籍，揭示了他对技术发展历程的深入了解。"
      },
      {
        "time": "00:04:56",
        "title": "拉泰克（LaTeX）的使用经验分享",
        "summary": "对话中讨论了拉泰克（LaTeX）的正确发音以及其在学术写作中的应用。一名大学生由于手写不工整，决定使用电脑排版提交作业，从而开始接触并学习使用LaTeX。尽管最初因为其在公式和数学排版上的优势，使用LaTeX主要是为了应对含有复杂公式和图形的学科作业，但后来也用于编写毕业论文以及在国外学习期间的作业和论文。此外，还提到了LaTeX在工程等其他学科中的应用，以及它在学术界普遍需求公示的地方的重要性。"
      },
      {
        "time": "00:07:57",
        "title": "探讨使用排版工具的实践与挑战",
        "summary": "对话集中于一位个人分享了其在工作中遇到的实际需求以及考虑使用特定排版工具来提高效率的经历。这位个人所在的团队每季度需排版多达一千页的内部刊物，面对如此庞大的工作量，曾考虑利用排版工具实现自动化流程，以减轻工作负担。讨论还涉及到了对排版工具的认知和其在公共事务领域的应用价值，以及个人如何通过团队工作了解到这些工具的。"
      },
      {
        "time": "00:10:27",
        "title": "泰和（LaTeX）在文档排版中的应用与挑战",
        "summary": "讨论者在大学期间通过第二学士学位的论文撰写中初次接触泰和（LaTeX），由于其对公式的强大排版能力而开始使用。他提到，尽管最初因排版公式而使用泰和，但后来发现泰和在处理长文档、代码伪代码和复杂图形方面也具有明显优势。特别是，泰和的性能在处理超过100页的文档时优于所见即所得的编辑工具，并且泰和支持版本控制，适合管理和编辑大型文档。讨论者还提到了泰和的图形生成插件TIKZ，强调了泰和在精细领域，如公式编辑和插图方面的应用价值。"
      },
      {
        "time": "00:15:25",
        "title": "LaTeX在学术出版和字典编排中的应用",
        "summary": "讨论集中在LaTeX作为一种排版系统，在学术出版和个人出版领域的应用情况。特别提到在理工科领域，几乎所有的论文和期刊都采用LaTeX进行编排，强调了其在处理公式和规范化词条方面的优势。此外，提到了日本的一本数学词典完全使用LaTeX排版，突出了其在专业出版物制作中的重要性。同时，讨论也指出了LaTeX学习和使用的门槛，认为除了学术界和排版行业外，普通人的需求并不强烈。最后，提到了高德纳先生作为LaTeX背后的重要人物，暗示了对其更深入了解的必要性。"
      },
      {
        "time": "00:18:30",
        "title": "高德纳与计算机程序设计艺术",
        "summary": "自1969年起，高德纳开始撰写《计算机程序设计艺术》（TAOCP），该书因其深度和广度成为计算机科学领域的经典之作。在创作过程中，由于对传统排版技术的不满，高德纳决定自行开发一套排版系统。他发明了Web编程语言和Metafont字体描述系统，以及TeX排版系统，用于精确控制书籍的排版，这些工具的开发不仅满足了他的个人需求，还对后来的计算机排版产生了深远的影响。TeX系统因其在处理数学公式方面的优势，被美国数学学会采用，进而推广至整个科学界。尽管随着时间的推移，这些系统有些过时，它们仍然被维护和使用，证明了高德纳作为计算机科学领域宗师级人物的不朽贡献。"
      },
      {
        "time": "00:22:59",
        "title": "高德纳与排版技术的演进",
        "summary": "高德纳先生，现年83岁，是计算机程序艺术的杰出代表，曾计划出版七卷著作，目前已写至第四卷。在1973年，他遭遇到了印刷技术的变革，从金属活字到照相排版的转变期间，出版工作面临挑战。由于技术革新，原本的排版机器被淘汰，高德纳不得不将书籍送到欧洲重新排版。面对高昂的成本和过时的技术，他于1978年开发了排版软件TeX，这一创新对于后来的排版技术和出版领域产生了深远影响。此对话还提及了Unicode编码系统的诞生背景，强调了高德纳在技术革新方面的前瞻性和创新精神。"
      },
      {
        "time": "00:26:00",
        "title": "高德纳与计算机字体设计的奇缘",
        "summary": "对话内容主要讲述了高德纳在1990年宣布TeX项目将不再进行重大更新，只会修复bug，同时介绍了TeX的版本号使用无理数的趣味传统。此外，还提到了计算机现代字体（Computer Modern）与世纪字体（Century）之间的关系，以及高德纳本人的极客精神和他对技术细节的严谨态度。"
      },
      {
        "time": "00:28:32",
        "title": "探讨现代字体及计算机排版技术发展",
        "summary": "对话深入讨论了Computer Modern字体的由来及其与现代风格的关系，以及迪多字体的历史地位。进一步讨论了美国的本顿父子在字体设计中的贡献，包括Century字体的开发。此外，还探讨了泰和排版系统的演进，特别是拉泰克（LaTeX）的发展及其对现代排版技术的贡献，包括其包管理系统如何促进排版的模块化和扩展。还提到了一些技术细节，如泰和的版本号与pi的近似值，以及高德纳因发现漏洞而支付奖金的故事。"
      },
      {
        "time": "00:36:35",
        "title": "探讨免费开源软件对社会的影响",
        "summary": "对话中讨论了免费开源软件，特别是太和（TeX）的特点和影响。太和作为一个免费开源软件，限制了与其竞争的系统的发展，引发对于免费软件可能抑制创新和质量竞争的担忧。有人认为，免费软件像病毒一样，有潜力使其他协议或设计全军覆没，对社会造成了不可逆转的巨大伤害。然而，也有人支持免费开源软件，强调其跨平台、跨设备的优越性以及对质量和普及的正面影响。讨论反映了对于免费开源软件社会价值的不同视角和理解。"
      },
      {
        "time": "00:42:25",
        "title": "探讨LaTeX的用户界面与排版挑战",
        "summary": "LaTeX作为一种排版系统，没有传统意义上的用户操作界面，用户需要通过命令行和文本编辑器进行操作。它不同于所见即所得的编辑器，而是需要用户编写文本文件，然后通过LaTeX引擎生成PDF文档。尽管存在尝试通过专用编辑器实现接近所见即所得的功能，但仍然面临使用上的挑战。LaTeX特别适用于排版数学公式，这是因为数学公式排版的复杂性，包括对二维空间的精确控制以及符号和字母形态的精确要求。讨论也指出，数学排版领域的某些复杂要求可能是过度设计的结果。"
      },
      {
        "time": "00:50:59",
        "title": "数学符号系统的复杂性及其对学习者的影响",
        "summary": "对话者讨论了数学符号系统的复杂性及其发展历史，指出这一系统如何导致了数学学习的困难。他们提到，随着数学的发展，原有的拉丁字母和希腊字母已经不够用，需要引入更多符号。此外，符号系统的不统一和复杂性，如积分和导数的多种表示方法，给学习者造成了困扰。特别提到了一些天才人物通过创造自己的数学符号克服了这一难题，但大多数人仍面临障碍。对话还触及了技术发展如何改变数学符号的记录和传播，例如电脑输入法对特殊数学符号的支持问题。最后，通过比较HTML和TeX，讨论了形式与内容是否能真正分离的问题，暗示了数学符号系统在适应现代技术时的挑战。"
      },
      {
        "time": "00:59:15",
        "title": "探讨TeX排版引擎的局限性及其对数学语义表示的影响",
        "summary": "对话围绕TeX排版引擎的局限性展开，特别是它在形式与内容分离上的不足，以及这一局限性如何影响了数学公式在互联网上的语义表示。讨论指出，尽管TeX最初设计为一个排版引擎，不涉及内容与形式的分离，但其作为业界标准，对数学语义表示造成了碎片化。同时，也探讨了即使换成其他软件或markup language，由于数学符号本身的结构性问题，也无法完全实现形式与内容的彻底分离。讨论最终归结到技术理想与客观现实之间的妥协，以及对历史进程的无奈接受。"
      },
      {
        "time": "01:03:53",
        "title": "对MathML的深度分析与评论",
        "summary": "评论者深入探讨了MathML（Mathematical Markup Language）的复杂性和应用价值，将其比作XML的复杂堆砌，用于数据描述而非直接阅读或编辑。尽管其设计目的在于通过增加元数据来更好地保存信息，这种方式被看作是繁琐且非直观的，但确实实现了其基本目标。进一步比较了MathML与TeX在表示数学公式方面的差异，指出MathML的每个标签都与语义相关，强调了描述数学结构和公式内部关系的重要性。评论者认为，尽管使用MathML描述数学公式是一项几乎不可能完成的艰巨任务，但其通过引入树状结构在理论上能够描述复杂的数学表达式，类似于Lisp语言的能力。然而，选择XML作为实现载体被认为是导致其难以普及和应用的主要原因。"
      },
      {
        "time": "01:08:01",
        "title": "探讨TeX和LaTeX的使用与挑战",
        "summary": "对话集中于TeX和LaTeX的复杂性、学习曲线以及跨平台使用性。讨论开始于对TeX不同环境下的使用情况，包括Mac、Windows和Linux，强调了选择合适的发行版的重要性。讨论者提到了MacTeX和MiKTeX作为在Mac和Windows上使用的解决方案，同时指出了Linux用户需要自行解决TeX配置的问题。进一步，对话转向了TeX的高级主题，包括支持中文、插图和其他格式的需求，以及针对特定领域的软件包选择。讨论还触及了TeX的编程语言基础，包括Web、Web2C和LuaTeX，以及TeX在排版领域的创新，如文学编程。最后，讨论者分享了个人经验，强调了学习和使用TeX的挑战，同时也展示了其作为排版工具的强大功能和灵活性。"
      },
      {
        "time": "01:18:55",
        "title": "泰和编程扩展及其发展概述",
        "summary": "讨论重点在于泰和（TeX）系统的编程扩展，特别是针对Lua和ZapTeX的讨论。Lua被提到作为一种嵌入式语言，因其简便性和易嵌入性而在游戏开发中得到广泛应用。ZapTeX作为现代泰和系统的一个分支，以其全面的Unicode支持和对OpenType字体的兼容性著称，解决了原始泰和系统在扩展性和字体支持方面的不足。讨论还提到了其他泰和系统变种，如PDFTeX和XeTeX，以及它们各自的特点和应用场景。此外，还涉及了这些系统在维护和开发方面的现状，特别提到了个别开发者如马启源对社区的贡献。总体上，这段对话覆盖了泰和系统及其扩展的多个方面，展示了其在技术社群中的活跃程度和持续的创新。"
      },
      {
        "time": "01:23:51",
        "title": "泰和（TeX）及其相关技术群组与资源探索",
        "summary": "讨论了泰和（TeX）技术用户群组（TUG）及其在排版研究、图形生成、幻灯片制作等方面的应用和资源。TUG作为泰和的官方开发组织，不仅支持泰和核心功能的更新，也通过其下的多个项目，如泰和live和context，扩展了泰和在专业文档排版、复杂图形设计和动态幻灯片制作等领域的应用。context特别被提及，作为泰和的扩展，能够实现复杂的图形和动画效果，使用户能以编程化的方式生成高度定制化的幻灯片。此外，还提到了使用JavaScript的reveal.js作为另一种创建动态幻灯片的方法。"
      },
      {
        "time": "01:29:16",
        "title": "云编程环境的优势与应用",
        "summary": "讨论集中在利用云编程环境，如Overleaf，来编写文档（如LaTeX）和代码（如Python）。这种云服务为用户提供了无需在本地安装软件的便利，特别是在编写学术论文或小型程序脚本时。Overleaf因其易用性和对学生友好的定价（如9元/月），被特别推荐，因为它能自动实时生成PDF文档，从而极大地简化了编写、编辑和排版过程。此外，还提及了云编程环境如何解决了传统本地编程环境的不便，包括数据丢失和环境配置复杂性等问题，体现了网络时代云技术的实用性和效率。"
      },
      {
        "time": "01:34:26",
        "title": "探讨LaTeX的高级应用与挑战",
        "summary": "对话聚焦于LaTeX在数学公式、乐谱及复杂图形制作中的应用，强调了LaTeX的复杂性和挑战性，特别是公式正确性验证和符号记忆的困难。讨论还涉及了使用Python生成LaTeX代码以简化复杂图形制作的过程，以及LaTeX在非传统领域如音乐制作中的创新应用。此外，还提到了寻找相关资源和手册以辅助学习和使用LaTeX的重要性。"
      },
      {
        "time": "01:36:59",
        "title": "排版和字体的密切关系及排版工具的挑战",
        "summary": "讨论强调了在进行排版设计时，字体选择的重要性以及字体与排版引擎之间的紧密配合。提到了特定案例，如高德使用自定义字体和排版技术来实现精确的排版效果，以及平面设计师在使用InDesign等软件时对OpenType字体高级特性的依赖。进一步探讨了在排版工作中遇到的挑战，如在Web和文档编辑中应用复杂排版特性的需求，以及保持内容与样式分离的困难。特别指出，当插入图片时，维持字体一致性和排版准确性的挑战，以及使用矢量图形与直接在文档中生成图形之间的差异。最后，对于如何解决这些排版需求和问题的商业应用排版工具的方法表示好奇。"
      },
      {
        "time": "01:43:36",
        "title": "探讨排版技术及其在现代设计中的应用",
        "summary": "对话深入讨论了Adobe提供的工具如何满足复杂排版需求，特别是在处理书籍等包含图片和小文字标注的项目时。通过Photoshop或Elastic制作的图像文件，可以通过链接或直接插入的方式集成到设计文档中，保持内容的实时同步更新。然而，对于某些高级排版需求，如箭头指向变动文本的自动调整，当前的平面设计软件可能还存在限制。对话也触及了TeX排版系统的复杂性和精确性，以及现代排版中对响应式设计特性的需求，如PDF中嵌入JavaScript实现的交互功能。随着数字阅读的普及，传统的排版理念和方法正在发生变化，对于是否还需要过分拘泥于传统的页面布局产生了疑问。最后，讨论了编辑在排版过程中的角色，以及排版师如何通过技巧和规则来优化版面布局，以适应不同情况的需要。"
      },
      {
        "time": "01:53:36",
        "title": "从PageMaker到InDesign: 设计软件的演进与个性化需求",
        "summary": "对话中讨论了PageMaker的过时以及InDesign在设计领域的广泛应用，强调了尽管InDesign功能强大，但对于特别定制化的小众需求，开源软件能够提供更大的灵活性和满足度。此外，提到了使用Python和TIKZ进行图形设计的可能性，以及专业设计软件在处理复杂公式和图形时的局限性。最后，讨论了技术文档制作中，个人偏好和工具选择的重要性。"
      },
      {
        "time": "01:58:05",
        "title": "PDF生成工具及学术会议海报排版讨论",
        "summary": "对话集中在PDF作为内容容器的角色，以及如何利用工具如Keynote和PPT简洁直观地生成PDF。特别提到了在学术会议中，使用PowerPoint进行海报排版的实践，以及这种做法的灵活性。此外，还讨论了一个个人因为对现有排版不满意，而开发出的拍卖引擎，并开源分享的故事，展示了个人对作品控制的追求以及字体排印的高要求。"
      },
      {
        "time": "02:01:17",
        "title": "自创字体的挑战与技术探索",
        "summary": "对话聚焦于一位个体决定自行开发字体的过程，起初低估了任务的复杂度，原以为几个月可完成，后发现需深入学习和重新设计。在开发过程中，遇到了使用现有字体的限制，转而学习从字体设计师处学习如何“画”字，并开发程序教导电脑绘制字体。特别提到了Metafont的使用，以及后来转向更现代的字体格式（如OpenType）的必要性。还讨论了排版引擎对字体内部信息（如度量信息）的需求，以及不同字体格式之间的兼容性和转换问题。"
      },
      {
        "time": "02:07:31",
        "title": "字体格式和排版特性的发展与挑战",
        "summary": "过去的方阵软件仅支持方正字体，后来逐渐允许使用TDF和OpenType格式，标志着现代排版软件对字体格式的广泛支持。OpenType字体，由微软和Adobe共同开发，因其复杂的排版特性而被广泛采用，但这也带来了支持程度不同的问题。方正之前通过排版引擎实现排版特性，而当前业界倾向于利用OpenType字体内置的排版特性。这引发了一场关于排版权利归属的讨论：是在排版师还是设计师手中。此外，不同系统对同一OpenType字体特性的解读差异导致了排版输出的不一致性，尤其是在网页排版中，行高的计算因浏览器的不同而异。这一系列问题反映了当前在字体使用和排版标准上存在的挑战，缺乏统一的国家标准，业界只能各自寻找解决方案。"
      },
      {
        "time": "02:09:59",
        "title": "探讨排版技术及其在现代应用中的挑战",
        "summary": "对话内容主要围绕排版技术的历史、发展以及在现代应用中的挑战进行深入讨论。一方面，提到了一位行业先驱通过个人努力开创了一个全新的领域，并对后续的排版技术产生了深远影响。另一方面，讨论了现代排版技术面临的难题，如网页排版的复杂性和对浏览器引擎的要求，以及排版个性化所带来的挑战。同时，还涉及了在不同平台上进行内容排版的实践问题，如字体选择和样式定制等，以及未来排版技术可能的发展方向。此外，还简要提及了直播和内容制作的反馈机制。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "高德纳与太和（TeX）的开发"
                },
                {
                  "children": [],
                  "content": "从机械排版到数字排版的转变"
                },
                {
                  "children": [],
                  "content": "1969年开始，通过自己的编程与字体设计革新排版领域"
                }
              ],
              "content": "历史背景"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "TeX排版系统"
                },
                {
                  "children": [],
                  "content": "Metafont字体生成系统"
                },
                {
                  "children": [],
                  "content": "LaTeX与ConTeXt等扩展"
                },
                {
                  "children": [],
                  "content": "Unicode与OpenType字体的支持"
                }
              ],
              "content": "主要技术"
            }
          ],
          "content": "一、排版技术发展"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "纯文本输入，编译生成PDF等格式"
                },
                {
                  "children": [],
                  "content": "支持复杂数学公式排版"
                },
                {
                  "children": [],
                  "content": "支持多语言与特殊符号"
                }
              ],
              "content": "基本概念"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "科技论文"
                },
                {
                  "children": [],
                  "content": "数学公式"
                },
                {
                  "children": [],
                  "content": "高级图表与图形设计"
                }
              ],
              "content": "使用场景"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开源免费"
                },
                {
                  "children": [],
                  "content": "跨平台"
                },
                {
                  "children": [],
                  "content": "高度定制化"
                }
              ],
              "content": "主要特点"
            }
          ],
          "content": "二、泰和（TeX）系统详解"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "Metafont系统"
                },
                {
                  "children": [],
                  "content": "Computer Modern字体"
                },
                {
                  "children": [],
                  "content": "字体的Unicode与OpenType标准支持"
                }
              ],
              "content": "字体设计"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "语义与视觉效果的分离"
                },
                {
                  "children": [],
                  "content": "多语言排版支持"
                },
                {
                  "children": [],
                  "content": "高级排版特性如连字、字偶距调整等"
                }
              ],
              "content": "排版效果"
            }
          ],
          "content": "三、字体与排版的关系"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "Adobe InDesign"
                },
                {
                  "children": [],
                  "content": "QuarkXPress"
                },
                {
                  "children": [],
                  "content": "可视化界面操作"
                },
                {
                  "children": [],
                  "content": "多媒体内容支持"
                }
              ],
              "content": "现代排版工具"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "高精度排版"
                },
                {
                  "children": [],
                  "content": "公式与图表处理"
                },
                {
                  "children": [],
                  "content": "开放性与可扩展性"
                }
              ],
              "content": "泰和（TeX）优势"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "排版工具的自动化与智能化"
                },
                {
                  "children": [],
                  "content": "用户界面的改进与简化"
                },
                {
                  "children": [],
                  "content": "多媒体与交互式内容的支持增强"
                }
              ],
              "content": "未来发展方向"
            }
          ],
          "content": "四、现代排版工具与泰和（TeX）的比较"
        }
      ],
      "content": "对话脑图摘要"
    }
  }
}