{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df964",
  "title": "25. Hyper.sh",
  "task_id": "47z39vd5o4xg9edg",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "欢迎收听IPM podcast网络旗下的埃踢技术主题娱乐节目内核恐慌。我们号称哈佛，但是也没有什么干货，想听的人听，不想听的人就别听。本节目的网址是IPN dot LI flash kernel panic。我们推荐大家使用podcast客户端订阅节目，详情请访问IPN dot LI flash FAQ。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:23",
      "text": "欢迎你为本节目捐款，捐款地址是IPNLI slash kernel panic slash donate。捐款金额随意，只要是能被八整除的正整数就可以捐款，不会给你带来什么，不捐也不会让你失去什么。我们的口号是hyper is hyper awesome。今天我们特别荣幸请到一位嘉宾，Simon薛磊，这里也给大家介绍一下自己。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:49",
      "text": "Hello大家好，我叫Simon，然后我现在是从事的是一项基于容器的一个创业项目。目前前是处于初创阶段，之前我从事的主要是内核相关的工作，之前也非常热衷的关注与内核相关的所有创业的相关的项目，然后包括最近特别火的一个容器，所以也加入了这个以容器或者说以have visor为主题的一个创业项。非常荣幸的能参加内核恐慌这个节目，之前也很关注。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:28",
      "text": "非常谦虚。因为Simon的自我介绍很低调，其实Simon之前是在sn就是后来一家卖给oro的公司，也就是java的诞生地对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:40",
      "text": "对对对，其实说到丧，其实有更多的人其实只知道是java。但是除了java之外，它有非常多的优秀的项目。比如说sloss就是用unix的一个变种，可能目前很多linux内核以及lu x分化版本上面的软件，以及内核的模块都是来自于损耗S比如特别著名的ZFS，当然可能做存储的人都知道ZFS它的一个特别强大的功能，以及调试内核的时候所用到的一些工具。比如说mdb，就windows上类似的就是GDB。然后那一种追踪内核的，不不不局限于内核，除内核还有应用程序都可以追踪。D trace就像目前的system time以及k time，以及类似这种trace工具，应该说百分大大大多数都来自于d trace的设计理念。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:50",
      "text": "非常酷。Simon，你之前在上的话，是具体是做哪一块工作呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:55",
      "text": "我之前在上的时候是北京研发中心。北京研发中心这边主要的一大块儿，是大概一个二十多人的一个团队。主要是从事的是内核SS的一个存储存储协议的一个研发，主要集中在scarf协议。这个可能比较底层，可能不做内核的人不太清楚这一块东西。这就是一个相当于一个标准的网络存储协议。比如就现在的咱们说的硬盘，就scout硬盘，像什么萨达硬盘等等等等，都是走的是协议。所以我我们其实在这一条线上去做开发，可能就是也比较偏存储一点，也比较偏内核一点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:41",
      "text": "对，sasa当年还是跟什么IDE那些S叫IDE。对应的那个时候，所以他现在后来是发转成了那个是SATA。对，那个SARS对吧？对对对，两个协议。然后那个scars是SARS的前身，如果我理解没错的话，对，是的，OK，所以你之前的主要工作是在做这个存储协议这一块。对，是啊，所以也是非常一个hard court的人，特别适合我们节目的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:05",
      "text": "这个对对对主题。所以我最开始关注疯狂的这个节目的时候，就因为自己从事这个行业，所以也关注这个，发现还是挺有意思。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:19",
      "text": "的这虽然我们节目一直都号称自己非常水，然后这一期终于有一个够硬的干货满足大家的要求了。OK, 三本，刚才你提到你现在在做一个跟这个容器相关的。当然我们节目在之前的某一期里面也提到过，这个概念叫做container。对对对，但是当我毕竟我跟吴涛两个人都属于这个东西的一个叫什么用户，或者说是门外汉，但是你其实在做这个相关的开发的，所以本期我们可能会就这个问题进行一些更加深入的探讨。OK, 所以你现在做这间公司。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:57",
      "text": "这个项目叫什么？其实这个项目就叫hyper，然后hy hyper我们的这个公司就是hyper HQ。然后主要为什么取这个名字呢？其实也是想针对国外的用户或者一些企业或者partners来去做。所以这个中文的名字不太好听，所以大家也就忽略了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:20",
      "text": "大家更多关注可以关注我们的那个英文的网站。然后可能我们的中文网站还在做，也没有特别的一个进展。但是所以就是我们的一个定位，可能跟之前的国内的一个创业团队不太一样。我们还是希望能够做的足够的精致，属于OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:41",
      "text": "对这个事情说来就非常巧，其实我跟三轮的认识还是一个机缘巧合。就有一天我们我收到了一封邮件，然后发给我的地址是是对应到我的那个github的账号的那个邮箱的。然后是Simon给我来了一封信，然后他是问我说能不能？因为我当时在上面有一个项目是使用这个命令行控制，通过这个virtual box的命令行工具去控制它。启动这个虚拟机，创建虚拟机这种那样的基本的小工具，是一个go line的一个库。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:13",
      "text": "然后当时三蒙给我来了一封邮件，说能不能用这个。因为当时我在在github上面那个repository里面没有写这个授权协议，就这点我还是当时我就非常感动。因为你知道很多大家都是直接拿来主义，对吧？对，我们也不会问这种事情的。所以在这方面我觉得像Simon还有hyper这个团队，对这个版权意识还是非常看重的，这点我觉得非常难得。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:37",
      "text": "对对对，就是因为我们其实我们这个项目，据我们所知，因为国内很少有这种创业团队去做开源项。而我们这个hyper其实是一个开源项目。既然开源项目的话，我们也是希望能够融入足够多的社区，足够大的社区，然后吸引更多的开发者。所以在这方面其实也是尽自己微薄之力，然后能尽量的改善一下国人在在开发者在这种全球的开发者之的的这种印象。因为可能更多的提到，可能国内的工程师可当然只能是少数。他就拿来主意让让，就直接毁坏了这个圈子的名声。哼错对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:25",
      "text": "刚才我们聊了一堆周边的情况，最后还回到harper这个本质上说在这个说之前我们先把这个网址亮出来，把这个网址是非常酷的一个域名，叫做hyper dot SH。对，当时你们怎么想的？会启用一个这么一个域名。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:42",
      "text": "因为毕竟其实我我们的就是点到达SH还是偏技术或者偏hike一点。因为SH你可以认为是败事，或者是认识认认为是其他的一些sale。对对对，所以所以我们当时也是用了这种，当然也是追求足够精简，足短一些，然后就选用了这个域名。然后当时我们之前参加挺有意思的一个事情，就是我们之前参加一个云计算的大会。然后很多人过来说，你们这家公司是成立在上海是吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:22",
      "text": "对，但其实到SSSH是哪个国家的？这个国家定级域来着？",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:28",
      "text": "这我还真真忘了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:29",
      "text": "OK这个我们会回头查一下。对，但是一般我们会把这个一些shell的工具，会用这个到SH这个顶级就来做对。然后这个网站当时Simon给我来信的时候，我就问到这个项目。但我去看了一下，就是令我非常惊艳。因为这确实不像是一个国内的团队做出来那种风格。因为整个就是很很很美国的那种很酷很嘻哈的这种创业团队做出来的这种技术展示的页面非常精美，非常漂亮。所以说了这么多，我们还没有介绍一个hyper er到底是一个什么样的东西。Simon你能够用一句简单的话介绍一下hyper是一个就给我们不太熟悉这个东西的听众介绍一下hyper到底是一个什么样的工具吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:14",
      "text": "其实我觉得如果先介绍hyper之前，应该先在在介绍hybrid之前，最好先介绍一下docker。因为可能很多人没有了解过在这个领域。然后如果大家知道docker的话，那么说hyper的话就很简单一句话就可以说说明白了。OKOK咱们先说docker，慢慢来。OK docker它其实是属于一个新兴的项目，大概也存在了2到3年的发展速度相当惊人。大概现在刀客的公司大概在估值10亿美金，10亿美金超过10亿美金了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:51",
      "text": "然后它其实本质上是基于容器，就是做的一组管理工具。我我我是这么理解。然后他将一些镜像文件，比如二各种linus方案版本都可以作为一个运行时环境，装到容器里面，然后去增加网络，增加存储这些所有的组件component，然后使之作为一个轻量级的虚拟化工具来去运行。然后这样的话就相当于在同一台机器上，我可以虚拟出来多个单独的容器，然后这样去运行不同的APP。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:35",
      "text": "Doctor一个其中一个理念或者说容器的一个理念就是一个容器里面只运行一个APP，就是相当于我只运行一个tom cat，或者说类似应用那个软件。然后这样的话来做到使每个容器尽量的精简，然后更便于管理。他他其实是为了为这些运营或者说为这些开发测试提供一个比较一致的一个运行时环境。然后这样的话就是你可以自己提交你自己的contender的镜像，然后直接提交过去之后，任何人都可以下载。这样的话就保证了一个非常一致的运行时环境，就像解决了一些像咱们几年前开发软件，就是java各种配置，环境变量各种参数配置等等，这些问题就迎刃而解。我直接下载一个镜像直接运行就可以跟就比如我是一个测试人员，就可以跟开发人员的运行时环那个开发开发环境保持一致，就解决了很多环境相关的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:51",
      "text": "然后说到了容器，容器它是刀客用到容器作为运行时环境。然后容器的这个概念就是相当于将一个house的主机分成多个子的容器来来来来来去运行APP。他这属于轻量级的另外一个好一个一个好处就是速度足够的快。但是它一个弊端就是它因为它是share克隆，它是在一个内核上面去运行，所以它也造成了一个安全性的隐患。所以这就提到了我们存在的意义，就是解决这个安全性的问题。就是因这个容器它是沙尔克的OK，我们不用赛尔克戎，而是用hybrid er就是用VM来代替容器来去运行docker的image。然后这样的话就是解决了doctor的一个安全性问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:51",
      "text": "但是因为众所周知，大家用过wam wear，用过watch box都知道，它的启动速度可能可能会比较慢。即使在你的非常好的高端的服务器上面，大概也要在一两分钟或者是两三分钟。没错，对，所以我们也是极致的优化，让它的启动速度大概在毫秒级别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:16",
      "text": "然后是毫秒级别。对对对，大概在，所以刚刚才是从这个一两分钟，至少就是100秒1级别。我们现在已经到毫秒级别。对对对，有四个数量级的提升。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:26",
      "text": "对对对，所以大概我们的测试在比较好的机器上，大概在300毫秒.",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:33",
      "text": "OK的一个0.3秒左右。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:35",
      "text": "对对对，所以这个相对于容器的运行的启动速度来说，已经算是差距不大了。所以而而且它的安全性有很大的提升。这样的话也就是成为我们一个核心的竞争力，或者说一个存在的基于这个目的来去做的这个东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:58",
      "text": "所以就是说这hyper是一个可以快速启动的虚拟机。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:04",
      "text": "可以这么理解吗？对，然后它在虚拟机的基础上，可以很快的将docker的image运行起来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:13",
      "text": "OK对，然后hyper取的这个虚拟机里面是就只跑一个docker的镜像呢？还是说它里面可以跑多个docker镜像。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:23",
      "text": "可以跑多个刀刻的镜像。而我们一个虚拟机，其实相当于是一个工作的单元。这个工作单元其实来这个idea是来自于com natives里边的一个pod的概念，就是一组contender的一个集合。而这一组container是有关系的，它是为了运行一个，比如我运行一个网站，肯定要一个ndi x mysql等等这类似的东西。所以对，所以我我我我my secure一个contender，我你这个一个contender，然后这样的话就组成一个炮的，这个炮的概念就包含了两个contender OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:07",
      "text": "所以可以这么理解吗？就是说一个hybrid的虚拟就是对应一个这个part。对对对，这个盒子，然后这个pod里面是包含了多个docker的container。然后每个contained里面只运行单一的一个应用。它可能是一个数据库，像my SQL，可能是一个web服务器，像安全X对后还有一个就是像一个应用服务器，比如说一个tom cat或者其他一些什么像python，或者如笔写的一个应用进程。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:36",
      "text": "对对对，所以他用这种炮的概念来管理一组。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:41",
      "text": "所以这个相比这里听起来就是说做这件事情的时候，hyper相对于一些已有的工具，他们的主要的区别在哪里呢？比如说可能像过去也有像基于这个KVM IMAX上面的KVM，也可以运行一些轻量级快速启动的当然这个可能需要定制你跑的那个叫做guest.",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:03",
      "text": "就是叫做guest OS。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:04",
      "text": "Guest OS对对对，就宾客系统。还有一些像过去基于这种传统的happy mother的一些工具，像zen里面也可以做一些事情。从这个角度出发的话，hyper和他们的区别，刚才提到这个KVM和zen它们的区别主要在哪里？",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:20",
      "text": "其实我们底层也是用了KVM zen以及watch box这些adviser。但是我们跟他们的一个优势，或者说我们做什么东西，就是我们将盖茨OS是我们实现一个经济最最简单的一个css OS。主要是用于跑docker的image，然后形成contender这一系列工作。另外我们外边提供了一整套管理工具，然后可以管理这些hyper wiser，然后让它能够以炮的为单位去运行刀刻的image，并且不应且提供了很多监控的工具，这样的话方便用户运行docker image并有更好的安全性。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:07",
      "text": "OK所以实际上到hyper是分两部分。一个是说管理像传统的像KVM森阳这些是hybrid的工具。对。然后另一方面他是说是包含一个你们定制过的极度精简的一个gas OS的一个内核。对，是的，可以这么理解。对对对，OK, 那这里就牵涉到两方面的问题了，就是说在管理这个工具这一块，hyper v hyper和docker他们之间的这个界限是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:38",
      "text": "你指哪方面的界限。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:40",
      "text": "就比如说你刚才提到这个hyper里面，它这个gas里面包含哪些的东西，就只有一个基础的内核，就是这个gas dos里面除了这个内核之外还有什么东西？",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:51",
      "text": "没有别的了，它只是跟外边的hyper demo去一个交互的作用。然后我们会把用hyper demo会把docker的image从dock hub上面下载下下载下来，然后作为一个博号device或者是一个卧室。还有999P的一个文件态势给这个hybrid er然后盖ss OS拿到这些信息之后，就会做给用户生成一些运行时环境是OK这是整个一个这样的一个大概的一个思路。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:26",
      "text": "OK然后你刚才提到那个hyper还有一部分是管理，像传统的像KVM，zen这种还via的工具。这一部分的话，它又主要包含哪些组件或者是一些功能模块呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:38",
      "text": "它主要是我想用过刀ker的人都会有有一些印象。比如它可以直接用docker logs，或者说docker那个ESEC，或者是刀客，类似于TTY的这种环境。其实我们也提供了这种工具，就是可以因为如果要用一个用户要想看这个hyper wider里边的信息的话，或者说他的log的话就必须要登录或者IISSH进去。所以我们其实是将这些这些操作全都简化，然后直接通过客户端或者说通过API就可以让用户能够简单的访问到底a cap里面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:28",
      "text": "运行的container到底的运运行的到底怎么样了，以及它的是否发生错误等等等等。就这些全部达到一个监控的效果。当然你也可以完全当这个container一运行的时候，你就可以监控这个container所有状态，将out全部收集起来，然后再去分析等。这个其实一个很方便的有很方便的API，方便用户再次。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:55",
      "text": "开发OK。所以如果我们画一个层次结构图活动，最底层可能是这个host它的这个操作系统，对，然后它上面会跑着像诸如这个KVMZE这样的一些high advisor工具，然后再加上hyper这一层对啊，去管理这个KVM和Z这样的工具。然后再在hyper管理的这些guest VM里面会跑一个docker的一个镜像，然后再在镜像里面去运行我们最终的应用程序。没错吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:26",
      "text": "那个概念上有点不太一样。因为刚才你说这个可能就是更多的人去想到这种方式，就是他他其实这种方式就是目前的boot to docker，它就是将docker的DM放在一个VM里面去运行。而我们其实是将hybrid demon，其实我们这里就没有docker demon，因为我最开始其实是依赖于doctor dim，但现在没有，所以我们取消了docker的硬件。然后OK将hyper demo放在house OS里面去运。然而docker的image下载下来是直接把这些文件全部传传进VM，然后盖茨OS再去用这些文件来去起container，然后去运行这这这些这些文件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:18",
      "text": "所以其实你们是hyper是完全替代掉了docker的这个管理的功能。对，你们只是复用了docker的这个已经制作好的，就是他本来是为docker这个管理工具制作好的这个container image。对，这个还和我之前记得有一点点出入。这个的话其实就还蛮酷的。如果这理论上来讲，如果你们因为harper管理的VM的这个虚拟机也非常轻量，其实也很快。对。然后同时它又具备传统的像docker无法提供的这个内核级别的隔离的安全性，对吧？对，所以其实是在安全性和性能上是完全完全可以超替代甚至超越docker这个demon本身的对OK明白，非常好的解释。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:04",
      "text": "所以现在有一刚才也提到一个最主要的核心要点，就是说安全性这一块的。可能很多不是做这个内核相关的朋友，可能也其实也是现在很多使用这个docker container的一个新手可能一个困惑。因为确实你想一个doctor image给人感觉用起来很像一个虚拟机。对，但它其实并不是一个虚拟，只是一个集中叫做我们叫做集装箱或者叫一个容器这么一个概念。对，所以Simon肯定这里要给这些我们这些新手，还有好多不太熟悉使用docker的要普及一下。为什么说docker它不能提供像传统的这个虚拟机那样的这么一个安全性的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:44",
      "text": "其实这个的话就是从刀ker本身用的技术上面就要来讨论。因为docker其实他并没有，可能说说的有点有点有有有点儿太太直白了，包括其实并没有发明任何新的技术OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:00",
      "text": "对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:01",
      "text": "这个其实很多人对docker的一个指责。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:04",
      "text": "因为所有的像container这些概念可能是十年前就已经有了。对，然后很多人都说这个docker其实只是把一些叫什么新瓶装旧酒。对，这个倒也没什么，这个从技术角度来讲确实是这样子的。就我的理解，可能docker的主要的价值还是说他提出了这么一套理念。让大家可以说去更好的去从这个开发到测试到实际部署这么一套流程工具流程。刚才那个安全性的问题为什么说这个dog就我们这些小白们会觉得这个contender之间是有隔离的，但其实并没有想象的那么好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:40",
      "text": "对，就是因为这些container之间的它的一个同样的实现方式，它是基于name space，或者说更底层一点，它是通过c groups。C groups就是一个内核的一个module，然后它所做一个隔离性就是相当于用户可以配置。然后c groups在内核里面去限制某一个模块，比如内存，比如CPU，每个线程可以用多少。但是这样的话，它所有的全都是基于一个house OS的科能去去去做的。然后如果一个contender里面的一个process获取了一些更更高级的权限，它它就可以控制这个内核。而可能这个就是特别特别细特别细，怎么hike去去这个的事情。但是本身你share的坑它它其实就是有这种问题的。因为你如果一个contender出了问题，就会导致科隆panick的话，就会导致整个所有的content不可用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:45",
      "text": "看来B节目的名字还是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:47",
      "text": "很有示范意义的对对对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:50",
      "text": "所以刚才你提到一个很重要的概念叫就是如果在传统的一个docker的部署里面，如果你在一个虚拟机或者同一个内核里面部署了多个来历不明的这么一个到这个image在跑。然后假设某一个因为这个内核它不可能是完美的一个，对吧？所以假设一个内核的一个漏洞，或者说你没有及时打上一些补丁，使得一个恶意的程序抓住这个漏洞，它其实是可以越权拿到这个最高级的权限，从而影响或者控制其他在就其他的container里面的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:25",
      "text": "对OK.",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:26",
      "text": "所以从这个方面来讲，我们必须采用像传统的这个虚拟机，就是独立cornel的这种虚拟机的方式才能实现。哪怕一个guest kernel的被被攻陷之后，我的host还是相对来说安全的对吧？对，OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:42",
      "text": "那么这里就会有一个自然而然的问题了。就说这样的话毕竟还是多了一个虚拟机，多了一个内核层面的在跑。它的这个相对于这种docker本身没有一个它是一个共享内核的情况，它的这个额外的开销会是怎么样的一个情况？",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:58",
      "text": "对，所以这个也就是我们之前一直在关注的一个点，就是它的性能问题。性能问题的话就是我们做过很多的测试。其实我们并没有说更改或者说修改那个hypervisor的代码，然后让它达到一个非常优化的一个。但是我们目前还是希望能够用更加通用的手段来解决用户的问题。然后就刚才说的一个启动启动一个container的所利用时间大概在300毫秒。这个是跟刀客相比基本上没差太多。然后性能上面这是这一点。然后另外就是CPU利用率上面基本相似。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:46",
      "text": "可能很大的一个问题就是在网络的IO以及storage的IO上面可能会有有会受限于hyp wither它的性能。因为你像9P或者是像直接的广告device，它都毕竟要经过多层的传递，对然后可能会达不到很好的效果。但是我们其实也也在目前也在解决这个问题，就是用因为广告device它其实还是传的那个story的协议。比如scars协议，直接scarf协议。怎么能够传递，或者怎么能够更减少它的跨越的层次，就是一些可能摆pass的技术。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:30",
      "text": "OK所以总结一下，就是说因为hyper还是一个基于虚拟机的一个技术。对所以传统的虚拟机的一些缺陷，可能还是起码在现阶段还是免不了的对，刚才也提到了几个问，也就是说它可能但就是我们现在CPU，特别是像英特尔的一些服务器的CPU，它对这个硬件虚拟化的一些支持是非常好的。所以在运算这一块的损耗其实可以几乎可以忽略不计。我觉得对对对，但是像这个IO层面，因为它还是就需要依赖于这个硬件的支持和软内核的支持，可能还做不到说一个比较好的一个状态。我可以大概问一下，就直观来讲，比如说我我我我网络吧，我一GB的这个物就物理网卡的这么一个吞吐量，传到hyper这个虚拟机里面之后，大概会损耗到多少？",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:24",
      "text": "这个我们之前确实是做过调查，但是我现在没有没有手手头没有这种资料OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:31",
      "text": "那这个是就是说你刚才提到最主要问题就是IO的损耗是这一块了。对，特别好奇。但如果说如果你有资料的话，我们可以补到这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:39",
      "text": "修notes里面。对，但这个在我们的官网上其实是有更详细的资料，然后OK。对，因为这部分我没有参与测试，所以具体细节不是特别清楚。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:51",
      "text": "OK没问题，所以这也说到IO这一块，所以我顺便插话问一句，刚才你也提到有一些叫做能够绕过。因为IO最麻烦的问题是在于，因为是虚拟，就是叫guest to s和这个host它是要互相复制数据的对吧？这个是导致性能损耗最主要的一个原因。那么你刚才提也提到一些就是摆pass，就是能够绕过这个复制的一些机制。可以大概介绍一下你们目前在考虑的，或者说以后可能会采用的一些方法是什么呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:23",
      "text": "其实我们目前已经采用了what IO night的一个模块。然后它其它其实就是将网络的IO摆pass，相当于跨过了hypos er底层的一个数据传输。但是还house OS它的一个TCIP协议栈是没办法跨月的。所以这个技术应该是可应该是跨越hypervisor的一个TCIP协议栈，它就是减少了它的层数。然后另外其实我们也在基于blow device去做一些。操作因为不高，device的话它它它毕竟还是块设备的传输，更偏向于它的IO协议本身。所以这样的话能比网络层的优化不能能能够比文件系统级的优化效果会更好，我们也在关注这些点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:22",
      "text": "OK, 刚才你提到两个用例，一个就是对于一个经典的这个网络层的一个传输的优化，还有一个是对这个文件系统传输层的存储层的一个优化。那我们提一个就是就着刚才那个网络层的这个情况来讲。因为大家可能最常用的还是用来部署一个基于web的一个server或者就服务器之类的应用。对对对，所以举一个例子，比如说在一个经典的hyper的部署情况下，就是说底下有个held这个host OS上面跑一个假设KVM，然后在harper在管理一个VM里面再跑一个docker image的这种情况下一个数据包从最里面的这个假设是一个NGX的服务器里面传出来，第一直传到这个host OS。硬件的网卡之间大概需要经过哪些步骤，可以给我们描述一下吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:14",
      "text": "目前的话咱们先说正常的话，它他肯定是经过hyper sizer的TCIP协议栈，然后经过hyper sizer它的一个。但是这个就要分它是硬件模拟，还是就是不是全部全虚拟化，还是半虚拟化。这个的话就涉及到了Q缪的一些知识。因为q mo的话，如果是q mo全虚拟全全全虚拟化的话，它就是相当于完全硬件虚拟虚拟化，他就是网卡都是虚拟化。对对对，所以他他走的路是跟hybrid是跟how SOS是完全一致的。大家也可以查一下资料，就可能走TCPIP协议站，然后再走走那个driver，再走宁可的driver，然后再再往下走form air这些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:07",
      "text": "如果要是半虚拟化的话，他就可以用那个沃TIO耐net卧IO，反正相当于network课程摆pass一个技术。就是将像hyper wether里面的那个网络包的数据直接给到nike的driver，然后unique出，然后调一些LL tole命令，直接让IO包直接发发发送出去，然后交给OS。然后它它其实在这个的过程中，我我我如果没记错的话，应该是high pressure里面的这个nike的一个虚拟虚拟地址。其实是和hs OS house OS里面的这个网卡的地址其实映射到一起。然后这样的话能够缩减很多层。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:54",
      "text": "就不用复制那么多字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:56",
      "text": "对对对，其实在网络传输过程中，用户态和内核态之间的网络包的复制过程还是比较耗时的对对对对对。然后另外一个就是它的相当于用户态和内核态一个切换过程。但是这个的话其实没有特别好的办法。因为你要保证实时性，要保证能够他的能把这些包全都传送出去，所以必须用一些机制来处罚，所以可能用的或者是用其他方式去触发。但是这个东西我们目前也是用了现有的机制，没有特别一就目前还没有设计这方面的去去这这方面的动作OK明白。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:42",
      "text": "Hyper那套工具讲，你也提到了就是说hyper它会提供一个非常轻量级的guest OS的VM在那里去运行里面的docker image。这里面就可能要跟现有的一些其他的想做同类事情的工具相比了。比如说比较注的现在比较火的像那个core OS，还有像上次好像英特尔也出了一个，是专门跑这个doctor image的这么一个极度精简的。这个linux的OS相比起来，你们比他们的区别在哪里？就是精简了什么东西？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:19",
      "text": "是这样的，就是英特尔出的那个叫的他的出现对我们来说还是周围很很震惊的。但是其实也是验证了我们的方向是正确的，因为大大厂都跟进这件事情了，所以我们既兴奋又担心，还有点惊讶OK对，然后他他和靠OS其实应该是应该是属于类似的东西。但是他们的目的可能不太一样，就是我们自己的分析。因为OK是windows它的一个应，它其实是为了验证英特尔的硬件。因为英特尔它开他虽然说是开源技术中心做出来的，但也不能说一帮人没什么意义去做这个东西。因我们分析他应该是为了体现他们的硬件足够的快，可以达到启动一个windows的GSOS，能够非常快级毫秒级的。然后当然也有很多人基于这个东西去做了很多的。因为刀客目前的形势非常火，所以很多人基于可能linux斯去做过一些贡献，然后就是把它改造了一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:37",
      "text": "之前还有一个PR专门给docker的，相当于dock的那个upstream，然后去提了一个PR就是想希望能够用这个可用windows来运行docker image。但是这个没有被被接受，因为可能觉得可能做的。或者说它的性能，或者说整体的一个运动方式跟docker的不太一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:07",
      "text": "OK对，所以我们也关注过他很长时间，他目前也在不断的维护。然后他跟COS就提到COS，COS其实他是在COS里面，他给你做了足够多的配置，然后让你直接去运行一个docker的demo或者说docker的contender，然后你直接clear linux是可是不可以装在一个bion mental的一个机器上面。而可靠OS是可以的，它可以装在那个Better mental的机器上。然后这样的话配置到一个机房就可以运行，就可以直接你装一个OS，你可以直接运行docker的dim，docker的任何命令你都可以去直接运行，而且它可以优化了，所以它可能的场景不太一样。所以说我们的hyper其实跟他们其实不是特别一样。因为我们其实虽然说也提供一个gas OS，但是我们这用的GOS，它其实是为了在VM里面跟外边的hyper deeming去配合，然后去运行doctor image。其实我们是一个整套的一个环境，其实就是去跟刀客平行的一个另外一套的环境。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:28",
      "text": "所以如果我这样理解没错的话，就是COS和英特尔出的这个clear linux，他们还是依赖于这个docker demo本身。对，是的，而这个hyper是可以完全替代掉它的。对对对，是。所以其实从我个人角度来讲，肯定是少一层比多一层简单。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:45",
      "text": "对对对，这个也是看大家的应用场景，可能关注点不太一样，但是也不能也不说太太太推销我们的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:56",
      "text": "没错，这里就提到这个应用场景，这个是非常重要。好，所以在你们的这个定位里面，这个是在什么场景下适用于比较适用于用这个hyper会比较好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:07",
      "text": "其实我们是希望就是我我们的一个做的hybrid这个目的是希望有有想法用docker不做构建一个公有云的一个厂商。当然可能目前已经有了，就比如到什么到科奥的点，到的IO他们其实就是声称是用docker做一个去构建的一个公有云。但是我不确定他们内部是怎么搭建的，来保证用户的安全性。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:45",
      "text": "OK这个就涉及到刚才我们讲的那个问题了。如果说因为你没有内核隔离的话，其实是docker本身的那个container隔离是无法保证安全性的对。然后如果你跑的是一个公有云，就所谓公有云就是说你的两个客户之间是可能不是一家或者一个人。对，然后你也没法保证你运行的应用的这个性质，或者是它是否是一个恶意程序，你是无法保证的对，就是可能是公有云和私有云最大的区别。所以这种情况下是必须采用VM隔离才可以实现，我们可以接受的安全性。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:23",
      "text": "对，因为目前就我们所知，一般的公有云厂商一般都是用这种方式，就是底层还是用hazer去或者说VM去做隔离。对，然后可能没有利用用容器直接去做隔离不太靠谱。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:41",
      "text": "OK所以hyper的一个主要应用场景就是说给那些有志于提供这个公有云的厂商这么一套基础的工具。使得他们可以比较快速的启动或者是关闭一个虚拟机。然后这个虚拟机上是可以，但是它面向就暴露给这个用户的，他确实确确实一个叫什么来着？是类似于这个container那种的API对吧？对，OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:07",
      "text": "所以这个就是牵扯到另外一个问题了。就是说因为我们现在大部分的像lino de也好，AWDS也好，还有现在比较火的什么digital cloud也好。他们都是采用传统的虚拟机这种方式，暴露出传统虚拟机这么一个单元。然后由由用户再去管理其中的是否跑docker，是否跑什么guest to s的事情，刚才我们讲的你直接暴露给用户一套基于这个contained API的好处，相比于现在这个暴露给用户一个基于VM的API的好处是什么呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:42",
      "text": "不其实我觉得还是另外从一个应用场景上面来来来分析。如果要是就比如说用户他想他已经在本地，他一个开发环境，他本地。的话它可以部署，它可以配置任何docker的一个image，然后去上上传到自己的private或者是public的一个hub上面，然后他再去运行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:12",
      "text": "如果他要是像直接拿到一个VM的一个环境的话，那他完全他要在自己搭docker然后在里面去直接在部署下来，再下来再再去运行或者对但是我们这种方式，你直接可以将你的docker的image直接下载下来。我们你只要填一些你所想要的东西，直接全都给你部署在后端了，就是不需要你去做任何的配置。你只要填，我们这有一个叫Jason，就是输入文件就是Jason five。这个five里面可以定义你的所有的上面运行的东西。比如contender运行，那个contender从哪运从从哪下载，以及那个pot那端口映射，以及storage等等等等，你都可以去自己去配置。所以就是简化用户的操作，我觉得OK.",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:06",
      "text": "所以这个其实还是其实挺切中我的个人的一个痛点。比如说我自己在运营的这个IPN的这个服务，还有一些帮朋友管的一些其他的一些服务。然后他们就是每次要新增一个服务或者是管对的，特别是新增的时候会有一个问题，就是说给我的这个虚拟机新开的一个虚拟机是空白的，我再重新搭一套，比如说建管理对应的这个账号对吧？对应的这个要安装对应的软件。但这个可能有一部分是可以通过docker本那个image本身打包来实现的。但是刚才你提到一个很重要的点，就是docker这个demon这个守护进程本身还是需要配置和安装的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:42",
      "text": "对对对，所以其实我觉得还是一个抽象层次层次的一个飞跃。你们其实是通过hyper这套基于content的API，同时再加上这个VM的安全性，使得我们不用再去操心。我当然这个continuer，我其实我是可以在逻辑上按照container来做这个部署了。只是说我不用太操心，像传统docker这种肯定之间无法内核级隔离的不安全的隐患。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:12",
      "text": "对，没错，对，对，然后我们下面就要进入到一个很关键的一个问题的讨论。因为基于因为docker其实本身到我觉得到目前为止，也没有并并没有很好的解决这个问题，就是这个存储空间的。因为过去的话就照我的理解，他docker的，因为它是提倡的叫做应用，是那个那个image container是不可变的，就immutable able container。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:38",
      "text": "比如说你作为一个应用层应用服务器本身可能这个倒也没什么。你你你多起几个应用就可以提高你的这个并发数，对吧？那当然是好的。但是我们做做一大部分的这个网站也好，还是什么服务也好，它还是必须要考虑这个数据持久化的问题。就说你从这个客户那里拿到了这个数据，那你存到哪里，过去docker的一个提倡的一个概念，就是说当你再建一个单纯拿来做这个存储的一个image来做这件事情。所以我不知道这件事情在hyper里面是一个什么样的一个值得鼓就是什么样的做法是值得鼓励的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:15",
      "text": "我们我们目前是有一个单独的volume的一个模块。然后它是可以你可以在在针对某个container，或者说针对几个container去去配置。然后我你可以自己添加你想加入的volume。这个volume既可以是文件或者是目录，然后也可以是包括device，包括device就支持非常多的形式，或者用户可以自由配置。然后你可以把这个多大多多少你都可以自己配置，然后指定给哪个用户都可以自己配置。这样的话，你加到一个container里面，你运content er运行的时候，你可以指定我将数据存到这个人的保那个book device或者说是文件目录里面。这样的话目前我们是支持本地的以及一家safe，或者说你用SW当然也可能配直接配storage server都可以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:25",
      "text": "OK. 所以我理解一下这个大概的一个做法，就是说我把这个hyper它会允许我虚拟出一块block device，就是一个快存储器。对，然后这个快速就我可以直接挂载进我的某一个hyper的虚拟机里面，成为一个文件系统也好，一个什么目录也好。是的，但这样的话就是这个hyper这个虚拟芯片本身跑的应用，它还是一个immutable，就是不可变。对，然后他的写入的数据是通过刚才挂载进去的这个block device持久化到其他地方的对对吧？对，然后这个持久化是你要么你可以在本机，就是同一台host的机器上执行，或者是通过这个s class这种网络的存储的协议写到另外一台一个文件，比如说一个文件服务器上。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:15",
      "text": "对，没错，是这样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:17",
      "text": "Ok所以这里就牵涉到一个效率的问题了。刚才我们也在提，前面也提到就是说通过这种方式挂载进去的这个就是desk IO的效率会有很大的损耗吗？还是说什么一个什么样的情况？",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:32",
      "text": "其实这个主要还是说hyder本身的。因为我们我们如果你要是挂本机的，包括device的话，那么它其实还是涉及到一个IO命令的一个传递的一个转换。然后这个的话消耗应该不大。但是如果你要是文件级别，就目的话目录的话，它其实是走的。它是通过hybrid ser的shell的share file来来来share或者share directory来做的。所以这个过程的话就我们之前测过，不管是when wear或者说watch box，或者是timere，它的就塞尔的幕布的性能都不是特别好。所以我们特别建议用那个高device级别的去操作。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:22",
      "text": "另外就像刚才另外一种方式，还有第三种方式，就比如我要是远远端的，或者说sorry slover的话，那这个的话它因为可以是报给hype either一个ball device。所以它这个的性能可能是除了依赖于hyper or Brown device支持，还有的话就是我用的第三方工具的性能了。对，所以share的幕布的话这确实是一个硬伤，没有特别好的办法。因为high hybrid本身他们做的也不是还好。因为他是想达到更加用户普通用户级别的使用，而不是说我用这个来做企业级，或者说做工业级应用可能不太一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:14",
      "text": "OK，所以就牵涉到一个问题了，就是说在实际大规模部署的时候，这种比如说类似于google或者是amazon这种级别的用户，他们会一般会采用什么样的方式去部署这种存储的这个方案呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:34",
      "text": "存储的方案，我还真不确定他们怎么部署的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:39",
      "text": "OK没关系，那我们进入下一个话题，就是说刚才也提到这个文件存储可能是效率上是一个硬伤。这个确实在目前的技术条件下，好像没有特别好的解决的方案。对。然后刚才之前我们也提到了这个网络这块，因为也涉及到IO，也是一个比较尴尬的一个状态。其实这个都说的是在刚才我们大家假设的一个场景，都是说在一个linux的host s上跑一个应用的场景。但是我现在就问一下，如果在开发者在就是想假设听众朋友们对这个还比较感兴趣，他想去试一下他在哪些其他系统上可以去去玩这个hyper呢？因为我们是像那个docker它可以通过一些讯息的方式，在像OSN上也可以跑。Hyper .",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:28",
      "text": "hyper当然也支持mac OS。然后OK这个东西，hyper对于mac OS的支持大概是在这个月，应该是这个月初完成的，然后我们也在不断的去完善。目前在hyper在mac OS上面的的hyper只能用watch box一种hysan OK。然后如果你要是在linux上面，当然你可以用q mil KVM以及watch box都可以用。但是因为macos上面没有说Q没有KKVM或者说赠的这些虚拟化工具，所以就没有特别好的办法O.",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:20",
      "text": "K因为virtual box的其实从它的稳定可靠性，还有它的这个性能来讲，其实不算特别好。特别是在OSN上面，经常会遇到什么用开着它然后就死机的一个情况也时有发生。对对对，其实最近我们知道好像是从那个OS ten是10.9还是10点10开始，他有一个苹果开发了一套FM mark，叫做high pressor dot FM mark。对，这套其实它可以在OSN上实现类似于VM的功能。所以我不知道你们后续有什么计划会用到它吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:04",
      "text": "其实我们也在非常关注这个点，然后目前有一个开源的工具就是XL对对对，我你应该也关注过这个非常之前在higher news上面发出来过，非常火，然后关注度也非常高。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:22",
      "text": "我就他那个的历史还是要追踪到那个solar上面去，对吧？因为它的前身是一个它是基于它是一个behaved的port。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:30",
      "text": "然后。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:30",
      "text": "behave f是在solo.",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:32",
      "text": "还是在BS free BSDCBS对OK所以从上面应该是没有的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:38",
      "text": "OK所以这个目前来说我们还是跟像那个docker的方案一样。在OSN上测试开发的时候，是通过这个virtual box这个虚拟机，在里面直接再跑一些，是跑的这个是hyper的虚拟机了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:55",
      "text": "对吧？这个就是我们的一个费了好多好多心思。去做的这个东西，就是我们这个hyper在mac上面的运行和boot to docker的运行是不太一样的。Docker它其实就是一个docker的隔岸端。然后他把他的demons设成了VM的watch box的的地址，然后这个在watch box里面去运行到RDM。然后它其实相当于通过网络，将这个数据全部显示给dock口岸的用户。以为他这是本地运行的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:34",
      "text": "其实是在所有的东西是在那virtual box的那个虚拟机里面熨。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:37",
      "text": "对对对，是的。而对那你们的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:40",
      "text": "方案是怎么样？",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:41",
      "text": "我们的方面我们的方案其实是跟linux它的设计机制是完全一致的。就是现在关于我们的的hyper demo是在mac OS上面，然后我们的hyper可岸也在mac OS上面而运行的。Docker的image是在watch box里面去运行的。它整个的一个设计思路是完全和是上面的hyper设计似乎是一致的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:10",
      "text": "所以其实我理解在这种情况下，我比如说我在OSN上跑了一个hyper之后，它的这个管理层是管理层的命令航空器都是在OSN的原生的东西。然后它是控制virtual box这个hybrid去里面新建一个虚拟机，然后虚拟机内核跑的是你们这个hyper定制的轻量级的guest s对，然后里面再跑的一个或者是多个这个docker的image是这样。对，是的，OK我明白了，这个还真的和那个不to docker的方式非常不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:45",
      "text": "对，因为books docker你创建一个container，他是一个卧室包是一个VM然后你创建两个，他也是创建三个，他也是他创建的contained都是在VM里面。而我们这种方式就是你创建一个container或者说就多一个V对对对，多一个VM这个可能会受限于开发者的一个机器的一个环境配置。因为你多个VM它毕竟要占CPU，占memory。这个是一个但是他做很好的一个隔离性，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:17",
      "text": "OK, 所以这里我要问一个很好玩的问题，就是说你们为了实现这个踩了多少virtual box的坑？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:29",
      "text": "我想你应该也会知道我是boss的坑就是太多。它的API很难在mac上面，因为我们是用go开发的，所以它的a word boss的API很难跟购物去结合到一起。所以没办法只能调命令行，调并行的一个。另外一个问题就是没办法监测它的一个输出的一个结果，所以就是用了一些很很无奈的办法去直接接他的输出，这些办法。另外就是呃不局限于waterworks的问题，还有就是麦格瓦斯的问题。因为众所周知，因为docker他的他用了威尔的FS，对，然后他用这个来做layer的image，然后对来保证足够的快，然后不至于说直接的拷贝，造成很大的一个时间。我们在mac OS上面其实也想了很多很多办法，就怎么能够达到wear这种效果。所以居然让我们找到了water box，居然能有这种机制，就是world boss其实是可以做，layer的disk他他是通过那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:50",
      "text": "snapshot那个机制。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:52",
      "text": "其实它不太一样，但是也差不多用类似实验机制。它是OK通过parent disk，其实就是snapshot，我觉得OK对，通过这种方式就可以实现用air的diss.",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:09",
      "text": "你们是这么做的，好机智。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:11",
      "text": "这个办法那出来的这个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:13",
      "text": "实际的就执行效率怎么样？因为这个可能其实因为除非你部署，其实大部分开发者可能还是在向这个里面用virtual box的方式来开发。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:24",
      "text": "对，然后我们目前这种方式的话，大概在运行一个two的docker image。就整整个下来之后，你下载之后，运行大概在两分钟。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:41",
      "text": "就从那个virtual box信息创建到开始启动。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:45",
      "text": "就直接预你可以直接操作了，两分钟不到两分钟不到2 1点1900多毫秒OK那。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:52",
      "text": "如这个中间两分钟的主要是主要的花在哪里？",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:57",
      "text": "主要花在了其实一部分是watch box本身的设备的一个虚拟化，就是它的硬件的device的一个虚拟化。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:07",
      "text": "因为它就是要配置一个virtual box的虚拟机出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:11",
      "text": "对它这是一部分。然后另外一部分它就是一些硬件的虚拟化。比如我要是创建SATA的盘，那我只能创建他的device，而且watch bose只能是用SATA作为hot plug的DYD。而用SATA作为hot plug的disc的话，就创建时间会比较漫长，就稍微稍微比稍微比SARS的要。因为SARS它不支持hot pack，所以它的机制可能会简单好多。对，所以就损耗在这些方面就比较无奈。然后另外一个就是当然也是有啊get OS去运行，但是这个时间没办法，我们已经极致的去优化了，但是相比这个还是会短短一些OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:03",
      "text": "所以其实如果是在SM上开发的话，用hyper最最主要的开销就是在创建那一块。然后就是创建好了之后的启动某一个hyper的虚拟机，还是要比在实际上原生部署的时候，那个效能就0.3秒要慢一些。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:23",
      "text": "对对对，是这样，因为它本身的我是boss的的机制没办法OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:30",
      "text": "所以这个真的要可能要逼着你们去研究那个新的hypervisor framework，去解决这个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:37",
      "text": "我们也在时刻关注这个东西，因为这个东西我就最近的观察来看，就是原作者可能不太忙，别的然后不太开放，不太会上心这件事情。我们也在去关注，希望能够能够去做一些贡献。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:58",
      "text": "但是你是说那个x have的那个原作者所以现在我们大概就了解了这个hyper的一个整个它是什么。然后它相对于一些我们已经熟知的一些工具的这么一个技术对比，它的优劣势在哪里了。我们其实可能最后还是回到一个最关键的问题，就是说为什么我作为一个网络管理员，或者这个机房的一个公有云的运营者，我要选择hyper？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:26",
      "text": "对，所以你刚才说一点非常关键的一点，就是作为公有云的管理者，当然作为一个相当相当于说我就内部一个运营或者说测试环境，我用docker一点问题没有。但是你要是用公有云的话，你必须要考虑它的安全性问题。对，所以就是因为考虑到安全性的问题，你就必须要考虑docker他是否能怎怎么能够跟VM去结合，能够最大效率的去利用via mental的机制。所以为什么不去尝试hyper呢？",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:04",
      "text": "Hyper其实就是为你天为为了为了这种公有云的运营商天然去解决这个问题。你又想用刀客，又又想提供这种基于contender的一个管理方式，那个租户的管理方式。然后就可以用docker image，然后跟docker的使用完全没有异样，但是它的安全性会非常好。所以这个就是一个很很好的一个机会，然后去尝试OK，所以有有个hyper，其实我们就可以达到一个安全的共有的。其实一个cass cass就是contender as service as a service。所以我们我我我我们目前也在提这个概念OK.",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:45",
      "text": "所以这里就很自然的过渡到我们的下一个话题了。就是说你们的主要的客户其实并不是说。当然你说要大家熟悉这套方式，API肯定还是要教育用户。对。但是说从你们这个customer，就是谁为你们付钱这件事情来讲，可能还是是一些刚才讲的公有云的管理者。对，那这就牵涉到一个所谓的商业模式的问题了。就是说你们hyper这个项目，你们目前打算是怎么去盈利呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:14",
      "text": "我们目前其实hyper这个项目主要还是作为开源项目为主。这样的话也是希望吸引能够像更吸引更多的hiker，或者说一些contributor来参与到我们这个项目。来共同打造一个基于contained的一个或者是基于port的一个社区。然后我们也是希望能够跟一些一些机房，或者说一些类似于这种的厂商去合作，希望能够帮助他们去提供更好的解决方案。也就是目前我们我们成立大概半年多的时间。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:54",
      "text": "其实像国外一个很比较著名的一个也是创业公司叫packet。然后他其实已经推出了基于hypo的一个产品。对，现在已经出过，大家也可以去体验，当然可能要绑定信用卡就比较麻烦。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:12",
      "text": "对，就相信对于我们有足够尝鲜精神的开发者来说，这不是一个特别大的难题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:21",
      "text": "当然你可以自己在自己的平台上面去部署或者是去去体验，当然也可以。然后除此之外就是跟这种这种厂商去合作之外，我们也在自己也在做基于容器的公有云。就刚才说的cas就你们自己。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:39",
      "text": "要运营111个1个公有云。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:41",
      "text": "对对对，其实我们目前提的一个方式叫做hyper stack。对，hyper stack它其实是构建于hyper的基础上，然后结合目前非常流行的cover natives，然后open stack里面的一些组件，比如像cinder notion以及kiss中，然后将将这几个组件结组成到结合到一起，然后形成一个自己的stack。也是希望能够达到整个的生态链。然后我们已经提一个propose，然后目前也在去组织人手去。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:20",
      "text": "打造OK。这里就涉及到最开始的一个问题，因为当时我看你们这个hyper到SH的这个网站上。也有就是说因为只有一个英文的介绍，并没有中文的任何介绍。这跟你们这个商业模型和客户选择有关系。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:37",
      "text": "对对对，我们目前的的一个打算就是希望能够吸引更多国外的厂商，然后去跟他们去去竞争，或者说去去合作。然后之前的一个考虑就是国内对于开源项目的支持或者说合作不是特别大胆，或者不是特别明显。所以也考虑到这些问题，就是在前期做一个创业公司，可能用一种最保险或者说最最妥善的办法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:18",
      "text": "OK所以其实就很面临刚才我们一个很尴尬的一个情况，就是中国这个网络基础设施其实并不如美国好。就是从什么机房对语音的建设这一块是比较落后的那同时在我们能够数得出来的，国内的一些公有云的运营者也就那么几家，像什么阿里云、腾讯云。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:41",
      "text": "还有什么美团青云。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:43",
      "text": "美团青云以前还有，那京东云好像也有的，现在还在吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:47",
      "text": "现在好像关掉了。对，好像。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:49",
      "text": "然后他们其实并没有说到了足够大胆尝试这种新技术的时候，对OK所以你们选择先去开拓这个海外市场，然后等在还验证好这个模式和这个技术成熟之后，再想办法能不能跟国内的这些云厂商也能够或者说出一些新的小的云厂商也能够采用这个hyper的一个技术。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:13",
      "text": "对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:15",
      "text": "没错。所以你们在海外的目前的一些合作伙伴，就刚才提到出了那个package一个这个也是一个比较新，比较酷的对这个公有云的运营商之外，还有哪些是你们在目前是在有这个深度合作。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:28",
      "text": "我们现在比较合作的比较多的像镇的develop maintain，maintenance和developer，我们都有非常多的接触。然后之前参加了真的developer summit，然后去跟他们去交流。他们也非常支持哈佛对朕的一个支持，希望能够去共同探讨能够把这个性能或者说体验做到足够的好。所以这还是说是是是我们一个非常重要的一个判断。然后他们对我们在底层技术上面的一个，再或者说在hyper light上面的支持还是挺多的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:09",
      "text": "OK对，明白，所以就还是一个非常值得激让人让人激动的一个合作。因为认识我们一个很非常传统的虚拟器的hypervisor，我记得好像AAWS就是基于这样做的。对好，现在是一个也是非常火对对对技术OK，刚刚我们讲完了hyper这个产品，还有包括你们的商业模式，其实现在我们聊到这，其实我觉得我个人来说最关心的方的一个领域就是这个团队。Simon你可以大概介绍一下你们现在做这个hyper这个team大概什么样的情况吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:45",
      "text": "我们现在的开发者是五个人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:48",
      "text": "然后五个人这么想。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:51",
      "text": "所以每天还是挺忙碌的OK。一个人主要负责hyper stack相关的东西，另外就是主要用在hyper的这个核心产品，然后组过新的feature的开发以及fix一些bug。因为毕竟开源代码也是希望能够让代码质量足够的优质。然后另外有有三个人主要是负责BD相关的东西，然后做一些因为毕竟是海外市场，所以我们有一些国外的朋友去去帮忙推或者支持这些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:32",
      "text": "所以整个团队其实加起来也不超过十个人，应该是非常小，然后精悍的一个团队。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:39",
      "text": "但是我们的团队还是对战斗力还是挺强的对OK.",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:44",
      "text": "所以当初你是怎么加入到这个团队里面去？",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:49",
      "text": "因为当时其实还是刀口还是挺火的，我也是对虚拟化，因为我我毕竟之前是做存储的，但是我对虚拟化的这块还是比较感兴趣，所以希望能够进入到这个领域。然后你看到网上有一个招聘，然后大概的可能一个想做一个基于虚拟化或者基于一个容器的一个OS，然后也想深入的去了解一下，大概就后来就认识了，然后就给聊聊。后来当然随着产产随随着随着社区的变化，或者说现在的变化，可能当时的想法慢慢在调整，然后也做出现在的产品。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:37",
      "text": "所以你是在哪里看到他们的招聘广告的？",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:40",
      "text": "是在v two .",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:43",
      "text": "EXOK。V two EX跟我们节目的关系还是挺密切的，因为我们每期节目都会上面发我们的这个节目介绍和链接。然后这个V2X的这个livia也非常很nice的给我免费在那个podcast那个分类里面加了一个侧栏的广广告，也非常感谢他们。对，那这个是也是国内一个比较好的程序员和开发者的一个社区。对，所以其实你在上面能就能找到他们，也是其实也是意料之内。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:16",
      "text": "其实之前就一直在关注，没想到就在那儿去结缘了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:23",
      "text": "这个还是挺机缘巧合的事儿。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:26",
      "text": "对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:26",
      "text": "大家是多混这个社区会比较好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:29",
      "text": "对，其实这圈子还是挺小的。OK.",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:31",
      "text": "所以你们现在这么一个小五个人的这个开发团队，你们这个工作模式大概是怎么样子的呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:37",
      "text": "我们现在的工作模式大概就是相当于我们五个人五个开发，我development然后分布在南京、上海、北京。其实是一个相当于remote work的一个工作方式。大家平常沟通就是telegram以及trio的一种方式。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:59",
      "text": "所以其实你们五个人并不是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:01",
      "text": "在一个地方的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:03",
      "text": "不是在一个地方后，你们都是在那那你们会在家里工作吗？还是去到哪里办公。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:08",
      "text": "主要还是在家里办公。然后这样的话节省一些交通上的成那那时间的成本。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:14",
      "text": "对对对，这个好爽的。因为其实我知道每个人的可能最高效的时段是不一样的，然后浪费在交通上真的是一件非常让人不爽的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:23",
      "text": "对对对，尤尤，尤其像我在北京这种城市这么大，然后人挤人的这种真是有点难受。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:32",
      "text": "所有的写代码的灵感和激情都磨灭在了公交车上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:37",
      "text": "对，所以当然远程办公其实是当然也是比较吸引我的一种方式，大家希望能够更更高效的去利用时间吧。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:48",
      "text": "OK所以你们五个人在这个远程工作中，你刚才提到了有这个telegram用来实施这个是群组聊天对吧？对，然后还有像那个是是用什么工具。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:00",
      "text": "来看travino .",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:02",
      "text": "trade ino吹了做那个协作对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:05",
      "text": "协作。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:06",
      "text": "对。所以你们像代码管理，还有其他一些工具大概是会用到哪些呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:11",
      "text": "代码管理的话就是give up OK对，然后我们之前是发布之前是private repo然后现在是公开，大家也可以去我们的官网上以及去github的网页上面去关注我们的项目，多点赞。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:27",
      "text": "OK那个那个项目的地址，还有包括github的地址，我们会稍后会放到这个图里面，大家就可以看。这里可以其实可以接着聊一下，就是你们在githa上面协作的模式，你们是一个会是一个人大概是一个什么样的过程呢？可以大概描述一下吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:47",
      "text": "目前的过程就是相当于已经过了之前的封闭开发的一个过程。所以现在的进进派式的模式还是跟比较比较正就比较正规。然后有个pass的话是TPR，然后2 1到2个人去review，如果没问题的话才可以墨汁，这样的话就保证了质量以及效率。然后会有一些第三方的工具，就是我们会写也写了一些脚本。当然没有，也在不断的完善过程中，希望能够在有PR的时候触发一些自动化的检测等一些工具。OK.",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:30",
      "text": "所以对大家来说还是一个标准的一个github开源项目的流程。对对对，通过PR驱动这个feature，还有bug fix，然后进行就比经典的这个code review，然后大家慢慢去讲。QA这块，你说你们是还没有做完全自动化的QA是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:50",
      "text": "对还没有做完全自动化的QA，但是就是手动化的测试都会都会做，这是标配。然后因为go本身做过一些，它它有unit test，所以这个的话因为当时开发时间比较紧，然后我们这个有的一些component可能没有太完善，所以这个也在不断完善。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:12",
      "text": "这个可能需要也就你们一个，一方面你们自己努力，另外一方面就是看看能不能开源社区能贡献一些喽。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:19",
      "text": "对对对，因为我我我们的人手实在是太少了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:23",
      "text": "有意思。这里刚才你也提到了，这个hyper跟docker一样，都是基于用go语言开发的。当初你们为什么选择用购语言呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:33",
      "text": "我们之前选择购语言，其实也是考虑到了跟docker的一个关系。因为就抛开购物本身的一些特性，比如并发，它的高效的开发等等一些特性。另外一方面就是我们其实最开始的版本是基于docker d们来做的。然后因为doctor d们会我们用到doctor demon去铺它的docker的image来来下来铺下来，然后去把这个文件全部传给reviser。然后这个过程中可能用go语言直接跟dover dem去交互，这样的话是更省事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:18",
      "text": "更简单对所以但是随着。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:20",
      "text": "后来我们移除docker的demo的一个依赖，其实用其他语言当然也可以，就是可能因历史原因问题，就是我们继续沿用了这个也OK。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:35",
      "text": "所以其实你们在这个使用go写这个害怕过程中，你们遇到了什么样的问题，或者有什么心得可以分享吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:44",
      "text": "其实够远还是以从语法上还是有些坑的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:49",
      "text": "比如说。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:50",
      "text": "比如说写写够，写时间长，写C都不加分号。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:57",
      "text": "这个是好事。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:00",
      "text": "好吧。然后另外一些可能就是本身够严，因为他刚最近刚发布的是1.6，还是之前是一点一点5，应该是啊。对1.5对，然后1.5的一个版本，他其实有一些东西还是做的不够完善的。然后我们这过程中也是踩了不少坑，然后用其他方式去转换，但是可能效率上面不如那个有优势，但是这个可能就是OS相关的东西，比如在mac上面的的一些特性，它构源是调用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:32",
      "text": "内核的一些东西还是什么。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:34",
      "text": "CCC call的东西，就OK支持的不够完整。OK所以就必须用其他一种更加tRicky的方式去做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:46",
      "text": "明白，对对对，所以其实像hipper除了用构元写大部分之外，你还你们还用到其他语言去编写其他一些小部分的功能吗？还是说是一个重构的一个项目。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:57",
      "text": "我们在盖茨OS里面是CC的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:02",
      "text": "那部分是就需要做的，哪些工作是要用C来必须要用C来完成的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:08",
      "text": "其实也不是说必须要用C来完成，只不过用C可能效果更快一点。在OS里面它其实就是一个增就是呃相当于修改过的盈利的盈盈利的程序。然后它它是可以解析Jason格式，因为它这样的话是通过Jason的文那个新消息来跟hyper demo去交互，这样达到一个传输数据或者是通信的效果。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:37",
      "text": "这个有点意思，就是说你们这个guest OS里面还有一个自己定义的盈利程序。这个好像现在好像比较常见的就是那个sym system d对吧？稍微比较重吗？还是什么原因？",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:49",
      "text": "对，可能速度比较快，对不对？对对对，速度比那个就比较重，然后我们这儿这种启动速度会很慢。然后OK，我们当时测的时候大概十几兆货，二应该是二十几兆的那个空的memory也就够了OK对，所以就足够的精简。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:11",
      "text": "足够的小。就是现在一个hyper的gas VM用你们自定义这套东西，就一二十兆就可以起一个了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:17",
      "text": "对吧？对，应该是二十多兆，二十多兆，10 11兆是不够相。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:21",
      "text": "有很多什么，特别是top p什么tomcat，这些java应用一上来就一两个G的内存加。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:27",
      "text": "对，但是我们说的是一个最最简模式。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:31",
      "text": "这是一个就是我这种一二十大的开销，基本上在现代经济上可以忽略了。对对对，那还是挺好的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:40",
      "text": "最后补充的就是希望大家有志于加入我们hyper项目的，能够多多为我们提PR，我们也会非常积极的反馈。如果有同学TPR或者说被我们接受的话，我们在初期前100人应该会提供T恤作为奖励。就是我我就是之前real之前在推特上面穿过的那个T恤。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:08",
      "text": "对，之前我在北京跟跟Simon见面面聊过，然后非常厚颜无耻的要了一件。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:17",
      "text": "没没这这个也是感谢real帮我们去大力的宣传，然后也是希望能更多的开发者去接触到开源社区，接触到开源项目。然后更多更更怎么说呢？就是一个提升一个自身素质加上一个写代码功力的一个水平。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:39",
      "text": "对，非常感谢。其实因为这次我邀请三本来做这个节目，也是因为我觉得hybrid是我见过的国人做的这个开源项目里面还比较让我惊艳的一个。所以我也希望借这个机会，让邀请到让他让更多人了解他，知道他，然后能够去参与到这个开发。也让我们中国的开发商能够有一个好的这么一个上涨的趋势。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:06",
      "text": "然后另外一点，如果大家不觉得TPR不爽的话，也是非常希望大家能够加入到我们团队。我们团队也是拥有非常多的牛人，然后多年的科诺的工程师以及特别资深的consultation都在我们团队。所以如果大家有一技之长，或者说有志于做hyper stack hyper项目的，希望大家能够积极给我们提TPR或者是发简历，谢谢。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:42",
      "text": "想不到B节目还做了一个猎头的工作，非常好玩。好，OK, 今天的节目就先到这里。感谢收听IPMP cast网络旗下的埃踢技术主题娱乐节目内核恐慌。我们号称hardcore，但也没有干货，但这期干货还是满满的。想听的人听，不想听的人就别听。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:03",
      "text": "你可以问本节目捐款，捐款地址是IPN dot LI slash kernel panic splash。捐款金额随意，只要是能被八整除的正整数就可以。捐款不会给你带来什么，不捐也不会让你失去什么。我们的口号是hyper is hyper awesome。如果你有任何反馈，可以发电子邮件到kernel panic at IPN到LI。同时也欢迎您收听I片旗下其他几档节目，IT公论谓知道太医来了、流行通信、high story、博物志选美，我们下期再会。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本期播客“内核恐慌”聚焦容器技术的未来与开源项目Hyper的开发，邀请了一位嘉宾分享了对容器技术，尤其是安全性方面的深入见解。讨论指出，传统容器技术如Docker存在局限，Hyper项目通过提供内核级别的隔离，旨在解决这些安全问题，为云服务和私有云提供高效安全解决方案。播客还涉及了使用Hyper构建容器化应用的流程，以及开源社区在技术创新中的关键作用。嘉宾分享了创业过程中的经验和挑战，鼓励听众参与开源项目，支持旨在提供安全容器化解决方案的Hyper项目，共同促进技术进步。",
    "qa_pairs": [
      {
        "question": "你好，Simon，能否请你简单介绍一下自己？",
        "answer": "Hello，大家好，我叫Simon。目前我正在从事一个基于容器的创业项目，该项目还处于初创阶段。之前我的工作主要集中在内核相关领域，并且对内核及与之相关的创业项目有深入关注，特别是最近流行的容器技术，因此加入了以容器和have visor为主题的创业项目。",
        "time": "00:00:49"
      },
      {
        "question": "你之前在SRI International（SRI）的主要工作内容是什么？",
        "answer": "在SRI时，我所在的北京研发中心有一个大约二十多人的团队，主要负责研发内核中的存储协议——SCA（现在已演变为SATA），这是一个底层的网络存储协议，被广泛应用在各种硬盘和其他存储设备上。",
        "time": "00:02:55"
      },
      {
        "question": "你现在的创业项目叫什么名字？它的定位如何？hyper这个项目的初衷是什么？",
        "answer": "我们的创业项目叫做hyper，公司名为hyper HQ。我们定位做一款足够精致且面向国际市场的开源产品，希望它能融入大型社区，吸引更多的开发者参与。hyper本质上是一个开源项目，旨在解决当前国内较少创业团队做开源项目的问题，通过提供一个精简、快速启动的虚拟机平台，让用户能够方便地管理和运行Docker容器，从而改善国人在全球开发者中的形象。",
        "time": "00:04:57"
      },
      {
        "question": "hyper这个域名是怎么选择的？",
        "answer": "hyper网站选择了一个较为技术化且简洁的域名“hyper dot SH”，这个域名虽非直接代表上海（SH），但在云计算大会上常被误解为上海的站点。实际上，我们追求的是短小精悍的域名风格，而“SH”在这里更多体现了一种技术和酷炫的感觉。",
        "time": "00:07:42"
      },
      {
        "question": "hyper这个工具可以简单介绍一下吗？",
        "answer": "hyper本质上是一个基于容器管理工具Docker之上构建的轻量级虚拟化解决方案。它通过将Docker镜像作为运行时环境，并增加网络和存储等组件，让用户在同一台机器上可以运行多个独立的容器，实现资源高效利用和一致的运行时环境。而hyper通过采用虚拟机（VM）来代替容器运行Docker镜像，解决了Docker的安全性隐患，并通过极致优化，实现了毫秒级别的启动速度，相比Docker显著提升了性能。",
        "time": "00:09:51"
      },
      {
        "question": "hyper是否可以运行多个Docker镜像？",
        "answer": "是的，hyper可以在一个虚拟机中运行多个Docker镜像。它将一组相关的Docker容器组织成一个“Pod”，一个Pod可以包含多个单一应用的Docker容器，这样就形成了一个由多个容器组成的逻辑工作单元，更好地满足了现代应用架构中对服务组管理和资源协调的需求。",
        "time": "00:15:07"
      },
      {
        "question": "hyper中除了基础内核外，还有什么其他组件或功能模块吗？",
        "answer": "没有别的了，hyper中的组件主要是与外边的hyper demo交互，下载docker的image并将其作为块设备或文件系统给hyper。hyper拿到这些信息后，会为用户生成运行时环境。",
        "time": "00:17:51"
      },
      {
        "question": "hyper在管理KVM、Z等传统虚拟化工具这一部分，包含哪些组件或功能模块呢？",
        "answer": "这一部分主要提供类似docker logs、ESEC等工具的简化访问方式，让用户能够通过客户端或API简单访问hyper中运行的container信息、状态监控等。",
        "time": "00:18:38"
      },
      {
        "question": "hyper是否完全替代了docker的管理功能？hyper在性能上与docker相比有何表现？",
        "answer": "是的，hyper通过复用docker已经制作好的container image，完全替代了docker的管理功能，同时提供更好的安全性和性能。hyper在启动container的时间上与docker基本持平，CPU利用率也相似，但在网络IO和storage IO性能上可能受限于hypervisor性能，但正在通过减少层次、采用相关技术优化以减少损耗。",
        "time": "00:21:18"
      },
      {
        "question": "hyper如何实现对container间隔离性的保障，与传统虚拟机有何不同？",
        "answer": "hyper并没有发明新的技术，而是基于内核级别的c groups进行资源限制和隔离。但与docker不同的是，hyper采用独立的虚拟机方式来实现container间隔离，从而提供更安全的环境，即使某个container受到攻击或漏洞影响，也不会波及整个系统。",
        "time": "00:23:40"
      },
      {
        "question": "半虚拟化技术中，网络包是如何从hyper wether直接发送给nike driver的？",
        "answer": "在半虚拟化技术中，利用沃TIO耐net卧IO技术，hyper wether会将网络包的数据直接传递给nike driver，通过调用LL tole命令，让IO包直接发送出去并交给OS。实际上，虚拟地址与主机OS中的网卡地址进行了映射，以减少层层复制。",
        "time": "00:32:07"
      },
      {
        "question": "网络传输过程中，用户态和内核态之间的复制和切换问题如何解决？",
        "answer": "网络传输中的用户态和内核态之间复制过程较为耗时。为保证实时性，确保所有数据包都能及时传送，通常会采用某些机制进行处理。目前尚未设计专门针对这一问题的动作，而是利用现有机制来解决。",
        "time": "00:32:56"
      },
      {
        "question": "Hyper提供的轻量级 guest OS 与市场上其他类似工具（如core OS、英特尔推出的极度精简Linux OS）相比有何区别？",
        "answer": "Hyper提供的轻量级 guest OS 主要是为了配合VM运行docker image，而英特尔的clear Linux等工具可能更多是为了验证硬件性能。Hyper虽然也提供了一个giant OS，但其目的和应用场景与上述工具不同，更侧重于构建一个整套环境来运行docker image，与刀客等工具平行存在。",
        "time": "00:33:42"
      },
      {
        "question": "Hyper中使用的giant OS与其他解决方案（如COS、英特尔的clear Linux）有何不同？",
        "answer": "Hyper中的giant OS是为在VM内部与外边的hyper配合运行docker image而设计的，可以完全替代其他方案提供的基础环境。COS和英特尔的clear Linux虽然也能运行docker，但在配置和使用场景上有所不同，例如COS提供了更多预配置以直接运行docker命令，而Hyper旨在提供一套完整的工具集，让用户能够快速启动或关闭虚拟机，并通过类似container的API管理其中的应用。",
        "time": "00:39:41"
      },
      {
        "question": "Hyper的主要应用场景是什么？",
        "answer": "Hyper的主要应用场景是为有志于提供公有云服务的厂商提供一套基础工具，帮助他们快速启动和关闭虚拟机，这些虚拟机可以暴露给用户一套基于docker的API来管理运行在其中的应用。",
        "time": "00:39:41"
      },
      {
        "question": "相比于暴露给用户基于VM的API，直接暴露基于container API有哪些优势？",
        "answer": "直接暴露基于container API能够简化用户的操作，用户无需配置和安装docker守护进程等细节，只需下载docker image并指定运行参数，就能方便地部署和运行服务，从而提高管理效率并降低安全隐患。",
        "time": "00:41:12"
      },
      {
        "question": "对于数据持久化问题，Hyper是如何处理的？",
        "answer": "Hyper通过其volume模块支持数据持久化。用户可以在容器级别配置并添加自定义volume，volume可以是文件、目录或设备等，并可指定给特定用户或容器。这样，当容器运行时，数据会被存储在挂载的本地或远程块设备上，从而实现数据持久化。",
        "time": "00:44:15"
      },
      {
        "question": "在开发者想尝试hyper在不同系统上的应用时，它是否支持mac OS？针对mac OS上的虚拟化工具缺失，是否有其他解决方案或进展？",
        "answer": "hyper确实支持mac OS，我们在本月初完成了对mac OS的支持，并在不断完善中。目前在mac OS上可以使用hyper的watch box一种模式，而在Linux上可以使用q mil KVM以及watch box。虚拟机（如VirtualBox）在mac OS上的表现并不稳定且性能不佳，尤其是频繁出现死机情况。最近了解到，从OS X 10.9或10.10开始，苹果推出了一套名为High Sierra的FM mark，可以在mac OS上实现类似VM的功能。",
        "time": "00:49:28"
      },
      {
        "question": "hyper在mac OS上的运行方式有何特点？hyper在mac OS上运行时遇到了哪些坑？",
        "answer": "我们的方案与docker的设计机制一致，在mac OS上通过hyper的demo来运行，其中hyper可岸也在mac OS上运行。Docker的image在watch box虚拟机内部运行，整个设计思路与hyper的设计理念保持一致。遇到的坑主要包括virtual box API在mac OS上的难用性，导致只能调用命令行而非API；无法监测输出结果，需直接接其命令行输出；以及受到mac OS限制，无法像docker那样高效地利用硬件资源，例如SATA作为热插拔设备时创建时间较长。",
        "time": "00:52:41"
      },
      {
        "question": "hyper在mac OS上的部署效率如何？",
        "answer": "运行一个docker image从创建到启动大概需要两分钟不到，其中主要开销在于watch box本身的设备虚拟化和一些硬件虚拟化过程，以及创建SATA盘等操作带来的时间损耗。",
        "time": "00:56:57"
      },
      {
        "question": "hyper与docker在创建container方面的差异是什么？",
        "answer": "hyper创建的container并不是在VM内部，而是创建一个新的虚拟机，而docker通常是将container创建在已有的VM内。hyper这种方式可能会受限于开发者机器的环境配置，但提供了更好的隔离性。",
        "time": "00:53:45"
      },
      {
        "question": "为什么公有云运营商会选择hyper而非其他工具？",
        "answer": "因为考虑到安全性问题，hyper能够结合docker与VM的优点，提供基于container的管理方式，并且安全性非常好，适合公有云环境使用。",
        "time": "00:59:26"
      },
      {
        "question": "hyper项目的商业模式是怎样的？",
        "answer": "目前hyper项目作为开源项目为主，吸引开发者参与并共同打造社区。同时，与机房和厂商合作，提供更好的解决方案，并计划运营自己的公有云平台——hyper stack，结合流行的技术组件构建完整的生态链。初期选择海外市场，待技术和模式成熟后再考虑与中国本土云厂商合作。",
        "time": "01:01:14"
      },
      {
        "question": "你们现在的开发者团队有多少人？",
        "answer": "我们现在的开发者是五个人。",
        "time": "01:06:45"
      },
      {
        "question": "团队成员是否在同一地点办公？",
        "answer": "不是，主要在家办公，这样可以节省交通成本和时间。",
        "time": "01:10:08"
      },
      {
        "question": "这个团队的工作模式是怎样的？",
        "answer": "我们目前采取的是remote work的工作方式，五位开发者分别位于南京、上海和北京，通过Telegram和trio进行日常沟通协作。",
        "time": "01:09:37"
      },
      {
        "question": "团队在远程工作中使用哪些工具进行协作？在GitHub上协作的过程中，你们是如何操作的？",
        "answer": "我们使用Telegram群组聊天，还有travino作为协作工具，代码管理采用Git，之前是private repo，现在改为公开，项目地址可以在官网上及GitHub页面关注。目前采用标准的GitHub开源项目流程，通过PR驱动feature和bug fix，进行代码审查。手动测试是标配，尽管Go语言有unit test，但因开发时间紧，部分组件尚未完善，正在不断完善自动化测试工具。",
        "time": "01:11:11"
      },
      {
        "question": "为什么选择使用Go语言编写hyper？",
        "answer": "当初选择Go语言是因为与Docker的关系，Go语言高效的并发特性以及能直接与Docker的docker demon交互以简化开发过程。",
        "time": "01:13:23"
      },
      {
        "question": "在使用Go语言编写hyper过程中遇到了哪些问题或心得？",
        "answer": "Go语言的语法坑较多，如长时间书写、缺少明确的语义分隔符等，并且在OS层面，由于macOS对内核相关特性支持不完善，需要采用更复杂的方法来实现某些功能。",
        "time": "01:15:00"
      },
      {
        "question": "hyper除了用Go语言编写大部分内容外，还有没有使用其他语言编写小部分功能？",
        "answer": "在hyper的Guest OS中，有一部分使用C语言编写，主要是为了实现高效且精简的解析JSON格式数据并与hyper demon交互的功能。",
        "time": "01:16:08"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "内核恐慌：容器技术与创业探索",
        "summary": "本期节目聚焦容器技术和创业话题，邀请了从事基于容器创业项目的Simon分享他的经验和见解。Simon介绍了自己在内核相关工作及对容器技术的热情，并讨论了当前特别火热的容器领域的创业项目。节目还提及了捐款信息和使用podcast客户端订阅节目的推荐。"
      },
      {
        "time": "00:01:28",
        "title": "深入探讨容器技术与存储协议",
        "summary": "对话中，Simon分享了他在北京研发中心带领二十多人团队，专注于内核SS存储协议研发，特别是SCSI协议的工作经历。此外，还提及了他目前在从事与容器技术相关的开发工作。对话中还讨论了Sun Microsystems的贡献，包括Java、ZFS、MDB和DTrace等项目，并强调了这些技术对当前Linux内核及存储领域的重大影响。"
      },
      {
        "time": "00:04:56",
        "title": "Hyper项目和公司介绍",
        "summary": "Hyper作为一个开源项目，专注于为国外用户和企业提供服务。创始人通过GitHub上的一个项目与Simon建立联系，Simon对版权的尊重让创始人印象深刻。这个项目与众不同，意在改变国内开发者在国际上的形象。Hyper采用hyper.sh作为其域名，不仅因为其简短精悍，还因为该域名在云计算领域引发的误解和兴趣。此外，Hyper的网站设计体现了团队的国际视野和技术实力，区别于典型的国内团队风格。"
      },
      {
        "time": "00:09:13",
        "title": "深入理解Docker及Hyper技术",
        "summary": "对话首先介绍了Docker，强调了其作为一个基于容器的管理工具的新兴性和重要性，提到Docker公司估值超过10亿美金。Docker通过创建轻量级的虚拟化环境，使得开发者能够在同一台机器上运行多个独立的容器，每个容器运行一个应用，从而实现环境一致性，简化配置和部署流程。随后，讨论转向了Hyper技术，提出其为解决Docker安全性问题而设计，通过使用VM代替容器运行Docker镜像，同时保持毫秒级的启动速度，从而提供更安全、高效的运行环境。Hyper还引入了pod的概念来组织多个Docker容器，形成一个工作单元，增强了应用的部署和管理效率。最终，Hyper通过结合容器的轻量级特性和VM的安全性，成为一种快速启动的虚拟机解决方案，对比传统VM技术，Hyper在启动速度和安全性上实现了显著提升。"
      },
      {
        "time": "00:16:03",
        "title": "Hyper与KVM、Zen的区别及优势",
        "summary": "Hyper作为一个平台，区别于KVM和Zen等传统hypervisor，它采用一种创新的方法来运行Docker镜像，无需依赖Docker daemon。通过定制的精简版Guest OS内核，Hyper可以直接在上面运行Docker镜像，从而提供更好的性能和安全性。此外，Hyper提供了一套完整的管理工具，允许用户简单地管理运行的容器，包括日志查看和实时监控等功能，从而提升了容器的管理效率和便捷性。这种设计不仅简化了容器的运行环境，还增强了容器的安全隔离性，展现了在性能和安全性上超越传统Docker管理的优势。"
      },
      {
        "time": "00:22:04",
        "title": "深入探讨Docker容器的安全性与性能",
        "summary": "Docker容器技术被广泛应用于现代软件开发中，但它与传统虚拟机相比，在安全性方面存在一些根本的区别。由于Docker容器共享宿主机的操作系统内核，其安全性不如同虚拟机那样隔离。容器间的隔离主要依赖于命名空间（name space）和cgroups，而非提供像虚拟机那样的完全隔离环境。因此，如果一个容器内的进程获得了高级权限，可能会威胁到整个系统的安全。此外，对话还讨论了在采用类似虚拟机的独立内核以增强安全性时，可能带来的额外性能开销问题。尽管如此，通过优化，容器的启动时间和CPU利用率能够保持与Docker相近的水平，显示出容器技术在提供高效性能的同时，也需要关注和处理安全问题。"
      },
      {
        "time": "00:26:46",
        "title": "解决虚拟机中IO性能损耗的策略",
        "summary": "讨论集中在如何减少虚拟机环境下网络和存储IO的性能损耗。提出了采用特定的IO路径绕过技术，如what IO night模块和基于block device的优化，以减少数据传输的层次和提高效率。特别关注了网络层传输的优化，针对从虚拟机内部到物理网卡的数据传输过程进行了详细分析，包括全虚拟化和半虚拟化情况下的不同路径和优化方法。"
      },
      {
        "time": "00:33:41",
        "title": "Hyper工具与同类解决方案的比较分析",
        "summary": "Hyper提供了一个轻量级的Guest OS VM，用于运行Docker镜像，区别于CoreOS和英特尔的Clear Linux等其他类似工具。Clear Linux主要为了展示英特尔硬件的性能，而CoreOS则提供了充分配置以直接运行Docker的环境。与这些工具相比，Hyper不仅提供了类似的环境，而且设计用于与Hyper自身的Docker环境配合，提供了一套完整的解决方案，从而可能完全替代Docker。这表明Hyper在实现上更注重于简化层次和提高效率。"
      },
      {
        "time": "00:37:45",
        "title": "Hyper在公有云场景下的应用及优势",
        "summary": "对话重点讨论了Hyper在公有云环境中的应用及其优势。强调了公有云与私有云之间最大的区别在于安全性，特别是在容器隔离无法保证安全性的场景下，必须采用VM隔离。Hyper主要面向有志于提供公有云服务的厂商，提供一套基础工具，实现快速启动或关闭虚拟机，并暴露给用户类似容器的API。这种方法简化了用户操作，允许用户直接下载docker的image并部署，而无需进行复杂的配置。"
      },
      {
        "time": "00:42:06",
        "title": "Hyper技术在容器化服务中的应用与优势",
        "summary": "讨论集中在如何使用Hyper技术来简化服务部署与管理，特别是针对新增服务时的虚拟机配置问题。通过基于内容的API和VM的安全性，Hyper提供了一种不需要担心传统Docker存在的内核级隔离不安全问题的解决方案。此外，对于数据持久化的问题，Hyper通过允许为容器配置独立的volume模块，支持多种存储形式，如本地存储或通过网络存储协议到远程文件服务器，从而解决了Docker在存储空间管理上的不足。这一讨论突出了Hyper在提供更安全、更灵活的容器化服务部署和管理方面的优势。"
      },
      {
        "time": "00:46:17",
        "title": "探讨Hybrid环境下的存储方案与效率问题",
        "summary": "对话集中在讨论Hybrid环境下存储方案的效率问题，特别是通过不同方式挂载设备时的IO效率损耗。分析了本地设备挂载与远程文件共享在性能上的差异，强调了使用设备级别操作的建议。同时，讨论了大规模部署时可能采用的存储方案，以及在不同系统上运行Hybrid的可行性，特别提到了Linux环境下的网络IO问题。"
      },
      {
        "time": "00:49:28",
        "title": "Hyper在macOS上的支持与开发计划",
        "summary": "Hyper目前已支持macOS，主要通过watch box实现，而在Linux上可使用QEMU和watch box。由于macOS缺乏像KVM这样的虚拟化工具，使用VirtualBox时会出现稳定性和性能问题。讨论指出，从OSX 10.9或10.10开始，苹果引入的Hypervisor.framework可实现类似VM的功能。社区对开源工具XL表现出高度关注，其历史可追溯至Solaris。在macOS上，Hyper采用与Linux一致的设计机制，利用VirtualBox内的轻量级虚拟机运行Docker镜像，与boot2docker的方式有显著不同，提供更好的隔离性但可能受限于硬件配置。"
      },
      {
        "time": "00:54:17",
        "title": "解决VirtualBox开发中的挑战与策略",
        "summary": "在使用Go开发并尝试将a word boss的API与购物系统结合时，遇到了VirtualBox在Mac上的使用挑战，包括API的难以整合、命令行的调用、输出结果的监测困难以及硬件虚拟化等问题。通过采用VirtualBox的layer disk和snapshot机制，成功实现了一种较为高效的开发模式，尽管在Mac OS上的开发仍然面临挑战。特别地，创建和启动一个Docker镜像的时间大约为两分钟，这一过程中主要的时间消耗在于VirtualBox设备的虚拟化和硬件的虚拟化上。此外，对于SATA和SARS盘的创建时间差异、以及在不同平台上开发的效率差异也进行了讨论。针对这些问题，正在考虑研究新的hypervisor框架以寻求解决方案，同时也在关注相关项目的更新和社区的贡献机会。"
      },
      {
        "time": "00:58:57",
        "title": "Hyper项目概述及发展方向",
        "summary": "讨论主要围绕Hyper项目，一种旨在提高公有云安全性的技术。相对于Docker，Hyper提供了更好的安全性，适用于对安全性有高要求的公有云环境。项目目前以开源形式存在，目的在于吸引开发者和贡献者共同建设基于容器的社区。Hyper还计划与数据中心或云服务提供商合作，提供更优的解决方案。此外，他们正在开发基于容器的公有云服务，称为Hyper Stack，整合了Kubernetes、OpenStack等技术，形成一个完整的生态链。Hyper项目不仅关注技术发展，也关注商业模式，希望能通过提供高级服务或解决方案实现盈利。"
      },
      {
        "time": "01:03:20",
        "title": "拓展海外市场与技术合作的战略讨论",
        "summary": "讨论重点在于公司计划吸引国外厂商，以优化技术并与之竞争或合作。考虑到国内对开源项目支持不够大胆，以及中国网络基础设施不如美国，决定先开拓海外市场，待模式和技术成熟后再考虑与国内云服务商合作。目前，公司已在海外市场找到合作伙伴，包括公有云运营商和开发者社区，共同探讨提升性能和体验。"
      },
      {
        "time": "01:06:09",
        "title": "Hyper团队介绍及加入经历",
        "summary": "Hyper团队目前由五名开发者组成，主要负责Hyper Stack及相关核心产品的开发，包括新功能的开发和修复bug，以保证开源代码的质量。团队中另外三人主要负责商业发展（BD）相关工作，包括海外市场的推广。团队规模虽小但战斗力强。团队成员通过V2EX社区与Hyper结缘，对该领域表现出浓厚兴趣后加入。工作模式高效，成员在各自的领域内发挥重要作用。"
      },
      {
        "time": "01:09:37",
        "title": "远程工作模式及开发协作实践",
        "summary": "讨论集中在五人开发团队的远程工作模式上，成员分布于南京、上海和北京，通过Telegram和trio进行沟通。团队主要在家办公，以节省通勤时间和成本，提高工作效率。使用GitHub进行代码管理，由私有仓库转向公开仓库，接受社区的参与和反馈。开发流程采用经典的PR驱动，包括代码审查和自动化检测工具的开发，以保证代码质量和效率。同时，团队也在不断完善自动化测试，依赖手动测试和单元测试保证软件质量。"
      },
      {
        "time": "01:13:22",
        "title": "选择Go语言开发Hyper及其遇到的挑战",
        "summary": "选择Go语言开发Hyper主要是考虑到其与Docker的关系及其并发和高效开发特性。初始版本基于Docker demon，利用Go语言直接交互简化流程。随着对Docker demon依赖的移除，尽管其他语言也可行，但因历史原因继续使用Go。开发过程中遇到的问题包括Go语言语法特性和版本不完善导致的坑，以及OS相关的挑战，需要采用更复杂的方法解决。对于部分性能要求高的任务，选择使用C语言以获得更快的执行速度。Hyper项目中，自定义的盈利程序和轻量级的Guest OS体现了对效率和精简的追求，能够以非常小的内存占用启动。"
      },
      {
        "time": "01:17:39",
        "title": "Hyper项目开源社区贡献邀请与奖励计划",
        "summary": "Hyper项目团队邀请对开源社区有兴趣的人士积极参与，提出PR（Pull Request）并获得反馈。对于初期前100名贡献者，项目将提供T恤作为奖励，以示感谢。此倡议旨在吸引更多开发者加入开源社区，提升个人素质和编程技能。特别提到，Hyper项目是由国人开发，获得了业界的广泛关注和认可。团队中汇聚了多位资深工程师和咨询专家，欢迎有志之士加入，共同推动中国开发者社区的发展。此外，还提到了通过捐款支持节目，以及参与其他技术主题娱乐节目的邀请。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "主题：埃踢技术主题娱乐节目"
            },
            {
              "children": [],
              "content": "口号：hyper is hyper awesome"
            }
          ],
          "content": "节目主题与口号"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "职业背景：从事基于容器的创业项目"
                },
                {
                  "children": [],
                  "content": "经历：内核相关工作，对容器技术有深厚兴趣"
                },
                {
                  "children": [],
                  "content": "特别关注：容器和hypervisor技术"
                }
              ],
              "content": "嘉宾：Simon薛磊"
            }
          ],
          "content": "客座嘉宾介绍"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "基于容器的管理工具"
                    },
                    {
                      "children": [],
                      "content": "优势：快速启动、轻量级虚拟化"
                    }
                  ],
                  "content": "Docker简介"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "目的：解决Docker安全性问题"
                    },
                    {
                      "children": [],
                      "content": "特点：基于VM运行Docker镜像，提高安全性"
                    },
                    {
                      "children": [],
                      "content": "性能：启动速度达到毫秒级别"
                    }
                  ],
                  "content": "Hyper项目"
                }
              ],
              "content": "Docker与Hyper对比"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "Docker容器共享内核的安全隐患"
                    },
                    {
                      "children": [],
                      "content": "Hyper通过独立的内核提供更强的安全隔离"
                    }
                  ],
                  "content": "安全性"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "IO性能损耗问题"
                    },
                    {
                      "children": [],
                      "content": "Hyper对网络和存储性能的优化尝试"
                    }
                  ],
                  "content": "性能讨论"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "面向公有云服务提供商，提供安全的容器服务"
                    },
                    {
                      "children": [],
                      "content": "适用于本地开发和测试环境"
                    }
                  ],
                  "content": "使用场景"
                }
              ],
              "content": "技术细节探讨"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "支持系统：Linux、Mac OS"
                },
                {
                  "children": [],
                  "content": "虚拟化技术：KVM、VirtualBox等"
                },
                {
                  "children": [],
                  "content": "存储解决方案：支持本地和远程存储"
                },
                {
                  "children": [],
                  "content": "安全性和性能平衡：优化启动速度，保持高安全性"
                }
              ],
              "content": "Hyper的技术架构"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开源项目：Hyper是开源项目，鼓励社区贡献"
                },
                {
                  "children": [],
                  "content": "社区互动：通过GitHub、邮件等方式接受反馈和贡献"
                }
              ],
              "content": "社区与开源"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "商业模式：开源项目，通过提供更高级服务盈利"
                },
                {
                  "children": [],
                  "content": "团队介绍：核心开发团队五人，远程工作模式"
                }
              ],
              "content": "商业模式与团队介绍"
            }
          ],
          "content": "主要讨论话题"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "呼吁对Hyper项目的贡献和反馈"
                },
                {
                  "children": [],
                  "content": "节目联系方式：通过电子邮件进行互动"
                }
              ],
              "content": "鼓励听众捐款支持节目"
            }
          ],
          "content": "节目结尾"
        }
      ],
      "content": "IPM podcast网络旗下节目：内核恐慌"
    }
  }
}