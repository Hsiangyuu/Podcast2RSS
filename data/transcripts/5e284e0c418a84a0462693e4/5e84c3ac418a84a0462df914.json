{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df914",
  "title": "33. 没有主题的闲聊",
  "task_id": "g2y8qe7ewj3bnbeo",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "欢迎收听IPM podcast网络旗下的埃踢技术主题娱乐节目内核恐慌。我们号称hard core，但是也没有干货，想听人听，不想听的人就别听。本节目的网址是kernel panic dot FM，我们推荐大家使用podcast客户端订阅节目，详情请访问IPN dot IOS。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:17",
      "text": "来是FAQ，欢迎你为本节目捐款，捐款地址是kernel panic dot FM slash donate。捐款金额随意，只要是八的正式数倍就可以。捐款不会为你带来什么，不捐也不会让你失去什么。我们的口号是there are only two hard things in computer science，cash in validation and naming things.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:38",
      "text": "欢迎回来，你新年快乐。去哪了？这有点晚，新年已经过完了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:44",
      "text": "对我和女朋友去奥地利滑雪了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:47",
      "text": "奥地利对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:48",
      "text": "因为德国没有雪，今天特别暖OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:52",
      "text": "所以那个global warming是真的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:56",
      "text": "我看了一下，好像是因为什么原因来着，是因为今年寒北极的一个什么气压带控将太多的冷气流控制在了北极，导致冷风没有南下，所以圣诞老人。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:14",
      "text": "没有。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:15",
      "text": "整个欧洲，对，整个欧洲都没有雪。然后圣诞节那几天网上传的图片照片，就是因为德国南部基本上每年你可以有一定的几率碰上白色圣诞节，但是今年是完全没有可能，所以网上就有什么图片说今年我的第一雪人，然后照的是地上两个水坑，上面一个水坑插了个胡萝卜。今天我的第一个，然后奥地利稍微好一点，今年的那个叫什么高山速降滑雪的锦标赛，在奥地利和意大利举行。应该是。然后他们1500米以上稍微有点雪，但是大部分的场地还是需要人造雪，就很衰。滑雪的时候看周围全都是绿色的OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:04",
      "text": "这个还好了。你想想什么澳大利亚人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:09",
      "text": "澳大利亚冬天可以滑。不不不。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:11",
      "text": "我是澳大利亚人过圣诞节。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:14",
      "text": "对，他们穿着比基尼，戴着圣诞帽，在沙滩上用沙子堆一个沙子。Snowman, 这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:24",
      "text": "不错，OK还是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:26",
      "text": "加拿大好，滑雪加拿大对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:30",
      "text": "加拿大还是一如既往的学多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:34",
      "text": "你你干什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:36",
      "text": "我没做两期节目。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:39",
      "text": "对，几位嘉宾做两期节目。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:41",
      "text": "你去度假了吗？我还在这儿干活是吧？咱们总得有一个人在这儿盯着。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:47",
      "text": "这叫敬业。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:51",
      "text": "好吧，行，我们就开始这期的正题。其实这期也没什么正题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:58",
      "text": "对，这期对又是所谓没有主题的闲聊。我们决定每一期没有主题的闲聊都叫没有主题的闲聊。不然你还能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:08",
      "text": "想出别的什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:09",
      "text": "名头出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:11",
      "text": "不然你还能想出什么别的这个title出来吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:15",
      "text": "对，如果其实如果愿意的话，也可以像IT公司那样，找一个每期金句做title.",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:22",
      "text": "对吧？你这是暗示我们每次都没有主题是吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:27",
      "text": "但是就像我们刚才的口号说的，在计算机科学里面，命名东西是非常难的。有时候你要在就不只是节目了，就是你有时候命名一个类，然后稍后你会发现这个名字是不恰当的，然后你是改还是不改？这改就非常麻烦，但是不改又觉得不爽。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:49",
      "text": "刚好前几天看到一篇文章，他说我们过去有个概念叫做technical debt，就是技术对，技术负债。对，就是你之前做了一些什么，你得挖多少坑，然后最后自己踩进去了对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:03",
      "text": "对，我们公司我前公司墙上挂着一副一个水槽，里面堆了可能几千个脏盘子。说这就是technique debt。然后你要是不起的话，他们就会一直堆在那儿OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:18",
      "text": "然后我之前看到一篇文章，他说除了这个technical debt之外，还有一个叫做concept det概念负债什么意思？他讲大概就是说刚才讲你刚才不是讲naming sense，就是给东西起名字，这其实会如果起得不好的话，就会形成一个所谓的conceptual debt，就是概念负债。什么意思呢？比如说你一个类的名字或者一个变量，或者一个方法的名字起的不好，然后碰巧整个程序的其他地方又是基于这个概念去构建起来的对，这样的话就会对你整个后面的那些概念，造就整个这个架构就变得不清晰，就很难理解。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:58",
      "text": "对它会影响你的这个mental model，就你把那个东西的你使用的称谓会影响你的思维。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:07",
      "text": "对，而且它会就你你你选择的一个词一个叫法，它会直接影响到你的在你的大脑中怎么去理解这个整个架构，整个它这个概念在整个架构中所处的一个什么样的位置。甚至说如果你选择这个基石型的概念，选择这个不好，会导致你整个上层架构是一个比较脆弱的对，那我就不禁想起这么一个事儿，因为你知道毕竟我们这个国产的程序员们，很多人英文都不好。然后写程序又被逼无奈要用这个英文，又不能用拼音，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:44",
      "text": "那是不光对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:47",
      "text": "但是对就是这样的一个逻辑。对，大家知道我们是认同这种做法的。但是你会发现照这个逻辑推演下去，然后又有这个叫做conceptual debt这么一个概念的话。哼那一个必然的结论就是很多人写的就naming things，就是这个起名都是错的，或者是有点混乱的。有多少人的什么CMS里面一个叫做pose的东西代表了不止一个含义。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:23",
      "text": "这个的确是。但是反过来有一就是如果你走一个另外一个极端，那就这让我想起来另外一个极端，就是有些CMS猪跑吧还是什么。他把所有东西都叫做node，就是它node就代表了它是这个CMS1类管理的一个节点。然后这个节点可以是任何东西，只是可以是post，可以是article，可以是一个stead page之类的。然后你又会觉得这个命名又太抽象了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:51",
      "text": "对，所以说这个一定是一个它如果太抽象的话，它也是一个没有起好名字的一种表现，或者说是另一种形式的technical death，就是太抽象以至于没有什么实际意义。对，所以真的你去读那些所谓那种大牛写的代码，你会发现它在整个概念上是非常清晰。然后结构是非常概念非常清楚了，定义清楚，然后结构也是非常清晰的。然后你再去看一些这种二三流的程序员写的代码，你会发现里边怎么这个概念正好一会儿在那儿出现，一会儿在这出现，就是讲不清楚了。所以我在想。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:35",
      "text": "就是说方法命名也没有什么统一性。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:38",
      "text": "没错。然后包括什么，很可能很多国内的同志们，特别是写什么java类的，或者那种class类型的，要有一种特殊的那种语法，你知道吧？就是the non kingdom就是名词。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:57",
      "text": "国王国要什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:59",
      "text": "execute什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:01",
      "text": "一定要做execute Allen er.",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:03",
      "text": "对，一定要这样提的话，然后就发现很多人就会又可以牵涉到一个什么主动式、被动式对吧？那个什么executor，那execute，举个例子，发现好像开始有点不太对路了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:19",
      "text": "然后这个是这个怎么说呢？这个可以追究根源的话，可以追究到面向对象的一些弊端上面。就是哼你做累的话，你总是这一个累，它终究是一个实体。然后因为在面向对象的，就如果一个是纯面向对象的语言里面，方法是不能独立存在的，也就是说名词是一切。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:41",
      "text": "这里肯定要纠正一下，这不是面向东西，是面向类。那就是class program，就是狭义的，或者说更精更什么更明确定义的objective。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:54",
      "text": "其实不一定type，也不允许方法单独出现，也可以不允许的方法大多都是啊，不是吗？或者这么说，在函数不是一级成员的语言里面，这是一个常见的问题。对，可以这么说。对，然后这个就好吧，这跟OO没有什么太多关系。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:22",
      "text": "Anyway说回这件事儿，起名字是一门很大的学问，不要小看它。然后如果你觉得你起的名字不好，可能要先怀疑一下是不是自己的语文水平不太够。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:34",
      "text": "或者你本身就是一个非常愚蠢的idea。比如说PH.",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:40",
      "text": "P的函数名又黑。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:43",
      "text": "我发现我们每当需要举反面教材的时候。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:47",
      "text": "你总会拿出这个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:48",
      "text": "世界上JT和加尔总是非常丰富的资源。好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:54",
      "text": "OK所以刚才讲两个，刚刚讲一个naming sense。然后另外一个cash in validation，为什么它是heart things？",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:05",
      "text": "因为很难判断什么时候这个cache才是真的invalidation。我原作者说这句话的时候，他只是想要说一个，他其实就是想强调这个名命名非常难。他举了一个比较well known的难题，就是cash medication。因为你你你实现一个cache的时候，就永远不知道这个里面的内容是不是真的已经不需要被catch了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:35",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:36",
      "text": "这个牵扯到的因素太多了，所以他是一个知是一个知名的难题。但是naming things就是至少这个人在说这个是谁说的，feel什么什么谁说的。然后他他在说这句话的时候，这还不是一个众所周知的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:53",
      "text": "即便现在。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:54",
      "text": "仍旧不是一个被被广为接受的一个难点。就是大部分人会觉得我靠起名字有什么难的夫妇，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:06",
      "text": "没错，其实还是挺难的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:08",
      "text": "我觉得对然后由这个格言衍生出来了很多变种。比如说什么在分布式系统里面有两件知名的困难。一个是第二个是确保每个消息只出现一次。第一条是确保所有的消息按顺序到达，第二条是确保所有消息只出现一次。你得到这个梗了吗？就是他把难题说了三遍，对不对？他他说只有两个难题，但是他说了三个，然后其中前两个的顺序是反的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:48",
      "text": "然后还重复deliver了一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:51",
      "text": "对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:52",
      "text": "这个是my tears were是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:57",
      "text": "这么念。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:58",
      "text": "what谁？",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:00",
      "text": "不知道是someone老来吧。其实这里可以插一个听众反馈，就OK，这是我在休假的时候收到的，也过去一阵子了，这是12月21号，圣诞节前的。嗨睿吴涛好久没给你们写反馈了，话说本期中你应该是29期，三十几。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:27",
      "text": "哼话说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:28",
      "text": "本期中吴涛久违的黑法国了，今天我还助攻武道，本期中两位讨论到需不需要用英语来写代码的问题。我和吴涛一样，看到法语注释就头疼。正常来说看法语注释不顺畅，应该怪自己法语还不够好。但法国人也是各种槽点的，他们不喜欢用英语来写代码，但是又怕带XT的那个法语字母就是什么A这个东西来着，就是A下皮、A上皮，然后C项带一个尾巴那种的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:00",
      "text": "这个是拼音的四声。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:04",
      "text": "对，会产生encoding的问题，于是代码中会出现大篇幅的没有任何x sound的法语注释。最近我和法国同学讨论编码语言的问题，他对自己选择法语编码的问题的原因居然是在代码里看到英语就知道是库里的那个法语就是自己写的。无言以对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:29",
      "text": "最后用法语键盘编码也是个无比艰难的事情。在键盘上特别是mac找不到波浪号、美元符号、方括号等等写程序必不可少的符号，不知这一点在德语键盘上会不会好一点。在这里再顺便吐槽一下，微软官网的economic系列键盘也不能选语言，为了quarter键位我只能在英国亚马逊去买。但是我对英式键盘layout里回撤不是直条的这一点也是不太适应。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:59",
      "text": "这个很简单，买国买那个美式的就好了。我那没事，寄不过来了是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:08",
      "text": "可我在德国如果要买quartic键盘的话，我也得去亚马逊上去专门选US english layout。因为英国的english layout.",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:16",
      "text": "这两个english是一个是international english.",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:19",
      "text": "对，或者是EOISO的那个international的。对它是一个倒L型回车。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:27",
      "text": "非常蠢。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:28",
      "text": "对，那德语上面按方块号还好吧，就是德育的方块号必须按右边的out然后加8，应该是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:40",
      "text": "这家还好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:42",
      "text": "如果我觉得和德法语键盘补习比起来还OK？法语键盘是你。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:48",
      "text": "公司的德国同事是用德语键盘编码吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:53",
      "text": "我们公司有用英语键盘的，也有用德语键盘，用德语键盘。我在刚来德国的时候，强迫自己用德语键盘的时候，也是用德语键盘编码的，就用过一阵子，用过一段之后就觉得还好。就是你必须习惯于右手的大拇指为轴心，然后用中指或者是无名指去按那两个封号。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:14",
      "text": "但是你不觉得这样各种都不顺吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:17",
      "text": "是很蠢，所以你就换回来了是吧？所以后来我就换回来了。当我明白我现在已经可以在德语面键盘上编码的时候，我就换过英语。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:28",
      "text": "我我我之前在德国的时候也用过一小两小时对键盘得出的结论是我的fuck赶快找一个美国美语键盘换回去接着用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:40",
      "text": "对你会觉得自己像一个幼儿园的刚学电脑的人，不停的低头看键盘，我靠这个键应该怎么安装的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:48",
      "text": "那有一个问题，你之前说你同事也有用德语写这个注释的吗？对，他们那个SS写写哪个？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:57",
      "text": "他们会把SS写成SS。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:59",
      "text": "然后两个展会展展开写是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:02",
      "text": "对，因为德语的转写是有标准的，所以就把日本也可以展。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:06",
      "text": "也可以转起来，就加UE。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:08",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:10",
      "text": "那就还好，其实跟法国人的做法一样，只是法语没有这种转写的标准，所以他们就对他们。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:16",
      "text": "就直接不加那个accent.",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:18",
      "text": "然后会产生歧义。这样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:21",
      "text": "应该是，但是法语学的反正不不不举不出一个例子来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:27",
      "text": "那肯定是有。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:29",
      "text": "什么不加extent是一个词，不加X3是1个词，不加X3就是侮辱你祖先之类的这种事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:38",
      "text": "这个事情的教训是不要用法国程序员写的程序。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:44",
      "text": "有什么知名程序是法国人写？",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:46",
      "text": "有啊，那个FM pack what？那哥们儿不是法国人吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:51",
      "text": "我要爸用wifi拍。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:55",
      "text": "这哥们儿叫法lot。猜对了，在法国，这个中间叫叫Green noble的一个地方，不知道在哪儿，这哥们写过很多这种知名的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:13",
      "text": "玩意儿OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:15",
      "text": "除了那个那个FM pack之外，他还写过他写过一堆很有名的小东西。我想想不起来，但是其实想想。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:27",
      "text": "的话，lisa在法国公司应该是负责欧洲的本地化，甚至也有开发人员。所以如果要如果真的要罢用法国软件的话，可能星际也不能玩。不能这样对待自己，算了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:48",
      "text": "对，也不要那么残忍了。所以今天我们第一个题目是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:54",
      "text": "历史的变迁。正值新年之际，我们来回顾一下历史。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:00",
      "text": "会说回顾什么历史？现在要screen .",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:04",
      "text": "shots from developers 2002 versus 2015这其实。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:11",
      "text": "还挺有意思的，这个是一个这哥们儿叫什么？叫anders，anders他姓什么呢？这是。看一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:26",
      "text": "With second，我们刚刚才刚才是要讲CDN是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:30",
      "text": "我反正那个可以放到后面讲，无所谓。新年回顾历史，我觉得挺好的OK好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:37",
      "text": "查个名字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:41",
      "text": "不知道他叫姓什么域名has anders .",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:45",
      "text": "about？for.",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:53",
      "text": "其实不重要了，这个人是谁其实问题不是很大。这个人在2002年的时候，也就是14年前给一堆unix的开发者或者是其他的一些个有知名的大牛们写过一封信，让他们说提供一下他们工作电脑屏幕的截图。然后他当时把那些截图都保存下来了。然后去年，就是2015年年底的时候，12月12 12月12月10号，对他又发了一篇，然后他问了就现在那那就是14年前那拨人，然后他们现在的桌面长什么样子？当然了，因为有一些人已经不再试了，所以就中间缺了一些。但是其他剩下都还都还都回复了。然后他就把这2002年的回复和2000 015年的恢复摆在一起来对比一下，看看这个历史的变迁到底怎么样子。我觉得这个还非常有意思，你觉得最最令那个什么你觉得最有印象深刻的是哪个？",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:11",
      "text": "说实话我觉得都还好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:13",
      "text": "就还好。你你有你有预期吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:16",
      "text": "我其实不觉得他们在，甚至我会觉得13年的这个时间不是特别的长。小龙我现在回想2002年的时候，好像没有和现在有什么非常天翻地覆的变化。可能唯一的变化就是在这过去的13年里面，我对vim的掌握程度是天翻地覆的。但是在窗口或者说在屏幕，在这个桌面上会摆什么，或乃至常用哪些工具？好像如果你按门类分的话，我觉得没有什么太fundament的变化。我们用的东西永远是那几样，什么图像编辑软件，自处理软件terminal。哼无非是版本号更新了，但是好像没有什么特别的区别。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:14",
      "text": "对，当然对这个科尼和他他从linux他从unix切换到OS ten了，这个让我觉得还是挺特别的。因为他是brian garden you know。然后他现在在用OS不让人觉得讽刺。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:32",
      "text": "但是他的用法也挺原始的，他他。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:36",
      "text": "实际上是在拿OSN当做一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:40",
      "text": "稳定的C就当X对。就是剩下所有工作还是在terminal里面完成的。比如说他用那个阿派那个字符界面的邮件客户端对吧？对，这里看看还有一些SSH，还有其他什么看不见的一个东西，就跟他12 13年前并没有明并没有什么明显的区别。这也在干同样的事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:09",
      "text": "他他毕竟是一个他是他是40年代5 40年代出生的人，这这一个这已经是一个高龄老人了，对吧？他对他在他他在2002年.",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:19",
      "text": "采访这帮人的时候，这帮人都已经是相对来说比较成熟稳定的一个状态了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:25",
      "text": "叫什么业界泰斗。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:28",
      "text": "这这是这不是泰斗也是骨干了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:30",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:31",
      "text": "但是我看有比较大变化的是谁？我发现这一圈。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:36",
      "text": "里面没有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:38",
      "text": "其实你不好奇一下vim那个作者他在干嘛吗？叫他现在。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:43",
      "text": "瑞士的google你说他的那个屏幕上，我觉得他是为了截图才放这么多的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:53",
      "text": "不就是我我其实挺好奇的，他他那些东西，你看那张大图。M窗口有12345。五个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:10",
      "text": "对他还有一个看起来像皮卡丘的那个东西，那是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:15",
      "text": "那就是皮卡丘。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:17",
      "text": "皮卡丘还存在吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:19",
      "text": "他如果用google系管理照片的话，应该还在。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:24",
      "text": "反正他你看他的那个开的窗口里面也可能有一大堆x term。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:31",
      "text": "你可以他他但是他用邮件的方式很奇特。你有没有发现。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:36",
      "text": "他用邮件的方式，他不是用他最的那个网页。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:41",
      "text": "不是他最左边那个窗口，那个vim窗口是邮件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:45",
      "text": "what？",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:47",
      "text": "你仔细观察一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:49",
      "text": "真的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:51",
      "text": "对这所以他是直接裸写那个邮件本体，然后用一个什么命令行去处理。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:57",
      "text": "的那可是他的那他的他的那个浏览器窗口里面有两个也有gmail对吧？Gmail的窗口，所以它是同时用一个，反正他是不用客户端，就是他要么用一个web UI要么用一个CUR。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:15",
      "text": "对对对，但我就觉得他最左边那个处理邮件那个窗口特别奇怪，因为我我从来没有见过人这么用邮件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:24",
      "text": "OK就是你直接。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:26",
      "text": "在磁盘上创建一个文件，然后这个文件是这个邮件一个的原始的格式，然后再通过某种方式去处理它。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:36",
      "text": "这对，也有可能是什么插件之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:42",
      "text": "就很神奇，就这种用法。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:44",
      "text": "对，他的编辑的这个文件的名字是就是man感器。然后是在这个根部自己的home下面的male new，我觉得这有可能是某种插件儿的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:01",
      "text": "对它它它是一个vim的窗口。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:03",
      "text": "对，就这个插件让你通过一个自处理器来撰写邮件内容，然后你一保存它就把它扫描寄出去之类的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:14",
      "text": "所以这个是挺有趣的一个东西。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:17",
      "text": "这个说起来比较难，如果你没有看过这个玩意的话，可能会理解里面理解起来有点困难，但基本上就是你可以看到这个网页上面有很多列举的一些名人，就不是每个都很有名。有些是什么uh unix historian whatever that means。OK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:42",
      "text": "这个链接我们会放到那个show notes里面。然后大家可以去有兴趣打开一下，点开那个大图看看他们这些大牛的桌面到底都平时都长什么样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:56",
      "text": "对，如果你有兴趣的话，也可以从现在开始，就是每年给自己的桌面拍一个照？做一个screen cap。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:03",
      "text": "然后从这个十年回顾对比。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:06",
      "text": "对，依稀可以找到0几年、05年、06年的桌面截图。但是接下来要讲的是前两天IPN发生的一件incident，应该说具体经过是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:24",
      "text": "就断断续续有人抱怨说我们下载不了IPN的这个音频文件，或者就是网页是打得开的，就听不了而已。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:33",
      "text": "对，然后我们也这一次没能成功的把这个blame转移到中国电信或者中国联通上面，所以只好去看看是不是自己的服务器。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:46",
      "text": "出问题了。但其实很难说，因为是一个DNS的问题。对，DNS解析的那个我们用的那个CDN解析不出来，然后之前出现那个有有几档子事儿连在一起就挺乱的，不知道你还有你有没有看新闻，就大概两周一两周以前，有那个新闻说全球的那13个根域名的这个题OK，比如说那个大哥们的那个拒绝服务攻击。对，然后当时他们就做了一些处理，这个也要可能要普及一下这个常识。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:19",
      "text": "比如说我们全球，就我们平时解析域名的时候，比如说你要上这个google点com对吧？它是要一个一个去问点，这个要问这个谁负责点com对吧？他要问这个就所谓的这个根服务器，然后跟服务器说，这个服务器负责点com然后另外他就跑去点看那个服务器没人问，所以负责这个点com下面的google这个域名对吧？然后一层一层问到了GLE，说谁负责google下面的这3333个W这个域名对吧？一层一层这样问下去，大致是这么一个逻辑。所以谁他他问的第一个那个那个叫什么夫妻跟。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:57",
      "text": "玉云夫妻吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:58",
      "text": "这根云服务器叫做就全球有有这么13个去负责这种点com，点net这种的的响应。然后这些就遭到了一个大范围的这种攻击，然后导致很多地方解析都出了问题。但这还没完，完了之后国内我们用的那个像IPN的一些域名的，不都是在DNS pod s炮的这个服务商那里host就会发现DNS port又说国内的这个域名解析也出现了各种各样的这种奇怪的问题，就经常出现解析不到，就是你要解析的地址他解析不出来，还有就是解释出来可能是一个什么本地的127.0.1这种地址，对吧？对，就这两件事情不知道有没有什么联系，反正就是现象是这样子的这导致我们有些这种服务业一直解析断断续续，会有有出这种问题。然后再加上之前我们不是遇到过这个音频文件的被劫持。因为现在IPN整站使用的这个HTTPS加密连接，不会有这种中间的运营商劫持的问题。但是在很长一段时间内，CDN的音频文件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:17",
      "text": "下载还是传统的HT.",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:19",
      "text": "P的这个铭文的协议。然后很多这种之前也提到过小运营商他为了节省它的带宽的流量，他会自己再做个本地的缓存，然后又没做好，就导致我们经常听到一半儿，有些听众抱怨说听到一半就窜台了，所谓的对吧？听听上前五分钟还是那条口框，后十分钟就可能变成IT功能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:44",
      "text": "看到了什么别的什么节目之类的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:47",
      "text": "对他这样就很很乱。但是CDN要部署这个HTTBS还是就不是那么简单的事情，要做很多这前期的准备工作。但是好在我们新年伊始，我们终于把这件事情做完了。然后那个域名的这个hosting也尽量针对国内的访问做了一些调整。希望hopeful之后我们就不会再遇到类似的问题了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:17",
      "text": "如果遇到什么问题的话，各位听众请一定要向我们反馈，这样才能帮助我们改进这个服务的质量。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:24",
      "text": "没错，这就是我们这个IPN的一个CDN遇到的一些最近的一些近况，也给大家做一个简单的说明。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:34",
      "text": "哼OK，那接下来是怎么说呢？一款最近有了一些动静的新字体。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:43",
      "text": "其实我一直不太清楚到底有没有自带via model那款字体？没有吧没有是吧。那我不知道为什么我电脑上有一个叫做有一款叫做pha mono的，然后它这款thera code是基于这个faa model来改的吗？这个东西是念fira吗？FIRA应该是吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:08",
      "text": "不然还能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:09",
      "text": "那个吗？我是想，但是不确定了。最软，OK，所以有人就基于一个叫做pha mono的这么一个等宽字体，然后他做了一些什么呢？我们按照国内的行话说叫做深度定制OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:27",
      "text": "好吧，忽然感觉像个房地产商。对，他在这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:31",
      "text": "菲尔猫的基础上扩展了很多字符集，也做了一些优化。然后它里面最有意思的就是说他用那个因为现在的这个字体的排版引擎有一个特性叫做叫对连字。可能这个是个排版学的概念，肯定还要先解释一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:52",
      "text": "对，这个在中文里面比较少见。如果一定要说的话，把招财进宝四个字写成一起写在一起，就可以视为一种中文的连字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:04",
      "text": "这也能扯到一起可以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:06",
      "text": "为什么不行？这本质上是同一件事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:09",
      "text": "只不过在中文里面用你得描述一下这个东西怎么一回事儿。我觉得不是很多人都能理解这个词的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:15",
      "text": "对，literature在新闻排版里面指的是为了美观，主要是为了美观，把特定的常见的字母组合做成一个在最原始的状态，是是把一个特定的字母组合做成一个单独的字母。比如说你英语里面最常见的FI fish FISH，它会把FI做成一个单独的一个签字，或者是早期是木火字。应该然后。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:44",
      "text": "看起来的效果就是那个I上面那一点被FF吃掉，把手吃成吃吃进去了，是连在一起的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:52",
      "text": "或者FFI它会把那个两个F的两个线连在上面的，横对横线连在一起，然后上面的第一个F会融入第二个F的顶端。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:04",
      "text": "然后像FL这种什么flower，对它那个F和L的尖尖也会连起来，像是叫什么漏油了一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:14",
      "text": "没错，然后这个连literature如此常见，以至于在某些语言里面nature成了一个单独的字母。比如说德语的s chat会看起来像一个beta但实际上它是一个S和另一个S连在一起。然后第一个S因此被拉直了，然后看起来像贝塔，或者像一些语言里面的法语里面有个OE的连字符，也是可以被当成一个单独字母用，或者是某些字语言里面有一个AE就是A和E连在一起。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:50",
      "text": "然后AE还有AE的连写，还分这个大小写两种情况。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:55",
      "text": "那OE也分了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:58",
      "text": "对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:58",
      "text": "OE也是OE连字的大写，就是O变成了一个向左突出的D然后你右边右半边和这个一的左边的数连在一起。对，这这在这个在牌子的就是在怎么说铅与火的时代是比较容易实现的，就是你只需要把两个字字母刻在一起就可以了。但是在数字时代，因为每一个字符在在在最在二进制的层面它是分开的。所以实际上连字是一个非常晚近才在数码排版界出现的一个东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:36",
      "text": "最最开始支持这个ligature的这个牌子引擎是哪个？应该是west那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:43",
      "text": "是叫什么来着？Type一应该是从type一开始。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:50",
      "text": "有了adobe的那套东西。对，OK, 对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:53",
      "text": "但是在至少在编程界那个事是一个几乎没有任何鸟用的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:04",
      "text": "对，因为它需要依赖于一个孤立的环境，然后需要这个子牌子引擎对这个事情要有支持，然后你还要有一些什么参数要打开它才也不是就是你牌子引擎有了这个literature之外，你所那个字体本身还得有这个lecture的那些character，那些字符，你才可以显示。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:24",
      "text": "对，其实这里可以插一句，就是因为显示技术的限制，导致了我们目前编程使用的一些convention，是在不写程序的人看来非常奇怪的，或者是你需要一段时间，因为你已经会编程了，所以经过如此久的时间，你是不会意识到它有多奇怪的。比如说小于等于号或者是不等于号之类的符号，你写起来都是在不会写程序的人看来非常奇怪，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:59",
      "text": "然后我们我们写数学的小于等于就是写个小于号，然后在下面那个再多加一个并行的一横，对吧？对，但是在我们编程的时候，因为当然不光是显示的问题，也牵涉到输入的问题。对，就会说你你你键盘上没有小于等于这个符号。你得如果单独去找的话，其实也挺难的那一个变通的办法就是我先输一个小于号，再输一个等于号，两个连拼在一起，你就知道小于等于是吧？它它看起来有点奇怪。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:28",
      "text": "也就是说技术的限制实际上是实际上逼着逼迫我们形成了某种特别的编程的风格，一种convention。有比如说下标这个东西，你在计算机上没有办法方便的输入一个字符在另外一个字符的右下角，对吧？就假设如你你想象如果我们的编程是简单的，像那个科幻小说里面是用纸和笔来完成。的话你完全可以写一个X然后右下角一个角标二来代替。比如说X方括号或者刀塔2之类的这种东西。又又扯远了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:03",
      "text": "但是反过来，这个file code这个字体就是一个对此一个改进，或者说尝试它它使得一些常用的编程，或者说在某些比较语言春的编程语言里面，常用的符号变成了ligature。比如说他把一个两个等于号，如果你打两个等于号的话，在其他的普通的等宽字体里面看起来是两个等于号，在这个fur code里面看起来就是一个连贯的很长的等号。然后如果你打感叹号，等于号就在普通语言里面是什么不等号之类的，它会把它显示为一个很长的等于号，然后上面画了一个斜杠，就像一个数学家使用的符号一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:45",
      "text": "对，然后他这个这应该是首款等宽字体，支持这种比较奇怪的数学符号的ligature尔的作品。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:58",
      "text": "应该不是，因为我之前你用那个叫什么来着？",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:02",
      "text": "那个费的资金我现在还在用是他也有对prog mate pro.",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:07",
      "text": "但是那个非常贵要一百多欧，好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:10",
      "text": "然后菲尔克的这款是免费的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:12",
      "text": "还是开源刚刚推出了免费的字体。如果你感兴趣的话可以试一下。尤其是如果你是一个哈斯克爱好者的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:21",
      "text": "或者是那个swift也可以用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:25",
      "text": "Swift里面其实没有太多的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:28",
      "text": "但是swift可以让你自定义那个Operator运算符。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:33",
      "text": "实话是这么说没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:35",
      "text": "但是就真正的任何允许你自定义这个运算符的语言，你都可以用上。这个很帅气的菲尔扣的李自己的这个里盖圈特性。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:47",
      "text": "这让我想起一个前两天在推上是谁来着？罗生说了说之前有人在试验swift就是自定义一大堆运算符，然后用的是unicode里面的数学符号。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:02",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:03",
      "text": "然后有人批评他说什么您做这个就从一个就像我刚才说的，被冠被这个工具覆盖住了手脚，然后不得不产生出一套convention的程序员的角度来看，这是非常加引号离经叛道的。然后当swift开源之后，人们发现在swift的。的应该是什么test，就那个或者是就那时候做做。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:35",
      "text": "home bro那哥们儿好像写过一套类似的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:39",
      "text": "应该就是他，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:40",
      "text": "就是他。然后matt什么来着？",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:43",
      "text": "对，matt他后来swift开源之后，人们发现在swift的experimental branch下面有这样的一系列features，而且比matt做的要早。然后现在就可以对那些人说，in your face. 但怎么说呢？这还是一个非常有悖于convention的东西。就是你我觉得写程序很重要一点，尤其是写开源程序很重要一点，就是你写东西也一样的，对吧？对，而目前现在大环境是你你写的东西非常牛逼的话，但是虽然非常牛逼，但是也许很多人看不懂的话，那它的贡献的边际效率是非常低的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:29",
      "text": "没错对，当然这个fair code刚才讲，如果你要真的使用这个nature的话，要有两个要件同时具备。一个是说字体要具备这the character，这些符号本身要有要外形要有定义。第二个就是说你的那个排版引擎要开了，要支持这个特性并且打开了。对。然后非常不巧，应该没有任何一款终端模拟器或者是这种纯符号字符界面的这种编辑器有这个特性。在那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:04",
      "text": "terminals port里面，我们惊讶的发现terminal APP是支持的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:11",
      "text": "是吗？Council也支持OK但是你我。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:14",
      "text": "用的这个item 22 item是不支持。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:19",
      "text": "原来是这样，所以如果我用那个苹果自带的terminal的话，是可以用faa code。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:24",
      "text": "对，你可以试一试。然后我为了试这个，我就把它，我就重新用这个mac liam，就是图形化那个vim.",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:34",
      "text": "的麦克原声故意版。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:37",
      "text": "对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:39",
      "text": "所以他打开支持了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:41",
      "text": "他支持，但是有一些非常小的glitch，比如说你在你打一个打一个小于等于号，然后如果你把鼠标挪过它它会有时候会变回一个小于号和一个等于号。也许改这才是正确。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:01",
      "text": "的处理方法O.",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:02",
      "text": "K但是有时候就是你如果你只是扫过那个符号的话，它有时候中间会出现一个裂缝，这个是什么？就感觉是渲染错误。对，渲染错误的。但其他的什么x code我还没有试，或者什么柯达之类的没有试，但目前用过来，如果你习惯的话应该还好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:22",
      "text": "对，因为这个一个最主要的问题就是说我们就用那种基于终端也好，还像wim这种基于我们姑且称为字符删格的，或者是字符网格的这种逻辑的话。你把两个对你把两个你把两个字符融合成或者是多个字符融为一个，它对它的这个定位的计算还是会有一定影响的对对，就是光标一上去，你就你你比如说他三个字符，比如说大约就是三个等号连一起一个全等符号。举个例子，那你把那个字符往左挪个一个位的时候，他说应该这个符文应该显示你选择哪个字符呢？对吧？就比较难做了。刚才那个item to不行了，就没有暂时没有办法。但是其实也是有变通的手段的，你知道吗？Wim里面可以有这个东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:17",
      "text": "Wim 7点我忘了7.2还是7.3，开始支持一个叫做council的特性。Council特性做的事情跟在概念上跟这个nature非常像。就是说它可以让你把一个或者多个是真实的字符串当成另外一个单独的字符来处理。比如说你可以把这个我之前干过，我之前写过一个小的vim的插件，或者一个小的配置脚本，是叫cute .",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:55",
      "text": "python了OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:57",
      "text": "然后他可以做一些非常邪恶的事情，就是用用council特性把python里面的有些关键词改成一些符号。比如说python里面有那个deaf，就是define一个定义一个函数的关键词的DEF。你觉得看他不爽太长的话。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:14",
      "text": "你可以换成一个nda后来然后我还记得第一次，那是20090 2010年11年的时候，在北京，在real的家中看着real编程那种油然而生的敬佩感。就是他在写python，但是我看不出他在写python.",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:34",
      "text": "因为邪教是对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:35",
      "text": "他们这个插件把拍子改的面目全非。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:39",
      "text": "对，还有一个办法就是比如说return就是返回函数，结果那个东西改成一个那种一个弯弯的箭头，对吧？还有一些什么来着，还有那个真的那么达改成一个那么达那个参数，还有就是包括刚刚才常见的把一个小于等于改成一个数学的小于等于的符号，这些也可以做的。然后这些的支持就相对来说要稍微好那么一点点。因为它是一个wam原生的，不会出现刚才你说那种渲染错误的情况。因为它不依赖任何操作系统的，没有任何故意的支持。因为它是在字符层面去做这么一种事儿。对，所以这个链接我稍后也放出来。大家如果有兴趣去试一下这种邪教，也可以去尝试一下。算是一种work around .",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:32",
      "text": "welcome to drink。The code除了我们刚才提到的这个fera le和prom pro之外，还有一个叫host lake的字体它是应该是基于sarco pro改的。他把那个SR co pro里面的一些数学符号或者编程符号加改成了ligature，但是效果就看起来不是那么漂亮，不过有兴趣的朋友可以去试一试。就HASK leak husk al和legal的parliament.",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:12",
      "text": "这是一个挺好的尝试。下面有一则新闻其实挺搞笑的。这个是出现在我想想这个是出现在哪里？这个是出现在linux kernel内核开发组里面的一小段。它是一个commit。因为给那个links内核是用git管理这个软件版本的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:37",
      "text": "然后你不是每次要写一个commit，就是这个叫什么commit message，中文叫什么？提交说明对好吧？然后对他们就是给一个芯片的，算是写驱动，应该是的一段打打的一段这个commit。然后里面有一个非常奇妙的小故事，说这个AD是公元后是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:08",
      "text": "在公元1582年，教皇格里高利13世。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:12",
      "text": "对，念完接着点就就这个调调。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:15",
      "text": "这个要及时去翻译它了，我做不到吧？好吧，我试试。公元1582年，教皇最高里13世发现既有的儒略历法无法正确地反映现实，于是他改进了计算闰年的方式以满足这一条件。这就是格里格里利和人的来历来源。你就这么说。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:41",
      "text": "一个有闰年一个没闰年吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:43",
      "text": "对，不是。格里利的闰年要比以儒略历的闰年计算的方法正确更正确一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:49",
      "text": "我们现在用的就是格更更多一些。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:52",
      "text": "对，硅高铝低。然后与此类似，在公元2013年，rock chip p是中国的福建的一个厂商，哼这个rock chip的硬件工程师认为目前的格里高利利还是有缺陷，因此11月应该有31天。然后后面写说就非常幽默的笔法说，不幸的是格里利能够在世界范围内获得应用，已经就又就花费了300年年时间。所以就因为一些挽比较晚间的这个新教国家，它是还是使用如月历的。因为如律历的，如果你改了立法的话，那个节日的日期就要变了。然后有些新教国家到现在都没有改。But with same最近的新教国家应该是7几年才改，如果没记错的话，然后这个comment message，commit message里面就说这个呃rocchi k的厂商的改变，可能还要过一年时间才能被全球的其他人接受。所以目前这里是一个小的patch，让它能够跟世界上其他地方所使用的更高的力来协同。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:13",
      "text": "但前面都是段子。因为写写这个commit message，人家Julia Warner，对，然后他是他是名。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:23",
      "text": "组科研工作。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:24",
      "text": "应该是啊想来他应该是为用rock chip的平板电脑跑这个chrome浏览器或者是chrome OS的时候，搞一个硬件版出的问题。对，所以说说到刚才那个问题在哪里，可能很多人没有意识到。好，11月是没有31号的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:45",
      "text": "what会有人意识不到吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:47",
      "text": "我这很多人意识不到，你不要小看这一个。那我问你一年12个月，哪几个月是有31号的？",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:55",
      "text": "一月、三月、五月、七月、八月、十月、12月对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:07",
      "text": "所以你怎么记的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:11",
      "text": "这是有由来的。因为七月是september，是七月，在罗马是九月。因为SEPT是九对吧？September在古罗马是九月。然后奥古斯都把自己的名字命名成了八月，就是现在的八月。然后Augustus认为他应该和他应该和之前的那个julius，就是凯撒，就儒略凯撒一样伟大。而如对凯撒所在的那个月是七月，七月有31天，他认为自己所在的月也应该有31天，所以八月也有30天。然后七月和8月在这边要逆一个顺序，就这么来的呗，这不是很简单吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:01",
      "text": "你这个太绕了，但是有一个非常取巧的一个办法。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:06",
      "text": "是数手上的那个。对对对，高低那个是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:10",
      "text": "给很多人太太知道。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:11",
      "text": "还是太弱智了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:13",
      "text": "好吧？但是很好用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:15",
      "text": "这好用在哪？你要去数。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:17",
      "text": "就介绍一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:19",
      "text": "可以OK好吧。如果你把是两个拳头并在一起，然后去数这个拳头上的高低。从左手的小指开始是一月，然后小指和无左手无名指之间的凹是二月，那你就可以说一月大、二月小、三月大、四月小、五月大、六月小、七月大。然后到了右手，八月大、九月小、十月大、11月小、12月大，这是一个这是英美小朋友所使用的法子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:49",
      "text": "对我我每次我想不起来的时候，就是要两手摊开来。不是摊开，就是两手抱拳来数一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:56",
      "text": "可是你不觉得这个要比脑子里面想说julius和阿古斯斯一样伟大。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:03",
      "text": "要难很。但是你你那个你那个要是需要具备好多基础知识才可以用，就是你的这个叫什么？你的dependency太多了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:11",
      "text": "好吧？你看你是有非常我有一个非常复杂的compiled on。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:16",
      "text": "首先你得知道这个叫什么，这两个人分别是谁对吧？然后知道他们他那个september他们的生日分别是哪个月，然后他们得知道这个september英文的九月其实是七月。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:32",
      "text": "对吧？你就你这三本十月这个对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:36",
      "text": "你这个叫什么来着？Dependency有点多。这个方法就比较简单明了的，速记法？就好像有些人写那个那个magic number是怎么来的？来的就是快速开发对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:50",
      "text": "OK对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:51",
      "text": "说你费了半天劲写了一个无比正确的开始一个开方算法。人家说他过来写了一个magic蛋白，然后就把这个事情完美的解决了。然后精度还可以接受。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:02",
      "text": "限行时间解决了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:07",
      "text": "是不是惊呆了？",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:09",
      "text": "是好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:11",
      "text": "说到这个，刚才讲那个限行时间也提到这个也有最近有个挺好玩的事，问问题是怎么来的？请给出一个函数，在它是O一的函数，然后给出让他算这个int类型的那个N感叹号。那个东西叫什么来着？阶层的阶层。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:33",
      "text": "what? 在限行时间内，对，就O一的这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:36",
      "text": "时间内给出N1个函，就写个这个阶层的一个函数，让它在限行时间内给出结果。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:44",
      "text": "OK答案是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:46",
      "text": "你不知道怎么做吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:47",
      "text": "不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:48",
      "text": "说出来一定会惊死你。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:51",
      "text": "surprise me.",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:53",
      "text": "你就把那个浴结果预先算好，写到一个竖什么数组里面。因为N一阶层的话，那个N不需要多大就会overflow那个int类型。所以那个列表那列表不会多大jump吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:08",
      "text": "对，没错，都不用讲。可是这这是这是这是赖皮。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:15",
      "text": "但是它totally符合这个spec。因为一旦这个intakes overflow，它的那个一旦发生intakes overflow的话，它的那个behavior is undefined。那我的饭你可以返回任何值。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:29",
      "text": "那好吧，这是其实是和语言和开发环境相关的。如果你在haskel里面写一个N一的计算机上的函数是不能这么写。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:42",
      "text": "哈斯克的那个那个int类型是任意精度的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:45",
      "text": "Hustle有number类型，也有跟平台相关的什么in的32类型。如果没记错的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:51",
      "text": "但是我很可以说吧，我说是写int 32这种类型的东西，可以用这个就赖皮的方法，这算是一种赖皮对吧？对，没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:00",
      "text": "但是真面试是不会过的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:03",
      "text": "不一定，可能会有点类似。你说那个magic number快速开放，这个算会不会过呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:11",
      "text": "首先不可能有人在面试的时间直接想到这个南门，你如果写出来，那就也就意味着你是看到过这个故事的那如果最开始。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:22",
      "text": "发明这个mager number那个人了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:25",
      "text": "那他也不可能是在。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:27",
      "text": "面试的时候发的。那哥们儿好像就是写FM pack那个作者。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:32",
      "text": "不可能，他这是quick，对他比那个人早多了OK而且这甚至不是卡瓦克发明的，卡瓦说他是在什么地方看到的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:42",
      "text": "也是如果你去看VKP .",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:44",
      "text": "lia的那个magic number的那个词条的话，它会注明说开发者不详，就谁找出来这个数不详。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:52",
      "text": "OK, anyway扯扯回刚才那个rock chip.",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:56",
      "text": "那个那个扯到哪儿了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:58",
      "text": "有点绕得远了。刚才讲的那个rock trip是中国福建的一家专门为低端平板电脑生产英特尔芯片的厂商。好像是这样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:09",
      "text": "而且他他应该不是代工厂商，他只是一个研发厂商，他自己没有厂。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:15",
      "text": "好像这家其实挺奇怪的，因为之前当时英特尔宣布过一个合作，就是跟这家厂的。但我当时还觉得挺奇怪的，为什么要跟这家？后来我大概明白怎么一回事儿了，就是因为他要在有什么抢回被ARM处理器夺走的这个低端电脑市场，对吧？所以特别跟英特尔有一个合作，去基于英特尔的这个item这个处理器去做一些这种低端的平板。市面上那种第1000块钱以下的英特尔平板，基本上都是用的用用的这家的芯片，这非常有意思。然后他们就在芯片里面搞出了这么一种楼子1蛾子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:06",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:07",
      "text": "怎么说呢？我其实挺丢人的。因为从一个硬件的厂商，因为你硬件也是某种程度，它也是有软件的成分在里面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:15",
      "text": "硬件是固化的，软件的没错，建筑是凝固的，音乐是固化的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:22",
      "text": "我记得还是最小不错，anyway，就说这个事儿本身说明一个什么现象呢？就是说可能反映了我们做事的时候认真不足。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:37",
      "text": "不够死扣字不够扣的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:39",
      "text": "不够严谨。或者说你的这个包括验，因为芯片还是有什么验证的环节，都没有发现这种明显的问题是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:48",
      "text": "对，这说明什么呢？说明他们开发周期短于一年。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:53",
      "text": "还没到那一点，但是已经出现这个问题了是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:55",
      "text": "对，但是其实我有点好奇，就是为什么calendar这个东西要在硬件层面实现？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:03",
      "text": "它是一个硬件时钟？",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:06",
      "text": "这就是硬件，不是硬件时钟可以理解，硬件时钟可以简单的只提供一个技术。但为什么cleaner这个东西要由硬件来提供？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:16",
      "text": "哼这是一个好问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:18",
      "text": "对你比如说你在那个电脑上提供一个rome级别的硬件时钟，我可以理解，因为那是BIOS1部分。但是在一个简单的平板上为什么也需要这个？还是说其实平板本质上就是一台电脑，那既然电脑需要的话，平板也需要。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:36",
      "text": "对，我觉得就是这样子的，好吧，但是我觉得可能更你要像你说那种是一种实现方式，就是说我硬件只提供一个就是按秒自增的一个绝对数，然后你就想当软件的对对对对，然后你之前通过软件的算法去把它转为一个我们正常的一个日历的时间。因为这个算法还挺复杂的，因为它不是一个科学的东西，对吧？它是一个有一些各种各样的修正值，各种各样的特例加在里面去的对吧？比如说历史上好像哪几年少了几天，还是什么乱七八糟的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:11",
      "text": "日期实际上是一个非常复杂的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:13",
      "text": "对还加上什么润润年润秒之类的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:15",
      "text": "就是日期最让人讨厌的地方是有时候它不是算出来的，它是观测出来的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:24",
      "text": "对，但是这家出现这种问题，其实我觉得在某种程度上是给什么叫做中国制造这个牌子是抹黑的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:35",
      "text": "对，伤害了中国人民的感情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:38",
      "text": "为什么我们老总总觉得说made in germany，made in japan现在是一个好的品质的标志。大家都追求要买外国本土制造的，而不是说外国品牌中国制造的这种东西，出个大洞，对对对。有自黑，但我觉得一种很重要的原因就是说这些品这这种made in叉叉国家的这种品牌，在某种程度上代表了消费者对这种品牌的一种信任。但是如果说你老是出出这种1蛾子的话，其实你这种made in china的这种牌子，就不可能说在一二十年后或者二三十年后，变得像我们现在看made in germany，made in japan一样，那种有一种什么信任感在里面。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:29",
      "text": "我觉得还是一个沉淀的问题。德国货在18世纪的时候也是劣等货的代名词，英国货是最好的。然后日本货在90年代也在是80年代也是with在日本货在60年代是比较烂的。然后欧洲人就觉得日本货就感觉现在的made in china一样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:48",
      "text": "对，80年代的made就已经很好了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:51",
      "text": "80年代已经日本已经是世界上首屈一指的硬件制造商。然后现在也就是中国比较，但即便现在的中国货，也已经要比什么孟加拉或者是越南之类的要好一些。所以我觉得就是一个积累过程。也许再过上100年，中国货也就变成了高端。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:14",
      "text": "品牌好说，但如果他们接得出这种1蛾子，我觉得这个时间要往后再拖。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:20",
      "text": "当前肯定不可能，但看看将来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:26",
      "text": "OK下面有一个小玩意儿，之前我们也讲过，就是你在linux上面用的是一个叫做I3的窗口管理系统，对吧？对，然后当时我们说它是一个叫做tiling based window management，就是基于瓷片。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:45",
      "text": "不是，对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:47",
      "text": "如果你不知道记忆磁片是什么意思？请找一个windows放在看一下就知道了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:54",
      "text": "请看一下自己家厕所瓷砖。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:58",
      "text": "这个比喻太生硬了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:01",
      "text": "对，简单来说一个tilling window manager会把你的窗口尽可能的铺开，就是彼此不互相遮挡。这是tiling window manager的一个最主要的特征。这也就是为什么很多人会选会比如说我会选用它的原因，就是因为你不用再操心哪个窗口在下，哪个窗口在上，因为所有的窗口都进，不存在遮挡的问题。铺开。对，如果你不看一个窗口的话，那他们那他要么完全的被另外一个窗口遮挡了，要么他就被关掉了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:37",
      "text": "然后我之前用桌面的时候也小小试过一段时间，S3确实好用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:45",
      "text": "但是但是我现在。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:48",
      "text": "用奥斯特。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:49",
      "text": "OK对，然后在OSN上我们两个你是用什么定位？",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:54",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:54",
      "text": "divi对，我们两个都用divi就是游戏。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:57",
      "text": "解决这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:58",
      "text": "对你不需要用手鼠标去挪动窗口，因为用鼠标挪动窗口是一个非常耗时的功能。而且在99%的情况下，你进入一个特定的工作模式的时候，你的窗口布局实际上是特定的。所以你可以用一个快捷键来快速的把自己的窗口。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:14",
      "text": "挪到自己想要的位置。对，但毕竟什么David他不是I3那种方式，还是很有一种什么来着。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:24",
      "text": "你还是有那个感觉。人为的操作，把窗口挪动到指定的位置，而他不能做到说一个窗口一打开就去那个位置。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:33",
      "text": "对吧？而且还有一些边框，那些也没有办法很好的弄掉。对，然后就出了这么一个叫做KWM tilling window manager will focus follows mouse for OS ten。对，但是先要说明一下，这个我没有装。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:50",
      "text": "因为我也没装。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:53",
      "text": "现在是一个还在开发中的一个东西，就可能会有一点点问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:58",
      "text": "版本号是零点几来着？零点。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:01",
      "text": "对，但是从截图和描述的情况来看，它基本上在OS上复刻了S3的全套功能。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:08",
      "text": "对他最最重要的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:09",
      "text": "那个focus follows mouse，这个肯定要稍微解释一下什么意思。毕竟我们现在用的这个桌面系统，它还是一个单一focus单一焦点的一个系统。就是一次只能有一个窗口处于激活状态，一次只有一个对话框处于一个激活状态，对吧？然后focus follow mouse，他会直接决定说你把那个鼠标光标挪到某一个窗口上面的时候，哪怕你没有点击激活它它会自动帮你切换到那个应用上面去。这个时候你去输入的这个快捷键什么的都可以比较方便的。音色上面去不用再单独按一个键去太这个table type去切换了。哼对，这个我觉得非常好用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:54",
      "text": "对，这是一个比较尤其是tiny water manager里面比较重要一个特性。就是你在低位，当然低位的低位完全不去。低位实际上是一个非破坏性的窗口管理辅助工具，它没有必要实现这个功能。而且我觉得mac上面有一点，或者说我已经习惯演示，如果你的一个窗口比较小，然后它遮挡了后面一个比较大的窗口一部分，然后你把那个focus放在前面的这个小窗口上，鼠标挪鼠标则在后面的那个大窗口上，此时你挪动滚动条，被滚动的是后面那个大窗口。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:36",
      "text": "对，这个麦克上就这个体特性是已经有一点那种focus follow mouse的感觉了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:42",
      "text": "对，就这实际上是完全全的，对于我来说已经足够。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:47",
      "text": "有点只需要那个滚动窗口就好了是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:50",
      "text": "对，而且这个特性有时候还挺有用的。就是你在游戏比如在做摘抄的时候，你的输你是希望自己的输入焦点一直在前面那个小窗口里面，然后后面那个大窗口被，但是后面那个大窗口应该仍旧被被滚动。如果你是严格意义上的那个focus follow mouse的话，有可能那个小窗口就直接不见了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:15",
      "text": "就被切到背后挡住了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:17",
      "text": "对，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:19",
      "text": "对，这也是一个。所以有时候有一些那种工具型的应用，它会做一个always on top的这么一种模式，就一直在顶端，就不管你把焦点丢到哪里去，它一直是浮在那个屏幕的最底层。如果你把那个屏幕上成一层一层叠加的状况的话。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:34",
      "text": "对，但是仍旧有一个输入焦点的问题，就是你可能光标焦点不在那儿，但你希望输入焦点在哪儿。对，这个是一个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:45",
      "text": "然后有兴趣的如果你在桌面上用过I3，或者被我们两个安利的觉得挺想试试的话，可以去用一下这个叫做KWM的窗口管理系统。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:56",
      "text": "对他是用那个对，他是我看他是用carbon写的C加加呼叫carbon的API，然后去它实际上是一个叫什么，这个东西叫什么？中文叫什么来着？就是assistant，就是为残障人士利用。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:14",
      "text": "那个残障人低位也是需要用残障人士才可以，不叫辅助功能。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:21",
      "text": "对他还是用去去看那个event look，然后去呼叫coco的那套API。没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:31",
      "text": "可以试试。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:34",
      "text": "我意思是我刚才说的那句话的意思是它的性能应该还不错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:39",
      "text": "绕了好远。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:40",
      "text": "对它不是用什么非常二的手段，什么apple script之类的，它是一个实打实的C加加程序。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:47",
      "text": "David是用apple screen方式实现的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:49",
      "text": "我不知道，好像。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:51",
      "text": "但是看他的那个感觉，其实也是通过某种窗口API的方式来实现的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:55",
      "text": "它提供了一个脚本接口，所以有可能是有可能。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:00",
      "text": "所以在本质上和apple screen没什么区别。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:02",
      "text": "对OK就因为有时候会让你的那个窗口失去外框之类的，我碰到过一两次，非常虽然非常的稀少，而且其实不是所有的APP都会接受David的那个重定向。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:20",
      "text": "重新改变它大小。对，主要有些窗口它会说它会指定一个最小尺寸。比如说这个微信的麦克版，它你就不能缩到小于，比如说某一个尺寸中间，它就不能再缩了。就挺讨厌小苹果。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:35",
      "text": "装微信这种东西，怎么装在自己的电脑上打字。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:40",
      "text": "打字方便。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:42",
      "text": "我宁可牺牲这个方便性，你不要让腾讯的东西装在我电脑上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:47",
      "text": "说明你用的还不够多。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:50",
      "text": "其实微博应该已经被，微博不是腾讯的OK。我刚才想说那个微博已经被集成到了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:59",
      "text": "系统级别，所以没有，只能发不能看你还要看。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:03",
      "text": "还是得装个那个OK.",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:05",
      "text": "推特也是一样的，好吧？半集成这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:09",
      "text": "叫twitter至少是一个不是中国公司。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:16",
      "text": "下面播报一个惊天大好消息。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:20",
      "text": "好消息好消息，走过路过不要错过。IE8、IE9、I10全都reaching end of life on tuesday。对，就是各位听到这一期节目的，这是这周日的节目对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:37",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:37",
      "text": "就是大概各位听到这期节目的之后的第一个星期二，也就是12日1月12日.",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:44",
      "text": "2016年1月12日，历史性的一刻。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:47",
      "text": "对，IE internet sorts八九十都不在被官方支持了，也就是他们。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:56",
      "text": "不再发布安全补丁。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:58",
      "text": "对，不再发布安全补丁，而且用户在装了一个补丁之后，会在使用浏览器的时候接收到一个提示，说你赶紧升级到IE11。对，此前的I16和7已经死了很早，然后现在八九十也就苏娜的plant 3来到了自己的生命的尽头。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:26",
      "text": "那个IE6和7应该是随着windows XP的寿终正寝，开始正儿八经不被支持的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:33",
      "text": "对，我记得那个时候中国政府好像官方遣责微软不再支持windows XP，有这事？",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:40",
      "text": "真的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:41",
      "text": "有件事儿我记得好像是对，很有可能是以讹传讹，但对各位有兴趣的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:47",
      "text": "可以考虑的做得出来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:48",
      "text": "对我我没有任何好的，没有任何责任，毫无责任的传给摇你。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:58",
      "text": "你不拜人受听你就死了，你知道吗？好吧，无所谓了，你现在已经不是了不。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:05",
      "text": "受法不受天朝法律管辖耶。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:10",
      "text": "但微软的官方政策现在是怎么样？它只叫什么来着？只更新维护最新一个版本的IE对吧？对，就是目前是IE11以及新出的叫做LG的浏览器。对。当然其实这个也会带来一些不大不小的影响，本来这个什么就千疮百孔的安全现状？然后又不再发官方支持了，以后再报个什么各种礼，zero day就你就只能歇菜了，哼。但此举主要也是逼迫某一些机构、政府以及企业去升级。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:54",
      "text": "对，怎么说呢？反正为了技术的进步，总是要牺牲一点点安全性。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:00",
      "text": "对这个但是我对但是我发现最近就遇到一些不大不小的问题。我装装了一个windows 10，对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:09",
      "text": "然后我也转盘中的测试。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:11",
      "text": "然后中台的那个IE11或者是edge去访问一个我国政府的官方网站，要申请一个东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:19",
      "text": "OK歇菜了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:20",
      "text": "又歇菜了，都是进行不下去。我也不知道为而而且我点的那个叫做什么来着？Comparability兼容模式，还是不行，我也不知道该怎么办。OK然后这个是2015年，我我们天桥政府的那个那个门户网站下面依然还写了那么一句经典的台词。推荐分辨率800乘600。为了保证最佳效果，请推荐使用800乘以600分辨率下使用IE6暖气访问本站。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:59",
      "text": "怎么说呢？就是有时候你会觉得的中国把很多东西当成一个基础建设来使用，但实际上软件的更新的速度是远远超过于官员的预期。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:12",
      "text": "他他当成基础建设做这个做法是没错。他他就说我们之前也要要用那个词叫做什么lowest common d nominator，这里终于记对了最小公分母。对，就是没错的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:28",
      "text": "因为你是一个大公约束。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:30",
      "text": "对对你你是一个政府机构，你要保证这个东西它它的这个可用性，你肯定要选择一个最低平台去做这个东西。它本身它其实是没有什么问题，但是你可不可以选择一种更加规范的方式呢？比如说因为政府网站无非是填表单的比较多，对吧？对你就老老实实用一个HTML的4，都不要说五了，UHDM4的那些表单正儿八经填就好了，行不行？非要搞一个什么插件，这就不说了。你说插件你还有个安全的考虑是吧？非要弄一些非常诡异的java script的那种特效。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:14",
      "text": "比如说你写个日期，最简单一个对吧，你就给一个框，让我输入2015-1213订阅式就够了对吧？他不行，他非要弄一个按钮，然后按下来是一个展开的日历，然后你要一段一年一年往后跳到你出生那一年，出生那一月，出生那一天再点一下。但是如果你是像我们这种80后，你觉得还可以忍是吧？这也就从2015年再点个20次，就回到一九八几年了，对吧？但是你要是一个用户是一九六几年出生的人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:49",
      "text": "是的，是这样没错。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:51",
      "text": "然后他们的解决方案说，那你可以直接就双击2015或者2016那个年份，然后把它编辑成196几不就好了吗？就不用点50次了，对吧？那既然如此的话，你为什么要做这个日历呢？你直接让我那个框里面输入不就好了吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:06",
      "text": "因为有些人适合一点的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:09",
      "text": "所以然后你知道。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:11",
      "text": "因为用户习惯是很难说的事情。我知道你的槽点在哪儿，但我想说的就是我们。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:17",
      "text": "长点还没完。就是我理解就是说你说有些人不懂，或者你还会输错格式，比如他会输一个中文的横线或者乱七八糟字符，你无法控制。那你要用这个日历控件我也没有问题。那拜托能不能用一个向前兼容的日历控件，你不要写一个空间出来，让让用一个最新的最符合HTM这个标准的浏览器，反而不能用那个空间了也说不定这个字是不是就很沮丧。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:47",
      "text": "好吧，这我觉得所以你说我的我的我的我。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:52",
      "text": "的说的我的我的这个吐槽点在于，如果说你的这个设计意向是说是一个面向list lowest common ominous or最小公分母的这种设计的话，那就不要搞那么多复杂的花花肠子好吧。所以当然了，这个东西一向就是说欧洲我不知道，北美政府做的就还比较不错。他的网站再丑再烂，至少能保证你在基本上主流的流操作系统，主流的浏览器里面用都没有问题，对吧？但中国的政府网站90%你离了IE6就是不行。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:33",
      "text": "中国的很多事情都是一个都都是一个非常混沌的政治决策的过程。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:40",
      "text": "不但是我不不我不觉得这个是一个政府的问题，你不能指望说政府这么一种官僚机构，它能够去帮你想到这些技术问题。这个是明显是政府找的这个外包开发者，这开发者的水平的低下的一个结果。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:57",
      "text": "但是为什么会找到开发水平低下的开发者，也是政府决策的一个过程，就他的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:04",
      "text": "这个两码事就是说两头就这么。哪怕你说在北美政府一个美国政府也好，我不知道德国政府怎么样，就所有国家政府找到开发者的肯定不是那个那个国家最优秀的，这个是毋庸置疑的。就是说你肯定找的是一个他们投招投标，他找最低报价的那个，那肯定是最质量是最次的那那能不能及格呢？",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:28",
      "text": "OK, 如果你是这个意思的话，好吧，的确是。当然这里。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:32",
      "text": "说到这里就不得不表扬一下什么枫叶国政府，最近应该是去年开陆续上线的枫叶国政府的那些办事的网站，全部都就这国家级别的，但各省的还有点落后。但国家级别的办事的网站全部都换了新的外观，然后换了新的系统，我觉得还相当不错。其实OK前至少人家自己用的好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:00",
      "text": "OK前两年英国政府也是有一个比较大的工程，就是全面改换英国政府相关网站的外貌和易用性。我记得type space还有报道，然后也是现在改的，就比较你会觉得那个有时候你会觉得那个UI可能有点傻，就是有点难以，但是的确是非常好用，就是重要的信息写的很大，然后重要的该点的按钮放的很放放就也画的很大，然后颜色很鲜明。对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:29",
      "text": "他们还是请过这种相对来说比较专业的设计团队去做过一个rebranding，算是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:36",
      "text": "对。所以你看这终究还是有要有一个政府行为在里面，对吧？如果政府不去管这个，就美国那个什么什么给残障人士的那个法案叫什么来着？就是网站必须让视觉障碍者也能用的那个法案。如果没有这种政府行为，你们如果立法者不去做的话，那那这个就是所有的实施的这个工程商当然会选择你说的那个最大公因子来来来实施了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:14",
      "text": "Anyway我也不知道这个东西应该怎么去吐槽了，你这东西就完全没有办法。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:21",
      "text": "槽点有点乱。说实话刚才说这一大串我们到底想要表达什么，好像不是很清楚。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:27",
      "text": "没什么，就也没就很很清楚，我们不买自己具体为什么不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:33",
      "text": "对，总之刚才这条新闻，这个IE8 9 10的1月12号就要死了，寿终正寝。对对于对于中国的开发者来说，可能不是一个特别特特别有意义的消息。不过在IE市场份额没有那么大，其他国家这是一个比较大的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:58",
      "text": "最后说两件事儿，我先要我说我最近做了一个事儿，我装了那个new .",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:08",
      "text": "vim OK然后。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:10",
      "text": "我把我的那个vim设了一个AES，就VVI默认是启动那个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:17",
      "text": "你有VOKNVI默认启动NVI。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:21",
      "text": "对，没错，ok感觉好new v里面有个特别好的new v我们之前说过，好像没说过是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:30",
      "text": "说过。有一期我记得我刚才翻身是看到前面有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:35",
      "text": "一期提到了他OK，very new wam就是一个wim的，叫什么来着？不算fork，它这个算什么the right。对，算是一个rewrite，就是把film的那些历史包袱都丢掉了。比如说vim至少在逻辑上现在还是支持dos系统的，但是相信已经没有人在用dos系统了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:00",
      "text": "You never know. 不过还有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:02",
      "text": "一些更更古老的，我们从来闻所未闻的什么阿米家，还有什么一些稀奇古怪系统，就是已经绝迹了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:10",
      "text": "他们他他总是这么说，他为了支持某些0.001%的市场份额，在但从而存留了一些非常古老的代码。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:20",
      "text": "但其实有人说过这个事情，其实现在的所谓的VM支持那些古老的操作系统，其实都是没有经过验证的。因为没有人在那边compare过最新版本的到底能不能用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:30",
      "text": "好吧，你的这个test user pool可能就个位数的一些人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:35",
      "text": "对，handful. 对，anyway new wam就是说new wam他们作者，他之前想去在在那个wam的那个代码里面提交一些改进，然后被那个wam的作者摸brand mulan a是吧？对，拒了。然后他们一怒之下就自己另起炉灶的，另起炉灶那个起来叫new way，new就是新的意思，新will。对，然后他们的一个主要的卖点就是之前可能介绍我就不说了，但主要简单提一下，就是把vim的一些历史包袱都拿掉了，只保留最就现在还在实际使用的操作系统支持。还有一些他们认为不必要的特性也去掉，但也加了一些比较新的特性。其实我就要大力推荐一个特性叫做terminal mode。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:27",
      "text": "Terminal mode就是可以在wam里面呼叫terminal.",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:31",
      "text": "就是可以在wam new new way里面可以开一个window。然后你可以打冒号terminal回车，这个buffer就变成了一个terminal的窗口。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:45",
      "text": "OK. 所以你可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:48",
      "text": "告不用从此。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:50",
      "text": "告别。好吧？我的观点还是这个就是朝IMAX这个邪教的方向的发展。为什么不直接control加自己切换的回头？",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:01",
      "text": "因为有时候你要赛班赛对比。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:03",
      "text": "好吧，赛然后有时候其实。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:06",
      "text": "最主要问题是其实他解决了这么一个问题，就是你要把terminal里面某一个命令的输出，比以一种比较精确的方式复制回vim里面去。但我不知道这种方式出现的概率有多少，但是我可以想见一些用例了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:26",
      "text": "这个vm可以做到。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:30",
      "text": "你告诉我怎么操作。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:32",
      "text": "我具体的不是很我然后大部分人是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:36",
      "text": "这么操作的，大部分是这么干的，就是开一个turbo的窗口，然后运行在那里，找到输出，然后用鼠标那个滚轮滚上去，然后用那个鼠标选中那个区域，右键点复制切换vm再用那个clear board粘贴回来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:55",
      "text": "对，这是但这是比较难以的一个方式，但我的印象里面的确有比较更。那你用方式来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:01",
      "text": "你用t max的话，它有一个mode是可以往回滚滚到它就进入一种类似vim的Normal model的一种方式。然后你可以选用那个光标，选择一串字符，然后复制到系统剪切板里面，然后再切回位，然后再通过那个系统剪切板再切回那个V编辑器里面，对吧？但是以上都是需要经过系统简洁版的。但是如果你把用new game这个terminal窗口的话，它是在同一个vivo的版本里面，你不需要这个系统剪辑版，而且所有的vim Normal的可以用的快捷键，可这些这些包括那种跳几行，选择几个字这方式都可以在terminal window的no model.",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:48",
      "text": "里面实现OK。所以它实际上是一个有点像一个vim key binding的bash，但只是更好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:57",
      "text": "那它实现是这样的，它实际上是还有那个lib term，还是lib vert我忘了，去在底层真的是开了一个那种是终端模拟器。然后他只是把终端模拟器的结果一直映射到某一个vim的这个buffer里面去。然后那个buffer会有两种模式，一种是插入模式，一种是普通模式。插入模式的话，你的所有的书都会直接被发送到那个终端里面去，然后再把终端的那个结果会回写回这个buffer OK。但是如果你按一个特特殊键的组合回到这个Normal的话，这个buffer就跟wm的任何一个普通buff er是一模一样的。OK我懂你所有的那些操作都变成rem的操作，不会出现任何例外的情况吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:42",
      "text": "好，我查到了这个vim里面可以用read，就是那个冒号read，然后后面跟一个感叹号，然后加一个命令，他就可以把那个命令输出贴贴到你当前的bug里面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:56",
      "text": "分子全部你们不能选择了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:58",
      "text": "这的确是。但是你说这个更term的确是更灵活，也更对更直观。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:04",
      "text": "至少对啊所以我自己的一个用例的话其实就挺好。比如说整个屏幕就一个位全屏，然后左边是编辑框，然后右边是这个terminal mode，然后就可以正式进入IMAX邪教了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:20",
      "text": "Vim as a overtime .",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:23",
      "text": "system.",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:24",
      "text": "快要实现。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:25",
      "text": "了浑身定位，浑身找一些这种比较高级的特性也会帮助实现这些。比如说它可以被被嵌入作为一个故意的程序的嵌入式的方式。就通过这种cly server的方式，他做一个编辑的server，然后client发送指令，然后拿这个响应结果就好了。OK所以这个邪教的路上越走越远了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:49",
      "text": "是吧？没错，这就是用星际就用星际争霸的这个术语来说，它是一个hybrid，融合了和我们光荣伟大的protos的种种特点，造出来了一个非常强大的，但是双方都不喜欢的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:07",
      "text": "你打完了吗？当然打了OK我还在youtube上看了2个小时的youtube通关的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:14",
      "text": "天哪。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:14",
      "text": "对我是youtube通，也不是通关，没有看打仗的过程。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:19",
      "text": "只看了对那个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:20",
      "text": "过场动画的过程，然后把整个故事也都看完了，实在没时间打。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:25",
      "text": "好吧，你现在是对天使投资大忙人。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:29",
      "text": "不各种瞎折腾。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:30",
      "text": "风险投资。Sorry, 你最近那个real前科工程就是给各位real has talent.",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:40",
      "text": "自己还在进行，但是最近有一些是在线下进行的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:45",
      "text": "非常好，所以你要在这等继续打个广告。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:49",
      "text": "这期先不打了，下次有合适的再说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:52",
      "text": "好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:55",
      "text": "最后再讲一个算是大新闻。但是这个我不知道，其实跟技术没什么关系，但是因为这个人是要不你来说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:05",
      "text": "好吧，就是我最喜欢的linux发行版的创始人之一是创始人之一。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:14",
      "text": "就是创始人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:14",
      "text": "还有就是创始人myself好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:18",
      "text": "就是devan的创始人叫对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:22",
      "text": "他他自杀了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:24",
      "text": "就是debian是两个名字的合体，是他当时的女朋友还是老婆忘了女朋友。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:33",
      "text": "就像京东一样叫debby.",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:35",
      "text": "应该是。然后就第一B然后他叫EMAIAN，所以是debian。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:40",
      "text": "OK。然后最近。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:42",
      "text": "这个伊尔在车上放话说，他被警察胖揍了一顿，他就决定自杀。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:51",
      "text": "对，然后他就果断自杀了。对，依然在的康斯坦斯出生，他是个得意美国人。然后他在1973年4月28日生于康斯坦斯，然后2015年12月28日.",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:08",
      "text": "康斯坦斯是三国交界的湖边是吧？波东湖那个OK对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:13",
      "text": "然后死于3 from cisco，然后他死的因他的死因是被警察这被警察逮捕了吗？好像也没有警察跟着他。我看他的临终前的几条推，是他警察去了他家。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:33",
      "text": "然后把他打了一顿。对，这个事情现在就没有，因为这个事情还在调查中，对吧？也不知道到底怎么回事，但是根据他之前出就是自杀之前几天在车上的，发的推，我们整理出一个时间，这个是线索，大概是说警察，因为现在美国这个警察暴力是一个很大的一个政治问题了。对，然后之前都是什么就是什么，主要是黑人被报道说被警这个白人警察由于什么种族歧视的原因胖揍了一顿，或者是开枪滥杀之类的对吧？但这回这哥们儿是个白人，然后也遇到这个状况。所以他最后的几条。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:16",
      "text": "推里面有一条说他要说我是一个白人，我每年赚1.6个million。对，我受过良好教育，结果被这帮警察孙子们打了一顿。警察就是一群没有受过教育，崇尚暴力的废物什么的。我的余生将与邪恶的警察作斗争。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:36",
      "text": "对，然后他的余生就这样草草了结了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:39",
      "text": "然后他过了几天之后，他就自杀。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:44",
      "text": "对，我忘了说伊恩这哥们儿最应该是半年前加入了这个cloud flare这间公司。阿弗尔应该是目前应该是全球最，如果不是最大也是排前几的那种网络基础设施的公司。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:03",
      "text": "对，我不知道该怎么comment，因为我不没有在美国生活过，我不是无法想象美国。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:13",
      "text": "的有几个问题。首先这个事情的来龙去脉我们都不知道，我们只是看到单方面的一个信息，对吧？也没有出现一个什么第三方的独立审计报道。所以这件事情后续怎么样其实很难说。但是美国警察的这个暴政暴力执法，其实有是有一些年头了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:35",
      "text": "对，前两年一直几乎没过一段时间就会有这样的一个新闻冒出来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:40",
      "text": "就不用前了。就去年，基本上是每隔一个月就要闹一个事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:45",
      "text": "对我的意思就是过去的这两年之间一直有这样的事情出现。就是他的事其实已经有一段历史了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:51",
      "text": "对，特别是上次ferguson那个那个事儿，其实把这个事情推到了一个一个巅峰。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:59",
      "text": "风口浪尖的对，然后就让人感觉好像八九十年代美国的犯罪非常猖獗，警察是弱势群体。现在是反警察已经俨然演化成了美国最大的黑帮。而且有时候我会不会觉得很奇怪，就是你看美国的那些警察的器械，当他们出动的时候，那个那个枪械是要去。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:20",
      "text": "化的了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:22",
      "text": "比什么世界上一个随便一个小国家的军队还要牛逼的。他们完全可以对抗是对抗一个中亚小国之类的，就只出动警察就够了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:34",
      "text": "对，这个事情也是有一个历史大背景的，就是美国是不禁枪的，不禁枪的，大部分州是不禁枪的，瑞士不经常，他们瑞士也不经常吗？不他那个步枪还不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:48",
      "text": "好，反正在美国有一些非常奇怪的条约，什么你一支步枪只要它不是全自动的就可以卖。但实际上那个全非全自动的步枪看起来跟那个军人用的什么M的M4之类的一模一样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:04",
      "text": "而且他这个做的可以很快的改进，改装为全自动的了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:09",
      "text": "这对吧？是这样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:12",
      "text": "对，所以就是有这么一个大背景下，就是说美国警察去执法的时候，他们面临的这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:18",
      "text": "危险风险。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:19",
      "text": "也是蛮大的。经常有什么黑帮、暴力团体，也是这种全副武装的装备来对付你。所以没有办法，这个矛和盾的问题就只能互相搞什么军备竞赛呗。然后导致的一个结果就是现在就是美国警察已经叫做准军事化了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:37",
      "text": "是啊。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:39",
      "text": "然后就可以，等一下，这个是我们节目讨论的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:43",
      "text": "对，我们好像有点朝这个叫叫什么选美的方选美。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:48",
      "text": "anyway，但这个是大背景交代一下，具体听可能以后选美他们会聊的话，可能会讲到这个事儿。但是还是得提醒一下，如果你是在美国的听众朋友们，遇到警察小心一点是吧？哪怕你是这个看起来人畜无害的亚洲黄种人软件工程师，也有可能被警察胖揍一顿的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:12",
      "text": "对，两条，一个是不要跟他们说话。第二第一，他们问你什么，你就说你要见律师。第二就是什么，千万不要让他们搜你的车，叫你干嘛你就干嘛，即便你什么都没有，你也不要让他们搜你的车。对，这些都是从youtube上得来的一些什么美国生存指南之类的。灯塔国怎么能这样呢？对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:37",
      "text": "太让我打过美人戏已经不行了，你不知道吗？好吧，美美人膝已经被什么反恐和绿教搞得也开始神经兮兮的了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:52",
      "text": "第三在在美国的问题没有欧洲大。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:56",
      "text": "那肯定欧洲。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:57",
      "text": "已经到了欧洲，所以说不是灯塔挂的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:01",
      "text": "灯塔萌也快太贵了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:04",
      "text": "不够萌的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:06",
      "text": "现在只能看看天朝怎么应付这些事情了呗。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:11",
      "text": "还看还还还看我那句话怎么说来着？",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:14",
      "text": "还看今朝还看天朝。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:17",
      "text": "数风流人物还看天朝。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:20",
      "text": "最近刚出了反恐法，你知道吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:22",
      "text": "我知道对，反正管不到我管他。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:30",
      "text": "管这个还是管得到的。What比如说你回过探戈星，被被人当做恐怖分子一顿一顿打，那也很现实。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:40",
      "text": "好吧，对吧？小孩子说我好忐忑。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:45",
      "text": "我只说这是一种possibility .",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:49",
      "text": "OK h case对edge .",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:52",
      "text": "case。但是我们我们写程序，不就是各种处理edge case吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:58",
      "text": "是这样，但是很遗憾没有办法做一个测试用例来探测这个边界条件。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:05",
      "text": "你不能try and catch，你只能穿一次，然后你心里就崩溃。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:10",
      "text": "对，就好像那个火星救援的小说里面，他们最后把什么一堆东西给拆了，然后说这个东西的失败的可能性是4%。但是我没有办法探测它，因为你点火了就是点火了，没有什么办法能让你把它停下来再再重新修改。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:28",
      "text": "对你have one shot，所以不能用写程序的思维来过人生了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:35",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:37",
      "text": "搞不好那个crash的你就再也回不来了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:39",
      "text": "对人生没有save load。这是我们从。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:43",
      "text": "你说有没有人写城市的时候，他不保存了，然后就一次写过。因为其实你进30分了，有那个，你记得那个叫什么，this machine的时代，它不是整个缩写都是一个image，对吧？对，那如果说假设不保存的话，那整个crash就没了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:08",
      "text": "对，听起来很恐怖。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:11",
      "text": "不过那个时候好像说好像他们是list，应该不会怎么夸。是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:15",
      "text": "而且那个时代就是机器比较简单，就像我们小时候任天堂那机器crush怎么办？重启呗，直接按下power键，那个时候重启机器简直跟我靠玩一样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:25",
      "text": "那个是因为你有RAM，你有那个固化那个read only memory的存在。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:29",
      "text": "如果this machine也是固化半固化的，应该是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:33",
      "text": "但至少就说你能恢复到一个初始状态，但是你改的东西就没了。那是我我们也是经过这样的日子的，是吧？对，宽松的了，真是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:47",
      "text": "好吧，这一期就结束了。新年第一期。其实我们周年的时候也没有做什么庆祝，不像不像那一次还请到了4C城来庆祝IT公论一周年。我们那个皇帝周年就是默默无闻的过去。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:08",
      "text": "不然你还想怎样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:10",
      "text": "要过八十。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:11",
      "text": "大寿吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:13",
      "text": "把湘姐、梦瑶和孙成全都请。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:16",
      "text": "之前上过住过凤凰的嘉宾，一竖一个手都数过来。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:23",
      "text": "说这可能也就是我们节目的传统，我们以闲聊为主。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:28",
      "text": "我们毕竟是一个娱乐节目是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:31",
      "text": "对，OK在节目结束之前还有一个重大的新闻要宣布？",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:37",
      "text": "其实什么什么很小的新闻好吧，不过我们节目的听众可能会关心这种事儿。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:43",
      "text": "A small step for .",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:45",
      "text": "world giant.",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:47",
      "text": "step for security.",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:50",
      "text": "最开始我们不是说这个IPN现在已经是全栈HTTPS了，包括CDN也是对吧？然后其实我们最近做了一点改动是8所。因为之前我们证书是用那个star SSL的免费证书，那其实挺烦人的。因为它那个界面是一个way based，你必须要一个鼠标去点去操作验证域名，然后发放证书的这个过程挺坑的。然后之前有人写了一个算是叫做什么爬网页那个什么scrappy，对吧？Crawl crawl它不是crawl，它是对网页web OK，就是把网上。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:28",
      "text": "的资料刮下来的那个东西。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:31",
      "text": "刮下来然后再弄。然后有人用基于这种方法做一个python的命令行工具，模拟一个浏览器在操作那个start SSL的网页，然后去发放证书。但是整个不是非常稳定和靠谱。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:48",
      "text": "这就是典型的所谓ducting programing。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:52",
      "text": "没错，就是要放松的。你那张图是吧？对，胶水水管这种都一定要找出来。然后我们上次不是说let's cribb就进入那个叫做public beta的阶段了吗？然后就可以不用邀请，也可以去就随意使用。但可能有时候会遇到它的一些坑或者是不稳定的时候，这目前还没的。Anyway, 就是说IP现在所有的其他所有的网站的域名的证书，现在都全部是改成了这个let encrypt发放的证书。哼包括我们用的CDN也是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:29",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:30",
      "text": "当然用了这个证书，用了这个let's creep的一个好处是什么呢？就可以一切自动化了。因为它本来就是一个API，它的那个网站甚至都没有一个界面可以让你手工去，是必须用命令行。对你必须用它的这个命令行，或者用它官方客户端，或者用第三方客户端去做这个事儿。然后之前我用了一个别人写了一个叫做acme tiny的一个200行不到200行的一个python脚本去做这个事儿。然后我仔细观察一个脚本，发现和之前用start SS2那种web scraping的方式去做有提升，但是没有本质的区别。比如说他会调用一个open SSL的命令行工具去读取一个ISA的私钥，然后再打印出它的公钥的部分，然后再把那个公钥的部分的两个component，一个是一一个是N两个数字再转通过命令行的一些稀奇古怪的操作，把它转换成let's crept服务端需要的格式。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:36",
      "text": "再发送回去。刚才这句话政治不正确，应该说利用这个unix哲学的一组工作流。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:44",
      "text": "Which is highly reliable anyway，开玩笑的，其实还是挺reliable的，就是假设那个命令输出都正常的话。但是毕竟我还是不太喜欢这种政治不正确的方式去做这种不不叫不叫政治不正，这叫政治正确的方式，这种比较不严谨的方式去做这么一种一个操作，对吧？然后我觉得他那个界面也不就是那个UI，就是online就是命令行程序，也是要讲UI的，我觉得也不是特别好吧。啊所以这个时候作为一个还在继续写代码的人的唯一正确方法是什么呢？是自己。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:26",
      "text": "写一个OK，hiker精神在瑞尔身上断了完美披肩。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:32",
      "text": "所以我用那个go重写了一遍一个阿克米的客户端，为什么要用勾写呢？因为go里面的标准库有对这个有非常完善的支持，包括连解析生成那个RC私有的那些公钥私钥，包括X509证书的格式什么什么的。但其实我我用它写的一个最主要原因是之前用那个python的客户端也好，还是我看到的官方的那个python一个非常庞大非常沉重的客户端也好。他都不支持并发验证域名。因为他签发域名的时候，他要验证你确实是控制这个域名的。通过就是说OK你在这个域名服务器上部署一个特殊的文件的方式来实现的对吧？但是他们到一个就是顺序验证，但是你知道IPN旗下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:25",
      "text": "有那么多堆的话。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:27",
      "text": "对，而且每个里面都有两个。一个是比如说IPN点IY，然后有WW点IPN点IY，然后把它跳转回IPNDIY。因为些人是喜欢在前面加3W的，所以数一下我手上已经和有几十个玉米，然后每次去等他生成一个证书的话，要等好久。所以我想购物不是最擅长的就是并发操作。然后我看了一下那个acme的协议，其实也比较简单，就是可以支持并发的。所以说那用购也做了一个高。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:01",
      "text": "并发的支持。",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:03",
      "text": "我可以同时用go go t对OK对，就可以在10秒，大概大家看网络情况差不多10秒以内，就完成整个验证域名和证书生成的一个操作。然后最终输出一个完整的certificate in，包括我的那个HX的用的这个加密的私钥。这个就开源放到那个gie thu b上面去了。但现在还是，我稍后把那个链接放到修饰词里面，然后他有兴趣可以去用一下，然后叫做show me the poll .",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:42",
      "text": "request or SDFU。",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:45",
      "text": "没错。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:46",
      "text": "OK感谢收听IPN podcast的网络旗下的IT技术主题娱乐节目内容话我们号称hardcore，但是也没有干货，想听就听，不想听人就别听。你可以为本节目捐款，捐款地址是coro panic dot FM slash donate。对，我们现在其实还是没有多少钱。我本来想买摩托车的，摩托车现在连个离合器都卖不了。捐款金额随意，只要是八的正整数倍就可以。捐款不会为你带来什么，不捐也不会让你失去什么。我们的口号是no hard feelings。如果你有任何反馈，可以发邮件到kernel panic SIPN dot LI，同时也欢迎你收听IPN旗下的其他几档节目。IT公论未知道它依赖了流行通信、high story硬影像、无次元博物志审美以及最新上线的这个名字的名字非常牛逼的art in c to。陛下关，我们下期节目再会。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本期播客“内核恐慌”聚焦于技术主题，主持人分享了他们的新年度假经历，讨论了技术难题和挑战，包括缓存失效与技术命名问题的重要性。他们提到了Fira Code字体，适合程序员使用，以及IE浏览器停止支持的事件。讨论中还涉及了技术债务、新版本Vi编辑器的安装与特性，以及对政府网站用户体验的批评。此外，播客也关注了开源项目的新进展，以幽默的方式结束，整体内容丰富，涵盖电脑科学、编程等技术领域。",
    "qa_pairs": [
      {
        "question": "是否认为很多程序员在命名方面做得不够好？",
        "answer": "是的，很多人在命名方面做得不够好，导致代码中出现名称混乱的现象，但也有极端的例子，如所有东西都命名为\"node\"，这同样不利于理解和维护代码。",
        "time": "00:04:18"
      },
      {
        "question": "这期节目有什么正题吗？",
        "answer": "其实这期也没有什么正题，主要是没有主题的闲聊。",
        "time": "00:02:58"
      },
      {
        "question": "这期节目是否打算叫“没有主题的闲聊”？",
        "answer": "是的，每一期没有主题的闲聊我们都叫“没有主题的闲聊”，因为很难想出别的标题。",
        "time": "00:02:58"
      },
      {
        "question": "在计算机科学中，命名的重要性体现在哪些方面？",
        "answer": "在计算机科学中，命名非常困难，不仅影响代码的可读性和理解性，还可能造成概念上的混乱（conceptual debt），进而影响整个架构的清晰度。",
        "time": "00:03:27"
      },
      {
        "question": "什么是技术负债和技术命名的重要性？",
        "answer": "技术负债是指过去做的决策导致现在需要解决的问题，而命名问题（naming sense）就是一种技术负债，如果命名不当，会使得后续构建基于此名的概念变得困难，造成理解上的困扰。",
        "time": "00:03:49"
      },
      {
        "question": "对于以英文命名代码和注释的看法是怎样的？",
        "answer": "讨论了使用英语写代码的重要性，指出尽管法国程序员可能倾向于使用法语注释，但由于编码和转写的问题，可能导致阅读困难和理解混乱。",
        "time": "00:13:04"
      },
      {
        "question": "历史上有哪些知名的法国程序员编写了著名软件？",
        "answer": "有位名叫法洛的法国程序员，他写过很多知名的小工具，比如FM pack。",
        "time": "00:16:46"
      },
      {
        "question": "今天的第一个主题是什么？",
        "answer": "今天的第一个主题是回顾历史，通过对比2002年和2015年Unix开发者工作电脑屏幕截图的历史变迁。",
        "time": "00:17:54"
      },
      {
        "question": "这个历史回顾的发起人是谁？历史上有谁因使用法国软件而受到不礼貌对待的例子吗？",
        "answer": "这个历史回顾的发起人是一个叫Anders的人，他在2002年向一群Unix开发者和知名大牛们发信收集他们工作电脑屏幕截图，并在2015年再次进行对比。提到了一个例子，即不要使用法国程序员写的程序，像是某款叫FM pack的软件。",
        "time": "00:18:53"
      },
      {
        "question": "在屏幕截图的对比中，有哪些令人印象深刻的变化？",
        "answer": "一位参与者提到，在过去13年里，他本人对vim的掌握程度发生了天翻地覆的变化，但窗口布局和常用工具并没有太本质的变化。",
        "time": "00:20:16"
      },
      {
        "question": "这次回顾中有没有什么特别有趣的发现？",
        "answer": "其中一个有趣的发现是其中一位受访者使用邮件的方式非常特别，他直接在磁盘上创建一个文件作为邮件内容，然后通过命令行处理发送。",
        "time": "00:24:26"
      },
      {
        "question": "IPN最近发生了什么事情？",
        "answer": "近期IPN遇到了音频文件下载和播放异常的问题，经过排查发现是由于DNS解析故障导致的，最终确定为全球根域名服务器遭受攻击及国内DNS服务商的问题。",
        "time": "00:27:58"
      },
      {
        "question": "最近有哪些关于新字体的动静？",
        "answer": "最近有一款名为Fira的字体进行了深度定制，增加了许多字符集并优化了排版引擎特性“连字”，该特性在中文中较为少见，但在其他语言中较为常见。",
        "time": "00:31:31"
      },
      {
        "question": "OE在早期是如何实现连字的？",
        "answer": "在铅与火的时代，OE的连字是通过将两个字母刻在一起实现的，但在数字时代，由于每个字符在二进制层面是分开的，连字相对较晚才出现在数码排版界。",
        "time": "00:33:58"
      },
      {
        "question": "支持ligature功能的最初字体引擎是哪个？",
        "answer": "最初支持ligature的字体引擎应该是west，具体名称可能是Type1，但需要结合Adobe的相关技术才能在编程界有效使用。",
        "time": "00:34:36"
      },
      {
        "question": "编程界为何普遍接受度不高？",
        "answer": "因为在编程界中，连字依赖于孤立环境和特定的子牌子引擎支持，并且需要字体本身具有相应的character才能显示，因此实用性不高。",
        "time": "00:35:04"
      },
      {
        "question": "技术限制如何影响编程符号的发展？",
        "answer": "技术限制导致了像小于等于号（<=）和不等于号（!=）等符号在编程中的特殊写法，这些符号在非程序员看来可能显得奇怪，而在编程中则是为了解决输入不便的问题而形成的约定俗成。",
        "time": "00:35:24"
      },
      {
        "question": "Fira Code字体对编程有何改进？",
        "answer": "Fira Code字体尝试将一些常用的编程语言中的符号变为ligature，例如连续两个等于号会被视为一个连贯的长等号，感叹号配合等号则显示为类似数学家使用的长等号上面带斜杠的符号。",
        "time": "00:37:03"
      },
      {
        "question": "是否有免费且开源的字体支持这类特性？",
        "answer": "Fira Code是一款免费开源的等宽字体，支持这类数学符号的ligature特性，比收费的Pro版本更具优势。",
        "time": "00:37:45"
      },
      {
        "question": "是否所有编辑器都支持Fira Code的连字特性？",
        "answer": "目前大部分终端模拟器或字符界面编辑器可能不支持Fira Code的连字特性，但在某些情况下如Homebrew的Vim版本中可以实现此特性。",
        "time": "00:40:29"
      },
      {
        "question": "是否有其他方法实现类似连字效果？",
        "answer": "Wim编辑器从某个版本开始支持名为council的特性，它可以将多个字符融合为一个单独字符处理，从而达到类似连字的效果，且效果相对更稳定，不依赖于操作系统特定的支持。",
        "time": "00:43:17"
      },
      {
        "question": "英美小朋友使用的记忆日历的方法是怎样的？",
        "answer": "英美小朋友所使用的记忆日历方法是通过两手抱拳，从左手小指开始，小指和无名指之间的凹处代表一月，然后按照高低顺序数下去，即一月大、二月小、三月大、四月小、五月大、六月小、七月大，到了右手则是八月大、九月小、十月大、十一月小、十二月大。",
        "time": "00:51:19"
      },
      {
        "question": "这种记忆日历的方法是否需要依赖于很多基础知识？",
        "answer": "是的，这种方法虽然有趣，但确实需要具备一定的基础知识，例如知道julius和augustus分别是谁，并了解他们对应的月份以及september的实际含义是七月等。",
        "time": "00:52:03"
      },
      {
        "question": "是否有快速计算N阶乘的函数，并且在O(1)时间内给出int类型结果的要求？",
        "answer": "这个问题实际上是一个编程挑战，要求在有限时间内给出N1个数（阶层）的函数结果。答案是预先计算好N1阶层的结果并存储在一个数组中，因为当N较大时，直接计算会引发overflow问题。",
        "time": "00:53:36"
      },
      {
        "question": "对于使用数组预先存储预计算结果这种做法，是否算是一种作弊？",
        "answer": "虽然这种做法看似“赖皮”，但在某些特定环境下（如C语言中的int类型有限精度）它是符合spec的，因为一旦出现overflow，程序的行为是未定义的，可以返回任何值。",
        "time": "00:54:15"
      },
      {
        "question": "对于硬件层面实现日历功能的现象，反映了什么问题？",
        "answer": "这反映了在开发过程中可能存在的不够严谨、认真和验证不足的问题，以及芯片开发周期可能短于一年，导致出现明显的问题。",
        "time": "00:57:39"
      },
      {
        "question": "为什么要在硬件层面实现日历功能？",
        "answer": "日历功能在硬件层面实现可能是因为在低端平板电脑中，为了提供更精确且稳定的日期显示，而不仅仅是作为硬件时钟的功能，而是需要处理复杂的历法算法，包括润年、闰秒等修正值。",
        "time": "00:58:06"
      },
      {
        "question": "I3窗口管理系统具有什么样的特性？",
        "answer": "I3窗口管理系统是基于瓷砖布局的窗口管理器，其主要特征是将窗口尽可能平铺不遮挡，用户无需关心窗口的上下顺序。此外，还提到了一个名为KWM tiling window manager，它在OSX系统上实现了类似I3的功能，特别是“焦点跟随鼠标”特性，即当鼠标光标移动到某个窗口时，会自动切换到该应用，无需额外按键操作。",
        "time": "01:02:01"
      },
      {
        "question": "KWM窗口管理系统是用什么语言写的？",
        "answer": "KWM是用C++写的，并且它通过调用Coco的API来实现对残障人士的辅助功能。",
        "time": "01:06:56"
      },
      {
        "question": "KWM和AppleScript在本质上有什么区别？",
        "answer": "虽然KWM可能也涉及到调用API，但它的本质是一个C++程序，与使用AppleScript实现窗口管理的方式有所不同。",
        "time": "01:07:51"
      },
      {
        "question": "David是用AppleScript实现的吗？",
        "answer": "我不知道David具体使用了什么方式实现窗口管理，但KWM确实是一个基于C++实现的程序。",
        "time": "01:07:47"
      },
      {
        "question": "KWM是否使用了类似AppleScript的手段实现窗口管理？",
        "answer": "不，KWM是一个实打实的C++程序，可能通过某种窗口API的方式来实现窗口管理，它提供了一个脚本接口。",
        "time": "01:07:51"
      },
      {
        "question": "对于某些APP窗口无法被KWM或其他方法有效管理的情况，您有什么看法？",
        "answer": "有些窗口由于指定最小尺寸等限制，无法通过重定向或调整大小来管理。例如微信麦克版就有这样的问题，不过微博已被集成到系统级别，无需额外安装。",
        "time": "01:08:20"
      },
      {
        "question": "IE8、9、10何时不再被官方支持？",
        "answer": "IE8、9、10将在2016年1月12日达到生命尽头，不再发布安全补丁，用户将收到升级提示到IE11的提示。",
        "time": "01:09:58"
      },
      {
        "question": "对于中国政府对微软不再支持Windows XP的指责，您有何了解？",
        "answer": "这个事件可能存在误解或以讹传讹，但可以确定的是微软官方政策现在只维护最新版本的IE浏览器，即IE11和LG浏览器。",
        "time": "01:11:10"
      },
      {
        "question": "政府网站在软件更新方面的做法是否存在问题？",
        "answer": "存在很大问题。政府网站往往基于最低公共 denominator（最小公分母）原则，选择过时的技术和浏览器以保证可用性，但这种做法并不利于安全性和长远发展。",
        "time": "01:13:30"
      },
      {
        "question": "对于中国政府网站存在的兼容性问题，您有什么建议？",
        "answer": "建议政府网站采用更规范的技术标准，如HTML5，并尽量减少对旧版浏览器的依赖，同时保证重要信息和功能的易用性和兼容性。",
        "time": "01:15:17"
      },
      {
        "question": "在Vim编辑器中，如何在turbo窗口中操作以实现复制和粘贴功能？",
        "answer": "在大部分情况下，操作方式是开启turbo窗口后运行相关命令，找到输出内容，使用鼠标滚轮滚动到所需区域，选中后右键点击复制，再回到Vim编辑器中进行粘贴。但这个过程相对复杂，也可以通过一些更灵活的方法，例如利用t max模式中的特定组合键来选择和复制字符到系统剪切板，然后再切回Vim模式进行粘贴。",
        "time": "01:23:36"
      },
      {
        "question": "是否有更便捷的方式来实现这个功能，而无需依赖系统剪切板？",
        "answer": "如果使用new game这个终端窗口，它不需要通过系统剪切板，可以直接在Vim Normal模式中使用vim key binding的快捷键，如跳行、选择字符等，这些功能在new game终端窗口中完全可用，实现了类似vim在任何环境下的高效操作。",
        "time": "01:24:01"
      },
      {
        "question": "Vim作为终端模拟器是如何工作的？",
        "answer": "Vim内部通过底层的lib term或lib vert（具体名称可能有误）打开一个终端模拟器，并将模拟器的结果映射到vim的一个buffer中。这个buffer有两种模式：插入模式和普通模式。在插入模式下，所有输入都会发送到终端，终端结果回写至buffer；在普通模式下，buffer的行为就像vim的任何一个普通buffer一样，操作会直接在编辑器内部执行。",
        "time": "01:24:57"
      },
      {
        "question": "Vim中是否存在快速复制屏幕内容至缓冲区的方法？",
        "answer": "在Vim中，可以使用冒号（:）命令加上read指令，后面跟一个感叹号和要执行的命令，这样就能把命令输出贴回当前缓冲区。",
        "time": "01:25:42"
      },
      {
        "question": "对于喜欢的Linux发行版创始人去世的消息有何看法？",
        "answer": "对这位Debian创始人不幸去世表示遗憾，并提到了他因警察暴力对待而自杀的事件。同时指出，美国警方暴力执法是一个长期存在的问题，引发了公众对警方行为的广泛关注和讨论。",
        "time": "01:29:33"
      },
      {
        "question": "是否应在美国遇到警察时保持警惕？",
        "answer": "提醒在美国的听众朋友，在遇到警察时要格外小心，即使看似温和的人也可能遭遇不必要的麻烦，建议保持适当距离，遇到搜查等要求时应保持冷静并寻求法律援助。",
        "time": "01:33:48"
      },
      {
        "question": "节目最后有什么重大新闻要宣布吗？",
        "answer": "宣布了IPN已全面支持HTTPS，包括CDN服务，并且已经改用Let's Encrypt发放的证书，以实现自动化管理，提高安全性。",
        "time": "01:38:50"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "内核恐慌：技术与生活的轻松对话",
        "summary": "本期节目中，我们探讨了计算机科学中的难题、全球变暖对滑雪季节的影响，以及不同国家的圣诞节庆祝方式。节目还提及了捐款信息和节目订阅方式，展现了主讲人对工作敬业的态度。"
      },
      {
        "time": "00:02:57",
        "title": "命名的艺术与技术负债",
        "summary": "对话讨论了在计算机科学中，命名事物的难度以及不良命名所带来的问题，例如技术负债（technical debt）和概念负债（conceptual debt）。不良的命名不仅会导致代码维护困难，还会影响整个系统的理解和架构。讨论还触及了命名问题可能导致的思维模型影响，以及不同程序员在命名实践中的差异。最后，指出了起名字是一门重要的学问，需要足够的语文水平和对概念的深刻理解。"
      },
      {
        "time": "00:09:54",
        "title": "探讨命名困难与缓存失效验证的复杂性",
        "summary": "对话中提到了两个知名的难题：命名问题和缓存失效验证。第一个难题是命名，即使在当下，它依然不是一个被广泛接受的难点，大多数人低估了命名的难度。第二个难题是缓存失效验证，这是一个因为涉及因素众多而难以解决的问题。此外，还提到了分布式系统中确保消息的顺序和唯一性是两个知名难题。整个对话通过举例和解释，强调了这些技术问题的复杂性和挑战性。"
      },
      {
        "time": "00:11:59",
        "title": "编程语言和键盘布局的趣事",
        "summary": "讨论集中在使用不同语言编写代码的体验上，特别是法语和英语的使用情况。讨论者分享了个人对于法语注释的困扰，以及在使用法语和德语键盘时遇到的挑战。其中提到了法语编码带来的编码问题和键盘布局差异导致的打字困难。此外，还谈到了一些个人适应不同键盘布局的经历，以及如何因应这些挑战。最后，以一种幽默的方式提及了一些关于不使用特定国家程序员编写的软件的趣谈。"
      },
      {
        "time": "00:17:47",
        "title": "回顾技术圈的历史变迁",
        "summary": "对话主要围绕技术圈内一些知名人士从2002年到2015年的工作环境变迁，特别是他们使用的工作电脑屏幕截图的对比。这一对比揭示了技术工具和操作系统随时间的演变，同时也展示了某些习惯和偏好在多年后依然保持不变。特别提到了一些人物从使用Unix/Linux系统切换到OS X，以及他们对邮件处理的不同方法，包括通过文本编辑器直接编辑邮件内容的奇特方式。此外，还提到了一个关于IPN的未详细说明的事件，表明对话中涉及了多个话题，但重点在于技术社区成员使用工具的变化。"
      },
      {
        "time": "00:26:22",
        "title": "解决IPN音频文件下载与DNS解析问题",
        "summary": "近期，用户反馈无法下载IPN的音频文件或无法正常播放，经过排查，问题可能源于DNS解析异常和CDN配置问题，而非运营商责任。此前，全球13个根域名服务器遭受攻击，可能影响了域名解析，加之国内DNS服务提供商DNS Pod出现异常，导致域名解析问题频发。此外，还遭遇了音频文件被劫持的问题，由于采用HTTP明文协议，小运营商的缓存操作不当可能导致内容被替换。现已完成HTTPS加密连接的部署，调整了域名托管策略，希望解决这些问题。"
      },
      {
        "time": "00:30:33",
        "title": "探讨新字体特性与连字应用",
        "summary": "对话涉及一款基于Pha Mono等宽字体深度定制的新字体，讨论了其扩展字符集和优化特性，特别是对连字功能的利用。连字在排版中用于美观，通过结合特定的字母组合提升视觉效果，尽管在编程领域其应用受到限制。"
      },
      {
        "time": "00:35:23",
        "title": "编程符号和字体的演化与影响",
        "summary": "对话涉及了由于显示技术和输入限制导致编程符号（如小于等于号、不等于号）的特殊使用，及其对编程习惯的影响。讨论了特殊字体（如Fira Code）如何通过ligature特性改进编程符号的显示，以及这如何影响程序员的编码体验。还提及了使用自定义运算符的实践和其在社区中的接受度，强调了兼容性和理解度对编程语言和工具创新的重要性。"
      },
      {
        "time": "00:46:37",
        "title": "从格里高利历到Rock Chip硬件工程师的幽默commit message",
        "summary": "对话围绕一个幽默的commit message展开，其中穿插了公元1582年教皇格里高利十三世改进儒略历法的故事，以及2013年Rock Chip工程师关于闰年计算的幽默评论。通过这段对话，展现了软件开发中的文化背景和历史知识的趣味性，同时也体现了编写commit message时的幽默和创意。"
      },
      {
        "time": "00:53:33",
        "title": "面试中使用预计算数组应对限行时间问题",
        "summary": "对话中讨论了在限行时间内通过预先计算结果并存储在数组中来解决N的阶乘问题的方法。这种方法虽然被认为有些投机取巧，但确实符合题目的要求，因为一旦整数溢出，行为是未定义的。同时提到了在不同的编程语言中，如Haskell，这种做法的可行性会有不同，因为Haskell的整数类型可以是任意精度的。讨论还触及了面试中是否可以采用这种方法，以及如何快速应对类似问题的可能性，指出面试时可能不会直接想到这种方法，但若能快速实现，可能也会被认为是一种解决问题的有效方式。"
      },
      {
        "time": "00:55:58",
        "title": "探讨中国芯片厂商与英特尔合作及质量问题",
        "summary": "讨论集中在中国福建的一家专注于为低端平板电脑生产英特尔芯片的厂商，这家厂商不是代工厂，而是研发商，与英特尔的合作旨在夺回被ARM处理器占据的低端市场。对话中提到，市场上售价1000元以下的英特尔平板大多使用该厂商的芯片，但存在明显问题，反映了开发周期短和质量控制不严格。此外，探讨了硬件层面实现日历功能的必要性，以及这一问题对中国制造品牌形象的潜在负面影响。最后，通过比较德国和日本制造品的历史，讨论了品质信任建立的过程。"
      },
      {
        "time": "01:01:26",
        "title": "探讨KWM：为OS十打造的类似I3的窗口管理器",
        "summary": "对话中讨论了Linux下I3窗口管理器的特性，包括其基于磁片的布局方式，使得窗口彼此不遮挡，提高工作效率。随后，转向讨论在OS十上使用的Divide窗口管理器，虽然方便但与I3的自动布局方式存在差异。最后，介绍了正在开发中的KWM窗口管理器，它试图在OS十上复刻I3的全部功能，特别是焦点跟随鼠标的功能，以及如何在不同窗口间进行高效切换，虽然KWM仍在初期阶段，但已展示出极大的潜力。"
      },
      {
        "time": "01:06:56",
        "title": "探讨辅助技术及应用程序接口的运用",
        "summary": "对话集中在利用C++调用Carbon API开发辅助技术软件，特别针对残障人士的需要。讨论了使用原生编程语言相比于脚本语言的优势，以及通过窗口API实现功能的可能性。此外，还提到了一些应用程序如微信、微博和推特的使用体验和系统集成情况，表达了对某些应用不愿意安装在个人电脑上的偏好。"
      },
      {
        "time": "01:09:19",
        "title": "IE8、IE9、IE10即将停止支持及对政府网站的影响",
        "summary": "在2016年1月12日，IE8、IE9、IE10将不再发布安全补丁，标志着这些浏览器版本的正式结束。此举将迫使一些机构、政府及企业升级浏览器。同时，这也揭示了政府网站对于老旧技术的依赖，特别是在中国，许多政府网站仍然推荐使用IE6及特定分辨率访问，显示了更新速度远超官方预期的问题。这不仅影响用户体验，也反映了政府网站在技术适应和更新方面的挑战。"
      },
      {
        "time": "01:19:56",
        "title": "探讨New Wam编辑器及其特性",
        "summary": "对话中讨论了New Wam编辑器，它是一个基于Vim重写（rewrite）的编辑器，旨在摆脱Vim的历史包袱，只支持现代常用的操作系统，并去除不必要的特性，同时加入了一些新的功能。特别提到了一个叫做Terminal mode的特性，允许在编辑器内部直接调用终端，提升了用户的工作效率。此外，也讨论了New Wam的开发背景，即因为作者提交的改进被拒绝后决定独立开发。最后，讨论了New Wam如何通过内置的终端模拟器，使用户无需通过系统剪贴板即可在编辑器和终端间无缝切换和操作，以及它的灵活性和直观性如何优于传统的操作方式。"
      },
      {
        "time": "01:26:49",
        "title": "星际争霸、天使投资及Linux创始人自杀事件",
        "summary": "对话内容涉及星际争霸游戏的讨论，提及一个强大的混合角色，以及对游戏的非直接体验方式。随后转变话题，讨论天使投资和风险投资，以及对一个在线下进行的项目进行广告宣传的计划。最后，讨论了Linux发行版Debian的创始人之一自杀的消息，涉及其与警察的冲突、社会问题及个人背景。"
      },
      {
        "time": "01:31:01",
        "title": "美国警察执法问题及社会背景探讨",
        "summary": "对话涉及美国警察执法问题的历史和现状，指出美国警察暴力执法事件频发，并讨论了这一现象的社会背景，包括美国的枪支政策和警力的准军事化。同时，对话中也提醒在美国遇到警察时应保持警惕，遵循特定的应对策略以避免不必要的冲突。"
      },
      {
        "time": "01:37:43",
        "title": "IT公论新年首播及网站安全升级",
        "summary": "本期节目中，主讲人回顾了过去一年节目未进行周年庆祝的情况，并预告了节目未来的发展方向。节目中宣布了网站从使用免费证书到采用全站HTTPS和CDN的重要安全升级，特别强调了由startSSL证书转向Let's Encrypt证书的过程，以及为此定制的Go语言编写的ACME客户端，以实现域名验证和证书生成的自动化和高效并发操作。此外，也提到了对节目捐款的呼吁和反馈渠道，以及IPN旗下其他节目的推荐。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "主题: 技术主题娱乐节目"
            },
            {
              "children": [],
              "content": "特点: 自称hardcore但无干货"
            },
            {
              "children": [],
              "content": "网址: kernel panic dot FM"
            },
            {
              "children": [],
              "content": "推荐: 使用podcast客户端订阅"
            },
            {
              "children": [],
              "content": "捐款: 推荐八的正式数倍金额"
            },
            {
              "children": [],
              "content": "口号: \"there are only two hard things in computer science, cash in validation and naming things.\""
            }
          ],
          "content": "Kernel Panic"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "奥地利滑雪经历"
                },
                {
                  "children": [],
                  "content": "全球变暖讨论"
                },
                {
                  "children": [],
                  "content": "滑雪场地需要人造雪"
                }
              ],
              "content": "新年快乐"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "技术负债和概念负债"
                },
                {
                  "children": [],
                  "content": "命名困难的双重含义"
                }
              ],
              "content": "编程和命名的难度"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "法语和德语键盘的挑战"
                },
                {
                  "children": [],
                  "content": "编程中对键盘布局的需求"
                }
              ],
              "content": "编程语言和键盘使用"
            }
          ],
          "content": "主题讨论"
        },
        {
          "children": [
            {
              "children": [],
              "content": "历史回顾: 2002 vs 2015 开发者桌面截图"
            },
            {
              "children": [],
              "content": "CDN和DNS问题: IPN遭遇的技术挑战"
            },
            {
              "children": [],
              "content": "新字体: Fira Code的改进和连字功能"
            },
            {
              "children": [],
              "content": "IE8、9、10支持终止: 对开发者和用户的影响"
            },
            {
              "children": [],
              "content": "Debian创始人自杀事件: 对美国警察暴力的讨论"
            }
          ],
          "content": "技术和社区新闻"
        },
        {
          "children": [
            {
              "children": [],
              "content": "iTerm2使用技巧"
            },
            {
              "children": [],
              "content": "iTerm2的特性: 窗口分裂和快捷键"
            },
            {
              "children": [],
              "content": "Tmux的高阶使用: 与Vim结合"
            },
            {
              "children": [],
              "content": "Tmux与iTerm2的兼容性问题"
            }
          ],
          "content": "工具和技巧"
        },
        {
          "children": [
            {
              "children": [],
              "content": "Tmux的自定义脚本和配置优化"
            },
            {
              "children": [],
              "content": "iTerm2偏好设置分享"
            },
            {
              "children": [],
              "content": "Fira Code字体: 支持连字和编程符号"
            }
          ],
          "content": "项目和工具推荐"
        },
        {
          "children": [
            {
              "children": [],
              "content": "自制的Acme客户端: 用于生成HTTPS证书，支持并发验证"
            },
            {
              "children": [],
              "content": "捐款支持: 提醒听众可以通过网站捐款支持节目"
            }
          ],
          "content": "开源项目"
        },
        {
          "children": [
            {
              "children": [],
              "content": "通过邮件和社交媒体接受听众反馈"
            },
            {
              "children": [],
              "content": "推广IPN旗下的其他节目"
            }
          ],
          "content": "社区和反馈"
        },
        {
          "children": [
            {
              "children": [],
              "content": "继续探索和分享技术、编程、开源项目的讨论"
            },
            {
              "children": [],
              "content": "关注社区反馈，改进节目内容"
            },
            {
              "children": [],
              "content": "推广使用HTTPS和安全标准，分享技术实践和经验"
            }
          ],
          "content": "未来展望"
        }
      ],
      "content": "IPN Podcast 网络旗下节目摘要"
    }
  }
}