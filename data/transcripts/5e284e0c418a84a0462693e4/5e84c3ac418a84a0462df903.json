{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df903",
  "title": "39. Kerning Panic · 字谈字串（一）",
  "task_id": "zj78qpvp7w4oqxdp",
  "transcription": [
    {
      "time": "00:00:08",
      "text": "IPNN领导人不鸟万如一最高指示串台是很好的事，串的越淫乱越好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:17",
      "text": "我靠。你这样侮辱我们的伟大领袖好吗？还是这真的是他说的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:27",
      "text": "他说这是为什么念出来就有点奇怪。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:31",
      "text": "没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:32",
      "text": "没有。就是你想一本当时一本书的话，第一页应该是要写那个最高指示。所以在开场的时候，上台的开场的时候，首先要念一下最高指示。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:43",
      "text": "这期节目是不是要被打上什么分级标签了？",
      "speaker": "发言人4"
    },
    {
      "time": "00:00:45",
      "text": "还没有，我没有说脏字。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:48",
      "text": "没关系，不过大家还是要说一下如果不想听收听体验北莺歌的话，还是推荐大家使用泛用型博客客户端收听我们的节目。对，好了，我们就终于开始录了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:22",
      "text": "大家好，今天是2016年5月17日自弹自唱的第21集.",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:29",
      "text": "同时也是内核恐慌的第39期。我好吐。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:35",
      "text": "自弹自唱是全球首家用华语制作的字体白云主题播客节目。我是主播汶川西版东营剧eric，我是主播黄浦江边清蒸鱼，清蒸鱼。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:45",
      "text": "内核恐慌是IPNP网络旗下的IT技术主题娱乐节目。我们号称hard call，但是并没有干货。想听就听，不想听就别听我是吴涛。",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:55",
      "text": "我是real。惨了，我们在气势上已经输了，他们的开头好好华丽。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:00",
      "text": "对，他们还有开头配乐。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:04",
      "text": "不是他们他们有那个他们有那个那个，他们有自己的封号，你知道吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:10",
      "text": "对对对，那你们也可以来起一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:12",
      "text": "怎么办呢？而且我们两个问封号还是对仗加押韵的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:17",
      "text": "这个气势已经输了怎么办？",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:21",
      "text": "没错，咱俩赶紧想一个，我是莱茵河畔。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:27",
      "text": "反客服。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:28",
      "text": "你看他们俩一个西一个江，咱俩肯定要一个河一个海了，或者一个和一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:36",
      "text": "什么大西洋岸，什么太平洋彼岸。",
      "speaker": "发言人4"
    },
    {
      "time": "00:02:42",
      "text": "算了算了，咱还是不要去。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:44",
      "text": "存这个能耐，咱们俩是咱俩还是key pumble。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:48",
      "text": "对对对，今天是一期挺特别的节目，是我们这个自弹自唱和内核恐慌第一次合作。估计我们要做一系列。所以我们今天的这个系列特别系列，我们几个起了个单独的名字叫做curing panic。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:07",
      "text": "对你没有听错，curling panic. 而且中文名字。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:11",
      "text": "叫自弹自串，不是自弹自唱，是自弹自唱。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:16",
      "text": "对，因为首先我们是首先我们是串联了一下，然后这个字串也是string的一个翻译。其实curling panic我已经想到了一种症状，就是你在街上看到一个用西文排拉丁字母排出来的招牌，然后他curing非常的屎，奇怪就会产生对，就会产生curing panic这种心理。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:42",
      "text": "欢迎你来到中国，任何一个大城市的商场都可以看到crying panic的状况，不都可以引发你产生。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:49",
      "text": "可在中国坐地铁天津路。",
      "speaker": "发言人4"
    },
    {
      "time": "00:03:51",
      "text": "所以我每天都是恐慌的状态，是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:54",
      "text": "惶惶不可终日。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:55",
      "text": "我并没有，我觉得还好。这是type is beautiful和IPN之间的合作。从更深的这个主办方的角度来说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:10",
      "text": "好吧，那不是3比1。",
      "speaker": "发言人4"
    },
    {
      "time": "00:04:12",
      "text": "TIB虽然和IPN是有台合作关系，但是吴涛还是我们的，不是你们的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:20",
      "text": "好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:21",
      "text": "我操你怎么还在这里？",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:23",
      "text": "这个很重要。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:26",
      "text": "这当然重要了。上次我跟博物志串台的时候，婉莹就特别强调这点。到底吴涛是你们的还是我们的问题，但是归根到底肯定还是我们的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:34",
      "text": "吴涛是我们TLB的CTO。",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:41",
      "text": "还是你们。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:42",
      "text": "那那是所以为什么那个吴涛没有出现在type chat里面？",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:48",
      "text": "因为怎么说呢？就是这个CTO实际上是一个玩笑的头衔。因为我在TIV我最开始接触到type is beautiful的时候，type is beautiful基本上是一个两个人运作的vlog然后当时也是现在我们伟大的站长rax，再找一个程序员，就是又能那种我有一个伟大的构想，现在就缺一个程序员的那种感觉。然后我自自自告奋勇的自告奋勇的寄了简历给他，正儿八经的寄了简历，寄了简历给他。然后他审了一下说不错，你来做我们的城市，你来做我们的技术支持。然后我就帮type beautiful改了一部分东西，主要是布局，然后一些新功能之类的。其实一直到我相信一直到现在，我在网站上的那个抬头都是技术支持，所以我完全就是一个那种打杂的那种感觉，并不是CTO。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:01",
      "text": "然后我也只是在type beauty上写过一些主要是翻译的一些作品。比如说那个好吧，有也有自己原创的，但是主要还是翻译过那个电子体的原体的发明过程什么的。所以本质上我不是一个内容输出的这么一个角色。所以参加type chat其实是有点肯定会进入那种无话可说的状态。因为很多东西我只是可能对技术上有所了解，但是不管是审美还是什么历史渊源上就完全没有概念。所以我我我参加type c肯定会冷场的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:43",
      "text": "别谦虚。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:45",
      "text": "没事，但当然我要表个态，我的确是type beautiful的人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:51",
      "text": "关键时刻还是站队了哈那。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:54",
      "text": "是现在是一个战队的时代。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:58",
      "text": "我倒在他beautiful里面的好多文章，其实我也很受启发的。因为在德国，德国的印刷的排印的历史也是非常悠久的。像我那时候读什么关于长S那些文章，对，还有什么关于字体定的那些文章，都是非常受启发。而且咱们俩还翻译过很多东西，对吧？金新喜堂的那个活字字体讲座，当时就是咱们俩分工翻译的，对你翻译的汉字那一部分。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:28",
      "text": "对，这也是一个漫长的过程。就以我这个日语的水，我日语一直是哑巴日语用的，我有些假名我到现在都是不会念的。但是我真的用这种日语的水平翻译了两篇文章，我们都觉得非常神奇。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:44",
      "text": "我们多才多艺的舞蹈同学，咱们俩还翻过一本书，不是？对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:48",
      "text": "那个字体故事我们我居然翻译过一本书，这是什么样的黑历史？我的差点没有坚持下来。那本书没有当年。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:56",
      "text": "其实我觉得那那是放在那个东西文库里面的，然后我就觉得那个特别好。因为你是在德国，我在日本，但是咱们俩都不在国内，然后就翻了一个放到东西文库里面去。也算是名副其实的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:11",
      "text": "没错，这是一个非常一东一西，对一个非常跨国化的一个project。而且我们两个对，我和我和eric其实从来没有见过面。然后那个协同我们编你一定要爆这个料吗？很快。然后那个协同我的编辑也从来没有见过我们俩，你们两个后来见过吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:33",
      "text": "我见过周南。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:34",
      "text": "OK总之他们这个编辑部现在也在做一些非常有意思的事情，也不妨帮他们打个广告，就是他们在做一本叫做离线的杂志。可能我们的听众之间，听众中间已经有很多朋友听说过了。他们是在一个如今在这样一个数字出版泛滥的时代，坚持做线下杂志的团队。然后他们做的杂志也是dick，主要是geek主题，什么游戏未来、科幻之类的。感兴趣的朋友可以看一下，他们虽然号称离线，但现在还是有网站的。然后喜欢的朋友可以入。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:12",
      "text": "我好喜欢这个剧情。虽然不是什么，但是他们号称什么你好喜欢这个剧情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:17",
      "text": "我我我觉得我可能太久中文说的太少，很容易陷入一种就是使用一个套用一个固定句型的模式。我自己也发现了。挺好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:30",
      "text": "没事，我们我们这个节目可以锻炼你的中文水平。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:34",
      "text": "非常感谢。若有回国以后，是不是觉得自己中文的母语水平马上就回来了？",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:40",
      "text": "我们比较一个你在黑吗？比较明显的一个感受是以前节目老是念错字，就现在好像出现这种概率的要稍微。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:51",
      "text": "好一点会有帮助吗？我觉得国内也是比较腻人的状态。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:56",
      "text": "出现这种概率要稍微好一点的这本身就是个病。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:03",
      "text": "这你口语也无所谓。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:05",
      "text": "反正我到现在普通话也不好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:07",
      "text": "好不好？我们应该说一下这次节目主题是什么。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:10",
      "text": "对对对，所以我们的节目。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:12",
      "text": "英文名字叫colony panic，中文名字叫自弹自串。这个串台节目是我们TIB和IPN网络旗下的内核恐慌的合作节目。这次作为第一期，我们就应该讲一下，从应该有个主题，从用户敲击键盘开始到最终的打印输出，这个过程到底发生了什么？这是一个好长的一个过程。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:38",
      "text": "我已经在想到那个程序战。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:41",
      "text": "对，看到这个主题的第一反应是，这一期讲到了，这是为了感谢听众们的不杀之恩，一定要讲一千零夜的节奏感觉好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:54",
      "text": "我看到这个主题第一反应是程序员该怎么找女朋友。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:59",
      "text": "没有，上次就是因为real不在，然后吴涛自己一个很怨恨的女子就录了一期叫编码对吧？然后唯一一期就是和字比较有关系的一期节目，但是就自己一个人录的很不爽。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:14",
      "text": "看起来其实我们之前讲过编程字体的那那一期算是非常和type graf有点关系的主题。不过那个时候还没有你们的好好好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:26",
      "text": "所以还程序员也要关心字体的那做字的也要知道程序应该怎么运行。所以我觉得咱们的串台是非常有意义的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:36",
      "text": "的确。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:37",
      "text": "那就串起来了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:39",
      "text": "好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:42",
      "text": "基本上今天咱们第一次串，那咱们就从头到尾先简略的都把从头一个过程先说完。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:49",
      "text": "盖不下无数。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:50",
      "text": "大坑的坑就挖以后慢慢填呗。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:54",
      "text": "好吧。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:55",
      "text": "免得以后没有主题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:58",
      "text": "解决了BB节目最大的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:12:02",
      "text": "我们现在是选题过剩了怎么办？",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:04",
      "text": "我是谁啊？患不寡，不患寡患不均。",
      "speaker": "发言人3"
    },
    {
      "time": "00:12:09",
      "text": "那你们把和技术有关的主题给我们匀一半好吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:16",
      "text": "好，那你你们的努力多说一点。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:20",
      "text": "或者可以这样把real给你们，然后把争议给我们我们两个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:24",
      "text": "我们两个可以。",
      "speaker": "发言人3"
    },
    {
      "time": "00:12:27",
      "text": "怎么一回事？为什么会变物物交换。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:31",
      "text": "换搭档俱乐部。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:32",
      "text": "有的人人交换，贵圈真乱，对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:37",
      "text": "partner exchange听起来毫无胃口。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:42",
      "text": "更乱了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:44",
      "text": "好了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:12:46",
      "text": "我们这个少一点，下三楼。先先好像是我一直在吓到了。Anyway我们来来一点，先来一点底层的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:56",
      "text": "因为大家一开始就打开电脑是打字，这个字打到电脑里面去其实是什么样的过程，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:04",
      "text": "对，就我们可以从我觉得可以先讲一下历史渊源，就是世界上为什么有这么多种键盘布局？为什么就可能在中国待久了，你会觉得你会有一种想象，就是可能全世界的键盘长长得都这个样子。但实际上不是这样，尤其是在日本的朋友们可能会觉得我靠日文键盘实在是太复杂了。我第一次见到日文键盘真的有点震惊了。就是你能讲一下，日文键盘上有一个键叫做转换，非转换是干嘛的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:39",
      "text": "对我我到现在也不懂what。因为我一般都不去用那个键，而且是windows的标准是那样的。然后mac是不用的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:50",
      "text": "麦克上没有转换非转换这一件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:53",
      "text": "对，而且就是因为他们日文的键盘，它除它还有那个假名输入的键位，所以他一个键帽上面会有时候有时候会多达四五个字。他一个键帽上要印四五个字，所以那个日本的键面特别花，然后键位又不一样。所以还好在日本买mac的话它是有选择，然后我在日本买，我都会选择美国的键盘US要不然的话我就疯掉了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:21",
      "text": "对，因为我之前在德国也有提到，我们之前在那个内核恐慌也提到过这一期就在德国的时候，那个德国的键盘也是挺奇怪的，不是那种标准的美国键位，就国内用那种。然后当时我也是在德国待的时候，为了买那个美国尖锐的，还专门需要订，就是要特殊订一个单，然后等他送过来。然后在日本的话，因为现在海淘也比较方便，很多人也去日本买这个电脑、笔记本之类的。好像也有。经常我看到有人买到一个这种日文键盘的笔记本回来，然后用起来挺不方便的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:56",
      "text": "对的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:57",
      "text": "其实我们刚才谈到的这三种布局，就是世界上最主流的3种布局的。一种是国内的所谓其实就国内的这个键盘布局是以北美为主的一个布局，叫做ANSINC布局。然后它最大的特点其实就是那个return竟然是一个扁平的长条，它只是比别的键宽一点。然后在德国real提到这种键盘是所谓一艘键盘，也就是国际标准化组织规定的键盘的。比如说不一定只有德语用，法语，包括英国其实也在用这种E制式的键盘，它好像要比NSI多出一个键来。然后它最大的特征是那个回车键是一个倒L型。然后日本的这个标准，当然这个好像应该是GRS标准，就是japanese industrial standard的标准。然后它也是一个好像也是一个倒L的键盘，但是它的键还要比一手多出来一个，如果没有记错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:04",
      "text": "的话还要多。对对对，还要多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:08",
      "text": "所以在日本的话，其就是普通的日本人，他们是用什么？用那个日文键盘，应该键位。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:14",
      "text": "是差不多的。日文键盘和美国键盘他们也是用这个quality。哼在英文字符的键位是和美国键位是一样的。什么后面那些括弧，那些那个位那位置的安排是不一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:31",
      "text": "然后绝大多数的日本人现在都使用他们罗马字拼音进行输入，虽然日本剑卫也支持他们直接的那个叫假名输入法，就是按一个键就可以输入一个假名，有这样的输入。但是我见过的就是活人，我见过这么多日本只有有且只有一个人是有那样的假名直接输入的。因为他要去被那个假名放在在哪个键位。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:00",
      "text": "所以原来日本人现在已经不用假名书。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:04",
      "text": "就跟那个15比差不多.",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:06",
      "text": "应该说跟注音符号差不多，就用假名输入的人跟台湾用注音符号输入的人差不多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:13",
      "text": "但是对他们就是把这每一个假名分配到这个键位上面去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:18",
      "text": "对，那不够分。",
      "speaker": "发言人4"
    },
    {
      "time": "00:17:20",
      "text": "对，够的。他们就是重复。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:23",
      "text": "都用到了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:24",
      "text": "假名一共有多少个？",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:25",
      "text": "然后还有在50 50音图，五十音图有50个.",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:28",
      "text": "但是实际上常用的不到50个.",
      "speaker": "发言人4"
    },
    {
      "time": "00:17:31",
      "text": "那就四十多个也不够。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:32",
      "text": "然后他还有平假名，还有片假名，还有所以还有剑之类的组合。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:38",
      "text": "没错，是的。对你这普通键盘上你加上英文26个，加十个数字也才36，再加一堆符号不到50.",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:47",
      "text": "差不多四十多个。他把那个就有组合，他把什么冒号、右括号、逗号、大于号、小于号全都占了。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:59",
      "text": "差不这里有十个，那刚好。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:02",
      "text": "所以特别花。大家如果去看那个日文的机子键盘标准的话，就他那个键帽上面特别花，写满了字。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:08",
      "text": "然后我记得好像有些还是写在侧面的。如果兼容是比较那种高的，不是那种就称为巧克力键盘。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:14",
      "text": "真的吗？",
      "speaker": "发言人4"
    },
    {
      "time": "00:18:15",
      "text": "那是HHKB，没有，那个是法语键盘，法文键盘就是法文键盘的。他们数字的话默认的话他们是打出符号声调的符号，然后要按shift键才能打出数字。然后有的时候还要必须按左alt还是说右边的的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:33",
      "text": "对，右边有L右边叫out graphic，就是你要打出一些图像符号的时候要按。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:40",
      "text": "所以才会扭曲的出现那种20进制的技术原则。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:47",
      "text": "不要再黑马。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:49",
      "text": "云数字好吧。那那所以其实在日本工作的程序员，他们用这个日本键盘输入的话，会有比如说编程会有障碍吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:01",
      "text": "会，因为就像我到现在为止，有时候还会找不到键位，而且像在美尤其是那些符号类的。然后像括括弧的话，在美国括弧美国键盘上面括弧都是左右对称的对，9和0的1对一对的。但是在日本键盘的话，它那个中括号它是上下的，就不是左右相邻着的，所以有时候就按的会比较麻烦。然后还有一些很坑爹的，就是当年早期即使把阿里转过来的时候，他把那个日元符号和他把反斜杠的一个马位换上了日元符号。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:39",
      "text": "阴天哪这。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:40",
      "text": "是一个，对，明白了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:19:43",
      "text": "但你不觉得real，这解决了一个童年的疑惑吗？就是有时候你有你小时候玩日本游戏的时候，它的那个路径分隔符是一个in的符号。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:52",
      "text": "对，在windows他们的那个路径默认是用反斜杠，所以在当年早期的那个windows的日文版的时候，他们路径就是一大堆的。日元符号好多钱。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:05",
      "text": "好吧，不过日元也不知道他其实是共用了一个什么编码。是这样子。",
      "speaker": "发言人4"
    },
    {
      "time": "00:20:10",
      "text": "他就是他当时把asking拿过来的时候，把ask的那个斜杠的那个马尾大哥给他换成那个日元符号了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:21",
      "text": "那应该是编码没有编正确。",
      "speaker": "发言人4"
    },
    {
      "time": "00:20:23",
      "text": "这不是一个正不正确的问题。就是你那个时候日文只支持假名和26英文字母，所以如果你要把你要把256个字符用上的话，其实是完全够的。就是日语在当时不支持汉字，但是支持所有的评价平假名和片假名，然后可以全都压缩在256个字符里面。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:45",
      "text": "他也是八位了，它不是七位，就是这个a bit的编码ask是七位。",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:52",
      "text": "对，asker是对，ask是七位。然后它就相当于这是日本的西欧扩展，西欧扩展对，修东西或者就是把第八个用上。对，然后日本当时决定使用一个最不常见的符号来替换掉，替换成in的符号，就把反斜杠给你替换掉。因为反斜杠实际上在日常生活中是非常少见的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:16",
      "text": "就除了windows在用吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:20",
      "text": "就除了编程需要接触到，基本上日常生活里面没有一个地方用到反向的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:26",
      "text": "没有，编程在反斜杠里面，就是哪个语言里面讲的是用反斜杠的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:32",
      "text": "转向杠不是转移符吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:37",
      "text": "对，但这个不算常用，就写转移符的时候。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:41",
      "text": "转移符不常用，我觉得还蛮常OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:44",
      "text": "然后就是windows的路径了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:46",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:46",
      "text": "那应该是这样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:21:47",
      "text": "没错。然后我那时候就开玩笑，我在笑上海地铁的他们公共标志的时候，比如几号线到货的，几号线，他们用的是反斜杠。就对上海的那个地铁，比如说此处转二号线和三号线2-3的时候，他用的是反斜杠。就整个上海全上海的地铁线路，他们的那个指示系统都是这样的用的。所以我那时候我就笑，我那时候贴出去的时候，我把这张照片给美国人看啊，给日本人看。然后我说这是我在现实社会生活中第一次看到反斜杠如此大量的使用，然后日本人就笑的不行了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:23",
      "text": "真的，这好像觉悟的事情。对，对他可能是个左撇子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:34",
      "text": "但是但中国的左撇子好像小时候会很惨，会逼着用右手写字。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:39",
      "text": "会被作为另类，就是家庭纠正。",
      "speaker": "发言人3"
    },
    {
      "time": "00:22:42",
      "text": "钱正明你是左撇子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:44",
      "text": "我应该是，但是我很小就被很多的调整过了。OK, 所以你现在所以我也搞不清楚究竟是左右都行，还是纯左。你现在是双桥手是吧？没有，就右边稍微顺一点，左边还是能干很多比较需要力量的事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:23:03",
      "text": "你居然能训练成右手比左手灵活，这个实在是天哪，这不是压抑人性吗？不是，好吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:14",
      "text": "刚才说说到左右的键位的问题的话，像韩文韩语他们的这在分配键位的时候，他们就是左右搭配的。他们把辅音全部分配在左手，然后元音全部分配在右手。所以在他们在打韩文音节的时候，他就辅音元音互相搭配，肯定是左右这样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:33",
      "text": "搭配的那不是效率很高。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:35",
      "text": "这样左右了应该差不多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:38",
      "text": "对，所以其实这个键位映射的时候是分配的还是很需要一些技术的，要不然的话到时候打字就很很痛苦。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:46",
      "text": "中文那个五笔分配的时候有什么讲究吗？好像也忘了没有。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:51",
      "text": "中文五笔就是从那些字根从QWRTY这么分下来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:57",
      "text": "就没有什么讲究左右分布的这种。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:00",
      "text": "问题题没有，他就直接好像还是有有一些的确定吗？我记得好像是中间区域是比较常用的一些偏旁。",
      "speaker": "发言人4"
    },
    {
      "time": "00:24:08",
      "text": "就是还是离离那个home road最近的是最最高频的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:14",
      "text": "然后还有一个通配符是Z是吧？Z什么都没有吗？有个通配符？没错，行，咱们是不是要整理一下？就是说从键盘然后键位，然后这个键位的映射，这三个不同的东西大家都应该在先整理清楚才对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:31",
      "text": "OK首先键位先说布局，键盘我们接触的键盘有实体布局，就是所谓十几部剧。就是你看到的这个键上面印着什么样的字母，以及这个键每个键的位置和形状是什么样的。这个基本上是各个国家民族文化传统的一部分。就是当他们西方国家出现打字机的时候，每个国家的这个打字机的键位都是不一样的。然后这个传我基本上就延续到了电脑时代，当然有些国家因此就被坑了。比如说我记得好像是波兰的键盘分为两种，一种是对一种是北美传过来的IBM兼容机时代的键盘，另一种是他们自己的那个波兰语键盘。然后波兰语键盘就非常的坑爹，所有的程序员都选择了使用美这个英语布局的键盘。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:27",
      "text": "然后除了实体布局之外，还有所谓的功能布局functional lives。然后这一层布局是大部分时候对于大部分人，对于这个世界上9% 99的人来说，如果你不是程序员，然你对英语键盘没有特别的偏爱的话，基本上功能布局就是你的实体布局。就是你按下那个键帽上写的反斜杠键，可能在你屏幕上就应该出现反斜杠，但是这是对等的。对，但是在其实在几乎每个操作系统里面，它都支持把你的实体布局映射到另外一个别的功能布局。也就是你对于中文用户来说，就是你在中文输入法和英文输入法之间切换的时候，其实理论上是切换了一个功能布局的。只不过对于拼音输入法来说，除了功能布局之外，上面还有一层输入法。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:22",
      "text": "但是对于其他语言的人来说，比如说当我在一个德语键盘上编程的时候，如果我觉得这个布局实在是太坑爹了，那我可以选择说让操作系统把功能布局设定为英文。这样当我在按比如说德语的那个O上面加两点在这个键的时候，它会变成分号。这个会省一些，不省一部分。是，但是有些键的位置还是不一样的。比如说那个反斜杠在英文布局上应该是在into键的上，但是在德语键盘上，反斜杠还是在左边的shift的右边。那么就是你可以改功能布局，但是实体布局还是会限制。这个功能布局到底能改成一个什么情况？",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:06",
      "text": "因为实体布局和你的物理上面，你看到的键帽上面印的那个字儿是一样的，所以那还好一点。但是当你改完功能布局的时候，就是你你实际上按的那个键和键帽上面那个字是不一样的。因为你功能布局改掉了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:21",
      "text": "所以我突然理解一件事儿，那个HHKB从日本出来是有道理的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:28",
      "text": "无刻印键盘其实在H10K之前就有，但那个好像也是一个应该也是个NC的键盘。对，但HKB的确是无刻印键盘里面最最知名的一个。应该是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:46",
      "text": "哼就你那款是我可以的。吴涛。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:48",
      "text": "那当然了，就我这样，我就不用发愁到底是德语还是英语。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:54",
      "text": "对，就是说只要键盘上没有刻字之后，你就可以随意的去调整你的那个那个键位映射，这样你就不存你可以忽略掉这个叫什么实体键位和是那个系统里面建立的这个差异了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:09",
      "text": "但换句话说，作为一个强迫症，你会活的稍微舒服一点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:13",
      "text": "我打个岔，一个是你可以把他的键帽拔下来交换一下位，我就是这么干的，就是我在我在用一块带刻印的HKB，我把那个ESC键和最右边的那个那个叫什么键。",
      "speaker": "发言人4"
    },
    {
      "time": "00:28:27",
      "text": "那个一个点to那个back back。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:29",
      "text": "对，就把那两个。",
      "speaker": "发言人4"
    },
    {
      "time": "00:28:32",
      "text": "位置换天，这纯手工。那我不知道你们实际上实际有没有遇到过就不用这个quote布局的，用过什么德沃夏克那个布局的，那个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:44",
      "text": "我没有，我有一个我的同事在用，或者说我的直属team leader在用，给我讲个布局。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:54",
      "text": "我觉得他们就是特别惨，对吗？就是每次他自己用他自己的设备的好啊，因为他要用别人设备，他每次都得换，还是干什么，他还是得强迫的去。因为这个世界上背景科技比较多。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:08",
      "text": "我觉得德沃夏克并没有快到哪去，说实话，但我觉得也是这个习惯问题，估计是不是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:14",
      "text": "如果说你你你我们认同那个说高频键要离烘肉比较近的话，其实应该就是德沃夏克他的一个逻辑就是这样。他的高频件比较好，它分布从那个钙统计概率上来讲，比较高频率的集中在这个home 6附近.",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:34",
      "text": "然后这个高频键是跟和语言相关的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:38",
      "text": "没错，和语言相关，和你的这个打的文本相关的。所以理论上应该是用一个无刻印的键盘，然后分析你打过的所有的基建历史，然后重新统计一下这个频率，然后再来排一个适合你的这个layout.",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:54",
      "text": "对，你的专属了，好吧，从你的专属字体到你的专属输入法。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:00",
      "text": "然后现在叫专属，就是每个人都有自己的键位，这个就傻掉了，没法通用。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:08",
      "text": "如果大家对这个进功能布局是不大熟悉的话，如果大家可以其实到操作系统上看一下。在键盘的那个属性上面，它有各种文字，它有各种各样的那个可能如果不注意这个功能的朋友，他们从来就没有见过其他布局，所以去看一下看那个设置一下就可以知道。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:29",
      "text": "非常有意思。Windows有吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:31",
      "text": "都有也有也有有有有的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:34",
      "text": "反正你在如果你在OSN里面改变输入源的名称的时候，它会给你一个这个输入源看起来的键盘的布局大概是什么样子。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:45",
      "text": "对他直接会把那个那个键盘的显示出来，对吧？连那个键位都会显示出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:50",
      "text": "它好像windows有吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:52",
      "text": "Windows在那个输入法里面也可以调，但是挺麻烦的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:57",
      "text": "但是它会不会显示这个好像没有界面预览？",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:01",
      "text": "这个已经没有了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:02",
      "text": "对，建议预览应该是只限于系统自带的那些输入。",
      "speaker": "发言人4"
    },
    {
      "time": "00:31:06",
      "text": "不是就是在做预览。首先你得先和你的那个键盘的形状要保持一致。Windows那么多奇形怪状的键盘，它可能没法做预览。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:18",
      "text": "好吧。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:18",
      "text": "原来是坑在这。那你看那个同OS ten里面的那个电容预览，它其实画的是一个标准的麦克蓝牙键盘的那种结构。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:29",
      "text": "就以你现在使用的那个这个我现在用macbook，macbook pro，我现在的这个键位为基础的映射。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:37",
      "text": "吴涛，你要可能看一下，你看一下你先你是买了一块叫什么最新的蓝牙键盘。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:43",
      "text": "是不是我买的这个叫做英语歌曲？",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:46",
      "text": "不是，但是就是是最新的，不是那个插电池的，是自带电池的那个是吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:51",
      "text": "对，没错。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:52",
      "text": "然后你看一下那个界面预览里面，它的那个方向键是什么形式，倒T字形吗？还是怎么样？",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:58",
      "text": "没错，是两个被缩小的键，所以它对，但是使用了我当前那个键盘。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:03",
      "text": "的确OK然后。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:04",
      "text": "他只要是自己的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:06",
      "text": "东西的话都是那样的，没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:09",
      "text": "等一下好像有个不一样，像现在最新的那个自带电池的，就是内置电池那个苹果蓝牙键盘，那个方向键的左右是全高的了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:18",
      "text": "不是半高的了，是全高的，是全高的。我在这个键盘缩略图上看到的也是全高的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:24",
      "text": "那我看到的，因为我是那个是上一代的，我看就是半高的左右键。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:29",
      "text": "就是他跟当前设备的样子画出来的。我们又发现了一个细节，这个可以给郭粉们去吹一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:38",
      "text": "可以发给什么tiny little什么little details什么那个那个网站叫什么来着？",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:44",
      "text": "不知道有有个网站专门。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:46",
      "text": "去去收集这种设计上面的小心思。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:50",
      "text": "Ok所以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:51",
      "text": "就是苹果它能做预览，就是因为他知道你接入的是哪个设备，然后他知道那个设备的那个键位的实际的布局，再给你叠上去，你会觉得没有什么意外吗？对，所以这个时候我想起那些，就是现在不是有一些游戏键盘上面，它是那个那个键帽，它没有刻字，它是一个小的LED屏幕。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:14",
      "text": "之前叫什么叫一个很高大上的名字，什么prime optimus之类的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:20",
      "text": "反正一个就是真的就是它每个等于是每个按键的就是一个小屏幕。它可以根据编程的方式改变它上面显示的内容。这样就解决了刻印没法变换，但是没有刻印，有时候又看一下不方便的难题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:34",
      "text": "对，而且那个键盘是彩色的，然后可以比如说你在用photoshop的时候，直接在那个键上显示，这对应于photoshop的那个功能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:43",
      "text": "对对对，没错，还有或者是一个缩略图之类的，挺帅气。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:47",
      "text": "的对，但后来我记得那个键盘只是量产的，只是定限量版的，就大概出了1000 2000副。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:54",
      "text": "这样你太贵了。你每一个键盘都要做一个小屏幕，每个按键都要做小屏幕，其实挺。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:00",
      "text": "麻烦的对，好，我觉得我们有点朝这个键盘恐慌的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:05",
      "text": "没有，但这个是一个文字输入的基础，刚才说了一些我们都是讲的实体的键盘怎么样。那你没有想过在现在触屏上那个软键盘是不是就没有这个问题了？",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:16",
      "text": "对，其实对软键盘其实要比实体键盘简单很多，它它只是一个再再或者说是在实现原理上要简单很多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:25",
      "text": "它就它不存在那个键盘的什么，那个叫做扫描码，是不是？我一直没有理解这个概念到底怎么一回事？没错。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:32",
      "text": "对，你们把扫描码这个东西跟大家解释。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:36",
      "text": "好吧。其实键盘本身是一个非常复杂的数模转换系统，就是你把魔术转换系统应该叫做，其实每一个键盘都是一台非常小的计算机。因为每一个键盘在，尤其是USB键盘，在这个按下键之后，把会需要一个芯片，把按下的键的电信号转化成计算机能懂的一个码，然后这个码就是扫描码。它为什么叫扫描码？就是因为在键盘里面的这颗芯片，它所做的事情就是去扫描一个是八乘多少的网格。然后所谓扫描它的确。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:19",
      "text": "就是网格，横纵多少列对吧？就是那个网格。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:23",
      "text": "对，我忘了具体的数字，但是基本上就是先先看第一排，然后第一排把每一列扫一遍，然后看第二排再把每一列扫一遍。然后这个扫描的速度非常快的，像电视一样。你在你以为自己同时按下了两个键，然后计算机上也说好吧，你同时按下两个键。但实际上这个过程是，他看先看第一排的第六个第六列，然后被被按下来。然后他扫描到第二排的第七列，发现也被按下来。然后他会说好这个用户同时按了两个键，但实际上这一切都是顺序发生的，然后这个过程就叫做扫描。然后这个过程扫下来的一个位置会被转化成一个操作系统，可以懂不不是操作系统会懂，主板可以懂得电讯号，然后这个电信号本身就扫描码。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:14",
      "text": "而且很关键，就是在这个层在这个步骤的时候还不知道是什么字儿，只是这个位置的那个点阵位置的那个键被按下去，这个信号被传过去了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:24",
      "text": "对吧？对，然后是由计算机操作系统来决定按下去的这个码到底代表什么字符的这是这是这已经是一层映射。其实就是绝对于绝大对于绝大多数键盘来说，这是有个标准的，尤其是在PS2时代，就是我们的年龄小的品种见过PSR是什么样的？PSR是一个看起来很奇怪的接口，然后这个接口有异议。我当时应该是支持三套不同的扫描码。就是根据这个主板和操作系统要求，他可以送3种不同的扫描码来，但是基本上后来就归一成一种了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:05",
      "text": "然后在这个扫描码里面，我记得之前不是有什么control改capp slog吗？你要把cap slog改成control键的话，你要去在操作系统层层面，尤其是在windows里面，你要把两个人扫描码兑换。比如说3A代表control ED这都16进制的数字了，代表caps lock。然后你把这两个扫维码换一下，你就会发现你按下去的那个cap slog变成了control，其实就是这么来的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:34",
      "text": "但是在后来到了USB时代，绝大部分USB键盘都支持所谓human interface device protocol。然后在这个protocol里面就规定了说在USB上传来一个什么样的信号，对应于一个什么样的按键，或者对应于一个什么样的扫描码。这套扫描码跟psl时代是不兼容的。但是蓝牙键盘则直接就是把USB的这一套HID的编码用套用过去了。所以在某种程度上，你的蓝牙键盘其实是一个一是一个USB键盘。就是在解码这一块是完全按照一个USB的human interface device来解码，大概就是扫码的概念。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:21",
      "text": "所以他的那个所以它的码位最后就是传到主板以后，然后再根据刚才说的那个键盘，就是那个mapping，然后再来让操作系统知道它打下去是什么字儿。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:34",
      "text": "对，其实操作系统决定说你按了这个键带对应了一个什么样的字符。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:40",
      "text": "对，由操作系统来定对。好了，我们终于可以把这个信息传到操作系统。那操作系统接下来做什么事情？",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:52",
      "text": "操作系统接下来要做的一件事情，实际上是跟键盘扫描码没有太多的关联。我应该这么说，我们刚才介绍了说从键盘传一个字符到操作系统。然后现在操作系统其实面临一个问题，就是操作系统把这个字符显示出来，或者说要把它存在内存里面。那这又一这又涉及到了另外一套编码的问题，就是你以一个什么样的规则来告诉一块儿内存里面的区域，或者是一个硬盘上的一个小区域，说我要把这个A存下来。这个时候其实是涉及到了文字编码，但是文字编码跟键盘扫描码其实完全不相干。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:44",
      "text": "对，键盘扫描码就专门就是为了键盘，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:47",
      "text": "对，键盘扫描码是为了计算机知道用户按下了什么字符。但是接下来讨论的这个文件编码，则是要让计算机决定在存储某一个字符的时候，应该把它存成什么样的形式，或者说用哪个数字来代表这个用用哪个数字来代表这个字符串。对然后在早期也是有很多种字符存在。比如说我觉得IBM有一种自己的字符串编辑是自己的字符编码，叫什么来Q什么编码。但是基本上现在最通用的一个或者最最基本的一个编码叫做asi编码。我相信可能很多朋友在学编程的时候都背过这个码表，包括我也背过，但是我现在已经忘光了。97是什么？九十七好耳熟。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:46",
      "text": "97是字母B是吗？不是A吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:51",
      "text": "忘了C是A吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:54",
      "text": "当时也是背了好几个，就是最常见的那。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:57",
      "text": "我只记得65是A但是65加大小六好像大小写。对，65是大写的A但是97减65好像不是。对对对，大写和小写之间还有一堆特殊符号，应该有。所以不一样，97减65是32，所以那应该的确是小写3。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:18",
      "text": "因为它那个SB的码SK表其实是也挺巧妙的。就是你如果你遇到一个键盘，如果你遇到一个码的话，你把这个第五位如果是零，你把它变成一，就可以让它变成小写字母。对，这在当初的这还在很多人还在操作比特时代的时候，这是一个非常重要的feature.",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:43",
      "text": "没错，所以十进制97是SK的小写字母A没错，我查了。还好我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:51",
      "text": "我说对了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:54",
      "text": "好紧张。你们紧张什么？这已经是对，其实计算机里面有非常多这种背下来很屌，但是好像平时没有什么用处的知识。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:08",
      "text": "其实没有什么卵用。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:09",
      "text": "有还是有点用的。你看你现在做很多这种网络协议的解析的时候，你看到那个那个16进制hex的方式表达的那个那个数据包的时候，对吧？你看看97马上要出那个，你就知道后面是那个可能是一个principle characters，or就是有东西要写出来了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:31",
      "text": "97是10进制，你要先把三进十六进制背下来才行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:37",
      "text": "对，对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:37",
      "text": "就你把16进制是61。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:42",
      "text": "好。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:43",
      "text": "我们不要这么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:45",
      "text": "喊靠了。好的，SK大家也有一个八位和七位的问题，就是我们一个bite是256个，可能性就八位的八个位的bit，但asked只用了其中的七个位。就顶着他那个高位其实还有点。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:06",
      "text": "讲究的对，就因为还多出来这一位，这一位最开始是为了扩展准备的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:13",
      "text": "对，很多拉丁文字都可以通过这一类的方法来把他们的一些字母表的大部分表达出来。比如德文就是这样的方式来实现对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:26",
      "text": "对，有一个其实西欧所有语言都可以用这种方式来实现加个字符就叫做拉丁一扩展。对，基本上不超过。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:37",
      "text": "元都它有，所以它的原理就是那位是空着的。如果那位空着的就是普通落回到普通的SK这个原最原来的一个码表，对吧？然后那位空空上去以后，然后就可以扩展其他各种。当年是各个国家还不一样，所以各种各样刚才也说了，所以日本的话他就是把这个扩展为他当年的半角片假名。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:04",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:05",
      "text": "只有半角，而且只有片假名。对，半价。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:09",
      "text": "因为他只多出来128个位置，你也放不了多少字符进去。",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:15",
      "text": "好吧，但是好像五十音、图片假名、全假名。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:21",
      "text": "片假名平常都都可以加进去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:29",
      "text": "所以因为平假名。",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:30",
      "text": "应该没有什么绊脚的需求，可能在实践中应该经常用这个标准半角显示的，只有片假名会比较多一点。",
      "speaker": "发言人4"
    },
    {
      "time": "00:44:42",
      "text": "我觉得可能也是因为那个时候使用外来语写的情况也比较多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:49",
      "text": "当年就就像像写电报的时候，写电报的时候，日本传统的电报就全是都用片假名的。而且比如说它有着音点，咔加个浊音点就变成。那浊音点，它就是浊音点是另外一个字符串，所以它是两个字就变成OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:07",
      "text": "所以这里有一个问题，就是像日文这种情况比较特殊，就是它同样一个意思，他可以用几套不同的方式来表达。",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:16",
      "text": "对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:18",
      "text": "比如说有各种不同的写，有用汉字写的话，你也可以用什么什么各种假名的方式来写的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:24",
      "text": "天皇诏书不是只用片假名写吗？我听说。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:27",
      "text": "那天皇。",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:28",
      "text": "诏书没有，南当时就是用汉文汉字，就日本汉字加片假名这样写。OK所以最开始。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:37",
      "text": "那个就是电脑或者说打字机传入日本的时候，因为汉字这些毕竟表达起来没有那么方便，他们就说是不是选择的更加容易表达的这种假名的方式来写。",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:50",
      "text": "因为假名是那表英文字，所以在最早有电报的时候还之类的，至少要先把这个声音传过去，就内容要传过去。那这个表记法，那是其次的问题，所以他们就先把假名给放上去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:05",
      "text": "OK. 那那有一个问题是这样，就是说如果说假设日本所有的日本汉字都可以用假的方式来写，那还有什么必要再接着写那些更复杂。",
      "speaker": "发言人3"
    },
    {
      "time": "00:46:17",
      "text": "的方式吗？这个好像用拼音写中文。",
      "speaker": "发言人4"
    },
    {
      "time": "00:46:20",
      "text": "有歧义的很难读，就很难读，有时候会有歧义。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:24",
      "text": "OKOK明白。",
      "speaker": "发言人3"
    },
    {
      "time": "00:46:27",
      "text": "但是问题主要是real这个问题是汉字一开始就是一个外来语，对于日本人来说他就在没有假名的时代，或者假名这个词怎么来的？就是跟日本人用汉字来代表他们固有语言的读音。所以反过来你可以说，如果当初没有中国的话，那日本也可能今天是在用拉丁字母来表现其固有沅的读音。或者像韩语那样说不是必须的。明白，对，但他走的是另外一条路，韩语是他自己发明了一套。对，是林正英来来来去表达其固有语言的读音。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:07",
      "text": "但问题韩语和日语最大的问题就是他们有太多中文介词了。然后这个中文介词有可能是没有固有读音的，就没有训读的。你你但你全靠印度的话，就有可能产生没有汉字就一定会产生歧义的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:23",
      "text": "问题OK对，这个借是借东西的借，不是那个proposition，那个介词，那个介词是假借的借。而且就日文的它的那个原因太简单了，因为我只有五个原因，所以它的音系越简单，它的同音词就越多。所以在日文里面它还多，所以他们没有办法废除汉字OK因为同音字实在是太多了，韩文还稍微好一点点。所以现在朝鲜和韩国他们就尽量是不写汉字。虽然他们词都是汉字词，但是他们可以尽量不写汉字。只有在会发生歧义的时候，还有写人名地名的时候，他们会把原来的那个汉字写出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:09",
      "text": "对，这就是为什么很多韩国人的人名一开始没出名之前和出名之后是不一样的。就因为出名之后韩国人会站出来说，这个人的名字其实汉字写作。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:20",
      "text": "什么什么就显得很有文化是吧？还考了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:23",
      "text": "一下日语，好像也有这样的问题，就是有些人的名字没有汉字，只有假名。以前有什么泽尻惠理香。对，我记得这么一个人。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:37",
      "text": "帮我一个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:39",
      "text": "对，首先他的姓比较有意思，但是他他的姓其实是汉字，就是日语里面就写了泽尻两个字。然后惠里香是他刚出名的时候中国人给他翻的。后来他专门进入中国市场了，他的那个经纪人才出来证明说，这个人的这个日本人的汉字应该叫做泽尻英龙华。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:02",
      "text": "殷文华是他专门为中国市场起的一个汉字。对他之前的这个名只有假名。",
      "speaker": "发言人4"
    },
    {
      "time": "00:49:09",
      "text": "那就只有音没有字，所以要用什么字？",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:14",
      "text": "OK这个我们。",
      "speaker": "发言人3"
    },
    {
      "time": "00:49:15",
      "text": "越扯越远了，赶快收回来。我们刚才说的是编码的问题，同学们。所以ask有一个马，上面有一个位它是可以扩展的。说到这边没有继续。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:31",
      "text": "好像他讲到哪里了，编码问题。刚才我们讲的那个eski，然后和他的扩展拉丁一，就解决了一些拉基于拉丁语系的国家的常见的编码问题。但是遇到像不管是中日韩，还有一些可能其他的就大字大字符集的这种语言的时候就搞不定了。所以在unicode就上次你单独单口的时候讲过那个事情，出现之前，就各个国家和地区还是有自己不同的标准的。比如说中国所谓的这个GB国标系，对吧？还有日本那个GS多少号我忘了，还有好像还有一个什么call的什么KOR，什么什么标准的KS2KS的KOK。",
      "speaker": "发言人3"
    },
    {
      "time": "00:50:12",
      "text": "就是就这一套都是解决了同样一个问题，就是说把把一个国家的一些他们就比较标准的一套字符集映射成为一个数字。然后再把这个数字通过某一种方式，因为这个数字是抽象的一个数字，就是123456。然后再把这个数字编码成计算机能够识别的一个beat patter对吧？二进制的一个表达。",
      "speaker": "发言人3"
    },
    {
      "time": "00:50:36",
      "text": "OK。所以这也是一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:39",
      "text": "编码的过程，过程没错对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:41",
      "text": "所以还是从而且当年当年。",
      "speaker": "发言人3"
    },
    {
      "time": "00:50:44",
      "text": "各个国家不一样，所以就编的那编的号都不一样。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:49",
      "text": "就当我们现在其实现在在windows还是有这个问题，对吧？现在大家经常说你用mac的话，windows上面能传给你一个什么文本文件，打开怎么全是乱码。",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:00",
      "text": "就是用sip就是你用mac内置的那个zip来解压一些windows上面压出来的zip的时候，你会发现解出来的都是乱码。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:10",
      "text": "对，这就是因为当时他们在原始的时候是可能是用的GB或者GBKGB2312，还有GB18030这几个国标的方法来变。还有就是像港台，台湾，台湾是big five.",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:25",
      "text": "香港当初用什么我现在不记得了。像我记得那个时候就是为了看一些繁体字的文本，好像要手动在网页上选取编码的时代。哼香港和台湾用的那个编码还不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:40",
      "text": "台湾是big台湾肯定是台湾肯定用big five。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:44",
      "text": "香港大五马大五马。看看香港在那个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:48",
      "text": "然后我只记得香港有个什么大舞的空空SCS，就是他们自己扩展。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:56",
      "text": "对，就是叫了一个名字。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:57",
      "text": "没错。",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:58",
      "text": "CS是一个字符集，但是编码应该还是用的big five。",
      "speaker": "发言人4"
    },
    {
      "time": "00:52:03",
      "text": "对，没错，它在big five的基础上，然后就加了一些他们就是香港一些。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:08",
      "text": "对，应该港澳台基本都还就是曾经都是用big five，但是他们的字符集各自有一套。像其实像澳门也有自己的一个MAC叫的那个什么information system character set.",
      "speaker": "发言人4"
    },
    {
      "time": "00:52:24",
      "text": "这个是相当混乱的一个状态。然后因为大陆刚刚也有讲了自己那套国标的体系，后来是有一个所谓的unique的CJK统一的一个过程，统一的过程就这么high unification对不对？",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:40",
      "text": "像比如说在那个GB我们自己在国内是用GB，比如当年我们是分第一低低水准和常用的第一级和第二级。一级汉字、二级汉字，汉字是三千多个。一级汉字用英对，用音序排的，二级汉字用笔画部首排的。对，所以肯定是从阿字开始排，像阿姨的阿这个字在GB里面的，在GB里面就是很前面，就是汉字区位的最前面。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:10",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:12",
      "text": "在什么什么B0A1还是A2，就是从那个区位开始排的。是，但是你说所以这个区就当年就还有区位区位码的输入法。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:23",
      "text": "区位就你直接记那个字库里面的那个字号。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:28",
      "text": "这个谁会去记这个？输入法区位码我不知道，反正区位码其实跟什么四角号码输入法之类的有一拼的。你要是一个熟练的排字工人的话，那可能常用字的那个数码在你脑子里面是可以建立起一对应。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:45",
      "text": "的标准数码。刚才发电报的时候不是用的这个方法。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:49",
      "text": "没有电报码，是另外一个电报码，区位码是完全就是按照GB的这个区位来算的。那个不去查是肯定没有办法。因为本来一这个编号，编码就是编给计算机用的，给人看的电报码是电报码发电报，当时邮局系统用那个电报的是电报码OK，然后四角号码的话是根据那个汉字的上下左右那四个角的笔画了，所以那个是直观的可以看的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:14",
      "text": "市场号码是多少make sense你可以猜，但是区位码是你要没见过你就不知道了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:19",
      "text": "就必须就要你要一个表来，就本来就变得号是给电脑去看的，不是给人看的。这个趣味。所以就同样的汉字的话，因为比如说他可能在中国是常用的字，所以他中国给他在这个表里面，在GB的表编了这样一个号。但是在日本的话就变成另外一个号。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:40",
      "text": "虽然是同样的汉字，比如说笔画一的一一横，这个一，所以后来在做uni k的时候说叫全球大统一，大家统都是大家庭，那汉字本来就这么多，那为了节省马渭干脆就能统一就统一了。所以在统一码uni QLD的时候，对于他们叫CJK idio graph对吧？对，CJK表意汉字表意符号，这个区的话就尽量的当年就把这几这些这几个就是东亚系统的几个汉字的统一起来了。当时管这个叫包，这个叫有一个术语叫包容还是叫包舍。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:21",
      "text": "就是同样的汉认同原则，是认同原则吗？",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:25",
      "text": "就是如果你国认为你国的这个字和我国的这个字是同一个字，这两个字就可以合在一起。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:33",
      "text": "对对对，但是问题就是如果比如说像一体字东西，在于你国的这个是分开的话，那我说到unicode也必须得分开，要不然就会有一个向后兼容不行的问题。对，是这样。所以就当年好像就在在那个基本文那个啥基本文平面，基本多语言平面的这个低级的这个CJK统一表意符号里面的这个东西，那就是基本上差不多统起来了。但是问题就是统的那个规则就特别的不明确，有的该捅的不统，有的该分的不分，就是这样子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:12",
      "text": "所以现在比如说国内可能还是在用GB这套比较多，特别是在windows上面的平台上面。就在日本和韩国的话，现在用uni QLO编码的是一个常态吗？还是说还是在沿用自己老的什么JS那套标准。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:27",
      "text": "windows，还是用计四还是这样子的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:30",
      "text": "就只有在max上面是用的unicode。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:35",
      "text": "首先OS ten的话，从最开始OS ten一开始诞生的就是unique的内核。",
      "speaker": "发言人1"
    },
    {
      "time": "00:56:40",
      "text": "对吧？这个有两码事儿。第一个就是说因为windows上面其实也是unicode内核的。它只是说在习惯保存成文件的时候，它有一个编码的过程。这样的话在那个起码在我中文的windows版面，现在默认的应该还是用的这个就是国标那套标准GBK。然后你可以选择手工存在UTF8，然后它会有一个bom在前面一个标识这个东西。但是我不知道在日日本的话，就是目前大家用的常用的操作系统里面是怎么一个做法。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:12",
      "text": "如果我我虽然也不怎么用windows，对，但是据我印象的话，好像也是在他们也是默认GOK.",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:20",
      "text": "还是日本windows在unio的unification之前的做法保留下来了吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:26",
      "text": "对的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:27",
      "text": "那你说这就是为什么你在windows里面要选择一个所谓code page，就你家在对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:33",
      "text": "马业你要在。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:35",
      "text": "这你要在单单想要玩日文游戏的时候，你可以把code base选成日文。然后这样日本游戏至少进行的时候显示出来是正常的对，但其他操作和其他部分就全毁了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:50",
      "text": "对，其实就是按windows那个比较典型的，它那个记事本的那个软件，就那个传编辑器。对他他有一个编码叫NC，就是american那个什么national，就国家标准的。但其实它除了ask to之外，那个应该念怎么念？Ask除了asking之外，对其他的其实它都是一个根据你这个操作系统语言地区来帮你自动选一个code配置。没错，应该是这样。没错。",
      "speaker": "发言人4"
    },
    {
      "time": "00:58:16",
      "text": "所以那那个特别坑，那个特别坑。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:19",
      "text": "所以其实对，其实windows记事本还挺坑的对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:58:22",
      "text": "就是各种那种大家都说打不开是乱码的一个根源问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:26",
      "text": "对，还有那种换行服的问题吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:30",
      "text": "对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:31",
      "text": "也是对我的回车服和换行服。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:34",
      "text": "windows基本是不能区分这个两个会单一一个return和windows所谓catch return new .",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:43",
      "text": "line对换行和回车是不一样的。Return和enter.",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:47",
      "text": "对他那个bom也挺烦的其实。",
      "speaker": "发言人4"
    },
    {
      "time": "00:58:55",
      "text": "我们说到unicode了是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:57",
      "text": "已经对，我们已经说到unico了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:00",
      "text": "然后当年就是有因为汉字的有很多异体字，当年在做这个CJK统一汉字的时候，就因为各个国家的这个标准不一样，又为了向后金融，导致当年在做那个标准的时候，这个收和不收统一有没有捅起来是非常混乱。所以到后面在这个CJK统一汉字扩展ABCDE，现在已经到E区了是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:28",
      "text": "好像。是的，我最近没有怎么去追unico的这个consultum的新闻，但他们一直在搞大象。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:36",
      "text": "对台湾是翻译成什么甲乙丙丁戊，就是扩展。对我我说法不一样而已。对，然后后面就一直都在补，而且他们要不停的补，要保佑要保证像前面的那个兼容性的问题，所以后面就不断的叠加。所以在日本在unicode里面，现在就搞的这个一体化的处理非常的复杂。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:01",
      "text": "有没有发生现在有没有发生一个字在unico里面有多个麻点的状的情况。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:10",
      "text": "首先说什么叫一个字，因为同一个字的，因为比如说对像比如说就会会发生很很乱的事情，比如说像那个强调的强OK，就是右边是虽然的虽右上面是个口对吧？然后日本的制定标准的字形是写成那个撇折。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:36",
      "text": "点OK，对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:38",
      "text": "但是这两个关系在中国是正体字和异体字的关系。然后我们不用撇折点。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:46",
      "text": "我们是显得口方的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:50",
      "text": "但是日本它是撇折点的那个字形，它是常用汉字的标准字形。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:56",
      "text": "然后写成口，日本有写，日本就完全没有写成口这种变体吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:01",
      "text": "还是写成口呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:02",
      "text": "是他们的一体字OK。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:05",
      "text": "那那然后还好就是怎么办？但是还好的是那还好，因为在uni KO里面这两个字分别有马位。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:12",
      "text": "对，这其实就是两个马位。",
      "speaker": "发言人4"
    },
    {
      "time": "01:01:15",
      "text": "所以这对于这对字的处理的话是还好，是因为有不同的码位。那我是只要给它分成不同的编码，给它编了不同的编码了。所以我只要正确的输入这个码的话，你就会显示这样的字。这个是我们要说到后面就是那个字体公司他在映射的时候，映射对的时候就会这样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:38",
      "text": "哼OK如果。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:39",
      "text": "映射不对的话，字体公司他有时候他他映射错了，就中文字体。因为中文字体优先是那个口字旁的那个字形，对日文字体会优先那个撇点撇撇点撇折点的那个字形。如果他们在这个马位上的弄错了的话，再换字体的时候也会出问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:59",
      "text": "不过这概率还蛮小的。比较大的问题主要是出在输入法给你优先推荐的那个资质。",
      "speaker": "发言人4"
    },
    {
      "time": "01:02:06",
      "text": "就你看起来是一样，但其实它是其实你做那个比较的话，它两个不同的字，不同的character。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:14",
      "text": "所以这所以就刚才说到这又是一个不同的层次了。首先我们是要输入法，我们从键盘里面打的打进去的那个键位以后，要经过输入法的转换，换成这个文字的编码。这时候换的时候有没有换？对，有的时候输入，因为输入法特别坑，有时候他换就根本就给他换错掉了。然后操作系统收到这个编码以后，他再去拿那个front文件，拿字体文件去调用来显示。最后要显示那个图形，那个字形。那个front phone的那个mapping如果又错了的话，它显示又是一个错的东西。所以这个有好多层次。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:53",
      "text": "的好多坑，果然。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:55",
      "text": "是啊，所以我我们我们我们要把从头到尾再说一遍，所以现在就好不容易是，对，我们刚才跳过了那输入法。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:05",
      "text": "应该是说一下输入法这个层面其实跟编码没有太多的关联。这输入法本身是一个把你输入的字符按照某种规则转化为汉字的过程。我们假设在讨论的是汉字输入法，当然日语其实也有说法这个概念，但是全都考的话其实是比较复杂的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:32",
      "text": "输入法本身其实是一个。和编码没有太多的关联的过程。他做的唯一的事情就是把你输入的，甚至在很多时候输入法工作的层面是在已经输入的字符的层面，而和下面的按键是无关的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:52",
      "text": "当然在linux上面你是可以说这个输入法，就有些输入法是工作在那个扫描码层面上的。就你可以说这个输入法直接去管理键盘上面给过来的扫描码，而不是先等待操作系统把扫描码已经转换为汉转换为字符，然后去处理字符串。然后扫码。其实就是一个巨大的规则库。就比如说这规则库最常见最常用的就是拼音规则库。然后你输入某些特定的拼音就会得到一个汉字。输入法这个坑要开，就是你我们可以介绍各种各样的输入法，什么英雄码、双拼，包括刚才说的无比激情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:39",
      "text": "和我其实我觉得从广义上来说，输入法也可以视作。",
      "speaker": "发言人4"
    },
    {
      "time": "01:04:42",
      "text": "千万别放出来西口。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:44",
      "text": "但是他跟我们所谓这个计算机字符编码这个狭义的编码是不是一回事？",
      "speaker": "发言人4"
    },
    {
      "time": "01:04:52",
      "text": "字符编码就不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:54",
      "text": "对输入法其实目前最大的问题就是输拼音输入法很有可能是一个动态的编码系统。就是你每次按键的是完全一样的按键次序输输得出来的这个字可能是不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:07",
      "text": "对，或者说它是一套检索系统，它能帮你更快的找到你想要的那个字。",
      "speaker": "发言人4"
    },
    {
      "time": "01:05:13",
      "text": "没错，它是一个对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:15",
      "text": "增量搜索。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:15",
      "text": "编码和解。对，当然有些人就因此特别喜欢什么。我的windows有智能ABC输入法，就是你不管打多少次，他没有高频限电这个功能。就是你你打什么知道的知，你可能我。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:30",
      "text": "以前。",
      "speaker": "发言人4"
    },
    {
      "time": "01:05:30",
      "text": "在第二页，他永远在那个位置，你每次说一模一样的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:37",
      "text": "所以这个是一个叫词频调整，就是会根据你输入的词频调整可以关掉，对吧？现在好像都可以关掉的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:45",
      "text": "可以关掉。其实所以他永远都在那个位置上，其实挺好的。像你像有些同学他的名字，对，因为是很复杂，然后就经常在后面告诉你，他就经常说第二排第五你叫帆。对对对，你按第五按5页的第六那就是什么的。对对对，这样题也蛮好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:03",
      "text": "其实但那个基本上是在什么呢？联机时代之前出现的这种情况。那现在的话，我看市面上的大部分输入法，它除了有这个视频调整这个选项之后，它还有一个所谓的词汇库的问题。而且它不是一个单机的，它是一个联机的。比如说像我甚至留意到现在那个苹果自带那个拼音，好像都有这个东西。就是你打一个你觉得一些流行词汇，它会自动的会定期更新出来。还有像什么搜狗输入法这种云词库，这种所谓的云词库就是它可以甚至说实时的告诉你说，你本来打这个，比如说ABCD，你组合出来一个拼音的字，别人你之前可能都没有，可能过了一天发现怎么有人说这个东西有，因为是有大的人打ABCD，然后指向了某一个特定的一个词组。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:49",
      "text": "红红火火恍恍惚惚。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:55",
      "text": "这算是输入英文输入法而被创造出来的词汇吗？对的，像兰州烧饼就反过来的兰州烧饼。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:05",
      "text": "兰州这是什么情感？",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:07",
      "text": "你不知道这个什么就是楼主你不知道在论坛时代。对你打LLZSB，然后如果你不切换输入法的话，那出来的就是兰州烧饼四个字。还真有烧饼吗？有啊，还蛮好吃的。说实话。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:33",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:34",
      "text": "吴涛对兰州很熟。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:36",
      "text": "对我在兰州，我和rex都是兰州人，我们都是在兰州出生。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:42",
      "text": "好吧。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:43",
      "text": "现在兰州除了拉面还有烧饼。好的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:47",
      "text": "刚讲的那个字符unique e的问题，可能这里不得不稍微连带提一下，但是暂不先不展开讲到后面会展开讲，就是那个emerge言文字的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:00",
      "text": "又是一个大大潘多拉盒子。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:04",
      "text": "所以我一直想知道这个词在英文世界最通用的念法是怎么念？",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:10",
      "text": "内模级。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:12",
      "text": "对，但我知道他在英文世界其实应该是日语对吧？",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:16",
      "text": "反正日语叫M.",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:18",
      "text": "OG对，有很多人念成emo j这个我是可以填的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:24",
      "text": "MOMG就是会文字，它写成中文就写成会文字，会就是画的意思。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:30",
      "text": "现在汉字叫会文字OK。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:33",
      "text": "摩羯就是文字这两个字。对，魔镜就是绘就是画的意思。对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:42",
      "text": "绘画的绘画。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:44",
      "text": "所以他其实说是一个话，所以会文字说半天就是象形文字。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:49",
      "text": "不得不在日里面有两个词，一个叫M一个叫考莫吉考言文字OK.",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:55",
      "text": "也就是用字符来画出一个人的脸。对对对之类的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:00",
      "text": "就是什么给人跪了那种。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:02",
      "text": "那个应该叫emoting。",
      "speaker": "发言人4"
    },
    {
      "time": "01:09:04",
      "text": "对，比如说ORZ，对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:06",
      "text": "所以有两个，在反正在日语里面AMOG它是一个A它是一个画会文字是一个画，但是考它是一个文字，它是用字符组成的一个对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:17",
      "text": "对一个图形。",
      "speaker": "发言人4"
    },
    {
      "time": "01:09:18",
      "text": "对它是用文字来表达一个表情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:21",
      "text": "对，但是这个东西的话其实最早是从英文世界过来的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:26",
      "text": "就SKR的一个说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:28",
      "text": "这个SKR的对吧？一个冒号一个右括弧，就是一个横过来的笑脸，对吧？这个是最早的一个，然后这个在日语的是叫卡姆，西方的他们那个都是横过来的，那东亚的这个颜文字都就是正我们看起来就是正常位置。就比如说打打两个上街那个符号的话，对那个那个叫什么？就叫cap对上肩。对，两个上肩的话就是两个笑脸。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:59",
      "text": "好像叫circle flex。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:02",
      "text": "对，那个是言文字。那言文字的话，其实它在对计算机系统，它本来就是字符，就是这种asked out。所以这个的话就不用编码，它就可以显示出来的。但是AOJI的话它是的话，所以就必须要通过编码可以去编下，然后再让电脑去调出这个东西出来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:20",
      "text": "所以emo j就有两个问题。第一个就是他会在那个码表里面空出一些特定的东西，给这些图片，这些小图片，什么救护车、火箭、西瓜飞机之类的这种还会留一个一个点位，然后再说这个点位是什么意思，然后你再说对应的这个是，你们只是用自己来实现的吗？好像不是自己来实现。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:44",
      "text": "是的，是的，所以而且就而且这是一个像apple color MG那个字母，这个字体它是彩色的字体。当年这也是一个字体技术的一个很重要一点。是因为大家默认的话那个字体就是黑白的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:01",
      "text": "就是一个他混的是一个轮廓。",
      "speaker": "发言人3"
    },
    {
      "time": "01:11:04",
      "text": "outlined传统上字体是一套传统逻辑过来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:08",
      "text": "对，而且是黑白的，不不几乎就不带这个颜色信息的。但是这个AMOJI color MO apple color MOG，它就是第一款就是有带颜色信息的这个字。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:20",
      "text": "那它是点阵的还是向量的？",
      "speaker": "发言人3"
    },
    {
      "time": "01:11:23",
      "text": "是位图，但它要存很多。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:26",
      "text": "对，或者实现上是位图。但是它是在实现上是位图，但是它理论上是可以支持。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:33",
      "text": "你说支持彩色的实力机。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:36",
      "text": "我没理解错的话，就是它这套字体它只是存了一套位图的实现，但是它本身是可以使用彩色svg的。而且好像微软类似的技术本身就是一上来就直接是彩色的矢量图，那可能是私有技术。OK对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:55",
      "text": "反正apple的这个color EMOJI这套那个font的话，它其实你是位图。然后你所以它你仔细看，它并不是你如果你这样放大的话，它并不是无极放大的。它不是无极放大的，明白？它不是无极的。比如说你12 point、14 point和16 point的其实是不大一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:15",
      "text": "其实这里要而且要解释一下那个字体的概念。因为刚才讲的是一个点位和一个东西的对应，那个东西是什么？就可能有两种方式，一种是刚才所谓的点阵图，就是一个多少几乘几的一个方块，里面哪些点是什么颜色，这么一个马赛克。对。然后另外一个就是所谓的向量的字体，就是它存的是一堆一些points，这些points就它会通过某种方式组合成一个区域，然后绘上颜色之后就变成一个黑白的字这个。",
      "speaker": "发言人3"
    },
    {
      "time": "01:12:47",
      "text": "字是一个轮廓，这轮廓。",
      "speaker": "发言人1"
    },
    {
      "time": "01:12:49",
      "text": "就怎么把一个形状表达出来，这个是字体文件要干的，或者叫字库文件要干的事情，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:12:58",
      "text": "对，这就是我们平时是大家在电脑里面看到font，这个front文件里面到底是什么东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:05",
      "text": "对，关于一个gliff它本身的这个图像形式，我觉得按照real刚才说的，我们其实应该可以分成三种。一种是那种黑白的点阵，然后另一种是更常见的这个矢量字体，它是一个矢量的轮廓。当然这个矢量轮廓可能有很多种描述方式，但它统一上都是一个矢量轮廓。还有一种是MOG常用的这种图片，一个彩色的位图，对它比那种点阵的，我们最早看到那种点阵的那个位图要高端的很多。就是说我们可以大致上这样理解，就是他们不是同一种技术。",
      "speaker": "发言人4"
    },
    {
      "time": "01:13:41",
      "text": "对对对，所以最常见的可能最最古老的是那种点阵字库。大家应该还在，因为dos时代还挺明确的。什么16乘以16个像素的那个叫什么字体来着？就是当时用WPS dos版的时候，还有人。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:59",
      "text": "是谁？",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:59",
      "text": "我怕死。这个是一英文的，还有中文的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:02",
      "text": "有个点。",
      "speaker": "发言人4"
    },
    {
      "time": "01:14:03",
      "text": "字体的点阵字体的对错，包括后来对点阵宋体在windows应该。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:11",
      "text": "是七之中意中是什么中意中标宋体吗？就是现在包括很多的现在很多LE中国的LED的显示屏上还会不使用这种主题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:23",
      "text": "没错。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:24",
      "text": "因为那那热烈欢迎领导莅临访问之类的那个词。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:28",
      "text": "就是那个红色的LED灯屏幕是吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:33",
      "text": "大家坐地铁的都地铁上面都是能显示的是吧？对对对，他那个就是那种小型的那个LED都是那样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:40",
      "text": "对，就那个那个综艺那个宋体应该是有九像素到16个像素的，每一个就9 10 11 12 13 10。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:50",
      "text": "我记得最小是十一，十九像素是那个九像素，只有那个台湾那套字体叫什么？零流体可以支持到9像素，就是综艺是从十一像素开始。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:06",
      "text": "11个像素是吧？反正11到16应该是齐的，我记得。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:09",
      "text": "对，然后弹力小的话，有些字就卡起来了，但是好像。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:14",
      "text": "完全一团糊了。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:17",
      "text": "因为最早时候最最早时候我们在做那个网页的时候，就大家手工指定说这个最小是11个pixel，应该是10.51下。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:25",
      "text": "我想纠正一个细节，就是那个不叫名流体，是吧？那个叫名利。然后有一个EU.",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:33",
      "text": "这对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:34",
      "text": "名利UU对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:39",
      "text": "他那个U我已经忘记是什么了，但是它是一个特殊的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:42",
      "text": "那个U代表什么？",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:43",
      "text": "他那个U是UI的意思吗？还是什么？就因为当时windows好像对文件名的长度有一个限制，所以他没法完全写这个字体名称。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:53",
      "text": "原来是这样，我靠，怪不得小时候觉得那个又要小又又要大写。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:59",
      "text": "就是UI还是什么。",
      "speaker": "发言人4"
    },
    {
      "time": "01:16:00",
      "text": "就是u one后面的时候不知道是什么了。后来我记得windows那个综艺送应该是到windows 7还是8的时候，他他把那个小字号的那个字体默认用那个哑黑了，就是中文的那个字体用雅雅黑来显示了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:18",
      "text": "然后那个中改雅黑是从windows vista开始的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:23",
      "text": "已经你们vista已经是用小字号。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:25",
      "text": "也是用哑黑了。有雅黑和小字号用雅黑是两个概念。应该说维塔的时候中文的你说简体中文这边的UI字体还是中意宋体好像。但是雅黑已经随系统搭载了，还是随office搭载，我不太记得。",
      "speaker": "发言人4"
    },
    {
      "time": "01:16:42",
      "text": "清有了吗？雅黑应该是随windows 7还是vista发布的。然后他有一套C字头的字体的那个calibre council，那个是属于对那个随刻那个windows 7还那是clear view。",
      "speaker": "发言人3"
    },
    {
      "time": "01:16:57",
      "text": "对，那是随clear view技术。对对对，所发布弄进去的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:17:02",
      "text": "但是当然也有一个具体原因，就是因为当时就是windows用windows的那些PC很多还是那种低分辨率的屏幕，就可能是就不太适合用那种小字的，显示非点阵字库的中文字体了。但后来因为现在这个屏幕分辨率也高些了，有很多windows那个笔记本，特别是是什么超高分屏。虽然不是retina那么高，但是也有很多事了。然后有这个时候再显示这个哑黑小字号，就问题不是那么大了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:17:37",
      "text": "所以我一直想和大家澄清一点，就是说虽然我们说字体文件里面有我们有点阵字，我们有矢量，有轮廓字，但并不是说这个front肯定就是点阵字。有的它是实验字，就像刚才说的windows ws它默认的新送就是中意送体，它两套，它其实那个phone文件里面，它两种的字体数据都有的，由系统来调用。但在小字号的时候，他就把那些点阵的数据拿出来显示。在大字号的话，他把那个轮廓数据拿出来显示在那个缝里面，它里面既有点阵的数据，又有那个轮廓的数据。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:21",
      "text": "或者说因为那个轮廓就是轮廓数据，它有一个叫做hinting的一个概念，就是说告诉你说这个时候如果你遇到一些疑难的时候，你怎么去弄。因为毕竟你把那个轮廓画在一个平面的一个矩阵里面，它有些时候因为轮廓的那个曲线是一个数学上是无限大小的，就是没有那个粗细的。对，但是你画到那个点上的时候，还是会有一些左右占了一格的问题。就会有一些叫做hinting的机制。就告诉你说这个时候你应该放到左边还是右边，上面还是下面。如果从这个角度来讲，点阵字库的话可以说是一个比较极端的hinting的例子。",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:58",
      "text": "这里说到新景的话，我们干脆给它翻译成叫渲染提示，这样子可能大家会比较清楚一些。就是说我即便你在那个文在fund里面，你存储的是数学的矢量的轮廓。但是你最后显示到这个屏幕上，屏幕毕竟它是一个山阁画的一个东西，所以你还那个念杉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:23",
      "text": "我一直念炸炸炸哥这三个是炸的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:28",
      "text": "我跟甄宇还研究过这个东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:30",
      "text": "好吧。结论是什么？结论是这个字的读音是一个坑，这个字的正音规则是一个坑。",
      "speaker": "发言人4"
    },
    {
      "time": "01:19:38",
      "text": "还是念山阁炸。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:40",
      "text": "因为我跟他翻牌的时候还大石烂的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:42",
      "text": "因为我觉得严格来说炸才是他的标准，因吧。但是它在很多地方都被误读成山，所以渐渐的好像字典的正音规则开始倾向于将一些经常被念成山的术语也直接标成是山。这个山阁那山格的话。",
      "speaker": "发言人4"
    },
    {
      "time": "01:20:00",
      "text": "就我现在是这么逻辑，如果但但凡涉及到电脑相关的就是山，然后但凡涉及到实体的那个那个泥巴栏、栅栏，好吧，反正你知道我要问一下应用场景。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:12",
      "text": "那叫什么restoration是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:14",
      "text": "那英文怎么念来着？Storia ation .",
      "speaker": "发言人4"
    },
    {
      "time": "01:20:17",
      "text": "zed customize对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:19",
      "text": "就是要因为就涉及到从轮廓信息怎么样给它套到那个像素。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:24",
      "text": "矩阵上面的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:25",
      "text": "这个网格上去举证上去。对，所以它不可能是套的正嗯正好的。那那刚好就套在那个几个半点，那我是往上挪，还是往下挪呢？这有时候就是要渲染引擎来做这个事情，那hinting这个渲染提示就是来进行这样一个工作。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:46",
      "text": "渲染提示有两种实现方式，一种是叫做auto hinting，就是在那个渲染引擎里面，它通它提供了一个通用的一个hinting的一个算法。然后还有一个就是直接嵌入到自己内部的，就是说告诉你说像情，你虽然得出的是那个结论，但是我这个自己设计师我告诉你，你我此处应该是这样。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:06",
      "text": "我觉得那个我来再补充一点，跟刚才说的这个渲染提示有关的东西。首先我觉得这里有一个问题，就是说一个矢量的轮廓它经过了这样一个删格化的过程中，它肯定不可能是精确的显示，它会有一种失真。这其实是一个下采样的过程。",
      "speaker": "发言人4"
    },
    {
      "time": "01:21:26",
      "text": "如果说用计算机的数据来说，所以它这里有一个有一个信号处理，这个术语叫做混叠。就说当你从一个模拟的信号或者说一个非常高频的信号，把它采样成一个低频的信号的时候，这个信号就会发生一个混叠。所以我们有一个术语叫反混叠。但是这个术语在那个字体的处理中经常被翻译成叫什么抗锯齿，就是antis。但其实antia as这个词里面没有锯齿这个字，它的标准翻译应该翻译成抗混叠或者是反混叠。比如说有点像。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:00",
      "text": "一个意义就是对对对，就解释一下这个东西最终是来干嘛。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:04",
      "text": "对，但是所以实际上我们就知道，我觉得翻译成抗锯齿有一点误导。因为很多时候anta less做的并不是一件抗锯齿的事情，他可能跟锯齿这个事情完全没有关系。对，有的时候抗锯齿系统会有一套自己固有的方式来绘制这个曲线。比如说是什么灰度层面的抗锯齿之类的，但是它并不是完全解决这个抗混叠的这件事情。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:27",
      "text": "微软想出来的这个hinting的技术，它是在这个通用的抗锯齿的这种思路上再加了一层。比如说说他将某一些曲线的形状进行了一些变异，这个变异很可能是不规则的变异，是需要人工去指导的这个变异。所以他给他加了一个thinking的信息，就是一个引导，或者说一个什么提示的信息，来告诉这个操作系统怎样去改变这个轮廓的形状，以使得它能显示的更加的完美一点。就大致上是这样的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:23:00",
      "text": "但这也引入了一个哲学的一个问题，就是一个设计哲学的问题。就是说在windows上，它因为最开始的时候，长期来看是相当长的一段时间，我们在用那种所谓低分辨率的显示设备，就是可能只有我我记得我最早的一个图形显示是个640乘以480的1个CRT，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:20",
      "text": "然后后来最早的城市难道不应该是台电视吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:23",
      "text": "那个对，就是3 80乘40的字符串，那个那个还小霸王其乐无穷，就说有有故意的时候，后来是升级成一个什么800乘600那个像素的一个什么索尼的什么什么特氟龙，什龙的一个屏幕，什么我忘了一个名字了。然后再后来有了那个LCD，我记得上当时标配是个1024乘以768的，然后已经是非常晚进了，才出现所谓的这个1201440的。当时这个叫做高分屏的一种宽屏幕了。但其实现在就是在那个时候，他选择了说我们在这个有限的物理基础上尽量显示清楚。所谓清楚就是说笔画分明啊不要出现模模糊糊那种效果。所以导致刚才我们一个是说这个中易送全部是点阵小字号的时候，全部是点阵知识库。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:16",
      "text": "还有像微软做的那个字体叫什么Ariel和vana，当时是在网页排版上用的比较多显示文字的，还有那个叫做georgia，他们都在非就没有开抗锯齿的情况下显示的还是一种。你可以看得出明显它是一一颗一颗小像素构成的这么一个字符。但后来但是你对比一下，在那个max上面，他说这个只是分就是显示器分辨率低，这是一个暂时的物理限制，时间长了会解决的。如果我们从长远的角度来看，我们不要去做那么太多的叫做什么来着？局部细节优化，局部优化对吧？Local optimization, 但是就是用一种通用的方法去显示，但虽然看起来是有点模模糊糊灰的，但现在看来这个因为屏幕分辨率上去了，反而是我们觉得mac上面显示的那套字的比较漂亮。因为它更加终于反映出自己本身的设计师的一个形，知道吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:25:16",
      "text": "这是一个非常重要的一个哲学设计哲学的不同取向问题。一个是在设计字如何保持保持字体的设计和如何保持清晰的显示。这样两个取向中，windows它取向的是尽量让它显示的清晰。所以他不惜牺牲改改去牺牲设计，他把那个字改掉，它会把这个显示的像素给挪来挪去，它特。别看重hinting，特别看重它的渲染提示。然后用那个渲染去然后去给他挪来挪去把这个字挪着去匹配它的显示的像素，达到像素的字的显示的清晰度，但是牺牲了文字的设形状。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:00",
      "text": "而mac它是为了保证这个字体是原来的形状，它可能有时候会牺牲字体的清晰度。虽然暂时对，但是比如说在姥姥的屏幕上，它可能显示会去比较模糊。但是随着硬件的对现在的逐步的发展，它依然能保持它的字体设计，它原来的一个造型和形状。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:26",
      "text": "现在我们用的那些智能手机都是高分屏了，基本上就没不存在这个问题了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:34",
      "text": "所以windows还是工程师做出来的，做mac的都是艺术家，就是这一点。你要是作为一个字体设计师就怎么搞的，对吧？你我的字就全部都都改掉了，都不是我的字儿了，就变成。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:51",
      "text": "也不能完全这么说。因为其实早期在三四十年代，就是20世纪三四十时候，不是也有什么great best typography。它本身就是在是在一个矩阵格上设计的字体。然后微软早期请来了自己的设计师，其实也是一上来就明确的知道自己需要设计一套在当时的高分屏，现在的低分屏上面能够清晰显示的字体。所以这其实也是他们自己的选择了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:27",
      "text": "就是在当时的设计的制约上，然后尽量去做好的设计。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:32",
      "text": "因为其实每个时代都有他们自己的字体设计的制约。以前在签字时代其实也有其实多少多多少也有些自觉的。比如说早期那个喇叭口什么的，这种东西都是在签字时代才出现的，一种为了对抗技术上的缺陷而出现的一些特征。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:51",
      "text": "油墨的那个叫什么，就是进到别的地方去的那个问题了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:55",
      "text": "可是你还有合体字也喇叭口。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:58",
      "text": "一开汉字的喇叭口一开始是为了抗磨损。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:02",
      "text": "应该是在照排时代防止这个折角的地方过于圆润。对，因为招牌是将一个小底片进行缩放这样的过程。",
      "speaker": "发言人4"
    },
    {
      "time": "01:28:14",
      "text": "OK. 然后拉丁语的衬线其实最开始也是因为在雕刻的时候，你要把那个字母标的比较怎么说适合。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:23",
      "text": "那种刀的印方式。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:25",
      "text": "结构上比较OK，然后刻起来又不是太麻烦的话，衬线其实一开始就是刀的那个那个雕刻刀的走口。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:34",
      "text": "就最锋利的一部分。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:36",
      "text": "对你跟最开始的希腊语的希腊语传统上是没有拆线体的，即便现在希腊语在正式场合也是只有黑体的。你不能因此说就是衬线体就是古典，因为比他更古典的东西是黑体。所以对我觉得每个时代技术都对自己有技术都对字体有影响。然后我十年前还是偏爱点阵字体的，我不觉得麦克那一套比较好看。说实话，当然可能也跟我是个程序员有关的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:10",
      "text": "现在是无所谓的，不过是一个你听我锤子实用主义者。",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:15",
      "text": "我觉得其实windows那一套在西文字体上的表现并不算差。就从最开始直到现在，我觉得而且他那套系统是一直在改进的。但是我觉得windows犯了比较致命的错误，是在这个汉字的hinting技术上面走了一些弯路，走上了不归路。我觉得一方面汉字的hinting并不像西文的hinting那么容易。另一方面实际上在操作汉字kinking的那一波工程师和设计师团队，可能对汉字并不是那么的熟悉，包括在审美上和一些字形的细节上。所以导致了他们现在汉字的这个渲染效果就不是那么的理想。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:57",
      "text": "并且相当长一段时间内，字体渲染引擎这套东西还是在拉丁语系的的工程师的指导下开发的，应该。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:08",
      "text": "感觉上是的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:30:10",
      "text": "就比较看着有些节奏，有些选择看在那个母语的人士看挺奇怪。但是也没办法，因为当时条件有限，你没有那么多人才群众的现在情况就不一样了，大家别的不说，我看现在各个什么手机厂商都在搞自定义字体了，还挺厉害的对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:28",
      "text": "现在已经有很多从老罗开始，就是从发布一个新系统的时候，会把字体拿出来说，这是我们的一个特征。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:38",
      "text": "对，这个也挺好的。但是还是那个问题，就是对不同的哲学还是有不同的结论的。就包括现在刚才吴涛提到一个就是说在不同的为做字体设计的时候，你也有这种不同的应用场景的考虑。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:52",
      "text": "过去会说是一个什么显示字体和打印字体，这两种情况也不一样，对吧？打印的话你用什么方式打印，其实我觉得本质上还是说一个分辨率的问题。因为打印的话，不管用当时这种激光还是喷墨，他的就所谓的分辨率DPI或者是屏幕上PPI还是有一个数量级的差异。只是说现在几千的对吧？低标价都是几千，级低标一般是几，最低的也要3，也有300，就是有有300个dot，但是他那个算法不太一样，因为它是因为比如他喷墨的话，就打黑白的情况下，喷墨的墨点不一样，它喷墨的墨点超小。因为它不它有个这个问题，就是它没有办法调浓度，这就是它不可能说这个墨水有有浓度的深浅，它只有一种浓度的墨。",
      "speaker": "发言人3"
    },
    {
      "time": "01:31:39",
      "text": "他能怎么实现所谓的灰度呢？就是说靠把那个墨小墨点分配的在单位面积上分打的多点还是少点的问题。这个时候DPI就和PPI有一个最本质的区别，就是一个像素点它其实理论上可以显示，就只考虑这个灰阶的话也有256种灰度，你从最黑到最白，但是你在一个同样的小方块面上面打印这个墨点的话，它其实只是说喷十个墨点和1000个墨点这种区别。",
      "speaker": "发言人3"
    },
    {
      "time": "01:32:16",
      "text": "所以这个时候DPI并不能完全和PPI的计量方式等同。但单看数字的话，确实通常是要高一个数量级了，像1200、1800这些都还比较常见的。没有。",
      "speaker": "发言人3"
    },
    {
      "time": "01:32:28",
      "text": "打印机的那个点都是几千。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:31",
      "text": "对，3600那种高级就是专业打印机，三千多以上也是很正常的。所以但现在如果现在看有些retina的这种屏幕，现在比如说你看那个iphone 6加那个大号，他不是说有是是一个三倍的的。三倍的话你再算上它的一个亚像素，就是每个像素点它是红蓝绿三个颜色。对，然后你再把压压降税算进去，把它的实际的PPI，其实是可以在很多程度上和那个DPI有就在数量级上是可以相提并论了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:03",
      "text": "接近印刷品了。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:05",
      "text": "这个时候就很多人就比如老是说什么ipad那个高清就是retina ipad出来之后，大家说这个就是什么？就是打呃高精度印刷的那种彩色杂志封面的那种显示质量。就是因为这个分辨率达到了一个新的量级之后，产生的一个质变。",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:25",
      "text": "就终于感觉是印在。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:27",
      "text": "平没错，所以我觉得可能现在越往后走，而且现在还有一个新的趋势，就是我们讲那个vrar那个眼镜，他为了实现没有网格的那种颗粒感，他也要不断去提高那个像素。以后还就是PPI还会往上涨，你可能一两个数量级。这个时候我们再来看就不存在可能就是说从以后的屏幕的质量肯定是要高于这个纸张了。因为纸张它还是不是不够完美。它的那个精度来讲，因为你通过的墨汁去控制也好，还有那个那个墨水的浸染的一个问题，它可能还不如以后的那些超高分辨率的屏幕。所以我对未来的这种显示技术还是挺挺看好的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:09",
      "text": "但是我们追逐了这么多年，终于赶好不容易才赶上这个纸质的那个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:15",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:15",
      "text": "就是我们现在才赶上。我也想问一下，你们最早用的OS ten最早的版本是十点几？",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:23",
      "text": "我应该是10.5的时候切，开始用的10.50.6的时候。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:29",
      "text": "你们还记得早年OS ten他们在抓屏的时候，在screen capture的时候，所以默认是现在是默认是PNG格式是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:40",
      "text": "不，还是那个TFF .",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:41",
      "text": "what PNG。我是反正我用control shift 4的时候.",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:48",
      "text": "会出来IP你你你存一下，它保存下来默认是TF你要在你要手工选一下，它才会转成PNG的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:55",
      "text": "不是默认的是PNG.",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:58",
      "text": "what哪个默认的是PNG？你开那个grab，你开grab你抓屏的时候，它就是计算AB那个程序。你拍完之后的话，它保存的时候，我应该默认的时候应该是这个时候是不能选PNG。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:12",
      "text": "那个可以选那个可以选。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:14",
      "text": "不不能选PNG，但是你可以试一下，我比较确定这个。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:22",
      "text": "我你说用grab程序的截图的时候是对存。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:29",
      "text": "但你用那个快捷键就是用的grab。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:32",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:32",
      "text": "然后它这个时候是TF是不能改的，你得存完之后再用那个preview打开，然后再另存为PNG格式。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:40",
      "text": "对对对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:35:42",
      "text": "OK这个OK这个是我最最恼火的一个事情。所以后来我的解决方案就更简单，就绕过这一条了。因为grab它有两种应用方式，一个是保存成文件，另外一个是保存在内存里面。保存内存里面之后。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:57",
      "text": "就是windows剪贴板。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:58",
      "text": "相当于，对，没错。然后这个说你再开一个空白的preview，然后再按粘贴的话，它会自动把那个粘成一个到preview里面去。那个那个截图就是说你在这个时候点保存就有PNG可以选，就可以绕过一次先成为TIFF，然后再转成PNG这么一个尴尬的状况。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:18",
      "text": "所以你在mac上面截图的方法和windows上面人的截图方法是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:23",
      "text": "哪没错。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:27",
      "text": "我就是为什么问这个？是因为就在普通的那个规定里面，大家是默认它会自动会出pink，就是PNG文件。然后在早期的那个OOS ten里面，它默认保存是一个PDF文件。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:43",
      "text": "在OKPDF这个事情也要可以讲一下。如果我没记错的话，对，因为当时整个mac的US ten的那个估计最开始是基于PDF同一套技术来做的对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:55",
      "text": "对他就等于我是我是有想说的这一点，就是说从OSN开始做开始，他就等于是想把所有的这个GU这个UI印刷在屏幕上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:08",
      "text": "没错，对它是用一套用于描述。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:11",
      "text": "打印机的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:12",
      "text": "方式来做对屏幕显示来做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:15",
      "text": "屏幕显示的对，所以它整个引擎，但当它我们应该就mark的那个文字引擎，它是用什么core text，text? 怎么样来的对text？但是从OST最早开始，他的渲染的思想就是要把整个UI印刷在屏幕上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:38",
      "text": "对，这个有个挺好的一个结果，就是PDF这个格式在OS上支持的相当好，它是原生支持。对对对，不像windows，大家开个屁的，现在好像windows 10有终于有原生的显示那个PDF文件的一个支持了。我记得之前的版本都还在。再得装一个叫什么acrobat reader，access by对，或者是在国内用的那个叫福星，你知道吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:06",
      "text": "Fox IT好吧？",
      "speaker": "发言人4"
    },
    {
      "time": "01:38:10",
      "text": "一个PDF阅读器很多人用，因为那个比较轻量级，up by reader非常重，他不像在open上那个preview这个程序，就看图看PDF通，还有那个叫EPS，EPS还有PS就这几个都是同源的一个技术，都可以直接显示，非常方便。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:30",
      "text": "其实都是PS postscript的曲线。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:33",
      "text": "对，对，那一套叫做display postscript。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:38",
      "text": "对。然后这也就扯到之前那个字库文件的问题了，就字体文件的问题了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:44",
      "text": "终于扯回来了。我靠。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:46",
      "text": "我好不容易把你们给拽。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:49",
      "text": "对，因为所谓的这种向量字库的话，它有两种通用的比较常用的格式。一种是叫做true type，还有一种叫做open type对吧？然后如果我没记错的话，open type是adobe和苹果当时搞的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:39:08",
      "text": "True type是苹果，等一下是微软和苹果搞的open type搞的。微软和adobe刚开始open type当年就苹果没在。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:19",
      "text": "对对对，open type应该没有苹果什么事。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:23",
      "text": "open type苹果没参加。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:25",
      "text": "对，其实本质上我觉得大头都是在adobe那一边。",
      "speaker": "发言人4"
    },
    {
      "time": "01:39:28",
      "text": "他是出版界的老大。他说什么才是才能做？没有。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:32",
      "text": "最早就是在很久很久以前都是阿杜比来做。然后为了对抗阿杜比，苹果和微软这两家居然结合起来一起做出了一个初type去对抗阿杜比。所以这是第一次字体大战。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:48",
      "text": "那个出type open type的本质区别是什么？我一直没太搞明白。",
      "speaker": "发言人3"
    },
    {
      "time": "01:39:52",
      "text": "Open type是初态的一个扩展，没记错，就open type本质上其实就是出type，只不过有多一些他的支持。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:02",
      "text": "就是open type。它它我们说open type有两种意思，就是那个字体的封装格式和它是一个封装的东西，还是说它那个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:10",
      "text": "轮毂open type。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:13",
      "text": "对，如果说狭义的讲的话就true type。True type它的曲线是它是二次贝塞尔贝塞尔曲线，二次贝塞尔。然后那个open type就是以前的PS曲线，就是三次贝塞尔曲线。曲线它本身数学的描述方式是不一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:29",
      "text": "那这两种有什么优劣之分吗？二次的和三次的贝塞尔曲有的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:34",
      "text": "因为二次的曲线的话它是一段曲线，它起点和终点，然后中间有个控制点来控制，你中间控制的往左点或者右点，那个曲线形状发生变化。对，这是two type 2次的。那PS的那个它是三次。他三次就是说除了起点终点以外，他有两个控制点来手柄来调那个曲线。所以三次的话它这个点要更多。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:03",
      "text": "但这是有闪。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:04",
      "text": "三次的精度不一定更好吗？三度三次的精度应该更好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:09",
      "text": "是，所以就经常会有比如说三次曲线转二次曲线和二次曲线转三次曲线的问题，就会有三次曲线的点，会会会有会有水OK，就说三次转二次的时候会有损，因为三次他本来他用的点更多。对，二次只用三点更少。反过来二次转三次的时候，这个损失就会更少一点。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:32",
      "text": "应该没有损失。如果把中间两个控制点几乎放到同一个位置，就是等于是三次的曲线。但是表示二次的曲线的那个放同样的一个曲线。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:44",
      "text": "对，这是单纯从曲线的那个数量来说的。当然如果你还有其他的参数不一样，也会影响到他转的这个压缩的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:55",
      "text": "OK好吧，所以现在常用的还是就two type的比较多一点，就是TTF结尾。",
      "speaker": "发言人3"
    },
    {
      "time": "01:42:00",
      "text": "windows一般都用，windows一般用true type比较多。而且windows它的true type字体里面，它会加很多很多大量的渲染提示hinting信息。而open type他们只它只是一个比较宽泛的一个hinting，那就大概就是这样，子规它就非常宽泛的一个信息。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:20",
      "text": "这还是泰国，它会跟应用场景不一样，要出type的话一般是用于显示的。然后open type它一般用就是adobe，一般是做打印的东西的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:42:30",
      "text": "Windows这倒也没有，就基本上在overtime之前，mac上面的字体几几乎也都是出彩的。你拿来type的买，就是你如果你是一个设计平台设计师，你买的字体基本上也是不是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:43",
      "text": "我我我我我是说adobe他出的那字体的那些open type字体，他没有很多hinting信息，是因为他没有必要做。因为大家买它那个字体一般是用来专业用打印的，不是用来显示。",
      "speaker": "发言人3"
    },
    {
      "time": "01:42:57",
      "text": "这是有一个历史问题。首先是这样子，adobe最初的那个post script，这是他的专利技术，然后他在这个专利技术上开发了一种字体格式叫type one。对，这是adobe最经典的postscript技术，而且也是沿用到现在的一个最好的。包括像open type里面用的曲线信息也是这个type one为基础的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:43:23",
      "text": "他大家拉的那个三次的apple one，它是adobe的私有专利，它是一个收费专利。如果你要用type one技术，你得给dobe支付非常高昂的专利费。所以当时无论是微软还是apple都不想支付这笔钱。于是他们合作搞了一个true type，想来就是以不支付专利的方式同时使用一个类似于adobe的技术。",
      "speaker": "发言人4"
    },
    {
      "time": "01:43:47",
      "text": "为什么要这么搞呢？是因为其实当时adobe还发布了应该是type three，我记不太清了是type three还是type four。它是一个怎么说呢？它是adobe的专利技术，同时它是一个好像可以免费使用的。但是这个东西在屏幕上用来做这个山阁画的效果好像就不好，具体原因我不是很清楚，而且据说他的那个山阁画的效率很低，所以apple和windows才没有用这一套免费的技术去搞了自己的东西。后来windows上留下了这么多的true type字体，都是因为他们最初使用了这样一套技术，同时又设计了很多为这个true type优化过的字体。",
      "speaker": "发言人4"
    },
    {
      "time": "01:44:33",
      "text": "这个就要回到最初，你们在讨论的那个问题，就是说究竟是二次曲线好还是三次曲线好的问题。我个人觉得这两种其实是没有差别的。因为如果说你给设计师的这个工具就是二次曲线的话，他就是能用这个工具画出一个完美在他看来完美的一条曲线。但是如果你给它一个三次曲线的工具，那么它画出来的是三次曲线的完美的曲线。但是这两种曲线在互相转换的时候，如果这个转换程序不那么的好的话，就有可能会出一些问题。但通常来说这个数学问题并不难解决。所以我们市面上看到的一些show type字体的这个曲线质量不好，多半是由于字体厂商故意将他们转的不太不怎么好的，有可能是故意转的不好。比如有人就说国内某字体大厂是故意出了一套低质量的true type字体，以便他的那个open type的字体可以卖出一个比较好的价格。",
      "speaker": "发言人4"
    },
    {
      "time": "01:45:29",
      "text": "就可以可以卖专业字体和这种非专业字体的这个区别定价。对对对对，太鸡贼了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:41",
      "text": "Open type我们还说它还有一个封装的格式。它其实这个盒子那里面，它可以把show type曲线的东西装在这个盒子里面，最后包装出来的也是一个open type字体。这跟和视频文件一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:56",
      "text": "对，MKV里面可以装各种各样的视频留言。对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:02",
      "text": "所以曲线的描述方式和最后那个封装格式是两个层次的东西。都都可能是open type，所以这一点有点复杂。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:11",
      "text": "但是现在好像那些我看就是adobe现在有也有在卖那些所谓的专业字体，他们自己卖的好像基本上还是以open type封装为主。因为open type这些比较高阶的特性，什么什么optical那些乱七八糟的高级特性。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:27",
      "text": "对它有很多feature，有很多这叫什么特征？功能。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:30",
      "text": "这个好像出type好像就暂时好像支持不了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:34",
      "text": "对，因为车type的规范里面没有那些数据，其实他们都是一张张表了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:46:41",
      "text": "表叫table。所以现在整个字体格式的整个字体格式的大取向就是大家都是往那个open type转。而且刚才也说了，open type它本来就是一个大盒子，那你原来那个轮廓，那个two type轮廓曲线也可以装进去。那很多现在就是把那个曲线的轮廓先装进来，然后再加上open type特有的那些feature，给封装成一个open type的一个字字库。",
      "speaker": "发言人1"
    },
    {
      "time": "01:47:05",
      "text": "很多人是这样做，但我们必须要再重复说一下，就是说我们说的这个通常说的这个hinting技术，也就是专指问windows的那一好听。请记住它是只对true type有效的。而我们说的在这个poster script上做的这个hint这个hinting跟true type的hinting完全不是一回事。虽然他们的名字都叫hinting了，但是对但是这个post script的这个hinting是一个比那个true type娉婷要微弱的多的，而且通常可能是在打印设备上才有效的。我不是很清楚，总之他们完全不是一个量级的这样一个效果。对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:47:46",
      "text": "那这里要可能不得不提一下不同的操作系统的它怎么去就是它那个叫做渲染引擎的区别了。这个好像很古老。以前我们我们还在apple plus的时候，有有尝试过写这么一篇系列。但是后来没有做成，因为实在是太多基础知识要弄了，太坑了，巨大的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:48:10",
      "text": "Windows和mac不一样，然后各个浏览器不一样。同样浏览器在不同的系统下，对不同版本还不一样，都疯掉了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:48:21",
      "text": "而且这个东西也在不同的还在变化中。比如说像微软的那套，他们叫做clear type的技术，也在不断的每一个版本的windows，它在不断的优化，去发的更新的版本。还有像苹果那个什么core tex那一套也是在不断的变化。它那个叫什么AAT，apple advanced powerful y那个那个那个宣传器可以，那个比较老。对，那个就最最开始是OS上是搭载的那个，后来像什么cortex，又又又开始变了，也不是一个静态的东西，就很难去讨论它。但我不知道那个安卓和IOS是怎么弄的，从来没有没见人讲过。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:02",
      "text": "但是基本上IOS就成继承。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:06",
      "text": "这一套。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:07",
      "text": "对，OK那安卓怎么样？我不知道。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:10",
      "text": "因为安卓它就很奇怪，因为安卓它不是基于之前的，就不是基于这两个windows和，它应该是linux来的一套什么技术改的，我不太清楚。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:23",
      "text": "其实linux下面的屏幕显示可以调的部分，在clear type出现之前就有好几种。对，这就最基本的有4种，一种是完全不要hints，一种是什么使用简单的对对对，轻微重度和犬什么full hint。对我相信对这套其实应该也是一个比较值得研究一下的话题。只不过我们在做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:53",
      "text": "那前面那个常用的那个渲染引擎叫什么来着？名字我都忘掉了。以前用那个ubuntu桌面，那时候还研究过一段时间。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:03",
      "text": "最重要的是它跟发行版是相关的，就你要用一些非gome，对，这跟gore有关。就是你用QT的话QT自己有一套，然后用glom的话gnome一套。对，然后他们全都是就相当于就对那个linux的显示是一个非常巨大的坑。首先你可能底层有一个x windows，然后x windows完全不去理会hints或者是什么轮廓描述这一套的。然后你再来X工作上基础上又有很多人做出不同的渲染引擎来，然后每个渲染引擎有自己的策略。所以这个是在linux这边是不能以操作系统而论论的，而是要以发行版和窗口管理器，具体情况具体讨论的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:59",
      "text": "天哪，对，这巨大的果然是。",
      "speaker": "发言人3"
    },
    {
      "time": "01:51:03",
      "text": "一辆好坦克。好了，现在我们键盘上打了几个字，通过我们键位的输入法转出来。现在再通过调用我们的字库文件，终于经然后还有旋转跳终于显示在屏幕上。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:24",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:24",
      "text": "终于显示在屏幕上了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:26",
      "text": "对，这个过程还是忽略了很多东西。比如说比如说那个意义上加一瞥的发育字母，它可能有好几种组合的问题，可能有好几种组合方式。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:41",
      "text": "没有，这还涉及到uni QLO的事情。对，那个组合对先。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:46",
      "text": "不是排版引擎的问题，而是一个就是你怎么把编码不同的字符组合在一起的问题。而然后还有一个数数的问题，就是对你要说意义，如果这个字符是一个一加一撇合成的E，还是他比如说是拉丁一里面的那个高位区的那个独立的一个字符。一这两个字符你可能在不同的操作系统里面数出来的结果是不一样的。有些人有些操作系统是两个字。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:17",
      "text": "一个一个字一个字。",
      "speaker": "发言人3"
    },
    {
      "time": "01:52:18",
      "text": "有些编程员说这是两个bit，然后有些人有些操作系统则会告诉你说，这是一个字符。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:27",
      "text": "这些其实也是日语里面也有，就像刚才就日本讲明那个浊音点，它其实也可以通过那个组合形式来实现的，所以那也是看起来是一个字，那其实它是一个马位的字，就低就是低区位的一个马位的字，还是它是两个组合起来两个字。在日日本里面也是有这个问题的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:48",
      "text": "所以我觉得这还是一个排版引擎的问题，因为这取决于这个排版引擎是否采用了unicode的标准下的一些具体技术。如果他用了一些传统的，在unicode还没有诞生的那个时代里面，他也有自己的一些方式来显示这些字符。可以这样理解。",
      "speaker": "发言人4"
    },
    {
      "time": "01:53:10",
      "text": "这跟排版也也不一定。其实这主要还是一个你在一个什么样的逻辑层面上去区分字符的问题。就是你要把它规模化的话好吧，所有的字符其实归根结底都是零和1，在电脑里，在计算机里，但是有些慢。",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:30",
      "text": "按照某些编程语言或者是操作系统的计算方法，每八个bit就一定无论如何是一个字。那在这些操作系统或者编程语言里面的可能意义上的加撇就有可能是一或者是三个字。但是对于某些更高级的，或者说划分层面、抽象层面更高级的语言，比如说swift。Swift里面它一定会把那个字符串里面能够独立成簇的，就是什么什么class，它单独算成一个字。所以这个实际长度可能跟最终的那个bit长度是不一样的。而且两个一样的对两个bit长度不同的string在swift里面可能会最终算出来的长度是一样的。这个啊对，反正也是一个很大的坑。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:24",
      "text": "因为你如果单说是排版引擎的话，你事先给排版引擎什么东西对吧？你事先给他不同的东西，他到台湾已经他他拿到手头上只有这些零部件，他只能拿去这样显示。",
      "speaker": "发言人1"
    },
    {
      "time": "01:54:38",
      "text": "就是有还有就是我想说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:41",
      "text": "的就是在这个年头到现在为止，大家还是有很多人说那个半角全角的问题。就是说什么西文140个字的话，对应中文应该是70个字，到现在还有人的有有这样的感觉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:54:59",
      "text": "对，拳脚和半角这两个字最开始源流原因应该是在排在签字时代。",
      "speaker": "发言人2"
    },
    {
      "time": "01:55:07",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:55:08",
      "text": "就是有些签字是只有一占其占另外一些签字的一半的宽度，然后这些字符就要被叫做半角字符。",
      "speaker": "发言人2"
    },
    {
      "time": "01:55:20",
      "text": "它其实就是一个宽度的问题，就全身半身裙脚半脚或者叫全形半形的。EM和EN应该是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:28",
      "text": "日本人搞出来的概念。",
      "speaker": "发言人4"
    },
    {
      "time": "01:55:33",
      "text": "但是在在原来的新闻排版里面就是有EM和EN。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:39",
      "text": "对，但是拳脚半角这个术语应该是日本人搞出来。",
      "speaker": "发言人4"
    },
    {
      "time": "01:55:43",
      "text": "这个就我们教程拳脚半脚。对，是日本汉字翻译出来的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:48",
      "text": "而且旋转弯角最开始的差异应该是在片假名和在片假名出现之前，在拳脚汉字出现之前，日语里面就是JS里面只有半角的假名。然后等到对这个拳脚汉字出来之后，他们又出现了拳脚的假名和拳脚的汉字。所以这个时候就需要区别说这个假名是究竟只占显示一半，还是那个宽的那个版本。所以这个时候全形半形的概念就被从印刷时代拓展过来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:56:22",
      "text": "但是就在编码上，它其实是单字节和双字节的问题。对，就很多人把拳脚半脚和单字节双字三字节混在一起。就比如说其实到现在为止，我们大家都已经用unicode了，对吧？无论你是半角的字还是全角的字，在uni q上它其实都是一个马位。",
      "speaker": "发言人1"
    },
    {
      "time": "01:56:43",
      "text": "然后这个码位有可能用1到4个字符来显示自己，1到4个bite，1到4对，目前是一到是的，对它它是个变长的，目前是1到4个半来决定，所以半角和全角差别在这里已经不明显。",
      "speaker": "发言人2"
    },
    {
      "time": "01:57:01",
      "text": "现在我们实际看到的半角或全角，其实是字体厂商为了保留大家的习惯，它画成半角和化成拳脚而已。你去调用那个马，其实就是一个uni KO的一个码而已。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:12",
      "text": "对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:57:13",
      "text": "那个中文字体里面现在的半角和拳脚的一个字符的应用规则是怎么样子？我记得好像就是要全部半角。",
      "speaker": "发言人3"
    },
    {
      "time": "01:57:22",
      "text": "他的全部全讲就是废除这两个概念是最好的方式。",
      "speaker": "发言人4"
    },
    {
      "time": "01:57:29",
      "text": "所以在GB里面，GB里面其实它有很多，比如说像什么俄文的西里尔字母的那些，它其实在里面画的。当年他放到GB里面，他意思是全饺子全饺子。对，当年是那个意思。然后他的确是很画那些，所以国产的那些字体它的确是画成全角字了。然后有人就用那个来排俄文，然后看出来真的是惨不忍睹。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:55",
      "text": "每个字符都间距很大吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:57:57",
      "text": "豆瓣上面一旦出现俄文书，简直是惨不忍睹。",
      "speaker": "发言人2"
    },
    {
      "time": "01:58:03",
      "text": "对，这其实都是一些历史遗留的产物。就是当时因为这个编码还没有统一到，我没有完全统一到unicode的那套编码系统上面了。所以导致了中国以前的中国国标以前想编码一些西文字符的时候，他会搞一套自己的规则在里面。然后又跟unicode的那一套并不是完全重合。",
      "speaker": "发言人4"
    },
    {
      "time": "01:58:26",
      "text": "对，那问题是现在大家已经是unicode的，但是还要为了保持那个习惯。所以后来再讲的，而且的确大家能看出来，这个是半角的字。但实际上它里面的马位已经是一就跟那个双字节，但是已经没有关系了，就这一个尤尼扣马位了，都已经是。对，然后实际上它的宽度是通过字体的字体设计师来去定义的。它那个front里面的定义。",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:53",
      "text": "它的宽度是排版引擎来决定，排版引擎和字体提供的一些信息来决定。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:01",
      "text": "所以我一直在想，现在我们这个什么计算机也好，手机也好，系统这么复杂，也就是我们这些人为弄出来的因素。你看光打一个字显示到这个屏幕上，就要经过这么大一堆的问题。然后中间随时可能出现错误bug或者是什么系统崩溃，这个也很正常。",
      "speaker": "发言人3"
    },
    {
      "time": "01:59:21",
      "text": "动不动就乱。",
      "speaker": "发言人1"
    },
    {
      "time": "01:59:22",
      "text": "动不动就崩溃了。对，真的就是因为unicode的这个事情，导致很多安全漏洞，也不出奇。之前我记得有一年你们记不记得是有一段那种文字叠在一起，然后iphone 1打开。",
      "speaker": "发言人3"
    },
    {
      "time": "01:59:39",
      "text": "就会自动。",
      "speaker": "发言人2"
    },
    {
      "time": "01:59:40",
      "text": "死机的那个对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:59:42",
      "text": "然后那个safer浏览器打开就自动崩溃了，就是因为这个坑爹的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:59:50",
      "text": "而且因为像尤其是文字编码这个东西的话，他必须要向后兼容。它后面的编码的话尽量要跟前面兼容，要不然特别麻烦，他字会变掉。所以他越是要向后兼容，就他的那个负面的那些债务就越来越多，所以它就越容易出bug。",
      "speaker": "发言人1"
    },
    {
      "time": "02:00:11",
      "text": "对现在实际上绝大多数人类的复杂系统，其复杂性都是历史性的，就是复所有复杂的程度大部分都是历史原因。如果你从头开始文明火灭了，啪叽重新设计这个东西，肯定不会设计成当初那个样子。",
      "speaker": "发言人2"
    },
    {
      "time": "02:00:25",
      "text": "大家都搞一个非常简单一点的对对。",
      "speaker": "发言人3"
    },
    {
      "time": "02:00:33",
      "text": "我们说了2个小时，终于把一个字打显示到屏幕上去了。但是我们如果要把它打印出来怎么办？",
      "speaker": "发言人1"
    },
    {
      "time": "02:00:41",
      "text": "要再说2个小时吗？其实也没有这么复杂，就打印出来。对你发你把你的文字的内容发给打印机，然后打印机内部其实也有一套显示系统。然后这个显示系统只不过它最终形成的那形成的结果是一个实体可见的一张纸，或者是对包括3D打印机都都其实大家多多少少都是一套把这个字体编码，把一套编码和其对应的形状联系起来。然后控制这个控制一个喷头也好，或者是硒鼓也好，把这个最终形状显示出来就喷现在。",
      "speaker": "发言人2"
    },
    {
      "time": "02:01:27",
      "text": "打印机应该不需要再内嵌字体了，它都是通过解析那个PS的那个或者是一P就是PS的一个标准来做的。因为以前我记得，所以确实出现过那个，所以就要针式打印，就是打印机。那对，它是需要内嵌一个字库才可以打中文。最早的时候。",
      "speaker": "发言人3"
    },
    {
      "time": "02:01:49",
      "text": "但到后面都也是在很多PS打印机，它也要安要安装的。所以我们中老年程序员在继续可以叫诰，告诫小朋友当年打印机是要有打印字体的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:02:01",
      "text": "要不然它打不出字是空白的对。",
      "speaker": "发言人3"
    },
    {
      "time": "02:02:03",
      "text": "而且在现在如果你遇到一些比较极端的例子的话，有些人还是会选择把那个打呃PDF里面的字体转换为曲线，然后最终给打印机当做一幅画来打，不然有些字是是是漂了的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:02:22",
      "text": "对，在日本的话经常会出这个问题，因为就是我我在我比如说我做的这个排版排的这个东西，然后到输出方那边，他没有同样的字体文件，那他可能就会字会变掉。没有关系，他有的时候因为设置的问题，整个排版就会崩掉。",
      "speaker": "发言人1"
    },
    {
      "time": "02:02:40",
      "text": "不光是有这个，所以还有像现在PDF也有这个问题。就是很多在windows上面制作的PDF，他没有选择建那个字体文件，或者是把那个字体轮廓作为一个subset的方式放进去的话，那在非就没有那个字体文件系统上，比如说mac比如说那上面它就显示是一个方框，就没有那个字。",
      "speaker": "发言人3"
    },
    {
      "time": "02:03:02",
      "text": "对，所以你看要说的话还是有很多要说像什么字体子集内嵌这个事情的话，其实还有很多事情要做。其实PDF在这个技术发对东亚的这些文本显示的话是发挥了很大的作用的。这个subset对吧？要不然的话他没有办法就把因为PDF它的文件要越来越多。",
      "speaker": "发言人1"
    },
    {
      "time": "02:03:27",
      "text": "每个都是几十兆一个，哪怕只有两页的字。",
      "speaker": "发言人3"
    },
    {
      "time": "02:03:31",
      "text": "当年的话就是为什么true type微软和苹果联手起来发true type，就是这一点他要打败阿杜比。阿杜比他那时候他就是有一个ATM阿杜比type management，他就是要来控制显示字体和打印机的字体，给打印机的是很精高精度的PSPS软件，PS曲线的字体。而那给显示的话，那就是低端的一个点阵字体。所以它需要一个它ATM这样一个软件来进行来调配，然后下载以后一起下载，然后交给这个输出端去给打印机才能打印出东西来。那后来就是微软和apple它就联合出了这个true type以后，它就可以动态的下载这个字体的曲线信息，然后直接就传给了打印机。所以以后就逐渐的就不用打印端的，就输出端的这个打印字体了。所以当年的这这样的一个工作流程的话，对整个DTP桌面排版的流程是一个非常大的一个影响。",
      "speaker": "发言人1"
    },
    {
      "time": "02:04:44",
      "text": "天哪这个。都都很难想象，你现在如果要自己搞一套新的操作系统，你要从头把这些都做一遍的话，不要做到猴年马月去。",
      "speaker": "发言人3"
    },
    {
      "time": "02:04:55",
      "text": "对，现在我们随便鼠标点两下，那就印出来了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:05:00",
      "text": "所以现在终于知道那么多CPU的性能的提升都跑哪里去了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:05:07",
      "text": "对，这个计算机他都在，他在辛苦的演算，他在算什么东西，对。",
      "speaker": "发言人1"
    },
    {
      "time": "02:05:13",
      "text": "对他就不停的在这跟生物也有多有点有点巧合。就是人类为什么眼睛要长在脸上，听起来很奇怪，就是因为你这就是因为眼睛挺强的，眼睛要尽量接也要尽量靠近大脑，不然你眼睛比如说你眼睛长在手指上其实更灵活。但是神经这个。",
      "speaker": "发言人2"
    },
    {
      "time": "02:05:37",
      "text": "什么神经链路就更长是吧？",
      "speaker": "发言人3"
    },
    {
      "time": "02:05:40",
      "text": "神经链路短，然后那个带宽比较高。然后大脑里面其实和视觉相关的那一块也是特别发达。",
      "speaker": "发言人2"
    },
    {
      "time": "02:05:51",
      "text": "为什么会扯到这个？",
      "speaker": "发言人3"
    },
    {
      "time": "02:05:57",
      "text": "好吧，既然我们的字终于从打印出来了，我们这一期节目先谈到这里。",
      "speaker": "发言人1"
    },
    {
      "time": "02:06:02",
      "text": "好好，其实还是说开了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:06:05",
      "text": "开了个一路开了多少盒子，但是都没有给盖上。",
      "speaker": "发言人3"
    },
    {
      "time": "02:06:11",
      "text": "比如说其实刚才我在想我们遗漏的最大的一个点，其实是啊浏览器里面的字，这字体的选择过程。就比如说有些人会有疑惑说为什么我在word里面可以把中文字体设置成那么多种，什么宋体、楷体、隶书对吧？但是浏览器里面就不行。",
      "speaker": "发言人2"
    },
    {
      "time": "02:06:35",
      "text": "那这种可以专讲一些。",
      "speaker": "发言人4"
    },
    {
      "time": "02:06:39",
      "text": "对waf什么的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:06:41",
      "text": "包括那个沃夫格式是什么东西，M在那个网页上的显示和它在这个传统的SQL数据库里面的一些坑。",
      "speaker": "发言人4"
    },
    {
      "time": "02:06:51",
      "text": "你们说的你们都得记着，自己说的坑自己填。",
      "speaker": "发言人1"
    },
    {
      "time": "02:06:57",
      "text": "不能只管挖不管埋。",
      "speaker": "发言人3"
    },
    {
      "time": "02:06:59",
      "text": "自弹自唱债务表。",
      "speaker": "发言人2"
    },
    {
      "time": "02:07:04",
      "text": "刘克宁表示。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:05",
      "text": "很高兴克宁。刘克宁。",
      "speaker": "发言人2"
    },
    {
      "time": "02:07:10",
      "text": "好了，今天的节目就到这里，我们还是欢迎大家继续写邮件给我们反馈，自弹自唱的联系邮件地址是podcast at the time点com podcast拼写是PUDCAST，the type的拼写是THETYPE。我们的联系地址是podcast at the type点com OK。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:32",
      "text": "No，感谢收听IPM pot ask网络旗下的IT技术主义娱乐节目内核恐慌。我们号称哈克尔，但是也没有干货，想听的听，不想听就别听，你可以为本节目捐款，捐款地址是kero panic dota FM slash donate。捐款金额随意，只要是八的正整数倍就可以。捐款不会给你带来什么，不捐也不会让你失去什么。我们的口号是no hot feelings。如果你有任何反馈，可以发邮件到kernel panic at IPN dot LI。同时也欢迎你收听real主持的风投圈以及IPN旗下的其他几档节目。未知道太医来了，流行通信history，硬影像无资源，博物志选美陛下关一天世界。我们下期节目再会。",
      "speaker": "发言人2"
    },
    {
      "time": "02:08:15",
      "text": "拜拜。",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:20",
      "text": "吴涛，你这罐头越来越顺了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:08:22",
      "text": "吴涛念车的时候好像加了一个加速的future。",
      "speaker": "发言人4"
    },
    {
      "time": "02:08:27",
      "text": "你看那些什么综艺节目，最后要念念那个赞助商名的时候，就使劲爆吧，这也是一项重要技能。",
      "speaker": "发言人3"
    },
    {
      "time": "02:08:36",
      "text": "中国药品广告播完之后，无论那个药品广告多么的轻松温馨，最后一定要来一个说的特别快的什么去追逐之类的，请咨询您的医师或您的药剂师。",
      "speaker": "发言人2"
    },
    {
      "time": "02:08:50",
      "text": "因为那个是广告法规定的，必须要讲的，他也很不想讲。",
      "speaker": "发言人3"
    },
    {
      "time": "02:08:55",
      "text": "哼吴涛，你不能偷懒，以后录我们这弹歌串的话，你要每期也要有个新口号。",
      "speaker": "发言人1"
    },
    {
      "time": "02:09:02",
      "text": "说也是这一期没有新口号，但是我之前其实试图找一个跟字体稍微有点关系的。好吧，本期我们的口号是没有口号不，本期我们的口号是flash。这个点出于这是什么鬼？点出于canute高德纳在排印他的第一版TOCP就是the art and the art of computer program，就是计算机的编程艺术的这本书的时候，他看到了自己的初稿的一个小样。然后他当时说不是。",
      "speaker": "发言人2"
    },
    {
      "time": "02:09:43",
      "text": "所以他就是这排的是啥？",
      "speaker": "发言人4"
    },
    {
      "time": "02:09:49",
      "text": "对，然后他就他就专门他就专门搞了一套叫做先是搞了meta phone，然后用metaphor，然后再搞一套拉抬，搞搞了太，然后用来排自己的版。对，这算是一个比较应景的口号，本期我们的口号就是play。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:11",
      "text": "好难念。",
      "speaker": "发言人1"
    },
    {
      "time": "02:10:12",
      "text": "我不知道他具体实际上怎么样，因为他毕竟是个美国人，他也许是念的是美的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:21",
      "text": "对，其实我我们还可以讲讲，就找机会讲讲meta它的一些设计哲学，还是有一点意思。",
      "speaker": "发言人4"
    },
    {
      "time": "02:10:29",
      "text": "而且有有机会我还是想讲那个。",
      "speaker": "发言人1"
    },
    {
      "time": "02:10:32",
      "text": "太那个好吧，那个那个完全不懂。",
      "speaker": "发言人4"
    },
    {
      "time": "02:10:40",
      "text": "的确是坑。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:41",
      "text": "越来越深了，已经挖到地球那边去了。",
      "speaker": "发言人3"
    }
  ],
  "lab_info": {
    "summary": "本次对话深入探讨了字体渲染、抗锯齿技术、矢量图形、TrueType与OpenType字体格式，以及操作系统和网页字体显示的差异。讨论指出，矢量图形在转换为像素图形时易失真，而抗锯齿技术显著提升了字体显示质量。TrueType和OpenType格式各有千秋，操作系统如Windows与Mac在字体处理上存在区别。对话还涉及了Unicode编码、半角与全角字体差异，以及字体设计哲学。此外，还讨论了排版、打印机技术，和文本从屏幕到打印输出的转换过程，全面展现了字体和文本显示技术的复杂性及其技术进步的影响。",
    "qa_pairs": [
      {
        "question": "IPNN领导人的串台为什么是很好的事？",
        "answer": "串台越淫乱越好。",
        "time": "00:00:08"
      },
      {
        "question": "为什么开场要念最高指示？",
        "answer": "因为按照传统，开场时应先念一下最高指示。",
        "time": "00:00:32"
      },
      {
        "question": "节目是否要打上分级标签？",
        "answer": "还没有决定，没有说脏字。",
        "time": "00:00:45"
      },
      {
        "question": "推荐听众如何收听节目？",
        "answer": "推荐大家使用泛用型博客客户端收听我们的节目。",
        "time": "00:00:48"
      },
      {
        "question": "这期节目有何特别之处？",
        "answer": "今天是自弹自唱第21集，同时也是内核恐慌的第39期，并且是两个节目的首次合作，起名为curing panic。",
        "time": "00:02:48"
      },
      {
        "question": "curing panic这个名字是怎么来的？",
        "answer": "这个名字来源于看到用西文排拉丁字母且拼写错误明显的招牌时所产生的心理症状，即curing panic。",
        "time": "00:03:16"
      },
      {
        "question": "吴涛的身份问题如何解决？",
        "answer": "吴涛虽然是内核恐慌团队成员，但他是TIB（type is beautiful）的CTO，本质上是开玩笑的头衔，他在TIB更多扮演的是技术支持的角色。",
        "time": "00:04:48"
      },
      {
        "question": "type chat中吴涛为何很少说话？",
        "answer": "因为吴涛在type chat中更多是从技术角度了解，审美和历史渊源等方面较为欠缺，所以会显得无话可说。",
        "time": "00:06:01"
      },
      {
        "question": "TIB团队目前在做什么有趣的事情？",
        "answer": "TIB团队正在制作一本名为“离线”的杂志，专注于geek主题内容，虽然标榜离线，但仍有一个网站，并欢迎感兴趣的听众关注和订阅。",
        "time": "00:08:34"
      },
      {
        "question": "这期节目的主题是什么？",
        "answer": "节目的主题是从用户敲击键盘开始，到最终打印输出的过程中发生的一切，整个过程非常漫长且复杂。",
        "time": "00:10:12"
      },
      {
        "question": "日本人在输入法上，是否大部分人都使用罗马字拼音输入？日本现在是否还在广泛使用假名书写？",
        "answer": "是的，现在绝大多数日本人使用罗马字拼音进行输入，虽然日本也有假名输入法，但真正采用的人非常少，只有一位活人使用假名直接输入法。不，现在日本人已经不怎么使用假名书，和台湾地区使用注音符号输入的情况类似。",
        "time": "00:16:31"
      },
      {
        "question": "日本键盘上如何分配假名？",
        "answer": "每个假名都被分配到了键盘上的不同键位上，并且有些符号键位还被占用了，如冒号、右括号、逗号、大于号、小于号等。",
        "time": "00:17:47"
      },
      {
        "question": "日本标准键盘上的键帽上是否有很多字符？",
        "answer": "是的，日本标准键盘的键帽上写满了字符，有些甚至写在侧面，如果是高兼容性的键盘，可能会采用巧克力键盘设计。",
        "time": "00:18:08"
      },
      {
        "question": "日本键盘与美版键盘在符号和括号上的差异会造成编程困扰吗？",
        "answer": "会有一些困扰，比如在日本键盘上，中括号是上下排列而非左右相邻，且日元符号和反斜杠的位置有时会被替换掉。",
        "time": "00:19:01"
      },
      {
        "question": "日元符号的使用错误是否源于编码问题？",
        "answer": "不是编码错误，而是日本早期不支持汉字输入，所有字符压缩在256个字符内，选择了最不常见的符号（日元符号）来替换反斜杠。",
        "time": "00:20:52"
      },
      {
        "question": "左右键位布局是否会影响打字效率？",
        "answer": "是的，像韩文输入法中，辅音分配在左手，元音分配在右手，这样左右搭配提高了打字效率。而中文五笔输入法并没有讲究左右分布，主要是根据字根和常用偏旁进行分配。",
        "time": "00:23:14"
      },
      {
        "question": "键盘布局（实体布局）是否可以更改？是否可以将实体布局与功能布局进行重新映射？",
        "answer": "实体布局一般不可更改，但功能布局（功能层布局）可以在操作系统中更改，例如中文输入法和英文输入法之间的切换就相当于切换了一个功能布局。实体布局一般不会变化，但如果更改了功能布局，实际按下的键和键帽上的文字就会不同，因为功能布局改了。而无刻印键盘可以更自由地调整键位映射。",
        "time": "00:25:27"
      },
      {
        "question": "你买的是最新款的苹果蓝牙键盘吗？这个最新蓝牙键盘的方向键是什么样的？",
        "answer": "是的，我买的是最新的、自带电池的那种苹果蓝牙键盘。最新款的苹果蓝牙键盘的方向键是全高的，不同于我当前使用的macbook pro上的半高的方向键。",
        "time": "00:32:09"
      },
      {
        "question": "苹果是如何实现预览不同设备键盘布局的？",
        "answer": "苹果能够预览不同设备键盘布局，是因为它知道接入的是哪个设备，并获取到该设备键盘的实际布局信息。",
        "time": "00:32:51"
      },
      {
        "question": "游戏键盘上每个按键是否都有LED屏幕显示内容？",
        "answer": "对，游戏键盘上有小LED屏幕，可以根据编程改变显示内容，解决了刻印无法变换的问题，但这种键盘成本较高，且按键需要做小屏幕。",
        "time": "00:33:20"
      },
      {
        "question": "触屏上的软键盘与实体键盘相比有什么优势？",
        "answer": "软键盘在触屏上比实体键盘简单很多，不存在实体键盘的扫描码问题，而且不存在按键磨损、刻字变化等问题。",
        "time": "00:34:05"
      },
      {
        "question": "能否解释一下键盘的扫描码是如何工作的？",
        "answer": "键盘扫描码是一个由芯片转化电信号的过程，通过快速扫描键盘矩阵来确定用户按下的键位，然后将位置信息转化为计算机能识别的编码（即扫描码），最终由操作系统映射为对应的字符。",
        "time": "00:34:36"
      },
      {
        "question": "不同操作系统如何处理键盘扫描码和文字编码？",
        "answer": "在PS2时代，键盘扫描码可能根据主板和操作系统的不同而变化，而在USB时代，大部分USB键盘遵循HID协议，而蓝牙键盘则通常套用USB的HID编码方式。操作系统接收到字符后，需要根据当前文字编码规则（如ASCII码或Unicode编码）将字符存储或显示出来，这与键盘扫描码是两个独立的过程。",
        "time": "00:37:34"
      },
      {
        "question": "日本汉字的起源是什么？如果没有中国，日本是否会使用拉丁字母来表示其固有语言的读音？",
        "answer": "如果当初没有中国的影响，日本可能今天会像韩语那样，采用一套自己发明的字母体系来表达固有语言的读音。",
        "time": "00:46:27"
      },
      {
        "question": "日语和韩语在使用汉字方面存在什么问题？",
        "answer": "日语和韩语中存在大量中文介词，有些甚至没有固有读音，依赖于汉字表达。这可能导致没有汉字的情况下产生歧义。比如韩国虽然尽量避免在非必要时使用汉字，但在人名、地名和可能发生歧义的情况下仍会采用汉字。",
        "time": "00:47:07"
      },
      {
        "question": "为什么有些日本人的名字只有假名而没有汉字？",
        "answer": "某些日本人的名字在早期可能只有假名形式，例如泽尻惠理香。当他们进入中国市场后，其经纪人才会为其汉字名字进行正名，如泽尻英龙华。",
        "time": "00:48:23"
      },
      {
        "question": "编码问题是如何产生的，以及各国和地区如何处理编码差异？Unicode是如何解决全球不同语言编码问题的？",
        "answer": "编码问题源于不同语言和字符集之间的差异。早期各国和地区制定了各自的编码标准，如中国的GB国标系列、日本的GS标准以及韩国的KS标准等。这些编码都是为了将每个国家的标准字符集映射到一个数字，并将其转换成计算机可识别的二进制码。Unicode出现之前，各国和地区都有自己的编码标准。Unicode通过统一各种字符集，将不同语言的字符编码成全球通用的数字表示，从而解决了字符跨语言、跨平台的显示和传输问题。",
        "time": "00:49:31"
      },
      {
        "question": "在Windows系统上为何会出现乱码现象？",
        "answer": "Windows系统在保存和显示文本时，会根据操作系统和用户设置的编码方式对文本进行编码或解码。如果接收方使用的编码与发送方不一致，或者没有正确识别编码标志，就可能出现乱码现象。",
        "time": "00:50:12"
      },
      {
        "question": "现今日本和韩国是否主要使用Unicode编码？",
        "answer": "目前，操作系统的内核如Mac OS X原生支持Unicode编码。在Windows系统中，默认可能仍使用GBK编码，但用户可以选择手动设置UTF8等其他编码方式。在日本和韩国，具体使用哪种编码方式可能因操作系统和应用程序的不同而有所差异。",
        "time": "00:56:40"
      },
      {
        "question": "在字体映射过程中，如果出现错误会导致什么问题？",
        "answer": "如果字体映射错误，比如中文字体优先级设置错误或字体文件中的mapping信息有误，那么在换字体时可能会导致显示的文字内容错误。",
        "time": "01:01:39"
      },
      {
        "question": "输入法在汉字输入过程中的主要作用是什么？",
        "answer": "输入法的作用是将用户通过键盘输入的字符按照某种规则转化为汉字，它并不直接与编码关联，而是处理输入的字符，并且在很多情况下，输入法的工作层面是在已经输入的字符层面，而不是与按键本身相关。",
        "time": "01:03:32"
      },
      {
        "question": "当前输入法有哪些先进的特性？",
        "answer": "现在的输入法除了具备词频调整功能外，还拥有联机词汇库，能够实时更新流行词汇，如搜狗输入法的云词库，可以实时反映出最新的网络词汇。",
        "time": "01:06:03"
      },
      {
        "question": "输入法与编码的关系是怎样的？",
        "answer": "输入法和编码虽然有区别，但输入法工作时，确实涉及到编码过程。输入法将用户输入的字符转换为特定的编码格式，然后操作系统根据这个编码去调用相应的字体文件进行显示。",
        "time": "01:04:44"
      },
      {
        "question": "输入法中是否存在动态编码系统？",
        "answer": "是的，拼音输入法通常是一个动态编码系统，每次按键次序可能产生不同的汉字，它实际上是一套检索系统，能够根据用户的输入快速找到想要的汉字。",
        "time": "01:04:54"
      },
      {
        "question": "“EMOJI”这个词在英文世界和日语中的读法有何不同？",
        "answer": "在英文世界中，EMOJI可能被误读为\"E-mo-jy\"，但在日语中是\"M. OG\"，中文则译为“会文字”，意指用字符画出的形象或表情符号。",
        "time": "01:08:49"
      },
      {
        "question": "EMOJI在计算机系统中的处理方式是怎样的？",
        "answer": "EMOJI是一类特殊的字符，它们不需要编码即可显示，而考（Kemoji）则需要通过编码方式实现。例如，苹果公司的Apple Color Emoji字体就是一款带有颜色信息的字体，它的实现方式包括位图和可能存在的矢量图形式。",
        "time": "01:11:08"
      },
      {
        "question": "清有了吗？那个C字头的字体属于哪个技术？",
        "answer": "没有，是随windows 7或vista发布的。那个是属于随clear view技术发布的。",
        "time": "01:16:42"
      },
      {
        "question": "当初Windows系统字体设计时，为何选择点阵字库？",
        "answer": "当时很多PC使用的是低分辨率屏幕，不适合显示非点阵字库的中文字体。",
        "time": "01:17:02"
      },
      {
        "question": "字体文件中的字体数据是如何被系统调用的？",
        "answer": "在小字号时，系统会调用点阵数据；在大字号时，调用轮廓数据。点阵字库可以看作是一个极端的hinting例子。",
        "time": "01:17:37"
      },
      {
        "question": "渲染提示（render hinting）是什么？",
        "answer": "渲染提示是一种通过系统来决定如何根据屏幕分辨率调整字体显示的机制，即使存储的是矢量轮廓数据，也能确保最终在屏幕上清晰呈现。",
        "time": "01:18:58"
      },
      {
        "question": "Windows和Mac在字体设计和显示清晰度上的哲学取向有何异同？",
        "answer": "Windows倾向于在有限物理基础上尽量保证文字清晰，不惜牺牲部分字体设计；而Mac则更注重保持字体原有设计形状，即使在低分辨率下可能显得模糊，但随着硬件发展仍能保持设计初衷。",
        "time": "01:25:16"
      },
      {
        "question": "汉字与西文在抗锯齿和渲染提示上的处理有何不同？",
        "answer": "Windows系统在汉字上走了弯路，尤其是在汉字的hinting技术上，由于技术和审美上的不熟悉，导致汉字的渲染效果不如西文理想。而现代智能手机等设备普遍采用高分屏，对字体清晰度要求较高，因此需要不同的处理方式。",
        "time": "01:29:15"
      },
      {
        "question": "在打印方面，分辨率DPI和屏幕上PPI有何区别？",
        "answer": "DPI（打印分辨率）和PPI（像素密度）在本质上是不同的。打印时，无论是激光打印还是喷墨打印，其分辨率都是以每英寸的墨点数量来衡量，比如常见的有300DPI，而PPI则是用来描述屏幕上的像素密度，通常分辨率要高一个数量级，如1200、1800等。但当提到专业级打印机时，其分辨率可能达到3600DPI以上。尽管DPI数字上通常更高，但在实现灰阶效果上，DPI通过控制单位面积内墨点的数量来模拟灰度，而PPI则可以通过像素点的分配实现更精细的灰度显示。",
        "time": "01:30:52"
      },
      {
        "question": "现在屏幕分辨率与印刷品质量相比如何？",
        "answer": "随着屏幕分辨率的提高，尤其是retina屏幕的出现，其PPI已经可以接近甚至超越传统印刷品的分辨率，从而产生接近印刷品的高质量显示效果。未来VR/AR眼镜等设备为了追求更高品质的视觉体验，也会不断追求更高的像素密度。",
        "time": "01:33:27"
      },
      {
        "question": "早期OS X系统中，默认的屏幕截图格式是什么？",
        "answer": "在早期的OS X系统中，默认的屏幕截图格式并非PNG，而是TIFF格式。用户需要手动更改保存格式才能得到PNG文件。",
        "time": "01:34:29"
      },
      {
        "question": "OS X系统上截图功能的变化及其与PDF支持的关系是什么？",
        "answer": "自OS X系统开始，其设计理念是将UI元素“印刷”到屏幕上，因此PDF格式得到了很好的支持，原生支持在Mac OS上查看和编辑PDF文件。而关于屏幕截图，默认保存格式虽为TIFF，但用户可通过快捷键组合命令+Shift+4并使用预览应用另存为PNG格式进行转换。",
        "time": "01:37:38"
      },
      {
        "question": "TrueType和OpenType字体格式有何区别？",
        "answer": "TrueType（TTF）和OpenType（OTF）是两种通用的字体格式。TrueType由微软和苹果联合开发，基于二次贝塞尔曲线；而OpenType是对TrueType的扩展，由Adobe主导，支持更多的特性，如更多的控制点和更宽泛的提示信息。在实际应用中，TrueType字体在Windows系统中通常会包含大量渲染提示信息，而OpenType字体更多用于打印场景，尤其是在需要高质量打印效果时。",
        "time": "01:42:43"
      },
      {
        "question": "专业字体和非专业字体在定价上有何区别？目前Adobe售卖的字体主要以哪种格式为主？",
        "answer": "可以对专业字体和非专业字体进行区别定价，这是一个比较鸡贼的做法。Adobe现在售卖的专业字体大多以Open type格式为主，因为Open type支持较多的高级特性，如光学扩展等功能，而这些特性在True type中暂时无法实现。",
        "time": "01:45:29"
      },
      {
        "question": "Open type字体的封装格式是怎样的？",
        "answer": "Open type字体的封装格式是一个盒子结构，可以将True type曲线等相关数据装进这个盒子中，形成一个整体的Open type字体文件，就像MKV文件可以封装各种视频内容一样。",
        "time": "01:45:41"
      },
      {
        "question": "True type和PostScript的hinting技术有何不同？",
        "answer": "True type的hinting技术针对Windows系统，而PostScript的hinting则相对微弱且通常在打印设备上生效；两者虽然名字相同，但本质上是不同的技术层次。",
        "time": "01:47:05"
      },
      {
        "question": "操作系统对字体渲染引擎有何影响？",
        "answer": "不同操作系统和发行版对字体的渲染引擎有所不同，例如Windows和macOS，甚至同一操作系统在不同版本间也会有所变化。此外，像微软的ClearType技术和苹果的AAT技术都在不断优化更新。",
        "time": "01:48:21"
      },
      {
        "question": "对于字符数统计问题，不同操作系统有何差异？",
        "answer": "在不同操作系统中，对于同一字符可能计算出不同的字符数，这不仅涉及Unicode标准，还与底层的屏幕显示技术、字体编码和排版引擎有关。",
        "time": "01:51:46"
      },
      {
        "question": "半角和全角字符的概念是如何产生的？",
        "answer": "半角和全角字符的概念源于排版时代，用来区分宽度不同的字符。但在Unicode编码体系中，半角和全角已不再区分，字符的显示宽度由字体设计师在字体中定义。",
        "time": "01:56:22"
      },
      {
        "question": "现在对于GB编码中的半角和全角字符应如何处理？",
        "answer": "最佳方式是废除半角和全角的概念。尽管目前仍需保持习惯显示，但实际上已无实际意义，因为Unicode编码已经统一，字体宽度由排版引擎和字体本身决定。",
        "time": "01:58:53"
      },
      {
        "question": "打印机是否还需要内嵌字体？",
        "answer": "现在打印机通常不需要内嵌字体了，它们通过解析PS标准来处理字体。以前某些针式打印机需要内嵌字库才能打印中文，但现在很多PS打印机也需要额外安装字体。",
        "time": "02:01:27"
      },
      {
        "question": "是否存在将PDF字体转换为曲线以供打印机打印的情况？",
        "answer": "是的，有些人会将PDF中的字体转换为曲线，尤其是当某些字体在输出端没有安装或不兼容时，这样可以确保字体在任何环境下都能正常打印。",
        "time": "02:02:03"
      },
      {
        "question": "PDF技术如何影响东亚文本显示？",
        "answer": "PDF技术在东亚文本显示方面发挥了重要作用，其中的字体子集内嵌技术使得即使在没有完整字体文件系统的地方也能正常显示和打印汉字，避免了因字体缺失导致的排版错误。",
        "time": "02:03:02"
      },
      {
        "question": "TrueType字体是如何实现跨平台显示和打印的？",
        "answer": "TrueType字体是由微软和苹果联合开发，它能够动态下载字体曲线信息并直接传给打印机，取代了以前需要打印机端单独输出字体的做法，极大地简化了DTP桌面排版流程。",
        "time": "02:03:31"
      },
      {
        "question": "字体设置在word文档和浏览器中的差异是什么？",
        "answer": "在word文档中可以设置多种中文字体，但在浏览器中受限于web字体标准，无法像word那样自由选择多种字体。这是一个遗留的问题，涉及到字体选择过程中的技术限制和规范差异。",
        "time": "02:06:11"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "自弹自唱与内核恐慌合作特别节目",
        "summary": "本次节目为自弹自唱与内核恐慌的首次合作，特别命名为\"curing panic\"。节目中，主播们讨论了关于节目开场白、封号的想法，以及对节目气势的比较。他们还谈到了对于播出内容的分级标签的考虑，强调了使用泛用型博客客户端收听的重要性。此外，节目中穿插了对\"最高指示\"的提及，引发对是否侮辱了某些人物的讨论。整体上，这次合作特别节目充满了轻松幽默的氛围，同时也透露出一些对于播客制作的思考。"
      },
      {
        "time": "00:03:06",
        "title": "自弹自串与Curling Panic",
        "summary": "讨论集中于“curling panic”现象，即对不标准外语使用的恐慌感，尤其是在中文环境中看到不正确的外语使用。同时，讨论还涉及了与Type is Beautiful和IPN合作的情况，以及吴涛在Type is Beautiful的角色和贡献。对话中也提到了一些个人的经历和对翻译工作的看法，以及对离线杂志的兴趣。"
      },
      {
        "time": "00:10:12",
        "title": "自弹自串：键盘输入到打印输出的奇妙旅程",
        "summary": "本期节目中，我们将探讨从用户敲击键盘开始，到最终打印输出的全过程。讨论了键盘布局的多样性，特别是日文键盘的复杂性，以及不同国家键盘布局的差异。通过历史渊源的探讨，揭示了程序员对于字体选择的关注，以及计算机技术与日常生活的密切联系。节目通过轻松的交流，不仅解决了选题过剩的问题，也促进了技术话题的分享与交流。"
      },
      {
        "time": "00:14:55",
        "title": "全球主流键盘布局解析",
        "summary": "讨论了全球三种主流键盘布局：ANSI（北美）、ISO（德国等地区）和JIS（日本）。ANSI布局的特色是扁平的长条回车键，ISO布局则以倒L型回车键为特点，并多出一个键，而JIS布局同样采用倒L型回车键，但键位更多，以适应日语输入的需求。特别指出，尽管日语键盘支持假名输入，大多数日本人使用罗马字拼音输入法，因为直接的假名输入法难以记忆。此外，还提及了法语键盘的特点，如默认输出符号声调而非数字，以及需要特殊组合键来打出特定符号。"
      },
      {
        "time": "00:18:59",
        "title": "键盘布局和字符编码的差异与影响",
        "summary": "讨论重点在于不同地区键盘布局的差异，特别是美国和日本键盘在符号位置上的区别，以及早期Windows日文版中路径分隔符的使用导致的混淆。此外，还提及了个人对左右手使用的习惯以及韩文和中文键盘布局的设计原则，强调了键位映射对打字效率的重要性。"
      },
      {
        "time": "00:24:31",
        "title": "键盘布局的多样性及其对用户的影响",
        "summary": "对话中讨论了键盘布局的多样性，包括实体布局和功能布局的区别，以及不同国家和地区键盘布局的差异。特别提到了波兰键盘的特殊情况，以及程序员倾向于使用英文布局的键盘来避免布局不兼容的问题。还讨论了无刻印键盘（如HHKB）的优势，它允许用户根据个人喜好自由调整键位映射，以及如何通过操作系统调整键盘布局以适应不同需求。最后，提到了德沃夏克键盘布局的使用情况和个人定制键盘布局的可能性，强调了键盘布局对打字效率和用户舒适度的影响。"
      },
      {
        "time": "00:30:29",
        "title": "键盘布局和预览功能的探讨",
        "summary": "对话中讨论了操作系统对键盘布局的预览功能，特别比较了OSN（可能指代macOS）和Windows系统在输入源名称改变时的不同处理方式。在OSN中，改变输入源名称时会显示键盘布局的预览，而在Windows中，虽然可以调整，但没有界面预览功能。进一步讨论了实体键盘与触屏软键盘的布局差异，以及苹果蓝牙键盘的布局变化。最后，触及了未来技术，如游戏键盘上的LED屏幕按键，以及这些技术对传统键盘设计的挑战。"
      },
      {
        "time": "00:34:15",
        "title": "探讨软键盘与实体键盘的差异及扫描码概念",
        "summary": "软键盘在实现原理上相对简单，不像实体键盘那样涉及到扫描码的概念。扫描码是实体键盘中用于标识按键的特定代码，而软键盘由于其虚拟性质，不存在这一概念。"
      },
      {
        "time": "00:34:35",
        "title": "键盘工作原理及计算机编码系统",
        "summary": "键盘作为一种复杂数模转换系统，将物理按键动作转化为计算机可识别的扫描码。每个USB键盘内置芯片，将按键电信号转化为特定的扫描码，这一过程涉及对键盘内部网格的快速扫描。扫描码的生成与解读不涉及字符的具体意义，仅指示了哪个键被按下。随后，操作系统根据扫描码决定对应的字符。文中还提及了从PS/2到USB接口的键盘扫描码变化，以及现代键盘通过HID协议进行编码。此外，讨论了从键盘到操作系统再到内存或硬盘中字符编码的转换过程，强调了字符编码与键盘扫描码之间的区别，以及现代最通用的ASCII编码的使用。"
      },
      {
        "time": "00:42:45",
        "title": "字符编码和日语假名的使用讨论",
        "summary": "对话集中在字符编码的细节上，特别是如何利用额外的比特位进行字符扩展，以适应不同语言的需求。讨论了ASCII编码中高位的使用，以及如何通过这种方式表示西欧语言和日语的特定字符，比如拉丁一扩展和日语中的片假名。特别提到了日本在适应计算机和电报技术时，选择使用假名来表示文字，因为假名对于表达日语声音更为直接。此外，还讨论了汉字在日本语言中的不可替代性，因为同音字的存在使得完全废除汉字变得困难。最后，触及了韩国在名字表示上的做法，以避免歧义。"
      },
      {
        "time": "00:49:28",
        "title": "字符编码的历史与统一",
        "summary": "对话讨论了字符编码的发展历程，特别是针对不同语言和地区的编码标准，如中国的GB系列、日本的JIS、台湾的Big5等。指出了在Unicode编码出现前，各国各自为政的编码标准导致的兼容性问题。随着Unicode的推广，虽然旨在统一全球字符编码，但在实际应用中仍存在一些问题，比如字符集的统一标准不明确，以及不同操作系统和平台间的编码差异。讨论还触及了Windows和Mac操作系统在处理编码问题时的不同策略和遇到的具体问题，如文件乱码、编码选择等。"
      },
      {
        "time": "00:58:57",
        "title": "Unicode中CJK统一汉字的挑战与解决方案",
        "summary": "在Unicode标准中，由于汉字存在大量异体字，以及不同国家和地区对汉字标准的差异，导致了统一汉字的收编过程中出现了诸多混乱。为了解决这些问题，Unicode不断扩展，目前扩展至E区，努力确保字符编码的兼容性和完整性。对话中提到，对于一些存在多种字形的汉字，如中国和日本对于同一汉字的不同书写方式，Unicode通过分配不同的码位来区分，以保持不同字形的准确显示。此外，还讨论了输入法和字体映射可能引发的问题，包括编码转换错误和字体映射错误，这可能导致显示错误的字符。最后，强调了从输入法到最终显示整个过程中需要注意的多个环节，以确保字符的正确显示。"
      },
      {
        "time": "01:03:05",
        "title": "汉字输入法与字符编码的区别及发展",
        "summary": "汉字输入法主要负责将用户输入的字符根据特定规则转化为汉字，这一过程与字符编码关联不大。讨论中提及了不同类型的输入法，如拼音、双拼等，以及它们如何帮助用户更高效地找到所需汉字。特别指出，拼音输入法可以视为一个动态的编码系统，其中字词的选择可能因输入频率而变化。此外，还涉及了输入法如何通过调整词频、使用云词库等方式来优化用户体验，以及一些输入法特有的词汇现象。最后，提到了兰州烧饼作为一个网络流行语的例子，展示了输入法在现代交流中的角色和影响。"
      },
      {
        "time": "01:07:58",
        "title": "emoji的起源、技术及文化意义",
        "summary": "对话中讨论了emoji（会文字）在英文世界的通用念法及其起源于日语，说明了emoji最初是如何从英文笑脸符号演化而来，并逐渐在东亚地区发展出正立的颜文字表达。此外，还探讨了emoji在计算机系统中的技术实现，包括点阵图、矢量字体和彩色位图的不同，以及Apple和Microsoft在彩色emoji技术上的不同方法。最后，解释了字体的概念和emoji的编码方式，展现了emoji从简单的表情符号到复杂的彩色图片的技术演变和文化意义。"
      },
      {
        "time": "01:13:41",
        "title": "探讨点阵字体及其在不同系统中的应用",
        "summary": "对话围绕点阵字体及其在计算机系统中的发展和应用进行，特别是从DOS时代到现代Windows系统中字体的演变。讨论了早期16x16像素的字体、中意宋体以及LED显示屏上使用的字体。同时，还涉及到Windows系统中对字体的处理方式，如点阵数据和轮廓数据的使用，以及字体渲染提示（hinting）和抗锯齿（anti-aliasing）技术。对话还纠正了一些关于字体名称的误解，并讨论了字体在不同分辨率屏幕上的显示效果。"
      },
      {
        "time": "01:22:59",
        "title": "Windows与Mac字体显示哲学差异",
        "summary": "对话内容涉及了Windows和Mac操作系统在字体显示上的设计哲学差异。Windows倾向于在有限的物理基础上追求清晰显示，通过牺牲字体设计的原貌来达到显示清晰度，注重使用渲染提示（hinting）等技术手段调整像素位置，以匹配显示像素，实现清晰的文字显示，但牺牲了文字的设计形状。而Mac则更侧重于保持字体的原始设计和形状，即使这意味着在低分辨率设备上牺牲一些清晰度。随着时间的推移和硬件技术的进步，特别是高分辨率屏幕的普及，Mac的这种设计哲学在视觉上显示出了优势，字体显示更加美观，反映了其设计师的原意。对话还提到了字体设计随时代和技术变迁而变化的情况，以及不同的显示技术对字体设计的影响。"
      },
      {
        "time": "01:29:14",
        "title": "Windows系统中的字体渲染技术及未来显示技术展望",
        "summary": "对话中讨论了Windows系统在西文和汉字字体渲染上的差异，特别是汉字hinting技术的挑战以及改进的需要。指出早期的字体渲染引擎主要由拉丁语系工程师开发，导致对汉字的渲染效果不理想。随着技术进步，手机厂商开始重视自定义字体，显示了对字体设计不同应用场景的考虑。同时，讨论了打印与屏幕显示在分辨率（DPI与PPI）上的区别及其对字体渲染的影响，以及未来显示技术，如VR/AR，对更高PPI的需求，预示着屏幕质量将超过纸张。"
      },
      {
        "time": "01:34:15",
        "title": "MacOS截图格式和早期OS技术讨论",
        "summary": "讨论集中在MacOS系统上截图的默认格式及其更改方法，特别是早期版本默认保存为TIFF而非PNG格式的处理方式。此外，还涉及了MacOS如何基于PDF技术构建其GUI，以及PDF格式在MacOS上的原生支持情况。讨论也对比了Windows系统在处理PDF文件方面的差异。"
      },
      {
        "time": "01:38:37",
        "title": "TrueType与OpenType字体格式的比较及历史背景",
        "summary": "TrueType和OpenType是两种常用的字体格式，分别由微软和苹果，以及Adobe推广。OpenType基于Adobe的PostScript技术，支持三次贝塞尔曲线，而TrueType使用二次贝塞尔曲线。OpenType可视为TrueType的扩展，支持更多高级特性。在字体转换过程中，三次曲线转二次可能会有损失。TrueType字体在Windows系统中较为常见，带有大量渲染提示信息，而OpenType更多用于专业打印。Adobe的Type 1基于三次贝塞尔曲线，是其专利技术，导致微软和苹果合作开发了TrueType以避免专利费用。字体的曲线描述和封装格式是两个不同的概念，OpenType格式可以包含TrueType的曲线数据。此外，OpenType支持更多的高级功能，使得市场趋势倾向于使用OpenType格式。"
      },
      {
        "time": "01:47:43",
        "title": "操作系统和渲染引擎的复杂性探讨",
        "summary": "对话涉及了操作系统与渲染引擎之间的显著差异，以及这些差异如何随时间演进。讨论开始于苹果电脑的早期，尝试深入探讨不同系统和浏览器下的渲染技术，如Windows的Clear Type和苹果的Core Tex技术，指出它们随操作系统版本不断优化。此外，还提及了Linux系统的复杂性，包括不同的发行版和窗口管理器对显示效果的影响。整个讨论突出了跨操作系统和技术更新带来的挑战，以及安卓和iOS系统在这一领域的继承和发展情况。"
      },
      {
        "time": "01:51:26",
        "title": "字符编码和排版引擎的复杂性讨论",
        "summary": "对话集中在字符编码、特别是Unicode标准应用在不同操作系统和编程语言中的复杂性，以及这一复杂性如何影响文本的显示、计数和打印。讨论了半角和全角字符的概念、历史遗留问题、以及字体显示和编码转换的挑战。此外，还提到了安全漏洞和系统兼容性问题，强调了Unicode编码系统的历史兼容性要求导致的技术债务和错误。最后，简要讨论了打印机如何处理字体和编码，以及技术进步如何简化了这一过程。"
      },
      {
        "time": "02:02:21",
        "title": "字体嵌入与显示技术的发展历程",
        "summary": "对话涉及了在日本制作排版和PDF文件时遇到的字体问题，包括字体文件缺失导致的排版问题，以及PDF在不同操作系统上的显示问题。讨论了TrueType字体的引入对桌面排版流程的影响，以及Adobe的ATM（Adobe Type Manager）在字体管理方面的作用。同时，提到了浏览器中字体选择的限制和网页字体显示技术，如WOFF格式。最后，通过幽默的方式探讨了字体技术在不同场景下的应用和挑战。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "ANSI"
                },
                {
                  "children": [],
                  "content": "ISO"
                },
                {
                  "children": [],
                  "content": "JIS"
                }
              ],
              "content": "键盘布局"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "扫描码用于识别键盘按下键位"
                },
                {
                  "children": [],
                  "content": "字符编码用于表示字符"
                }
              ],
              "content": "扫描码与字符编码"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "解决多语言编码问题"
                },
                {
                  "children": [],
                  "content": "兼容多种编码系统"
                }
              ],
              "content": "Unicode"
            }
          ],
          "content": "输入设备与编码"
        },
        {
          "children": [
            {
              "children": [],
              "content": "接收键盘输入"
            },
            {
              "children": [],
              "content": "显示与存储"
            },
            {
              "children": [],
              "content": "字符串处理"
            },
            {
              "children": [],
              "content": "文件系统编码"
            }
          ],
          "content": "操作系统处理"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "TrueType (TTF)"
                },
                {
                  "children": [],
                  "content": "OpenType (OTF)"
                }
              ],
              "content": "字体格式"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "抗锯齿"
                },
                {
                  "children": [],
                  "content": "渲染提示 (Hinting)"
                }
              ],
              "content": "字体渲染"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "Windows"
                },
                {
                  "children": [],
                  "content": "macOS"
                },
                {
                  "children": [],
                  "content": "Linux"
                }
              ],
              "content": "字体在不同系统中的显示差异"
            }
          ],
          "content": "字体与显示"
        },
        {
          "children": [
            {
              "children": [],
              "content": "输入法与编程"
            },
            {
              "children": [],
              "content": "编码在编程中的重要性"
            },
            {
              "children": [],
              "content": "字体在代码显示中的角色"
            }
          ],
          "content": "编程与字体"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "活字印刷"
                },
                {
                  "children": [],
                  "content": "数字排版"
                }
              ],
              "content": "排版技术"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "PostScript"
                },
                {
                  "children": [],
                  "content": "TrueType"
                },
                {
                  "children": [],
                  "content": "OpenType"
                }
              ],
              "content": "字体技术演变"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "清晰度 vs. 设计美感"
                }
              ],
              "content": "字体设计哲学"
            }
          ],
          "content": "字体技术与历史"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "激光打印"
                },
                {
                  "children": [],
                  "content": "喷墨打印"
                }
              ],
              "content": "打印技术"
            },
            {
              "children": [],
              "content": "打印分辨率 (DPI)"
            },
            {
              "children": [],
              "content": "打印机的字体处理"
            }
          ],
          "content": "输出设备"
        },
        {
          "children": [
            {
              "children": [],
              "content": "PDF与字体嵌入"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "Web字体格式 (WOFF)"
                },
                {
                  "children": [],
                  "content": "浏览器字体渲染差异"
                }
              ],
              "content": "字体在网页上的显示"
            },
            {
              "children": [],
              "content": "Unicode兼容性与字体支持"
            }
          ],
          "content": "其他相关主题"
        },
        {
          "children": [
            {
              "children": [],
              "content": "输入到输出的整个流程展示了计算机处理文本的复杂性"
            },
            {
              "children": [],
              "content": "字体技术与编码在技术发展中的重要地位"
            },
            {
              "children": [],
              "content": "不同操作系统和设备在字体渲染上的差异性"
            },
            {
              "children": [],
              "content": "字体设计与技术对最终用户界面显示的影响"
            }
          ],
          "content": "总结"
        }
      ],
      "content": "对话内容脑图摘要"
    }
  }
}