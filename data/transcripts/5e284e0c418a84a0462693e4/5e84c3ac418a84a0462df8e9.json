{
  "pid": "5e284e0c418a84a0462693e4",
  "eid": "5e84c3ac418a84a0462df8e9",
  "title": "46. Kerning Panic·字谈字串（四）峰回路转换行来↵",
  "task_id": "3vl8qg4jzkx3qpr2",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "你们内核恐慌是第几期？",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:04",
      "text": "好问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:06",
      "text": "45.",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:06",
      "text": "应该是查一下网站。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:08",
      "text": "反正应该是15.",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:09",
      "text": "应该是46.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:12",
      "text": "40 45.",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:13",
      "text": "45到。对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:00:14",
      "text": "OK. 对，因为加上这一期的话是对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:19",
      "text": "我们快赶上你们了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:22",
      "text": "我刚才是刚才谁说了一句什么我们。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:25",
      "text": "节目快要赶上你们了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:27",
      "text": "OK为我我在wonder为什么要欢呼一下。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:32",
      "text": "对，因为当时你还在节目里耻笑说当时还没你们。你说过这句话吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:39",
      "text": "这有什么的？那firefox也可以说，也可以永远对chrome说，没看你们版本号比我们高，但是当时我出来的时候还没你们。",
      "speaker": "发言人3"
    },
    {
      "time": "00:01:10",
      "text": "大家好，今天是4月4号自弹自唱的第44期。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:15",
      "text": "这故意的？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:16",
      "text": "不要这刚好我们只是刚好每隔周二更新，就刚好这期4月4号第44期不是故意的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:24",
      "text": "恰好的好吧，同时也是内核恐慌第46期.",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:28",
      "text": "而且这次是自弹自唱与内核恐慌串台的第四期。还有我们讲。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:33",
      "text": "是啊不是不太吉利，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:35",
      "text": "中国的话说自弹自唱是全球首家用华语制作的字体发音主题播客节目。我是主播文川戏班东营区eric.",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:44",
      "text": "我是主播黄埔将军秦真宇。",
      "speaker": "发言人4"
    },
    {
      "time": "00:01:46",
      "text": "钱臻于。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:48",
      "text": "奈何恐慌是IPN podcast网络旗下的IT技术主题娱乐节目。我们号称hard core，但是没有干货，想听就听，不想听的就别听我是吴涛。对他为什么要延迟？",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:02",
      "text": "有点拖鞋，我在看见到哪OK。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:06",
      "text": "对你你你我我有有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:08",
      "text": "一我有一回去一个很高的那种大楼，他就坐那个电梯对吧？然后他说要做到多少，比如说八十几层，可能七十几层这样。但后来数下这个楼好像没有那么多层。后来我仔细看电梯上没有就是没有44、24、34，就所有以四结尾的或者是蚕丝的楼层，没有13。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:33",
      "text": "对，很多居民楼都是这样的对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:02:35",
      "text": "然后就会觉得那你要这个编号干什么？",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:39",
      "text": "但总得有个编号。",
      "speaker": "发言人4"
    },
    {
      "time": "00:02:41",
      "text": "那咱们是不信邪的，就是故意要踩着这个点，你看我们能把凑齐都凑齐了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:47",
      "text": "今天对，而且今天就是4月4号，其实是一个非常重要的日子。在2007年的4月4号，本站站长或者说贵站不对，我是站长rax。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:03",
      "text": "就是占位机站位问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:06",
      "text": "我站长rex在tea beauty上发布了第一篇文章。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:12",
      "text": "此处应该有掌声。对，而且如果你现在去翻。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:15",
      "text": "那个type is beautiful的话，第一篇文章是什么？谈have area。但是真正意义上的第一篇文章，其实是一篇叫做hell的短文。然后里面只有一句话，什么uh this is a weblog about chinese and english typography。I'm not sure I haven't have a clue about what to write之类的，就只有这么一句话。然后这个第一篇文章在网站上挂了大概五年，他一直都没有blue。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:50",
      "text": "现在还翻得到那篇文章吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:52",
      "text": "对，就是你去后台草稿里面看的话，还有对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:56",
      "text": "对，后台有啊。对，翻出来多多不好？",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:00",
      "text": "这就是历史的固执堆。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:02",
      "text": "对，所以今天是个很重要的日子，好吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:07",
      "text": "不过你们内核恐慌也被催更，催的不行了。在那个群里面大家你们都不更新。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:13",
      "text": "我什么twitter、知乎，全都有人催更，我受不了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:18",
      "text": "对，然后没有办法，我不得不的说，有我在肯定会更新的，把你们拖出来更新。你看对，上一次咱们做那个上一期节目就是串台，而且上一期是都都几月份的事情了。我看一下应该是2016年的11月份，咱们第三次串台讲的是那个emerging，对吧？对，来好评如潮。据说好像我们这边有很多反馈，真宇是不是和大家说一下？",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:49",
      "text": "首先是在我们的这个TIB的这个文章的帖子下面，有一条留言就是给我们分享了一个视频。然后刚不小心打开这个视频，这个视频的进场的那个曲子非常恐怖，感觉好像恐怖。他说就是那有一段非常奇怪的噪音，不知道是什么OK。不好意思，今天有点渴。这位叫一帆的这位听众，他说本期节目配合马里克小姐的演讲使用风味更佳。他应该是给我们分享了一个有关MG的一个演讲，好像是三星主办的某一个什么会议上的。然后他给了一个youtube的一个链接，大家有兴趣的话可以看一下，我们也会把这个链接放出来给大家。",
      "speaker": "发言人4"
    },
    {
      "time": "00:05:38",
      "text": "然后另外就是我们那期其实说到了一些关于这个MG输入法的问题，这个好像有挺多听众给我们反馈的。有一位听众说小狼豪输入法可以输入M子，你们有人用过这个吗？小狼豪应该是中州韵的windows版是吧？对我只用过他的mac版，但我不知道windows版是一个什么状况，他说可以输入M字。",
      "speaker": "发言人4"
    },
    {
      "time": "00:06:07",
      "text": "怎么说呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:09",
      "text": "哼我不知道怎么输入。",
      "speaker": "发言人4"
    },
    {
      "time": "00:06:11",
      "text": "他没有写具体怎么输入，反正对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:15",
      "text": "输入总是可以输的。就是像我们现在连那个mac自带的那个拼音输入法。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:19",
      "text": "它也是可以输的。我觉得mac上面输入EMOG好像不是一个不需要输入法来，就特别某个输入法来支持就好了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:31",
      "text": "就是说用那个字符面板来挑是吗？",
      "speaker": "发言人4"
    },
    {
      "time": "00:06:34",
      "text": "对，可以去挑。也可以就是你现在无论是默认的日文输入法，还是中文输入那个拼音输入法，你只要有拼音，你打香蕉到后面他备选除了汉字以外，也会有那个MOG出来，这个都可以的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:50",
      "text": "对，现在缺的就是一个对应关系，就打哪几个字会出哪个这个emo g的符号。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:58",
      "text": "后面那个笨鸟不飞那位听众，他也跟我们说吧。嗨eric你好。某期节目听你们讨论MMOG输入法，我觉得目前苹果处理的甚好啊。在iphone拼音输入，如果某词汇相关联的em OJ就会在候选词里显示出来。不然当然不用专门做个emerge输入法，这个太反人类了。不过emerging这个趋势就是要重重新发明象形文字文字的架势。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:27",
      "text": "对，mac上面这个也不太全。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:31",
      "text": "iphone上面那个MG输入法好像是如果你输入一行字，比如说太阳月亮星星，然后你立刻切换到MG输入法，现有已经输入的文字会变成橙色，然后你按那个橙色的部分就会出现对应的MG好像是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:54",
      "text": "你这个是当在那个i message，就是那个信息里面。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:58",
      "text": "对，好像只能在MS这里面。是这样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:01",
      "text": "我就说这不是一个系统输入法的功能。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:05",
      "text": "是im message。OK sorry.",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:07",
      "text": "就是那个message，那个APP里面的功能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:10",
      "text": "对，主要是就现在那个拼音，然后它联想出来给你提示EMOJI。这个有个问题，就是有些你emerge，你不知道它对应的那个拼音的词汇是什么。比如说什么就是一家四口有一个小孩，那个拼音是什么我不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:29",
      "text": "有各种想象各种各样的家庭吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:33",
      "text": "对对，就那几个怎么描述？",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:35",
      "text": "对，其实因为还有一个问题，就是MOG有一种潮流就是要特意去误用，他们就是不按照他的本意来使用。所以一般来说联想出来的都是一些陈腔滥调的对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:08:49",
      "text": "就比如说前两天我犯了一个错误，就是在聊天的时候使用了一个表情。我以为那个表情是类似于心照不宣或者是你懂得那种感觉。但是实际上那个表情的中文内容是中与这个表情关联的中文词汇是舒服，就是是一个小人。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:15",
      "text": "就是闭眼睛然后。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:16",
      "text": "微笑的那种感觉。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:19",
      "text": "然后。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:21",
      "text": "对对，然后我把它用也不能用错。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:25",
      "text": "说吧。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:26",
      "text": "如果你把舒服这个意义放进那句话里的话，这句话挺怪的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:33",
      "text": "这个就比较坑。就好像以前不是有一个哲学问题，说是我们所有人看见绿色的感觉都是一样的，好像结论是对吧？就是比如我说我看见了一个绿色，你说你也看见了一个绿色，对吧？假设我们都认为它客观的看上去是绿色，但是这个绿色在你心目中形成的一个印象是跟我是一样的吗？这肯定不是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:56",
      "text": "我觉得这有两层两个层面。一个是就是在基因上面或者说在生物性上面，我们肯定多多少少受到的刺激都是一样一完全一致。可能也不是，但是主要是心理上，你后天你对你在成长过程中对绿色产生的印象，甚至于你看到最多的绿色。比如说你在寒带长大，你看到的绿色可能就深一点，你在草原长大可能就接近于草绿色。哪怕让你我我说我们四个人每人想象自己心目中的绿色和想象出来的绿色应该都是不一样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:33",
      "text": "OK，这就是一个原理。就是我们看到同一个阴谋，几张没有文字提示的时候，我们看到第一反应，比如说吴涛他爸说他他他看到那个那个图像，他觉得这个是一个心照不宣的意思。但可能别人看，因为他不同的这个教育背景，或者是所处的这个环境，他觉得这个是完全是另外一个意思，对吧？就很难这件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:55",
      "text": "但语言其实都有这个特质。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:59",
      "text": "而且还有一个就是我又想起另外一个例子，就是那个月亮。因为这里面不是有个黑色的月亮的圆形的脸吗？然后据说很多teenager就现在的teenager用这个圆形的黑色月亮的脸来代表那个黑人问号脸。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:19",
      "text": "对的，上次我们讲过这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:20",
      "text": "我这段。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:22",
      "text": "必须剪掉。暴露了我很久很久没有上节目的，连连自己录完了节目，连自己都没有说一遍，我靠。没错，靠，我曾经把一个一模一样的故事给两个朋友在同样的地点讲过三遍。中老年程序员表示躺枪。我完全是一个场景trigger的人我发现只要在那个场景就会讲这件事。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:57",
      "text": "我我记得以前那个我我记得以前那个语言学里面其实也有讨论过这个概念。就所谓传统的这个结构结构主义的语言学，它会分能指和所指。所以我们其实现在看到了MOG或者是我们使用一个语言的单词，都是那种语言学观点里所谓的这个能指。然后它指向了这个意义，应该是所指。",
      "speaker": "发言人4"
    },
    {
      "time": "00:12:18",
      "text": "最早的话他们会认为所指就是所指向的这个东西本身。比如说我们说一个苹果，那么指向的可能就是一棵树上的一只苹果。但是后期的一些语言学者就会认为，其实你指向的那个所指并不是真正的那个食物，而是一种心理层面。他们所谓的心理表象就是一种由社会共识约定出来的东西，意志意志与表象的世界。对对对，就是你永远无法指向某种水果抽象这个概念，你永远无法指向一个真正意义上苹果。",
      "speaker": "发言人4"
    },
    {
      "time": "00:12:53",
      "text": "所以什么时候我们才能够实现这个不要通过语言、文字这种介质能够直接咱们脑子插线，直接交流这个意识就好了吧，就不存在这个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:03",
      "text": "Terry pass是吧？对，心灵感应。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:05",
      "text": "对，我一想那你就知道我想什么，而且非常准确对吧？没有任何的疑义。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:12",
      "text": "对我觉得下一次真正意义上的通信革命，可能就是真的是不依赖于语言的通信革命。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:20",
      "text": "我那会很恐怖。",
      "speaker": "发言人4"
    },
    {
      "time": "00:13:21",
      "text": "对，我一想，对我觉得很你稍微脑子里面有点什么污秽的想法，对方马上就知道了不不。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:27",
      "text": "这不是跟三体人一样，你想什么就必然让对方知道，而是你可以一种超主动开关吗？不是，就是一种我超越我们现在这样通信带宽的方式来通信。就是你像我们现在为什么要上十年乃至20年的学？不，其实另一个原因就是语言沟通的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:51",
      "text": "就学会。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:52",
      "text": "一个文字。",
      "speaker": "发言人3"
    },
    {
      "time": "00:13:53",
      "text": "沟通的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:55",
      "text": "对，效率太低了。你想我们现在说话可能一秒钟才几个比特，对吧？几个IT。那将来如果我可以一在一秒钟之内向你讲完整个在地球古古代地球的历史，那可能我们教育在5到6年里面能教的东西就多太多了。这样人的这个寿命又被大大延长了，难道不是吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:23",
      "text": "但问题是接收方想不想要了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:28",
      "text": "其实就是重新去那个叫什么来着？如果假设你大脑是一堆神经元来构成的话，其实就是我直接把我这个叫什么呢？现在不是流行讲机器学习。对我先出一个model，然后直接把这个model塞给你就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:40",
      "text": "差不多是这个。不。",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:41",
      "text": "你不用再去劝一遍了。好了，我们怎么全都退了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:46",
      "text": "你请了两个以无主题的闲聊做了这么多期节目的人来，你应该已经预料到这个后果了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:14:53",
      "text": "我要把你们拉回来好不好？除了好多听众都说这一期太搞笑了，哈哈哈。这个在无论是在群里面，还是在我们的自弹自唱的那个反馈里面也是蛮多的。但是也有一位听众非常认真的给我们写了一篇很长的的反馈。郑宇是不是要给大家念一下？",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:16",
      "text": "好吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:17",
      "text": "在念这个反馈之前，其实有一个跟刚刚说到相关的，就是刚正好说到机器学习。其实有个听众他写信来问这个机器学习的事情。他说关于机器学习在书法字体或者字体上的研究和应用有什么进展吗？对他邮件就是这样。他说这个邮件就是如题。",
      "speaker": "发言人4"
    },
    {
      "time": "00:15:36",
      "text": "不是有那个风格转移吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:39",
      "text": "对，好像是有一个基于神经网络来学习。",
      "speaker": "发言人4"
    },
    {
      "time": "00:15:42",
      "text": "这个就简单来说就是他学习的。比如说这个他是以画作来做的，我记得就比如说他学习的这个毕加索的这么一个风格，然后他你给他任何一个图像，他会把它变成那种毕加索风格的那种图像了。那本质上做这个叫什么这个书法其实也是一样，某一个比如说什么掩体流，什么瘤体之类的对吧？他就学习他的一些书法风格，然后把它弄完之后，通过用利利用利用类似的什么style transfer，好像是叫这个这么一个一个技术，你是可以把它转换成另外一个任何字，比如说变成这个流体，或者就那种感觉的。因为本质上那些书法家去临摹也是做同样的事情。他可以学习了他所有的这个掩体的精髓，对吧？然后再自己再加上一些创新，或者是他就说纯粹想复刻。因为我是做这个赝品的对吧？我专门去临摹别人的这个名作，然后我就复制出一样的这个感觉的也可以，本质上我觉得是同样的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:44",
      "text": "对，我记得前两天rex给我发过一篇文章，是标题叫什么analyzing fifty k funds using deep neural networks。然后他应该是从网上下了大概5万个免费字体，然后用一个deep neural network度神经网络来把它串了一遍。但是具体做什么我还没有仔细看不过大概意思就是提取了很多特征，然后可以做一些好像还蛮酷的事情。我把链接放在那个show note里面，如果有兴趣的读者可以听，可以去看一看。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:27",
      "text": "这里有篇论文也可以给你们发一下，就是讲那个style transfer的这个论文，还有一个githa的代码，可以自己去玩。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:36",
      "text": "我记得好像中文这个字体设计领域也有人写过论文，就是讲怎样将这个中文字体用类似风格转移的方式来实现出来。",
      "speaker": "发言人4"
    },
    {
      "time": "00:17:47",
      "text": "新的这种字体。哼OK.",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:50",
      "text": "好像国内还有厂商在应用类似的技术，可能不是非常的深度的用。但是可能在设计的这个初期阶段会使用一些相关辅助技术。",
      "speaker": "发言人4"
    },
    {
      "time": "00:18:02",
      "text": "所以以后什么艺术家可能就比较着急了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:08",
      "text": "不不不，艺术家临摹。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:10",
      "text": "艺术家临摹艺术家。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:12",
      "text": "应该就是美工比较惨。对对对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:18:17",
      "text": "或者说以后做赝品会比较方便的，直接把这个风格拿过来弄一下就好了。这个就有点像淘宝上那个很搞笑的那个店，他卖那种什么那种中国古画那种古古叫什么山水画古画那种风格，但是画一些非常现代的东西，比如什么萧何月下追韩信，然后骑个自行车在那里追的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:38",
      "text": "跪氏的大分村不就是干这个的吗？",
      "speaker": "发言人4"
    },
    {
      "time": "00:18:44",
      "text": "我还没去过什么梗，解释一下。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:47",
      "text": "大芬村是一个专门复制这个世界知名油画的这样一个在深圳的一个村子。",
      "speaker": "发言人4"
    },
    {
      "time": "00:18:54",
      "text": "再多可不是这个就名不虚传的，你知道吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:58",
      "text": "对，而且据说复制的挺好的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:19:00",
      "text": "对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:02",
      "text": "什么都可以山寨。好，最后来念那篇非常长的游记这位有这位听众的署名是PK的邮件，标题是M莫子路漫漫其修远兮。各位主播好听你们的节目有一段时间了，从中获益匪浅。在这里先感谢各位的真知灼见。关于这次节目中聊到的我的话题，本人也想通，本人也想同各位聊聊自己的看法。本人目前在G开头的互联网公司，参与设计新一代系统里的MOG工作。从今年4月份加入这个项目组一眨眼已经半年了，整个M级项目也接近尾声了，很荣幸能在参与大公司中如此具有影响力的项目。",
      "speaker": "发言人4"
    },
    {
      "time": "00:19:48",
      "text": "记得一开始对于MOG的了解也仅仅是平时在IOS里使用的一些smile phases，但是随着项目的展开，与unicode的组织成员沟通之后，发现其中还是有很多不一样的情况。首先个人发现中国使用MSIOS也好，安卓也好的频率其实远不及西方国家来的高。因为中国有微信表情包，我们称为speaker，类似现在imessage里的贴纸。后来发现韩国和日本由于line的大热，也有很多用户选择了APP APP商店里的sticker。但是在西方，举例来说，在instagram上就可以看到很多emerge的comment标题，i message也比在中国使用的情况要频繁许多。这也就是为什么MO这几年的谈论中心都在西方的原因。或许我没有确切的数据，但是直观感受是这样。",
      "speaker": "发言人4"
    },
    {
      "time": "00:20:45",
      "text": "MG今年最热的话题其实是加入了女性职业。记得我们team绘制了女性职业M教师、工程师、程序员等等，在美国成为新闻公司，还特意印刷了贴纸和T追求男女平等，性别中立的态度似乎在任何平台上都是一样的。Real说的对，政治正确有时候很浪费时间和精力，这里我就不细细展开了，有机会的话当面说会比较方便哈哈。",
      "speaker": "发言人4"
    },
    {
      "time": "00:21:12",
      "text": "当然苹果确实是第一家完整的绘制了m ji的商业公司。但是现在打开unicode的总表，可以看到各大科技公司都有很完整的MS清单。但是谁画的早，谁的市场占有率高，却是一个不争的事实。后来者就需要和苹果统一，不然跨平台发送信息就会造成理解偏差。这也是我们在设计新版MG的着重考虑的。各位主播还谈到了MG的格式，确实svg是目前最好的解决方案，而非PNG。当然苹果的MS包在手机系统里占比是最大的。因为复杂的渐变和三维立体的效果，比如跑步的人会耗费很多珍贵的手机容量。",
      "speaker": "发言人4"
    },
    {
      "time": "00:21:58",
      "text": "微软目前的MG作为我个人是最喜欢的，各位可以在总表上看到。与众多商业公司都不同，虽然没有了渐变和复杂的图形，但是独特的视觉风格和统一感是其他公司没有做到的。2017年1月末，我就将完成第一版完整的全新M在下一代系统上我很希望能够尽快向各位展示新的按摩子PS同时我也想说unique的组织应该多考虑中国的元素，至今没有真正属于中国的MO这是让我这个画M9的人深感遗憾的。OK所以居家的下一代操作系统上会有新的按摩机吗？下一代是哪一代了？",
      "speaker": "发言人4"
    },
    {
      "time": "00:22:40",
      "text": "O android o.",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:42",
      "text": "首先我们我们先要认识到他这封邮件是2016年写的。我们上次节目是2016年11月播出的，所以他说的今年和去年其实已经倒过来了。然后我们去年11月份节目刚刚播出，unicode就已经在优妮蔻是在2016年11月的28号发布了。最新的一批就有113个的新MOG.",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:08",
      "text": "是在我们节目发布当天发布了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:23:12",
      "text": "对，就是就马上就发布了。但是当时发布的那些东西，因为已经事先有提案，所以我们已经在节目里有谈到了。比如说就包括医生教师会怎么样的。现在估计已经在那个IOS上大家都可以看到了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:28",
      "text": "现在MG还有5.0的这个贝塔版本，5.0这个版本要马上随uni扣的10.0发布，这个时间点现在已经刚好是今年的3月20号，是三反正今年3月份就已经尤尼克的十的贝塔版本已经公开了。那按照时间表的话，就是今年的夏天应该是六月份就要再再公布新的unicode的十。那里面就会有新版的更加追加的一些MOG。这里面包括什么？包括什么吸血鬼和僵尸，我觉得最扯的就是什么连僵尸，还有女僵尸。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:14",
      "text": "刚才我停顿一下，我想知道说到僵尸之后。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:17",
      "text": "大家都敬畏的沉默一下，而且吸血鬼有男吸血鬼女吸血鬼what.",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:27",
      "text": "这个很符合现实，不可不得各种那种同人小说。",
      "speaker": "发言人4"
    },
    {
      "time": "00:24:35",
      "text": "然后上期节目里我们谈到的就是那个吃的东西，什么pretax没有是吧？这个新版里面就会有了，所以吴涛你不用怪怨念了，非常好。针对这位听众的写的内容，我想说一句，就是说他说希望尤尼克组织多考虑中国元素。其实这个unicode一直都是公开的，如果你想追加任何的一些字符，不包不仅是MO只要你想，比如说你想说其他文字，任何人都可以给你直接写提案。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:12",
      "text": "但是就是因为有没有人去鸟这件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:16",
      "text": "对，只是说unicode的他们那个提案，他们是有格式的，你必须按照那个格式写，然后把提案交上去。那至于那那可以放到定，他们会定期开会，定期讨论这个事情，也就是说每个人都这个渠道是开放的，就是每个人都可以做的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:34",
      "text": "我觉得他说那个事儿很好，就是中国是像东亚，中日韩都是用那个sticker比较多，用那个EMOG反而比较少。因为这个就是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:44",
      "text": "简单被平台的碎片化掉了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:46",
      "text": "对，不是，就是seeker本来的它的这个expressiveness就是这个可表达的丰富性太是远远强大过这个emerg。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:57",
      "text": "我把日本人拉进来用微信的时候，日本人就觉得很奇怪，为什么这里面有那么多企鹅的图，看起来蛮可爱。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:06",
      "text": "可是日本人用line，line里面的speaker不是更多吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:10",
      "text": "就那个是起源吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:12",
      "text": "对，所以他们就觉得很奇怪，为什么为什么we cha t里面有这么多企鹅？当然企鹅就是说你是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:18",
      "text": "说VV chat在那个表情里面有很多词。",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:21",
      "text": "对，表情就相当于那个情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:24",
      "text": "寓意做那个对，就有一组企鹅的表情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:26:27",
      "text": "对呀对，因为他们不知道这是腾讯的，所以对对对，他们不知道企鹅这个耿。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:33",
      "text": "对，所以所所以我觉得这个就是呃就西方玩这个emerge这么上纲上线，还有什么政治正确，要男女平等，这个根本在东亚根本就不是一个事儿，好吧，你把我爱画啥画啥管得着吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:48",
      "text": "你对，然后在这表情包都是以政治不政治而流行的对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:26:54",
      "text": "而且你说像羽毛you这种组织，我要加个羽毛球还得给你费一件提那个什么体验。下一个版本在更新的时候，你看微信表情包里面，人家已经直接出成成套成套8%可以收费了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:08",
      "text": "可是这个orientation不一样，unicode的目的并不是让你有更多的表情可以用。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:15",
      "text": "不是我就说因为就是你要考虑用户的这个使用表情的emerge也好，还是sticker也好，它的初衷是什么？他但是要表达一些文字不太好表达的意思，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:28",
      "text": "但是我的点就是unique的，并不是让你并不是满足这个需求而存在的对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:34",
      "text": "那就我我没错，所以说我本来我一开始的理念就是以某举这种东西就不应该在unicode里面去搞，大家用手机就好了。你要这样说的话，就是我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:48",
      "text": "最大的问题就是EMOGEMOJI实际上是一个不能说生造出来的概念，但它的但它的确是一类符号的统称。就是有些符号是你是很难说它到底算不算emerge。不是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:05",
      "text": "首先EMOJI本身最开始是个工程概念，对吧？就某一个公司推出了一系列符号，然后这些符号被称为是一个hack。对然后比如说这些符号里面包含什么OK，或者包含什么平成、昭和，或者包含什么各星座符号。那你说星座符号应不应该应该不应该被收到UNIQLD里面，显然是应该的那这个边界在哪儿？然后EMOG这个EMOG这个集合跟unicode的这个集合到底是一个完全子，就它是它的一个纯子集呢，还是他们两个其实是如果你那一定要找一个界限说，如果画了一个笑脸，那这个笑脸就不应该被收到unicode里面。那这个界限在哪？这很难找的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:53",
      "text": "对，所以现在就一发不可收拾了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:57",
      "text": "而且sticker跟emerge之间的界限其实也挺模糊的。说实话就是比如说周润发的那张脸。他会被拼到各个地方，对吧？那会不会20年后周润发的这张脸，不是不不是，周润发那个人叫什么来着？",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:18",
      "text": "张学友过去干嘛？",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:19",
      "text": "张学友不是吗？张学友张学友不是，张学友，张学友你吃屎了，那张脸就说不定20年后也会变成人工智。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:28",
      "text": "Unicode的一部分，需要用一个什么sticker的这种类似于unicode那个组合字符，这个东西叫什么来着？Composition对吧？对，然后要把张学友加某一个轮廓就组成那个sticker对吧？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:44",
      "text": "不过我觉得既然已经做unicode了，一个比较和一个理性化的一个approach，应该是说有这么多码位了，那我们就做一个张学友体，以张学友的这样的风格，把这所有的关于面部表情都画出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:02",
      "text": "有男张学友、女张学友。",
      "speaker": "发言人4"
    },
    {
      "time": "00:30:05",
      "text": "你说可以，你可以画。如果你想画的话。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:09",
      "text": "或者说小张学友、男张学友、张楠张学友和男张学友和男小张学友。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:15",
      "text": "对，没有你就说你可以画，你一个不画，那那就说放在张学友体，他就这些就变成缺字，对吧？很简单的。因为现在也是unique画，放了这么多马位上面所有的字体，也不是所有的马位上面的格里芬他都画出来，吧？他可以挑一些他想画的，那就等于就是像换字体一样的感觉，换不同的表情包，我觉得这样是一个比较理性化的一个approach.",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:44",
      "text": "说实话觉得这个有点太orange了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:46",
      "text": "我觉得这舞台本身有sticker，还要再去搞这个就是挺扯的一件。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:53",
      "text": "就是在微信里面，可能一个表情包只会流行那么几个月，然后再过去，然后所有人就把它忘记了。如果你按你这个方式来解决的话，很有可能也不是解决了。如果真的发展到你这个地步的话，那我觉得可能全人类都得一直在用speak来交流，才有这个必要。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:14",
      "text": "嗨，不过话说回来，这位听众里面说的就是要多考虑中国元素。这一次就是今年夏天要更新的这一批批次的emerge。里面有会有dumpling，就是你英文dumpling，然后实际你可以画成饺子，化成包子都可以，然后会有fortune cookie比如说就里面有那个吃到吉祥。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:40",
      "text": "能抽太多的主力了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:42",
      "text": "对，还有take out box。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:44",
      "text": "不不不。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:46",
      "text": "西方人他们的中餐的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:48",
      "text": "那种就是对中餐的刻板印象。首先凭什么当你就得能既能化成为什么会有花？",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:56",
      "text": "不也不是中国元素。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:57",
      "text": "一个煮的一个蒸的就差很多好吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:00",
      "text": "所以这些都是美国人他们提出来，他们觉得要对，然后还有论，不过终于有筷子了，好总比没有总没有好，对吧？因为有现在是有刀叉没有筷子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:14",
      "text": "好吧。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:15",
      "text": "那以后一直还得上手才可以，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:17",
      "text": "然后那你想了就是又退回来刚才问题，那你觉得要有更多的中国元素的话，你去做提案呗。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:24",
      "text": "这是一个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:26",
      "text": "对，那总是不能说，这个你不给我做了，其实没有个人在做实事，没人做体验。就等美国人给你画这个东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:34",
      "text": "怎么可能是然后又嫌美国人画的不好。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:37",
      "text": "其实我我有一个问题，你说我们现在搞unicode那么多日本的元素，日本人觉得他很地道吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:44",
      "text": "对，因为最早是日本的人做的，所以他那就喊这个的对，这个马位上面要画成什么样子的话。对，肯定一开始最早的提案是日本人的。所以一开始会有人什么南国就是什么串儿，就烤串儿，有那些东西的。那是这都是日本的，所以美国人都看不懂这个是什么东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:07",
      "text": "你们为什么有关东煮？是啊。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:09",
      "text": "对，有各种各样的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:10",
      "text": "不，我的意思就是说有没有可能出现这种情况，就是可能很多就像像我们说这个fortune cookie这种东西，其实是很很美国的，中国对吧？就是有没有类似日本人觉得这个东西，虽然说他画的是一个日本元素东西，但其实是很很美式的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:27",
      "text": "这个其实我们上次也说过，比如说这有一个MO就是mountains，就是山脉。在日本人他们默认他们画会画成富士山。但是当这个放到uni扣的时候，那那后来uni扣就改成普通的山，对吧？但是对于日本来讲，他们一想的话，他默认肯定会画一个富士山。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:45",
      "text": "日本别的什么名山了吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:47",
      "text": "其实日本有一个天然的优势了，因为MOG它其实是有一个原始集合的，这个原始集合是从日本来的，当时的那些日本元素就是非常地道的日本元素。MOG在形成这个原始集合的时候，其实是直接保留了这些元素。但后来加进去的可能就不那么的地道了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:34:07",
      "text": "OK即使是后来加进去的，也就是看提案，做提案的人觉得应该怎么做，他就会放进去。对，所以说实话这一次虽然加进去的，比如说有筷子，有饺子这些东西，但是做提案的肯定是美国人，不是中国人，所以要画成这个样子。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:25",
      "text": "对，其实我一直觉得MG在这个方面是有一个问题，就是我们知道MOG最初的那个原始集合，它其实是先有很多人去用它，然后再渐渐的稳定下来。也就是说它其实是形成了一个被广被一部分人已经非常熟悉并且认可它的这样子的一个图形化的集合。那么新的提案你可能只是先提出一个你觉得需要的概念，然后再对这个概念生成一个图像。就按我的理解大致上是这样一个流程。所以其实跟原来形成研磨机的方式已经颠倒过来了。哼对，这种颠倒可能会造成就是你这个概念未必真的适合变成一个图像，又或者说你这个概念跟大家希望得到的和真正使用了这个图像之间是脱节的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:35:13",
      "text": "所以这个提案的拿到uni k会议上去国开国际会议进行讨论的时候，就会有各种各样的问题。大家就觉得的确这个马位是需要，但是后不能画成这个样子，或者不能画成那个样子就扯皮。就是在实际上的会议讨论，大家在讨论就这个是这些东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:30",
      "text": "对对对，而且另外一方面就是我会觉得他扼杀了原本这个新MOG出现的这种是原有的那种活力。就原有的新按摩机可能它是这样出现，就是有几个小团队他们可能想先试用一个图标来放到这个他们认为的MOG的集合里面，然后用着用着可能这个图标很受欢迎，它就渐渐的变成一个常规的MOD。但现在这种渠道感觉就不那么的可能了。因为大家一定会先想，如果这个马蔚华都没有的话，我做出来也没人会用，所以我一定要先把这个码位搞出来。",
      "speaker": "发言人4"
    },
    {
      "time": "00:36:04",
      "text": "其实完全不用担心，那帮人早就转化sticker er去了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:09",
      "text": "好吧。但stick现在就是为了跟这个MG区分，它的这个图像表现力实在是太丰富了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:36:15",
      "text": "对吧？所以还是回到刚才我说那个问题，既然有了sticker折腾这么多，你摸几干啥？",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:24",
      "text": "好吧，所以关于AOG的讨论到此结束。我们我们今天还有主题，我们已经说了将近半个小时了，已经过超过半个小时了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:35",
      "text": "同学们没事，使劲剪就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:41",
      "text": "反正不是理解，对吧？对，站着就站着说话不腰疼。来来来，我们今天是有主题的，我们今天的主题叫做峰回路转换行。来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:56",
      "text": "你觉得有掌声吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:00",
      "text": "我们今天来跟大家讲讲换行服的事情。来我们中老年程序员代表。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:08",
      "text": "为什么要我说？",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:10",
      "text": "好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:13",
      "text": "在很久很久以前。怎么说呢？就是我我你们小时候用过打字机吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:24",
      "text": "Type right英文的打字机是吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:26",
      "text": "没有吗？不有中文打字机吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:29",
      "text": "有啊有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:32",
      "text": "那真的是几千个按键的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:35",
      "text": "是年轻时代。不不不，他不是用按键的，他是用手柄来挑刺。中文打字就是签字排的大概四五千个，签字排在一个可能有上万。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:46",
      "text": "那不是签字，那是一个钢做的那钢琴。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:49",
      "text": "匆匆钢戳。对，然后你要你拿着一个像反正是可以在XY轴上自由移动的一个手柄。对，没错，我真的没睡醒。然后挪到某一个字上面，然后把压下去，他会把那个字吸起来，然后在纸上打一个字。当然你不能叫他type writer，他他你可能只能把它称为某种小型的排印机器。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:21",
      "text": "不过这个relevant就是说到打字机主要的点就是换行。这个动作在打字机上面其实是一个不按键的动作。就是打字机上面有一个卷把纸卷在上面的一个橡皮轴，然后你要换行的时候，需要压下它右边的一个把柄，然后把它朝左拉。然后这个过程里面他换了一行，不对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:54",
      "text": "就没有。就你是是把那个打字头往左拉，还是说后面那个滚筒往右动？",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:04",
      "text": "OK我我我来再次想象一下当时用打字机的场景，就是打字机的顶端的那个皮棍在你按键的时候会自动的从右往左移动对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:18",
      "text": "所以对其实动的是那个那个滚筒。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:21",
      "text": "在动滚筒本身。对，然后等它挪到最左边的时候，打字机的现在打下的最后一个字符是在纸的最右边，对吧？然后你需要用右手把它从右往左从从左往右了。对，这个过程叫做换行。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:42",
      "text": "回车。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:43",
      "text": "这个不叫回车吗？这个过程叫做回车。Sorry, 因为那个那个打字机的滚筒那个歌曲叫做carriage。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:52",
      "text": "对，就是车车厢的车。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:56",
      "text": "对，车厢的车。然后当时打字机有一种非常无聊的什么打字机艺术，你可以视为现在asi艺术的鼻祖。只不过因为打字机其实打字机本质上是一种非线性的这个设备，就是你可以把一个字符打在纸的任何位置，然后就有人拿出来打天鹅什么的。然后其中很重要的一个点就是你每次回车的过程之中，那个那个自车会回到最开始。所以你可以在一行上面打很多很多不一样的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:27",
      "text": "字符叠下去是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:28",
      "text": "对，然后有些人打一个什么，就是你想象一下A4纸上面用一个打字机的字符打出来一只天鹅，然后这个天鹅看起来像照片一样。那个时候能够闲到什么地步，大概就是这种感觉。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:43",
      "text": "就有点像那个网点浓度那样的。是对，好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:50",
      "text": "对，然后天哪回回车。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:52",
      "text": "回车是这么来的，后就是后面那个圆筒就那个车，你摁下以后，那个车就回到他那个行开始的位置，对吧？对，但是只是回到这个行的开始位置，不并不是下一行，而是原来那一行，就是原来那个位置而已。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:10",
      "text": "对，实际上空格tab和回车这几个键的做的事情都是在实体上控制那个自车的移动。Type键是让四车往下跳，跳到另外跳到下一个棘轮能把它停住的地方。然后空格键就是让自车往前前进一个空位。然后有些比较做的不那么好的打字机，你把tab键按在一个若即若离，有点像那个离合点的位置的时候，那个四车会非常流畅的往前一下一下一下跳。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:52",
      "text": "那换行怎么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:54",
      "text": "换换行？是按return，就是是有一个实体的键是return。然后每次你每每次要在下一行上打字的时候，你都要按一下回车键，不按一下换行键，然后用手把那个回车把自车拉回去。所以早期的换行并回车实际上是两个动作。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:18",
      "text": "那它换行的话其实就是让那个滚筒往后滚，对吧？这样子就挪到下一行。对，但是它换行会同时伴有回撤的动作吗？不会对吧？所以是两个动作，就是说回车只是让打那滚筒挪到纸的开始位置。键盘上摁的话，是让那个纸那滚筒往后面再转转一下，能挪到下一行对吧？所以回车和换行是两个动作，而且是回车是要用手动的，然后换行是用键盘去打的是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:55",
      "text": "对，就是在一些机对你反映那个打字机时代的作家的那个电影里面可以看到，就是打打几个字按一下回车，然后要用左手去拨一下那个打字机。然后这个传统其实一直延续到电传感，就在早期的泰利特，叫什么泰力telly time writer。上面也是打的，就是换行键和回车键是分开的。换行键叫做retain，回车键叫做CR换行应该。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:29",
      "text": "是line feed.",
      "speaker": "发言人4"
    },
    {
      "time": "00:43:32",
      "text": "CR是回车，是carriage to return了。回车，把那个那那个把那个整个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:39",
      "text": "车回到自车回去，然后开始return，经常被写成return，就是出现return键。然后新换行是line feed，就是一专门有个键写着lin fade，然后你要按一下lin feed，它才会产生新一行。而return其实和现在的那个home键的作用是一样的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:01",
      "text": "只是单纯挪到现在那一行的开头而已。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:05",
      "text": "对，然后德语打字机上面，德语的电传打机上面那个the return键写成position one就是好第一位。对，然后就一直到今天，在德语的那个键小键盘上面，home键还是叫position one.",
      "speaker": "发言人3"
    },
    {
      "time": "00:44:25",
      "text": "就是行首所谓的对，所以又有一个问题，就是在实体键盘上面，我们常说的那个回车键那个键，那键位上到底是return还是enter，也有这样的一个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:39",
      "text": "现在我在用的这块苹果键盘上面都有啊，大字标的是return，小字标的是end，有什么区别吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:46",
      "text": "这个就是这这里这里有三个，这里实际上有三个语义，第一个语义是新航，就是living fit。第二个语义是回车，就是return。第三个语义是输入，就是你你你说我的指令已经下达了，按下enter的键的时候完成是指令下达这个动作。就有有有可能这三样事情是完全同时发生的。比如说你在一个terminal application里面，你你你打什么IOS，然后按这个键，那他同时做了三件事情。首先他输入了一个回车，第二他开始了一行新的内容。第三他把IOS这个指令输入给了你的terminal.",
      "speaker": "发言人3"
    },
    {
      "time": "00:45:29",
      "text": "对吧？所以像英文它叫enter，其实就是输入，对吧？进去了就把那个东西，把刚才那个命令给输进去了。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:39",
      "text": "现在苹果的机器的话，我不知道你们大家还用不用那个带数字键的那个大就是有线的那个键盘，而不是普通的蓝牙小键盘。因为蓝牙小键盘和macbook是一样的。但是大的有线的键盘，就右边还会有那个数字键的，右边的数字键的那边上面写的是enter，主键就是主键盘上面大的return，小写的enter。这个entire和return在那个大大型键盘上面还是有区别的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:16",
      "text": "所以数字键区的那个enter键，它没有return的功能吗？",
      "speaker": "发言人4"
    },
    {
      "time": "00:46:22",
      "text": "没有，就说也，然后实际上，就是在一些application里面是有区别的。像比如很简单，比如说大家用photoshop的时候，photoshop有个文本工具。比如说在实际上是输入，对吧？因为你输入的话，你用大键盘，大键盘的return你摁一下，就是在你在写文本，然后在文本里面换行。但是如果你用小键盘的那个enter，就说明你现在这个文本的状态结束了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:52",
      "text": "原来有这个区别，我靠。",
      "speaker": "发言人3"
    },
    {
      "time": "00:46:54",
      "text": "对，然后它就会跳出这个文本输入的状态。比如说你可以换成选择我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:58",
      "text": "我都是按我都是按escape.",
      "speaker": "发言人3"
    },
    {
      "time": "00:47:00",
      "text": "在这种情况下。对，因为你原来在在文本输入状态下，你一直按回车的话，那肯定就是在文本里面换行框。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:09",
      "text": "那现在其他的文字框里面有类似的功能区别吗？我想试一下。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:14",
      "text": "所以这个东西是按根据系统，根据application的不同而不同的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:20",
      "text": "所以你所以实际上你可以定义说在我这个application里面，如果你按enter的话是换一个新银行。如果你按我如果你按return的话是换新一行。如果你按enter的话，这个消息就会发出去了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:47:31",
      "text": "真的我OK，你可你我现在在其他地方试车也是这样子的。所以主要关系。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:37",
      "text": "就是说因为在mac里面，原来的return和enter是不一样的，所以你可以分别定义不同的动作。而且在卖的是键盘实体上的确有一个enter，一个return的键。你可以分开来分别按这个键，以达到不同的动作。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:53",
      "text": "我想问一下，如果主键区的那个enter和return，怎么能够按照那个enter呢？",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:59",
      "text": "Function我知道是function的function，应该是function。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:04",
      "text": "其实我觉得。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:05",
      "text": "他他是这样的，它首先是它能触发那个叫什么键盘上那个扫描码是不同的。然后其次看那个application对这个扫描码进行一个什么处理。我觉得很多application会对enter和return这两个扫描码做一个统一的处理，就有一些都一样的。对对对，就是他认为这个键在我这里不需要区分。对，但有一些APP可能它会不一样的处理。另外还有一些APP，他可能都不去捕捉这个扫描码，他可能通过另外一层的方式来确定你按了什么键。然后比如说你按了某一个组合键之后，我给你另一个反馈。",
      "speaker": "发言人4"
    },
    {
      "time": "00:48:46",
      "text": "所以等一下，其实像这个mac这个键盘上，它标这个return上面再小一个enter，它其实表示这是一个这个键有两个含义吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:55",
      "text": "还是什么意思？应该吧，我是这么理解。",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:57",
      "text": "是的，因为你看像上面那个option和有有out那个标识，他就说这个option mac上面的option等于这个window w上面的out。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:06",
      "text": "哼这样一个标记也是最近才开始的，以前它只有option而不写out那个字的。像这个主键盘那个那个小enter也是最近才开始标识的，以前都不是不。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:20",
      "text": "标的有意思。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:23",
      "text": "对，这个是因为有一些比如说最实用的场景，就可能你弹出一个对话框，你可能按这个enter，你显然不是做return这个事情，你显然做的是enter的这个事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:49:34",
      "text": "就是我到底是要换行还是确认输入。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:36",
      "text": "对吧？对对对，很多时候你只是发一个确认的指令，而甚至说在那个UI上根本就不可能出现这种操作。所以如果他指标return的话，可能会让人觉得有点疑惑。",
      "speaker": "发言人4"
    },
    {
      "time": "00:49:47",
      "text": "所以就聊天框里面就是这样子，比如说我给你发一个这个微信的那个下面聊天框好像是默认你按这个回车，它是发出去是吧？然后也可以，你好像不是微信我不知道，就QQ是可以调的，对吧？哼QQ可以调试。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:01",
      "text": "你QQ以前默认的是control return，发送还是。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:06",
      "text": "换行发出去发OK。然后你直接按单独的按return，就只是把那个只是换一个行，你再再打一行字而已。对对对，然后有一个选项，有个选项是可以调整，这个就是刚好是反过来的对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:20",
      "text": "这个其实就是因为control return，其实他做的是enter的事情。我我刚我现在在photoshop试一下，的确在麦克上的photoshop的话，的确function return的话就是enter OK要有按那个function键，OK小键盘就用这样做。如果是大键盘的话，就刚好那个素质，数字键上有一个enter键，你直接按那个enter那个就可以了。对，所以退回来还是这要看你的平台，看你的那个application怎么对应的问题。因为刚才也说了，因为这个entire和region e本来就分不清楚，所以很多很多平台干脆他就不分。哼像photoshop这样的，它是老牌的软件，而且它最早的第一个版本就是为mac设计的，所以它非常符合mac它这个操平台的操作习惯。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:16",
      "text": "这是个历史遗留问题对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:19",
      "text": "这是一个历史遗留问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:20",
      "text": "对，现在我觉得现在设计师可能更倾向于用escape来完成这个entire的操作。",
      "speaker": "发言人4"
    },
    {
      "time": "00:51:26",
      "text": "但你scape有个很危险，就是他可能把你你你skate的语义是什么？是退出那个状态吗？比如说吴韬认为他他是一个wm用户。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:34",
      "text": "对吧？这个在A比如说有些图像处理软件，像affinity里面，如果你escape的话，然后你输了很多字就前功尽弃了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:43",
      "text": "对，就是讲你是讲消你是想撤销这个操作。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:48",
      "text": "所以我像我们老习惯那个命令行的人，就是特别怕按escape.",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:56",
      "text": "习惯vim的人按escape每天可能比按这个次数还要多。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:03",
      "text": "好吧？那这个就是我们说的return这个事情，就是回车。然后换行的话刚才说了是叫line feed，所以简称叫LF也可以叫叫什么end of life是吧？对，狭义的换行就是打字金，就是往下面挪一行，对吧？这只是广义的换行就是所谓的两个动作，先回车后换行，这两个动作合起来叫换行对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:31",
      "text": "可以反过来吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:33",
      "text": "可以。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:35",
      "text": "有等效的。是所以。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:37",
      "text": "这里有个问题，就是到底是什么顺序，其实这个是要考虑。",
      "speaker": "发言人4"
    },
    {
      "time": "00:52:42",
      "text": "是有的。所以现在问题来了，我们当我们说换行的时候，到底是lf还是C2，还是LF加C2还是C2加c lf这四个可能都是有的。反正现在的话根据各个平台unix以及类unix包括我们现在用的那个macs这一类的话我们的换行符都是lf就是line feed，就是我们刚才说的狭义的换行。而我们大家常用的windows也当然大家之前是dos，MS dos windows，还有一些绝大多数非unix系统，他们的换行符是两个，就是先回车后换行，CR加LF。",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:32",
      "text": "当然了，除了这两种最主要的平台以外，还有一些很奇葩的平台。在很久很久以前，比如说老的apple two，他们那边的换行就是只有回车。然后非常罕见的一些系统，它会刚才就是说它是组合的倒过来，它是先换行再回车，也有，但是非常罕见。对我看微信上面写的那个系统我都不认识，什么acron BBC这是什么鬼？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:00",
      "text": "Accord就是因为现在不是讲那个ARM，ARM的前身那个A就是指的这家公司。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:09",
      "text": "天哪，好吧，那不管怎么样，所以就刚才说的换行是跟这个系统默认会有关系的，所以跨平台的话常常会出现问题。很简单一个问题，就是我mac上发的那个纯文本文件，一发到windows上就不行了。因为我mac上面mac的默认它的回车只换行只有一个那个line line feed。可是windows它需要两个组合才是真正的换行的。所以windows上面打开mac的文件的话，它是一个一长行。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:45",
      "text": "现在还有这个问题吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:54:47",
      "text": "以前是有的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:48",
      "text": "现在还有吗？现在我我我反正好像从某一个时间段开始，我用note那个notepad打开类似文件，好像已经很久没有注意到这个东西。就大概在过去的5四五年前，就好像三号那个ipad已经可以自动识别了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:10",
      "text": "好像是win 7还是反正XP之后的一个系统都拍的好像有这个功能，它会自动识别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:16",
      "text": "搞不好是vista对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:18",
      "text": "反正XP是肯定不行的。对对对，windows时候的windows记事本，windows记事本有很多很坑的这个东西，我们后面再讲，好吧？特别烦。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:29",
      "text": "事实上应该是CL在前，LF在后，是一个绝对主流。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:36",
      "text": "都这个情况主要出现在一个现在，比如说我们现在常用那个网络，你要开一个网页，你要开个HTP协议对吧？他那个就是RFC的协议规范里面，在HTPC里面的那个那个回车换行是由这个CR加LF两个构成的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:52",
      "text": "我记得他好像是有一个机械时代的历史遗留背景的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:58",
      "text": "因为其实要这个要CR就是那个回车这个概念其实是在定宽的那个时候才需要。因为什么呢？假设因为你看我们现在的这个文本都是默认是宽度是不限定的，对吧？所以说你换行之后，你默认是在这个就行首的情况下，那肯定是这样子就够了。但是如果说你那个宽度是已知的，比如说以前都是，比如说80个这个字符宽的一个terminal，对吧？你可以实现理论上你只它是一个两个两个轴在挪，就是X轴是横着，你这个就是回车是把在那个横轴上移回来，然后那个来飞的是纵轴上移往下移移。所以如果说你那个传统，你不管你是传统打字机，它那个纸张也是一个定宽的，或者说传统这个terminal，它这个行宽也是80个字符，也是定宽的。你理论上是可以说我只换行不回车，那我就是在行末，但是去了下一行的行末而已，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:59",
      "text": "是这样的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:01",
      "text": "但但是但是因为在现在的这个不定宽的情况下，你就默认是你下一行在这行末在哪里呢？它是没有定义好的，所以最好你那你就只能回到行首了。因为它那一行那理论上下一行是空的，就是在一个抽象的概念上，其他一行是没有字符的，对吧？所以他就。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:19",
      "text": "只能这样了。那你你你你刚才说你Carry carriage return，在你这里是进入下一行。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:29",
      "text": "不是carriage return是把那个挪回行首。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:32",
      "text": "对，那那为什么要先弄回行首再开始新的一行呢？",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:36",
      "text": "因为如果你下一行是空的话，你在下一行的行末的概念和行首的概念，下一行行末和行首是不是同一个位置？",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:45",
      "text": "就是理论上也就是逻辑上下一行还不存在的时候，你要先回到这一行的行首，然后你再往下挪，开启一个新的一行OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:55",
      "text": "对，然后这个时候适合你直接到下一行是等效的。因为下一行是空的的话，它的行首和行末是在都都在第一个字符那里。所以其实你可以可以不要care to return，就这么一个问题make sense。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:10",
      "text": "要不然你直接跳的话，就是在逻辑上的还不存在下一行新的一行的行尾的问题。没错。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:17",
      "text": "这个问题还存在在那个vim里面，那个叫做visual block那个那个模式下，也是存也是就有这概念，你在view block上面，你虽然说下一行理论是没有字符的，但是因为它是一个定宽的一个系统，它会默认到你在前面有一堆这种空白。比如举个例子对吧？对，会有这么一个情况，然后刚才讲那个就是那个回撤的概念，其实有一个场景还比较。用的还比较多哈，但是只是可能这个会比较冷门一点。就是我不知道吴涛你有没有注意到我们在命令命令行下做很多这种所谓的进度条提示的时候是怎么搞的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:54",
      "text": "是啊，先让他回到行首，然后重新打印一遍字符。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:59",
      "text": "对，因为重汇就在没有那个叫做n curse。你不用n curse那些系统去对整个终端屏幕做一个这种叫做矩阵式的处理的时候，你就只对那一行进行处理，叫做poor mse。这个进度条就是球员的进度条，你就直接说那我回到行首暂时不换行对吧？重重绘制一下不就好了，对吧？比方说我这个好像。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:21",
      "text": "但是可以打印，是先打印一大堆退回车，还是某有一个叫做qqe to the line。",
      "speaker": "发言人3"
    },
    {
      "time": "00:59:31",
      "text": "不用你你在你可以在python里面直接输入，这个就是slash r就是那个charge return。你输出之后，它那个光标就是直接回到行首了，然后你再打印那个东西就可以了。比如说我之前你要你想实现一个最简陋的这个终端命令行下面那个进度条，对吧？你怎么办？就是在会玩那一行末尾不要换行，就不要输这个slash n就是new line，就是那个life的那个字符。但是你直接输这个slash 2，然后是这个cry return，它会到那一行的行首。然后你再重新打印的时候，它是默认在那一行的开始重新开始覆盖掉之前的字符。然后你做一个进度条，假设比如说是100个字符，举个例子，然后每个字符代表1%的进度，对吧？你直接在绘制100个字符就可以了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:17",
      "text": "好，你刚才已经把那些转译的字序列都已经说出来了，你给大家再重新的整理一下。回车是C2，换行是LF对吧？对，然后在转移的时候，那个slash r就是return对吧？就是回车flash没错，back slash back flash 2，然后back flash，换行是back flash NN new line。对，new line还有。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:47",
      "text": "但是new line本身也也带也带回车。",
      "speaker": "发言人4"
    },
    {
      "time": "01:00:53",
      "text": "不是new lie，就是left.",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:56",
      "text": "可是在unicode里面是不是不一样的？",
      "speaker": "发言人3"
    },
    {
      "time": "01:00:58",
      "text": "你的意思是他会将这个光标定位在对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:01:03",
      "text": "这就回到刚才我说那个问题的问题，就是new life的逻辑上与他他只说换行，但是他并没有说换行换到下一行在哪里起始。但是因为下一行并不存在，所以其实你下一行的起始和末尾是同一个概念，同一个位置。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:18",
      "text": "所以各个系统对于这几个实际符号，他们的控制符号，他们实际动作会有不同的理解，造成现在不同的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:27",
      "text": "是不是？我相信钱征宇刚才想说的是就是unicode de里面有一个new line的符号在它的码位跟回车和换行都不一样。然后这个玩意儿应该怎么理解？是它是两个连在一起吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:46",
      "text": "对，实际上我想说的就是我我我其实最初想说为什么这个CI和LF有这个顺序？我本来想推到更早一些，因为传说好像是早期的时候，CR和LF是由于机械的一些限制导致的。CR这个操作的时间会长一些，LF的这个操作的时间会短一些。就因为CR这个行程明显就长，LF的这个行程对，要车回到那个通常那个有道理。对，所以通常机械指令会先发出这个CR然后我再发一个lf所以我不知道他们是不是在某种程度上可以两个方向同时运行，所以正好能导致这个换行的和换行和回车这个操作更快的结束。",
      "speaker": "发言人4"
    },
    {
      "time": "01:02:33",
      "text": "其实到了这个数字领域之后，我觉得CR和LF只是一种控制信号。你发给计算机一个信号之后，计算机怎样在这个GUI上绘制这个图标的光标的行为，或者是绘制下一个字符出现的这个位置。可能它可以有另一套机制来来匹配它它未必一定要根据这个信号的先后顺序来做一些什么操作。",
      "speaker": "发言人4"
    },
    {
      "time": "01:03:01",
      "text": "对，现在其实基本上在如果你上升到GUI这个层面的话，大部分东西都是这就下面有一层键盘驱动，就是上层程序很少会需要自己去操心。对这个键输进来的扫描码到底是什么，对吧？不然很多东西你还得自己做一套测的那个拼音输入法什么的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:03:24",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:24",
      "text": "重新开始造轮子。对，所以这才导了很多时候这个LFCI和CILF和LFCI在GUI上的结果基本是一致的。但是可能他们背后的这个application需要去处理你输入的这个控制符的东西。",
      "speaker": "发言人4"
    },
    {
      "time": "01:03:47",
      "text": "像各种控制符号，原来就后来变成转转码了，转到SK然后最后转到uni扣。现在所以uni KO的话lf换行的话是码位是0A然后C二回车的话是零D他们还专门有一个马位，就是C2加LF。Unicode的好像是有，你反正他们为了各种动作，他好像都都有分的好多控制符。其实在unicode里面就沿袭了以前各个系统操作系统，他们还有什么分行、分段、退还是垂直垂直的挪行，这样子都有的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:28",
      "text": "因为主要是因为unicode的一开始的最开始这256个码位不都是跟那个阿斯克一样的。然后阿斯本身就是从电传打字机时代定下来的一大堆有可能被需要的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:42",
      "text": "所以现在这些控制字符现在还有用吗？好像没有用了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:46",
      "text": "没有用，那个叫什么，还有挪半行什么的。对，他有往下挪半行，往上挪半行的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:55",
      "text": "就比如说像eski下面那些低的那个，比如说离多少，就是小于20的那几个，那几个控制符好像基本上现在日常都就没有用用了没用了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:09",
      "text": "小于20的控制符每天都在网络里面被使用的，就是在在HTB协议里面被使用。那个是ACK acknowledge不就是一个0，是ACK是多少。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:23",
      "text": "007还是多少？你是说这个在哪里有用？没有。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:29",
      "text": "ACK是6号006不在.",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:32",
      "text": "你说在哪里有用呢？没有用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:34",
      "text": "TCP协议里三次握手。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:38",
      "text": "你说那个里面他就用这个符号是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:40",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:41",
      "text": "就是意思是我完全不一样，意思是我我收到了对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:47",
      "text": "OK不是，你看asking这个玩意儿，它本身asking后面那个两个I代表什么？Information interchange对吧？然后这些东西每一个符号都有都有都都有其内在的information在里面。只不过这些information可能对于人类，就是前20的information对于人类没什么可以直接看到的意义，对吧？但它本身还是一种还是在传递某种可能是非事业上的信息。但是我相信SK里面有什么device control之类的，这个是真正意义上的，就不知道有谁现在还有谁在用？但是其他的像什么end of text.",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:30",
      "text": "或者是大家都在用吧，吧？像比如说很简单的000号，就是now对吧？嗯空这空其实在还是，空也是一个信息。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:40",
      "text": "就说这个是一个空，这个空用的比较多是在那个C的字符串作为那个串末的一个标记。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:48",
      "text": "对吧？这个虽然你是空，但是这也是一个一个是一个信息，对吧？它这儿有个马尾的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:55",
      "text": "但是这个设计是非常糟糕的。你要讲的导致后面各种问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:02",
      "text": "就因为你每次你要找那个字符串的边界，你必须把字符串数一遍。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:06",
      "text": "它是就会导致很多什么overflow的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:10",
      "text": "对，如果你不数的话，就有可能就会看到奇怪的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:15",
      "text": "所以现在是很多高级一点的语言，都会把那个字符串的长度作为结构体的一部分放在里面。也不用说大家再去找那个末尾到底在哪。还有像我看看这里还有一个七号，这个bell冰他。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:32",
      "text": "可以叫一声，对，会叫我一声叮。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:36",
      "text": "就是挺有意思。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:39",
      "text": "好吧。估计听到这时候我们自弹自唱的那些听众朋友都要睡着了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:45",
      "text": "到底在说什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:47",
      "text": "对，其实而且我们刚刚说那么多，都还是在这个纯文本的一个语境下说的对吧？如果到副文本了，完全就不是这么回事了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:07:56",
      "text": "那副文本里面至少就是大家比如说在平时的那个文字处理的话，要要经常处理就是一个强制换行和普通换行，对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:08",
      "text": "对，所谓的什么软回车硬回车之类的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:12",
      "text": "对对对，今天金阳讲回车了，我们就把这个跟在在群里再说一遍，什么叫硬回车，什么叫软回车。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:21",
      "text": "我还不知道这个概念有什么区别？",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:24",
      "text": "来吴涛来讲。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:26",
      "text": "我这个也由我来讲。阮回撤，对我觉得这其实就换行强制换行更多的接近于一个typography。不是。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:44",
      "text": "对，还是就文本上面。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:47",
      "text": "的这样一个区别。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:50",
      "text": "是的，但是我们不是串台节目，你要也要讲讲台报告这些东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:08:54",
      "text": "OK我刚才太太跟你说，有可能一时没有回过味儿来。就是你在换行的时候，实际上是就是换行是相当于一个character。然后代表换行的这个段落的或者说换行的语义是产生一个新的段落。而所谓的强制回撤则是说这个段落其实没有结束，只不过出于某种视觉效果，或者是出于某种渲染上面的，或者出于某种大时代了，呈现上面的需要，我需要在这里新起一行。对，比如说在。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:35",
      "text": "break吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:37",
      "text": "对对不，line break是一个，line break是一个技术上的term，而换行和强制换行则是line break有可能产生的两个语义。而换行所产生的是一个新的段落，然后强制换行产生的只是新的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:00",
      "text": "一行而已。所以如果在一般的比如说word的文字处理软件，或者像比如mac的话，是用pages。如果你普通话，你按一下那个所谓的return回车键，你摁下去以后它会产生一个新的段落。所以它会在原来的那个缎那一行的末尾加，其实它会加一个段落符号了，平时是看不见的。你可以打开来把那个控制符号打开来，它显示的话就看见这是一个段落的结束。所以它前面是一个段落符号。而如果你硬要在这个段落并没有结束，但是硬要换行的话，它是可以换行的那这时候比如说在word里面是shift enter，很多地方pages也是，你按shift，然后再按一个按，它会强制再换一个行。那这个时候如果你打开那个控制符号，你会发现它在这时候是这个段落没有结束，所以它不会加段落符号，就是单纯加一个回车的一个返回的一个符号。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:03",
      "text": "我想起来了，这里会受那个行间距的影响，对吧？如果是强制，就是段落内的强制换行，它是不会受行间距的影响产生视觉的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:12",
      "text": "不会说断间段落间距。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:14",
      "text": "段间距断断间距的影响。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:18",
      "text": "因为逻辑上的话，对，它还是同一个段落的，它就不会在这里加间距。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:23",
      "text": "这也是HTML里面那个P和那个BR这两个标签的区别吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:29",
      "text": "对对对，所以又又说回来，对，我都写着了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:34",
      "text": "对对对对。不过其实我们这里作为这个typography的这一方面，我们其实还有一些需要补充的。就是大家可能需要意识到分段和换行其实是完全两种层面的概念，或者说是意义。比如说我们现在或者说已经过去很长一段时间之内，我们都已经默认了换行是要产生一个新段落的。或者说产生一个新段落的一个必要条件就是必须要换行的。但是在更早期的时候，这个事情就不那么一定了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:12:08",
      "text": "比如我们如果听过我们上一期自弹自唱节目的听众，可能还记得伟大人民艺术家。他就喜欢在这个段落之内换行的，段落之内分段。就我们现在所谓这个视觉段落之内，它可以随意的插入所谓的这个分段符。所以就是他分段的方式有很多，他可能分段不换行，他也可能分段又换行，他也可以分段又换行又空行。",
      "speaker": "发言人4"
    },
    {
      "time": "01:12:35",
      "text": "就是puco。Puco这个符号在早期羊皮卷上是比较有用的。因为羊皮卷做一张纸你不容易。然后如果你只是想要写一章内容的话，你可以把一整张弄成就是视觉上的一段。而真正上真正的一段，你可以用q co在这个章节里面把它隔开就好了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:12:58",
      "text": "就有这个段落回车符这个东西对吧？这个东西叫这个其实就是标点符号。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:04",
      "text": "把它变成对对对，是的，就是叫段落回车符。",
      "speaker": "发言人3"
    },
    {
      "time": "01:13:08",
      "text": "以前我们比如说那个句号是分句，然后这个逗号是分句里面的一个单位。那如果说段与段之间我们可以插入这个符号来解决这个问题，也可以节省这个空间。不用不用换，真的换一个行，然后空一行这样。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:23",
      "text": "对，是的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:13:27",
      "text": "还有以前还有这个跟inna也有关系，对吧？就是首行缩进那个东西。是的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:35",
      "text": "缩进最早也是用来替换这个PU co.",
      "speaker": "发言人4"
    },
    {
      "time": "01:13:38",
      "text": "它也是一个标志性的一个11个1个一个符号。但是为了升值的话，就是羊皮纸很贵，对吧？毕竟羊皮很贵。那我们就不要缩进了，不要换行了，就直接插一个这个符号，中间大概知道就是下一段开始就行了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:55",
      "text": "跟大家在可能有第一次听我们节目的听众，我们跟大家再一起解释，刚才三位主播都说了这个peco，peco是什么东西？它的通常的说法是paragraphs k就是段落记号，它长得是像一个左镜像反向的一个字母P然后又加一竖的一个控制符号。如果大家把这个常见在比如说在word里面的控制符号，如果给它打开的话，你会发现每个段落后面它就会显示有这样一个段落符号，这个段落符号英文叫petro。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:31",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:14:32",
      "text": "所以其实就是说换行和分段这个概念，在typography里面其实他还是有一点绕的。我们现在可能更常见的是看到了这个分段一定是带来换行这个操作，然后我们也会默认说换行多数时候是用来分段。偶尔通过软回车这种方式，我们我们可以令得他分换行，但是不分段。在更早的一些时候，我们会发现分段这个操作跟换不换行完全没有关系。它是一种更加。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:07",
      "text": "是它那个逻辑概念，然后换行，其实这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:12",
      "text": "样式是的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:14",
      "text": "然后还有这个中文里面还有一个缩缩进两个字的样式对吧？不对对对对，还有缩进和加一个空行的这个样式上的差别。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:27",
      "text": "所以这个样式但是随着这个媒体的变化而变化的。像比如说以前羊皮纸很贵，所以我尽量要节约空间，那我只要插这个段落符号就可以了。可是到了后来就发现在有了纸张，有纸张相对廉价的那我们就可以换行了，或者我们可以不缩进也可以，对吧？但是这中文习惯我还可以两可以说空两格控不控主要是你的主要目的就是让大让读者知道你这个是新的一段的开始，吧？这是不同的风格问题。那到了现在网页的话，网页反正现在就随便滚屏，可以随便往下滚吧。因此的话大家就更偏向用段落间距来区分段落，而不是用段落缩进来区分段落。这个都是视觉上的不同的变化，而这种风格化的变化和你这个媒介有很大的关系的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:24",
      "text": "其实这个缩进有一种传说，说它其实就是因为早期一些牌子在排q co的时候忘记放这个，就产生了一个空间。大家发现这个空间也可以十分段落，所以渐渐的就不再用puco了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:16:40",
      "text": "Picture不够用了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:41",
      "text": "没有，以前的话比如说你是写在写白纸黑字，字是黑色的，但是这个picture它可能要用红色另外标，所以在排字的时候，它是在排黑板的时候，就黑颜色的那块板子的时候，它pickle这个都是空出来的，就叫套印可以是吧？对对对，因为他他要用红色另外去套上去，或者用手写，或者要用有个美工师傅去画一个很漂亮的画，都都可能，所以段落开始，它在排字的时候都是会空出来的，这个是这个段落缩进的起源。",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:18",
      "text": "终于搞清楚这几个之间的相互关系了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:21",
      "text": "不管怎么样，反正最终的目的就是要让读者知道，这是一个新的段落，那实际上的做法有各种各样的对吧？对。其实在网页上面的话，现在更多的流行，大家都是希望加一整个空行，对吧？现在反正屏你可以随便乱滚，那在HTMM里面大家就加那个P元素的话，然后再去针对这个P元素在进行CS上面的控制。但是有时候还是喜欢在一个段落里面需要强制段，那你就加一个break，b2 flash对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:57",
      "text": "这个在应该你们诗歌什么里面用的比较多。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:00",
      "text": "对吧？它需要换行，但是它并不是一个段落的结束。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:06",
      "text": "对，因为为了歌，为了样式的好看的时候。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:15",
      "text": "后面那个语言里面那个你们要讲吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:18",
      "text": "我觉得没什么必要。而且好像你确定这个回撤在不同语言里面，所谓使用，比如说使用react return的意思是什么呢？就这个使用指的是它内部存储的方法，还是什么呢？",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:41",
      "text": "你指的是什么？是CE说还是就比如说。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:44",
      "text": "你在python里面，你说比如说是python语言使用catch return这句话的意义是什么呢？就是是指python的源代码一定是用必须使用cache return，还是说python在内部保留字符串的存储字符串的时候，使用的是开始还是。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:06",
      "text": "一个是后者。不是python是这样的，python它根据平台的不同，它有不同的行为模式。比如说这个，对，那我的意思有个有有个函数叫做print对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:19",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:20",
      "text": "print它打印完之后，在windows w下面它会打那个CRLF就是character，然后牛奶，然后在unix里面下他就只会打这个new light去换行。",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:36",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:36",
      "text": "然后所以就是这个使用某个语言使用back slash r的意思指的是什么呢？他因为其实不只是拍的，就很多语言都是这样的。你你在你让他输入，你再让他在不同的平台下输出什么东西，它很有可能是平台相关的。但是它内部所存储字符串或者存储某一个格式化信息的时候，可能的确会某用某一种单独的字符。就比如说最就很让我头疼一个曾经很让我头疼一个问题就是git在存储源代码的时候，你可以设置它存储的那个源代码的新换行符，应该是windows还是unix的。然后如果你和一个使用windows的人使用了不同的设置，然后他commit进来的代码，每一个行为都被替换成了crf。然后当你拆开的时候，对它就会他不一定会加上去，就是你可以设置它的具体的behavior。然后有时候会导致说你明明什么也没做，你只是check out它的代码，然后git会告诉你所有代码都已经被更新了。但是当你想要把这个更新存储下来的时候，却又怎么都存不下来。对，所以这个。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:06",
      "text": "行为很像，就是像我后面那个windows记事本的那那个那个梗儿。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:12",
      "text": "OK说说说看好了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:15",
      "text": "就是至少在XP上是这个动作，就是在windows记事本，windows记事本它的格式菜单里面，有个右端自动换行的一个选项。所以如果你选项以后，你改变窗口的宽度以后，它它会自动折行OK。但是一旦另存为存为那个纯文本文件TXT文件以后，然后在那当前那个状态的右侧，每一行就会被加入那个换行符。这样无论你改怎么样，改变的窗口大小就不会自动折行了，就失效了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:00",
      "text": "就他手工折行了，所谓的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:02",
      "text": "对你一旦你保存以后，它就手工折行。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:05",
      "text": "对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:10",
      "text": "这个状态就特别扯。这个状态下如果你你把这个粘贴复制，你拿到其他的那个文本编辑器你去看，其实这个记事本，它手工加入的那个CRCRLF1个特别怪的一个码，就是回两次车加这样加换。然后就说你然后你记事本就保持着这个打开的状态。原来你在意那个TX文件你还在吗？你用其他的那个文件编辑器打开来看，就发现就没有这个换行符。也就是说这个奇怪的换行符，就没有写到那个文件里面去。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:52",
      "text": "他是写在他的那个进程里面。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:55",
      "text": "那个buffer里面。这样对实现了这个是很有用。对，只对他自己有用，你用其他的那个文本已经是看不见的。好，这时候你再回来，你又回到这记事本，你再保存，保存以后再按全选，你一一按全选的时候，它的又又可以恢复那个右右端自动换行，改变穿C窗口大小，就开始折行，就特别奇怪，会跳来跳去。就是因为它那个记windows记事本，它自动加了一个为了它显示的方便，实现它这个折行的问题，加了一个特别奇怪的CRCRLF。",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:39",
      "text": "可这个记事本都是临时工开发的吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:42",
      "text": "不过好像其实还是有一些传统的这种成本编辑器。它会有两种模式，一种是soft rap，一种是hardraw。Hardraw就相当于帮你强制断掉行之后插入这个换行符，然后soft up它可能是不插入新的字符了，但是windows这个记事本就是在某一种模式下，silently的给你插入了这个换行符。",
      "speaker": "发言人4"
    },
    {
      "time": "01:24:08",
      "text": "但你插进去是个没有关系的。而且它临时插完，它保存以后，它有时候它就给它会，它是自动插了以后它保存了还会把它删掉。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:19",
      "text": "本记事本这个问题看起来就是它用那个hard rap的方式实现了这个soft rap。对，就因为它它不它本身那个程序可能不支持soft rap的这种设计。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:33",
      "text": "他只是一个记事本。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:40",
      "text": "反过来他干嘛要用个这么奇怪的就是hack.",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:44",
      "text": "就是为了实现简单了，不用重新写。因为soft rap的话其实你要额外做事情，你要把这个两个概念抽象出来，对吧？他说那不用了，我就直接这么实现这个概念就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:58",
      "text": "所以就经常就会我在记在windows上记事本写东西，然后给他复制粘贴到其他东西去。其他地方去的话，其实他就会这时候就把多余的那个莫名其妙的CRCRF这个换行服务也一起拷贝过去了。然后那特别坑，就是你本来这个唇纹美就特别脏的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:22",
      "text": "你为什么要用记事本？",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:25",
      "text": "对，就是我不用记事本，但是当你把你的东西发给别人的时候，或者怎么样的时候，就经常会出这个事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:32",
      "text": "所以这个系统自带的这种软件，一定还是要做好，不要留一些这种很明显的坑，对吧？因为大家默认是用这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:41",
      "text": "对，而且现在的而且做的记事本，一般windows用户就觉得好像这个记事本就几乎不能什么功能都没有，就什么都不能做。然后习惯windows的人，再转到mac平台上，就觉得好像mac平台的这个文本编辑好像也是什么都不能做的。但是反过来，其实mac上文本编辑可以做很多很多事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:05",
      "text": "它其实是个rich text editor。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:07",
      "text": "对，我觉得一开始最让我不爽的一点，或者说最不习惯的一点，最culture shock的一点就是mac平台上面新建一个文本文件，居然默认是rich text。对，因为我其实我小时候写了很多，我小时候写写东西基本上都是用记事本本，几乎因为就是因为它几乎什么功能都没有，所以我一直都用的。然后刚用麦克的时候，我想我靠为什么我只想写点东西，然后还让我可以调整字号什么的，这何必？",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:39",
      "text": "不，这个是当年mics按这个经验的地方。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:46",
      "text": "至少直到今天我还是会把那个text edits的默认新打开的文件设成纯文本。纯文本就可能是对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:55",
      "text": "但是我会发现你从其他网页上粘贴一个东西，它就变成副文本。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:01",
      "text": "会这样吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:03",
      "text": "好像是会这样的，所以我从来不用那个破玩意OK.",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:07",
      "text": "你不你。",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:08",
      "text": "不用你不用mac上面的文本编辑吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:12",
      "text": "偶尔也用不用，总的我。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:15",
      "text": "几乎不用。除了偶尔贴个什么东西之外，几乎从来不用taxi.",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:23",
      "text": "切的话也不用，其实也没有必要有，对吧？那好，那平时你们用什么？就是文本编辑器。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:30",
      "text": "那程序员用的那种呗。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:33",
      "text": "对，如果如果要写程序的话就用vim然后不写程序的话什么sub line什么不写程序。",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:41",
      "text": "用sub line，好多程序也挺恶心的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:27:45",
      "text": "写程序用300也挺好的。然后我再用一个日本人写的，叫做cut editor COT editor。",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:53",
      "text": "对，这我们在节目里提过。",
      "speaker": "发言人4"
    },
    {
      "time": "01:27:56",
      "text": "对，但好像用那个好用吗？那个据说很好。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:00",
      "text": "而且他原声支持竖排。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:04",
      "text": "日本人做的。对，其实那个mark的默认的那个文本编辑也可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:12",
      "text": "支持数排行榜OK，不过这个还附带代码高亮，所以编辑MD的话不是mark down也可也需要代码高，也可以用代码高亮的。并不是说你一定要写程序才需要代码高亮。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:32",
      "text": "那也是。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:34",
      "text": "然后它可以根据markdown的那个结构自动生成一个outline。这对，这还蛮不错的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:45",
      "text": "我记得我们的朋友江江，他好像做过一个text edge的改良版，对吧？因为no windows下面有windows，windows下面有那个no pad加加是吧？然后它它将他也做了一个text a加叫做taxi plus。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:04",
      "text": "应该如果我们这项目还在维护吗？",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:06",
      "text": "这很久很久以前的事情了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:08",
      "text": "我对我记得这个项目有几个非常实用的特性。首先它能自动识别编码，然后好像他对这个bomb有一个特殊的处理，就是防止这个bomb不兼容的问题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:20",
      "text": "就是为了解决初用这个mac的用户要跟windows用记事本编辑的文本之间协同的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:31",
      "text": "另外它有个很伟大的地方，就是他好像在某几个OSK的版本里面能修复输入中英文的时候光标上下跳动的那个问题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:44",
      "text": "这个是好好古老的历史了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:46",
      "text": "对，这是好古老的一个bug。我靠，但这个曾经是非常困扰中文用户的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:52",
      "text": "是的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:54",
      "text": "对错原来其实是那个core tex的bug。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:58",
      "text": "对，应该是不同字体它默认设的某一个跟行高相关的数值，然后对不一致。",
      "speaker": "发言人4"
    },
    {
      "time": "01:30:05",
      "text": "对对对，经常会出现那个行高跳来跳去。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:08",
      "text": "然后搞不定那个bounding box的设置。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:13",
      "text": "天其实现在我们用的那些像V那些稍微高级一点的这种程序员的文本编辑器，都可以是设置自动探测这个换行到底是CRLF还是lf还可以探测这个编码。还有包括还有一个是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:31",
      "text": "就是至少你就高级的编辑，他会给你有选项。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:36",
      "text": "我吴涛为的那个FF那个选项是设置什么来着？我现在想不起来了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:41",
      "text": "FF换行。",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:42",
      "text": "焕发发file for my这个选项是设置什么？好像就是设置CIFF.",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:49",
      "text": "它是一个cluster setting，除了换行还会设置语法。",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:58",
      "text": "不是发former，应该只是设计它只会显示unix s dos，好像就是只是设置这个换行的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:05",
      "text": "OKCRS我讲的是five OK。有可能。对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:31:09",
      "text": "如果没记做好是这样子的。然后还有一个就是之前说的就那几个，因为有有两个字符，就有那种四种组合了。刚才之前大家提过就是单的CR单的lf然后CRFLF还有LFCR，当时就设置这好像，但是只有三种，我记得记得有有unix有dos.",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:29",
      "text": "有到和麦克。",
      "speaker": "发言人3"
    },
    {
      "time": "01:31:30",
      "text": "对，麦克就是指的是mac OS9和以前的那个纯用一个CR来表示换行的。然后unix就是IOF来表示换行的，然后dos就是crf表示换行的。然后那个那个怪胎的LFCR是没有人用的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:47",
      "text": "对，没错，就是老版的，就是所谓的classic的macos直到版本九以前他们的换行都是用C29也是好像。对，就是到9就到.",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:58",
      "text": "然后OS ten之前。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:00",
      "text": "都是他其实他他是一个unix报了个皮。对，所以他变成VC以后，他就符合AN unix的动作，就给他换成LF了。所以当年就是老老max老max换成新mac的时候，也是有有好多问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:18",
      "text": "对，就刚才说到一个协议的问题。刚才还补充一个事儿，就是刚刚才不是提到过那个比如说HTTP协议里面的那个换行，应该是默认是标准规定范式CRFLF，就是dos那套方式。但其实那个规范里面后面有一行小字，又说为了最大的兼容性。就是如果你是生成这个HTP协议的那个文本的，你要用这个CLF。但是如果你是接收这个协议的，为了向后兼容那些奇奇怪怪的客户端，你只要看到LF就能是换行就可以了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:49",
      "text": "嗨这个说是一回事，做又是另一回事。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:56",
      "text": "就是有一个哲学就对自己要严格一些，对别人要宽容一些。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:01",
      "text": "对，所以就是要搞了半天，这个底线就会越画越低，要不然的话都不行。像那个网络协议FTP的话，也是由于系统不一致的话，有时候一开始也会传单传文本文件也会有问题。所以就是要明确两个，它是以asked就是文本模式在传，还是以那个binary，就是真正在传代码。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:29",
      "text": "那个问题就更麻烦了，比这个事情还要搞那个分数。对，那更底层不那个是分，是这个问题导致它是所谓的一个七位还是八位的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:38",
      "text": "是seven bid clean.",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:42",
      "text": "还是对对对，就是因为传统的这个电传，它是在以前电报的基础上复用的。然后那个时候为了电报那个是七位码，就是asked传统的是只有128个字符，对吧？还有那个extended的model 3是变才变成八位，是250位的字符。所以在很多古早的通讯系统里面，包括很多早期的邮件系统里面，为什么要费那么大的纠结去？比如说你现在我们去邮件发一个附件，对吧？它会有把它变成一个编码模式，就是为了所谓的叫做seven bid clean，就是能够在很古老的那些通讯系统里也可以用。因为它不支持一个字符是八个bit的这种情况。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:25",
      "text": "所以占用最高位的对对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:28",
      "text": "所以所以我所以我们很多这个邮件系统，你传附件的时候，它的那个overhead是很大的，可能百分之二三十，就是因为要重新采用一个编码。本来我们现在计算机都是八位字，一个字节是八个bit，对吧？但是又为了考虑到像兼容这些古早的系统，我们还是要把它变成七位的那就你看一下就要搞很多很奇怪的转译的事情。然后那个FDP的那个SKY模式和banner模式，就是分asi模式，就只有每个字节七位，然后banner就是可以传82的，其实banner是一个更加高效通用的一个方式。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:10",
      "text": "学校反正现在各种A现在的话FTP软件它都会帮你切换两种模式，这个都无所谓。",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:17",
      "text": "我是说现在谁还有FTP？",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:21",
      "text": "我很好奇。李如意。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:23",
      "text": "我们上传音频。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:25",
      "text": "也是用FTP的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:35:28",
      "text": "不会，你们还是用FTP吗？",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:30",
      "text": "对，就没有特别方便，就是不需要太折腾的工具。",
      "speaker": "发言人4"
    },
    {
      "time": "01:35:36",
      "text": "不有那个有那个那个叫什么？对，吴涛那个SSSH那个S叫什么SSTP，不是SSCP传的是什么玩意儿？",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:47",
      "text": "SCPA是通过SSH来传输的对对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:35:50",
      "text": "就是就不用F我的意思就不用FTP了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:54",
      "text": "这得看你的那个服务商是不是开放这样的渠道。",
      "speaker": "发言人4"
    },
    {
      "time": "01:35:59",
      "text": "不用。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:59",
      "text": "你只要能够远，你只要能SSH就可以。对，SSH和SSTP差不多。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:05",
      "text": "反而你用FTP还要再装一个软件，开个端口，而且这种是不安全的。所以我们目前所有的这个传输，比如说IPN的那个那个传音频文件上去都是不不不走FTP协议的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:21",
      "text": "反正这个好吧，的确FTP特别不安全。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:25",
      "text": "哈嗯哈而且FTP那个还挺坑的。它有我不知道你们知不知道，有一个叫FTPS和SFTP对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:35",
      "text": "俩是不一样的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:36",
      "text": "完全不一样，好吧？然后我们说那个SAP拷贝，那个就是SFTP，它跟FTP其实并没有什么关系，非常坑爹。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:50",
      "text": "就是名称长得像而已。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:52",
      "text": "不不不，好像不是我想想有三个对错了，有三个有SCP，有SFTP和FTP。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:01",
      "text": "SSCP是SCP是基于什么？就是RCP还是一个什么的协议吗？然后。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:12",
      "text": "SCP就是SSH上面弄的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:16",
      "text": "是但是不是它它但它毕竟是一个文件传输协议对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:20",
      "text": "它是基于这个RCP的对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:23",
      "text": "然后SFTP应该是。",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:31",
      "text": "就SFTP它既不是FTP，那它是一个新协议，跟这个没有关系。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:37",
      "text": "对，SFTP是完全一个一个新的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:41",
      "text": "对对对，SFTP是基于SSH的FTP，但它同时又不是SCP.",
      "speaker": "发言人3"
    },
    {
      "time": "01:37:48",
      "text": "是这样，不他也不是FTP.",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:50",
      "text": "不是SSFTP的名字里面有SS有file transfer protocol个这个对，但是它跟那个不是完全是两。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:00",
      "text": "但是它跟对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:02",
      "text": "但是它跟SCP也不是同一个东西的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:04",
      "text": "所以这不是一个段子。对，其实因为我当时学的时候，反正是分开学，我也没把它混在一起。就是现在跟你讲的话。本来不乱了，被你搅乱了，真是的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:18",
      "text": "太把人搞哭了。干嘛？这就是你看跟FTP沾边的都不要用就对了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:24",
      "text": "那，这个是比较粗暴，STD比较粗暴。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:32",
      "text": "对对对，天哪。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:34",
      "text": "好吧，那今天差不多就讲到这里了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:37",
      "text": "OK我们今天才不到2个小时，哇哦居然。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:42",
      "text": "有人嫌短。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:43",
      "text": "居然弹关相庆。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:46",
      "text": "弹弹弹。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:47",
      "text": "我让你谈好，来来来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:52",
      "text": "郑宇把收尾讲一下。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:57",
      "text": "收尾。",
      "speaker": "发言人4"
    },
    {
      "time": "01:38:58",
      "text": "是什么？迷之萌点。每次都是你在收尾，就讲一下大家的工，我们的联系方式什么的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:12",
      "text": "好吧，感谢大家收听本次的节目，应该说我代表自然自创先感谢大家收听本次节目。然后如果大家喜欢我们的节目的话，可以在社交网站上关注我们我们在twitter、新浪微博以及微信上面的ID都是the type THETYPE。那么在facebook上可以搜索type is beautiful找到我们。同时大家也可以通过email来跟我们取得联络，我们的邮箱地址是forecast at the type点com PODCST at THETYP点COM。同时通过这个邮箱地址也可以在支付宝或者paypal上面给我们捐赠。捐赠的听众就会有机会进入我们的这个抽奖活动。",
      "speaker": "发言人4"
    },
    {
      "time": "01:39:59",
      "text": "你看人家还有抽奖，搞得我都不好意思说了。Anyway，感谢收听IM podcast，网络旗下的IT技术主题娱乐节目内核恐慌。我们号称hard core，但是没有干货，想听人听，不想听的就别听。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:14",
      "text": "你可以为本节目捐款，捐款地址是kero panic dot FM flash donate。捐款的捐款金额随意，只要是八的正整数倍就可以捐款。捐款不愧为你带来什么，不捐也不会让你吃什么。我靠，我说出这句话的时候，舌头都在打抖。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:30",
      "text": "可见你多久没有录这个节目了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:32",
      "text": "对，我们我们也应该来搞个抽奖，具体抽什么还得想一想。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:37",
      "text": "你要给他准备礼物。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:41",
      "text": "说点事，我们口号是no hot feelings。如果你有任何反no heart feeling right。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:49",
      "text": "如果你们根本就是没没珍惜要准备礼物的感觉，这个接的可以发电子邮件到kernel .",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:56",
      "text": "p kernel panic at IPN dot LI同时也欢迎你收听real主持的风投圈。Real你还在主持风投圈吗？以及S旗下的刚放了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:07",
      "text": "一期a very .",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:09",
      "text": "nice，以及IPN旗下的其他几档节目未知道太一来了。流行通讯history阴影像无次元博物志选美陛下观一天世界时尚怪物。我们下期节目再会。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:22",
      "text": "拜拜。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "本次对话广泛探讨了文本编辑和文件传输领域中的多个关键问题，涉及不同操作系统如Windows和Unix下换行符（CR、LF、CRLF）的差异，以及文本编辑器如Sublime Text和Visual Studio Code如何处理这些换行符。讨论还深入到了Git在处理源代码换行符时的兼容性问题，强调了网络协议（如HTTP和FTP）中换行符的规范和兼容性，以及电子邮件系统在传输文件时编码格式的选择。此外，还触及了文本编辑器和工具（如SSH和SCP）在文件传输中的应用，以及解决系统和应用程序间兼容性问题的方法。整个对话体现了文本编辑和文件传输领域面临的复杂性和挑战，同时也反映了对跨文化理解和技术创新重要性的认识，以及对未来技术解决问题和促进更深层次人际交流的乐观展望。",
    "qa_pairs": [
      {
        "question": "你们内核恐慌是第几期？",
        "answer": "应该是45期。",
        "time": "00:00:06"
      },
      {
        "question": "今天是自弹自唱的哪一期？",
        "answer": "今天是4月4号自弹自唱的第44期。",
        "time": "00:01:10"
      },
      {
        "question": "自弹自唱与内核恐慌串台了几期？",
        "answer": "这次是自弹自唱与内核恐慌串台的第四期。",
        "time": "00:01:28"
      },
      {
        "question": "内核恐慌被催更了吗？",
        "answer": "是的，内核恐慌也被催更，大家都在群里催促更新。",
        "time": "00:04:07"
      },
      {
        "question": "听众对上一期节目的反馈是什么？",
        "answer": "上一期节目引起了听众的热烈反响，有人分享了一个与节目内容相关的视频，并提到配合节目使用效果更佳。此外，关于MG输入法的问题，有听众反映可以输入M字，但具体操作方法未知。",
        "time": "00:05:38"
      },
      {
        "question": "MG输入法在iPhone上的表现如何？",
        "answer": "在iPhone的拼音输入法中，如果词汇关联到EMOJI，会在候选词里显示出来，无需专门使用MG输入法。",
        "time": "00:06:58"
      },
      {
        "question": "对于符号与语言的理解，大家有什么讨论？",
        "answer": "讨论了符号（如表情符号）可能存在的误用现象，以及不同人对同一符号可能产生的不同理解。同时提到，语言学中的能指和所指概念，指出符号所指向的意义（所指）往往基于社会共识和心理层面的理解，并非事物本身。还设想了未来可能出现超越现有语言沟通方式的通信革命。",
        "time": "00:11:57"
      },
      {
        "question": "这种AI技术如何实现将图像转换成某种特定风格，例如毕加索的风格？",
        "answer": "这种技术利用style transfer技术，可以从一个图像中学习特定风格（如毕加索的风格）的所有精髓，并将其应用到其他图像上，从而实现风格转换。本质上，书法家临摹也是类似的过程，通过学习和掌握掩体流等书法风格的精髓，再进行创新或复刻。",
        "time": "00:15:42"
      },
      {
        "question": "是否有关于用深度神经网络分析5万个免费字体的研究成果？",
        "answer": "是的，有一篇标题为“analyzing fifty k funds using deep neural networks”的文章，研究者下载了大约5万个免费字体，用深度神经网络提取了大量特征，并能完成一些很酷的事情。我把链接放在show note里，感兴趣的听众可以自行查看。",
        "time": "00:16:44"
      },
      {
        "question": "对于style transfer论文和相关代码，是否可以提供给大家参考？",
        "answer": "可以，我会把一篇关于style transfer的论文和githa上的代码分享给大家，感兴趣的读者可以自己去玩。",
        "time": "00:17:27"
      },
      {
        "question": "是否有中文字体设计领域应用了类似风格转移技术的例子？",
        "answer": "中文字体设计领域确实有人写过论文，探讨如何运用风格转移的方式来创造新的中文字体设计。",
        "time": "00:17:36"
      },
      {
        "question": "未来是否可能出现艺术家因技术发展而减少手绘作品的现象？",
        "answer": "不是“艺术家临摹”，而是可能未来做赝品会更方便，直接使用风格转移技术复制作品。",
        "time": "00:18:17"
      },
      {
        "question": "新一代系统里的MOG工作有何特点和观察？",
        "answer": "我在G开头的互联网公司参与新一代系统MOG工作，发现中国在iOS和安卓端使用MOG的频率远不及西方国家，因为有微信表情包的存在。此外，MOG今年最热的话题是加入了女性职业系列。",
        "time": "00:19:48"
      },
      {
        "question": "对于MOG格式，大家的观点如何？",
        "answer": "大多数认为svg是目前最佳的解决方案而非PNG，苹果的MS包在手机系统中占比最大，但新版MOG应考虑跨平台发送信息的理解偏差问题。",
        "time": "00:21:12"
      },
      {
        "question": "对于微软的MG设计，有什么独特之处？是否应期待在下一代操作系统上看到新的MOG更新？",
        "answer": "微软的MG视觉风格独特且统一，虽然没有复杂的渐变和立体效果，但与其他商业公司相比，其视觉风格是其他公司无法比拟的。在2016年的邮件中提到希望UNICODE组织多考虑中国元素，但实际上UNICODE开放给所有人提交提案，任何人都可以提出追加字符的需求。",
        "time": "00:21:58"
      },
      {
        "question": "EMOJI与UNICODE之间的关系以及两者的发展边界在哪里？",
        "answer": "EMOJI是一类符号的统称，包括但不限于表情符号，其与UNICODE之间存在一定的交集，但确切边界难以界定，因为表情符号的定义和边界在不断变化和发展中。",
        "time": "00:27:48"
      },
      {
        "question": "在中餐相关的emoji设计中，美国人是否提到了要增加更多中国元素，比如筷子和饺子？",
        "answer": "是的，美国人在设计中餐相关的emoji时提出了增加中国元素的要求，例如筷子和能够化身为饺子或包子的dumpling。",
        "time": "00:32:00"
      },
      {
        "question": "对于日本人觉得他们的元素很地道，而美国人可能并不太理解的情况，这是怎么产生的？UNICODE在添加新元素时，是否存在问题，例如日本人觉得某些元素很美式而非地道？",
        "answer": "最初设计中日元素时，日方人员会提出自己国家的元素设计方案，比如富士山会被默认画出来。但当这些元素被国际通用时，可能会失去原有的地道感，因为并非所有国外用户都能理解或认同这些特定的文化符号。UNICODE在形成原始集合时，确实存在问题。最初的一些日本元素是地道的，但后来加入的新元素可能不够地道。此外，在讨论新元素提案时，由于提案多由美国人提出，绘制出的形象可能不符合中国人的期望。",
        "time": "00:33:27"
      },
      {
        "question": "是否有出现过日本人觉得某个图标很地道但实际上很美式的例子？",
        "answer": "提到日本元素“山脉”（MOG），虽然日本人默认画成富士山，但在UNICODE中为了普遍适用性改成了普通山的形态，但这体现了日本以外地区的人可能并不理解这个图标所代表的日本文化含义。",
        "time": "00:33:47"
      },
      {
        "question": "是否担心因为有sticker（贴纸）的存在，导致原有的创新活力受到抑制？",
        "answer": "确存在这种担忧，因为现在新的图标提案往往需要先考虑能否变成一个被广泛接受的图像，这与原有MOG集合形成的流程颠倒，可能导致概念与实际需求脱节，并且扼杀了新图标产生的原有活力。",
        "time": "00:34:25"
      },
      {
        "question": "打字机时代的“换行”动作是如何进行的？",
        "answer": "在打字机时代，换行是一个通过操作卷筒上的手柄实现的动作，当打字机打完一行后，需要手动拉动把手将纸卷向右移动，从而使下一行开始打印。这一过程称为“回车”，但实际上包含了换行的动作。",
        "time": "00:38:21"
      },
      {
        "question": "在文本输入状态下，连续按回车键会触发什么功能？",
        "answer": "在文本输入状态下，连续按回车键会在文本中换行。",
        "time": "00:47:00"
      },
      {
        "question": "其他文字框里是否有类似的功能区别？",
        "answer": "是的，不同的application会根据系统定义有不同的动作。例如，在某些应用中，Enter和Return可以分别设置不同的功能。",
        "time": "00:47:14"
      },
      {
        "question": "跨平台文件读取时，如何处理不同平台间的换行符差异？",
        "answer": "在过去，跨平台文件读取时可能会遇到因换行符不同导致的问题，但现在一些编辑器如Notepad已具备自动识别并适应不同换行符的功能。在HTTP协议中，换行符是由CR+LF组成的。",
        "time": "00:52:42"
      },
      {
        "question": "Mac键盘上的return和enter是否具有不同含义？",
        "answer": "是的，在Mac中，return和enter是两个不同的扫描码，可以被不同application分别定义和处理。",
        "time": "00:48:05"
      },
      {
        "question": "如何确保按照enter键执行enter的功能？",
        "answer": "每个application可能会对扫描码进行不同的处理，部分应用可能会统一处理这两个键，而其他应用则会根据键码区分操作。",
        "time": "00:48:05"
      },
      {
        "question": "Mac键盘上的return与enter标记是否表示该键有多个含义？",
        "answer": "是的，现在有些场景下，如弹出对话框时，Enter通常用于确认输入，而非换行，这样可以避免混淆。",
        "time": "00:49:23"
      },
      {
        "question": "QQ和微信在聊天框中是如何处理Enter键的？",
        "answer": "QQ以前默认是Control+Enter发送消息，单独按Enter则会换行；而微信可能是默认按Enter发送消息。",
        "time": "00:50:01"
      },
      {
        "question": "设计师是否倾向于使用escape来代替Enter进行确认操作？",
        "answer": "是的，很多设计师更倾向于用escape来完成Enter的操作，但escape在某些软件中可能具有撤销状态的功能，使用时需谨慎。",
        "time": "00:51:20"
      },
      {
        "question": "回车和换行的具体含义是什么？不同平台间对于换行符有何差异？",
        "answer": "狭义的换行（LF）是指打字机式的向下挪动一行，而广义上的换行包括先回车后换行（CR+LF），不同平台可能采用不同的换行符组合。Unix及类Unix系统默认使用LF作为换行符，Windows系统则通常需要CR+LF两个字符组合来实现换行。此外，还有其他罕见系统使用不同的换行规则。",
        "time": "00:52:03"
      },
      {
        "question": "在new life逻辑中，为什么换行的起始和末尾位置相同？",
        "answer": "new life逻辑中并未明确指出换行到下一行的具体起始位置，但由于下一行实际上并不存在，所以换行的起始和末尾位置实际上是同一个。",
        "time": "01:01:03"
      },
      {
        "question": "UNICODE中对于new line符号的理解是怎样的？",
        "answer": "UNICODE中的new line符号与回车和换行的码位不同，它是一个独立的控制符，可能用来实现不同的功能，比如分页或换行等。",
        "time": "01:03:47"
      },
      {
        "question": "CR和LF在早期的机械限制下是如何操作的？",
        "answer": "在早期机械打字机时代，CR（Carriage Return）操作时间较长，LF（Line Feed）操作时间较短。因此，通常先发出CR，再发出LF，以加快换行操作的完成。不过，在数字领域中，CR和LF更多是作为控制信号，GUI绘制光标或下一个字符位置的行为可能不再依赖于它们的先后顺序。",
        "time": "01:01:46"
      },
      {
        "question": "现在还有哪些控制符号被日常使用？",
        "answer": "小于20的许多控制符现在日常基本不用了，但在网络和协议中仍有一些被使用，例如TCP协议中的ACK（Acknowledgment）编号，尽管它在HTTP协议中并非必需。",
        "time": "01:05:09"
      },
      {
        "question": "换行和强制换行的区别是什么？",
        "answer": "换行在文本上代表产生一个新的段落，而强制换行则是在段落内部出于视觉效果或其他需求而新起一行，但并不产生新的段落符号。在Word等文字处理软件中，按Enter键通常会开始新段落，而使用Shift+Enter则会在当前段落内强制换行，不受段间距影响。",
        "time": "01:08:54"
      },
      {
        "question": "在排版文字时，为什么段落开始会空出来？",
        "answer": "段落开始空出是因为在传统的印刷和排版中，为了区分新段落，需要留出空间。比如以前在写白纸黑字时，红色的字体或其他元素会覆盖原本的板子，而在排版时，这些位置是预留的，即套印。",
        "time": "01:16:41"
      },
      {
        "question": "现在网页上如何实现强制段落换行？",
        "answer": "在网页上，通常会通过添加一个空行或者使用P元素，并对P元素进行CSS样式控制来实现强制段落换行。另外，在某些情况下，会使用break标签来实现特定需求，特别是在诗歌等场景中需要换行但并不希望它作为段落结束的情况。",
        "time": "01:17:21"
      },
      {
        "question": "\"使用某种语言使用back slash r\" 这个表达的含义是什么？",
        "answer": "这个表达的含义是指在不同平台上，程序可能会根据平台的不同而有不同的行为模式。例如，在不同的操作系统下（如Windows和Unix），print函数的换行行为会有所不同，这涉及到源代码存储时可能需要考虑平台相关的换行符设置。",
        "time": "01:19:06"
      },
      {
        "question": "Windows记事本中的自动换行功能有何问题？",
        "answer": "Windows记事本在特定模式下会自动插入特定的换行符（如CR+LF），这可能导致在其他文本编辑器中打开该文件时看不到实际的换行效果。即使保存后再次打开时，记事本可能会删除这些换行符，造成内容显示与预期不符的问题。",
        "time": "01:22:10"
      },
      {
        "question": "对于系统自带的记事本软件，有何改进意见？",
        "answer": "建议系统自带的记事本等基础软件应避免包含明显的设计缺陷，以确保用户体验的一致性和稳定性。例如，可以提供更多功能选项以满足用户需求，同时也要注意不要引入平台间不兼容的问题。",
        "time": "01:25:32"
      },
      {
        "question": "Mac平台上的文本编辑器有何特点？",
        "answer": "Mac平台上的文本编辑器默认为rich text editor，具备丰富的文本编辑功能，如调整字号等，与Windows平台上的记事本功能有所区别。尽管如此，许多用户仍然习惯使用vim或sublime等其他文本编辑器进行编程或编辑Markdown等格式的文本。",
        "time": "01:25:41"
      },
      {
        "question": "在早期的网络协议中，例如FTP，为什么会出现文本模式和二进制模式的区别？",
        "answer": "这是因为系统间不一致导致的问题。在早期的电传系统基础上复用时，传统电报采用七位码，而ASCII码是128个字符，当变为八位字符（如UTF-8）时，为了兼容这些古早的通讯系统，邮件系统等会将文件转换为七位编码模式，例如seven bid clean编码，以确保在不支持八位字符的系统中也能正常传输。",
        "time": "01:33:42"
      },
      {
        "question": "现在还有使用FTP进行文件传输的情况吗？",
        "answer": "现在虽然FTP软件可以切换文本模式和二进制模式，但许多情况下人们不再使用FTP，转而使用SSH及其相关协议如SCP和SFTP，因为FTP存在安全性问题，并且与现代计算机八位字节的标准不符。",
        "time": "01:37:41"
      },
      {
        "question": "SCP和SFTP分别基于什么协议？",
        "answer": "SCP是基于RCP协议，而SFTP是基于SSH协议，虽然它们都用于文件传输，但不是同一个协议。",
        "time": "01:37:41"
      },
      {
        "question": "FTPS和SFTP是什么关系？",
        "answer": "FTPS和SFTP是两个不同的协议。FTPS是在FTP上添加了安全层，而SFTP则是基于SSH的文件传输协议，虽然名字相似，但它们之间并没有直接的关系。",
        "time": "01:37:31"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "自弹自唱与内核恐慌第四期串台及节目更新情况",
        "summary": "本期节目中，自弹自唱与内核恐慌进行了第四次串台，讨论了节目更新的期数，以及对节目的一些趣事和想法。自弹自唱第44期恰巧在4月4号发布，而内核恐慌则是第46期。节目中还谈到了一些关于节目编号和对中国文化中不吉利数字的看法，以及对于节目内容的态度和一些生活中的小故事。"
      },
      {
        "time": "00:02:47",
        "title": "纪念网站首篇文章发布日与内容更新计划",
        "summary": "站长Rex回顾了2007年4月4日，在其网站上发布的首篇文章，实际第一篇为简短介绍，之后转向讨论网站内容更新的紧迫性及未来计划。"
      },
      {
        "time": "00:04:48",
        "title": "探讨MG输入法及emoji使用体验",
        "summary": "留言者分享了一个视频，视频中的音乐让某位听众感到恐怖。此外，讨论了一个关于MG输入法的问题，特别是一位听众提到小狼毫输入法可以在Windows上输入M字。还有一位听众评论了苹果设备在处理emoji方面的优秀表现，特别是在iPhone的拼音输入法中，相关的emoji会在候选词中显示。此外，还提到了在iPhone上，特定文本切换到emoji输入法时，会显示对应的emoji。最后，指出了一个问题是，有些emoji用户不知道其对应的拼音词汇。"
      },
      {
        "time": "00:08:27",
        "title": "误解和个性化解读中的沟通挑战",
        "summary": "对话中讨论了人们在交流过程中，因对表情符号的不同理解而产生的误解，以及这种误解反映出的更深层次的沟通问题。举例说明了即使是常见的表情符号，不同的人也会基于个人的经历和文化背景，对其含义有截然不同的解读。进一步探讨了这种个性化解读如何导致沟通上的障碍，并以对颜色感知的个人差异作为类比，强调了在无文字提示的情况下，人们对同一图像可能产生截然不同的第一反应。这突显了理解和被理解的复杂性，尤其是在跨越文化和个人经验差异的交流中。"
      },
      {
        "time": "00:10:55",
        "title": "语言、思维与未来通信革命的探讨",
        "summary": "讨论集中于语言的本质、青少年文化中的符号使用以及对未来通信方式的遐想。语言被描述为具有多重特质的工具，其中能指与所指的概念被用来解析语言符号与实际意义之间的关系。提到了青少年利用特定符号（如黑色月亮的脸）来表达特定情感或概念的现象，展现了语言和社会文化的紧密联系。对未来通信的设想指向了一种非语言的形式，如直接意识交流的可能性，这可能会彻底改变信息传递和学习的方式，同时也引发了对隐私和信息过载的担忧。"
      },
      {
        "time": "00:15:17",
        "title": "机器学习在书法字体研究与应用的进展",
        "summary": "一位听众询问关于机器学习在书法字体或一般字体研究和应用的进展。讨论指出，机器学习，尤其是基于神经网络的风格转移技术，可以学习并复制特定书法风格，如掩体流或瘤体，将任意文本转换为具有该风格的书法作品。此外，通过分析5万个免费字体，使用深度神经网络提取特征，可以进行创新应用。此技术不仅限于艺术创作，也被应用于商业领域，如设计初期辅助技术和字体设计，使得艺术复制和创新变得更加便捷。"
      },
      {
        "time": "00:19:01",
        "title": "MOG在不同文化中的应用与未来发展方向",
        "summary": "一位在G开头的互联网公司参与设计新一代系统MOG工作的听众分享了关于MOG的见解。他提到，中国和其他一些亚洲国家的用户更倾向于使用本地化的表情包，如微信的表情包和Line的贴纸，而在西方国家，MOG的使用更为频繁。讨论也涉及到了MOG设计中性别平等的考虑、各大科技公司对MOG的绘制和市场占有率的竞争，以及MOG格式的选择。此外，他呼吁Unicode组织应更多考虑融入中国元素，指出目前缺乏真正代表中国的MOG。最后，提到Unicode的更新计划，包括新增的MOG，如吸血鬼和僵尸，以及对中文社区的提案持开放态度。"
      },
      {
        "time": "00:25:11",
        "title": "表情符号的多样性与文化差异",
        "summary": "讨论集中在表情符号（EMOGI）的提案过程、文化的差异以及表达方式的多样性上。提出者强调了遵循Unicode提案格式的重要性，并指出定期的讨论机制保证了提案的开放性。此外，讨论还触及了东亚地区如中国、日本、韩国在使用表情符号时的偏好，与西方使用EMOJI的差异，以及这些差异背后的文化和平台的碎片化原因。特别提到了微信和Line等平台上的表情符号使用情况，以及表情符号在不同文化中的接受度和含义差异。最后，讨论了Unicode对于表情符号的规范目的，并提出了个人观点，认为某些特定的表情符号不应包含在Unicode中，强调了表情符号作为沟通工具的本质和多样性。"
      },
      {
        "time": "00:28:05",
        "title": "emoji和unicode的发展及其文化体现",
        "summary": "讨论重点在于emoji（EMOJI）的起源，其作为工程概念由某公司推出，包含多种符号如OK、平成、昭和和星座等。讨论中提出问题，如星座符号是否应该被收录至Unicode中，以及emoji和Unicode集合的关系。随着emoji的普及，讨论也触及到其与sticker的界限，以及未来是否会有更多特定人物或文化元素如张学友的面部表情被纳入Unicode。此外，提出对于Unicode中包含更多中国元素的建议，包括饺子、fortune cookie等，以及如何通过提案增加这些元素。同时也指出了Unicode在采纳新元素时可能存在的问题，如文化表征的准确性以及新提案与原始emoji创新机制的差异。最后，讨论转向了sticker与emoji的图像表现力和使用场景的区别，表达了对于emoji发展未来的看法。"
      },
      {
        "time": "00:36:35",
        "title": "打字机时代：换行与回车的演变",
        "summary": "本次讨论集中于打字机时代的换行和回车操作，讲述了早期打字机使用手柄挑选字符、通过物理操作实现换行和回车的过程。随着技术发展，这些操作逐步演化为现代键盘上的功能键，如回车键（CR）和换行键（Line Feed）。此外，还提到了德语键盘中home键仍保留的早期称呼“Position One”，反映了从打字机到现代键盘操作的转变。"
      },
      {
        "time": "00:44:38",
        "title": "苹果键盘上的Return与Enter键的区别",
        "summary": "在苹果键盘上，Return和Enter键在某些应用程序中具有不同的功能。主键盘上的大Return键（小字标记为Enter）可以执行多种操作，如开始新行、确认指令输入等，而数字键盘区的Enter键则通常用于结束文本输入状态。这种区别在不同应用程序中可能有所变化，取决于软件如何处理这些按键的扫描码。在Photoshop等软件中，使用小键盘的Enter键与主键盘的Return键会导致不同的操作结果。此外，一些应用程序允许用户自定义这些按键的功能，以适应个人偏好或特定任务的需求。"
      },
      {
        "time": "00:51:34",
        "title": "探讨文本编辑中的换行符差异及历史背景",
        "summary": "对话中讨论了在不同操作系统和软件中，换行符的使用差异，特别强调了Unix类系统（包括Mac）使用LF（Line Feed），而Windows系统使用CR加LF（Carriage Return加Line Feed）。讨论还涉及了这些差异对跨平台文件传输的影响，以及文本编辑器如何处理这些差异。此外，还提到了一些历史遗留问题，如早期计算机系统的换行符使用，以及现代网络协议中换行符的规范。最后，讨论了在vim编辑器中处理换行符的特殊场景。"
      },
      {
        "time": "00:58:52",
        "title": "探讨文本界面控制字符及其历史背景",
        "summary": "对话中讨论了在没有使用ncurses等系统进行终端屏幕矩阵式处理的情况下，如何通过控制字符对特定行进行处理，即所谓的“poor man's curses”。具体提到了使用回车（CR）和换行（LF）字符来实现进度条等动态显示效果的技巧，同时深入探讨了CR和LF的产生原因及其在不同系统中的表现差异。此外，还提到了Unicode中对于这些控制字符的编码，以及这些控制字符从早期机械时代到现代数字领域的演变和应用。"
      },
      {
        "time": "01:04:41",
        "title": "探讨文本处理中的控制字符与换行概念",
        "summary": "对话集中在讨论文本处理领域中控制字符的当前用途，特别是小于20的控制符在HTB协议和TCP协议中的应用，如ACK（确认接收）的使用。进一步讨论了文本中换行的两种形式：强制换行（硬回车）和普通换行（软回车），以及它们在排版和编程语言中的不同表现和用途。此外，还提到了控制字符如空字符在编程语言中的重要性及其带来的问题。对话最后强调了分段和换行在排版中的区别，以及这些技术细节在现代文本处理软件和网页设计中的应用。"
      },
      {
        "time": "01:12:08",
        "title": "探讨段落分隔符及其在不同媒介中的演变",
        "summary": "本次讨论集中于段落分隔符（PUCO）在文本排版中的应用及演变。早期由于羊皮卷的珍贵，使用PUCO符号来节约空间并标记段落。随着时间推移，随着纸张的普及与成本降低，出现了换行和缩进等新的段落分隔方式。在现代网页设计中，为了适应屏幕滚动，更倾向于使用段落间距来区分段落。此外，还讨论了不同编程语言中换行符的处理方式以及平台间的差异性，如Python在不同平台下对换行符的不同处理。讨论反映了段落分隔方式随着媒介的变化而演变，以及这种演变对文本呈现和编程实践的影响。"
      },
      {
        "time": "01:21:15",
        "title": "Windows记事本自动换行与文本格式问题探讨",
        "summary": "在讨论中，指出了Windows记事本在处理文本自动换行时存在的问题。当选择右端自动换行后，改变窗口宽度会自动折行，但保存为TXT文件后，每一行会加入换行符，导致无论怎样改变窗口大小，都不会自动折行，即手动折行。此外，复制粘贴到其他文本编辑器时，会发现记事本加入了一个特殊的换行符（CRCRLF），这个换行符只在记事本进程中可见，并不会写入文件中。讨论还涉及了记事本的两种模式：soft wrap和hard wrap，暗示记事本尝试用hard wrap的方式实现soft wrap的功能，导致了一些使用上的不便和文本格式的问题。"
      },
      {
        "time": "01:25:22",
        "title": "记事本的使用体验与文本编辑器的比较",
        "summary": "讨论集中在记事本等系统自带文本编辑器的功能性和用户体验上。Windows平台的记事本被认为功能有限，而Mac平台的文本编辑器则因其默认的丰富文本格式（Rich Text）而让人觉得功能过剩。尽管如此，Mac平台的文本编辑器实际上拥有更多功能，可以满足更复杂的需求。一位用户分享了自己从Windows转到Mac后对文本编辑器默认设置的不适应，强调了根据个人偏好调整文本编辑器的必要性。此外，讨论也触及了文本从网页复制粘贴时的格式转换问题。总体而言，讨论反映了不同平台文本编辑器使用习惯的差异，以及用户对个性化设置的需求。"
      },
      {
        "time": "01:27:30",
        "title": "探讨文本编辑器的特性和选择",
        "summary": "对话中讨论了多种文本编辑器的使用场景和特性，包括vim、sub line、300、cut editor(COT editor)等。特别提到了一些编辑器对编码的自动识别、处理BOM不兼容问题、修复光标跳动的bug等实用功能。此外，还提到了编辑器对于换行符（如CR、LF、CRLF）的处理和对不同操作系统换行符标准的支持，以及如何根据markdown结构生成outline和代码高亮的重要性。"
      },
      {
        "time": "01:32:17",
        "title": "HTTP协议换行兼容性与FTP传输模式",
        "summary": "对话中讨论了HTTP协议中换行符的兼容性问题，指出为了最大兼容性，发送方应使用CRLF，而接收方仅需识别LF。此外，还讨论了FTP协议在不同系统间传输文本文件时遇到的问题，强调了文本模式和二进制模式的区别以及七位与八位编码的问题。最后，提到了邮件系统为兼容古老通讯系统而进行的编码转换和FTP的不安全性，以及使用SSH相关协议进行文件传输的优势。"
      },
      {
        "time": "01:36:25",
        "title": "解析FTP、FTPS、SFTP和SCP的区别及应用",
        "summary": "讨论了FTP、FTPS、SFTP和SCP四种文件传输协议的区别，强调它们各自基于不同的协议和技术。FTPS是基于FTP的加密版本，而SFTP实际上是基于SSH协议的一种新的文件传输协议，与FTP没有直接关系。SCP则是基于SSH的，用于安全的文件拷贝，不同于SFTP和FTP。此外，还提到了一些社交媒体和联系方式，以及对捐赠和支持者的一些鼓励和反馈方式。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "打字机时代：回车与换行的物理操作"
                },
                {
                  "children": [],
                  "content": "早期计算机系统：不同的换行符定义"
                }
              ],
              "content": "历史背景"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "Unix/Linux: LF (Line Feed)"
                },
                {
                  "children": [],
                  "content": "Windows: CRLF (Carriage Return, Line Feed)"
                },
                {
                  "children": [],
                  "content": "Classic Mac OS: CR (Carriage Return)"
                },
                {
                  "children": [],
                  "content": "新版Mac OS X (基于Unix): LF"
                }
              ],
              "content": "主要系统换行符差异"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "文件格式不一致导致的兼容性问题"
                },
                {
                  "children": [],
                  "content": "文本编辑器的自动识别与转换功能"
                }
              ],
              "content": "跨平台问题"
            }
          ],
          "content": "换行符的使用与系统兼容性"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "用于文件传输的古老协议"
                },
                {
                  "children": [],
                  "content": "安全性问题与替代方案的出现"
                }
              ],
              "content": "FTP协议"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "SCP (Secure Copy Protocol) 基于SSH，用于安全文件传输"
                },
                {
                  "children": [],
                  "content": "SFTP (SSH File Transfer Protocol) 不同于FTP，基于SSH的安全文件传输协议"
                }
              ],
              "content": "现代传输方式"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "7位与8位编码的区别"
                },
                {
                  "children": [],
                  "content": "ASCII与UTF-8的演变"
                }
              ],
              "content": "文本编码问题"
            }
          ],
          "content": "互联网协议与文本传输"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "换行符的识别与转换"
                },
                {
                  "children": [],
                  "content": "编码格式的识别与转换"
                }
              ],
              "content": "基本功能"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "代码高亮"
                },
                {
                  "children": [],
                  "content": "自动完成与语法检查"
                },
                {
                  "children": [],
                  "content": "插件扩展功能"
                }
              ],
              "content": "高级功能"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "Vim/Sublime Text/Visual Studio Code 等"
                }
              ],
              "content": "流行编辑器"
            }
          ],
          "content": "文本编辑器的功能与选择"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "不同系统间换行符的标准化问题"
                },
                {
                  "children": [],
                  "content": "文本文件的跨平台兼容性挑战"
                }
              ],
              "content": "兼容性与标准"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "从物理操作到数字编码的演变"
                },
                {
                  "children": [],
                  "content": "用户对现代文本编辑器功能的需求增长"
                }
              ],
              "content": "技术进步与用户体验"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开源软件的社区贡献"
                },
                {
                  "children": [],
                  "content": "通过捐赠支持播客节目"
                }
              ],
              "content": "社区与贡献"
            }
          ],
          "content": "对话中的主要观点"
        },
        {
          "children": [],
          "content": "总结"
        }
      ],
      "content": "播客节目讨论摘要"
    }
  }
}