{
  "pid": "646f194853a5e5ea1408d97c",
  "eid": "67726e511e823e72d3e7d8cf",
  "title": "Coding-Agent 进化论：深度对话中美 Agent 创业者、阿里研究员和投资人",
  "task_id": "klrbn2yw32xp95zy",
  "transcription": [
    {
      "time": "00:00:02",
      "text": "有一些创业者，他们在用agent非常快速的去build up他们自己的idea，然后放出去去验证product。Market开发速度变得非常的快。它可以在不同的产品之间share它的很多的set up，比如说翻译的这些set up，直到它有一个idea黑色的market。如果你是一个优秀的创业者，你的产能会被无限的增大，会被增大到10倍甚至位。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:26",
      "text": "我们能做多少？已经不再受到我们自己能力所限制，限制我们最终的就是想象力。世界上的问题只有两种，一种问题A减能解决，一种问题A键解决不了。那A减能解决的问题我想出来让他去做就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:40",
      "text": "我对A加I的定义，其实并不是说实现像人一样的智能，而是实现人做不到的智能。在coding这个赛道里面，我们能不能期待模型写出的代码要比人写出的代码在runtime的时候效率更高。如果说未来模型在某task上面它能够超越人类，那我相信整个AGI会向一个新的台阶去迈进。专业模型至少在今天来看还是一个探索边界的过程。",
      "speaker": "发言人3"
    },
    {
      "time": "00:01:07",
      "text": "欢迎大家收听此话当真。真格基金团队将在此和各领域的领军人物一起分享最新热点和行业洞察。真格你的创业第一站，我是真格基金投资副总裁Monica。作为2024年收官的一期，本次我们的主题非常的热辣应景，就是coding agent在过去短短的两三个月时间里，我们看到了整个coding agent产品完成二连跳式的升级。而关注AI领域的同学们都知道，本月demo的发布更是打开了AI领域一个全新的想象空间。这一年来holding agent领域还有哪些值得关注的产品，技术突破和进展如何？会给人们的组织和生活工作方式都带来怎样的变化？未来这一领域还存在哪些创业机会等待探索。",
      "speaker": "发言人4"
    },
    {
      "time": "00:01:59",
      "text": "作为年末的压轴，这次我们请来的嘉宾阵容也非常的全面，已经能给大家带来非常多的新的认知。好，请几位嘉宾跟大家介绍一下你自己。同时也可以简单介绍一下你是怎么开始进入到AI这个领域，以及你现在工作与coding agent有什么样的关系。老规矩，我们有个fun fact，就是最近大家使用这个coding agent产品，可以任意一款coding a产品做过的让你自己觉得最惊喜或者有趣的一个任务，可以来跟大家分享一下。我们要不从女生开始。",
      "speaker": "发言人4"
    },
    {
      "time": "00:02:35",
      "text": "好，大家好，我是真格的戴雨森，主要在看AI方面的投资。用coding agent做有趣的事情。因为我们是投资人，所以我们当然也还没有去用agent的去真的去做一个软件或者是网站出来。但是我在devin出来之后的第二天，我自己就付费充值信仰对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "00:02:55",
      "text": "然后充了500美金开始玩了起来。我发现它不仅可以写，同时也能有很强的能力去解决很多在我们投资圈需要去做的这种数据收集和这个爬虫类型的案头工作。我自己是做了一些尝试之后，觉得非常的惊艳，所以也推荐给真格的同事。我说让真格也买一个，同事们可以试用一下。结果没想到一天时间我们的同事就把500美金的额度给用完了。",
      "speaker": "发言人5"
    },
    {
      "time": "00:03:21",
      "text": "大家有各种各样很有意思的尝试。在后台看了之后觉得不只是这个程序员面临的职业危机，可能我们投资人也会面临很多的挑战。所以今天也非常开心和激动能跟大家一起去聊一聊这个领域。我们看到了很多新的机会。",
      "speaker": "发言人5"
    },
    {
      "time": "00:03:37",
      "text": "大家可以感受到我们这个投资机构真的是要随时一个使用者的心态走在这个前沿。当时你我们展示了他这个爬虫，以及看到他怎么一个爬的这个过程，以及中间他这一步步推理的过程。我觉得这样觉得非常impressive。已经超过了我们原来觉得coding agent是程序员编程的一个辅助这么一个定义。一会也可以让宇森给大家展示一下，从一个PM或者说非程序员的这么一个视角或者老板视角，大家问为什么会让我们觉得非常的惊艳？好，下一位就请我们的另外一位返场嘉宾，李桢。",
      "speaker": "发言人4"
    },
    {
      "time": "00:04:12",
      "text": "大家好，我是李真，我是在在replay做AI agent engineer。我也是最开始做replay agent的创作者。因为最开始这个项目其实只有我一个人在做，后来慢慢成为了这个red的我们整个公司的核心项目。在我们九月份到这之后，现在也非常exciting，在很高速的一个增长的过程中，我们可能也是市面上第一个能public用到的entry and的一个第一个agent。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:37",
      "text": "我最近在做用agent做的事情就是我最近在帮国内的一个电影导演的团队，把他们的一些需求用rapid agent去转成一些产品去落地。比如说电影的剧本的一些拆解，翻译，我会从他们那里总结一些需求，然后用replating做成一个产品让他们去用。Actually works非常的好。而且也是我们我们看到一个这种比较大的一个use case，就是central tooth。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:02",
      "text": "已经有比较多的adoption了，所以这个是还蛮exciting的参照。比如电影从业者可以去生产一个软件了。以前对于电影从业者来说，比如我是一个导演，那他是不可能去生产出一个软件的。比如他有一个需求说我要把这个剧本给它拆解成一个什么样的形式，去让其他组同学们去执行。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:25",
      "text": "这些事情之前都是手工在做的。因为手工在做的效率对于一个电影从业者来说，比写一个软件要容易的多了。因为写一个软件的知识的门槛实在太高了。但现在有了agent之后，这件事情门槛突然就变得非常的低于是他们就可以自己去迭代，自己去开发。所以这个是最大的一个不一样的地方。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:44",
      "text": "下一位我们就请新瑶来给大家介绍一下。",
      "speaker": "发言人4"
    },
    {
      "time": "00:05:47",
      "text": "大家好，我是王新阳。我现在是在ZI的compounder，也是HGAI offset。我主要是负责做agent quality这块。在加入OTZI之前，我其实是在UIUC读PHE。然后PHT期间我主要做的是这种LIM in mode interaction，还有包括这种agent相关的这样子的一个工作。所以今年年初当David最开始release那个demo的时候，我们都非常的impressive。然后随后像冰原、晋阳他们就在追求上发起了一个这样子的open day的这样一个project。所以我就从年初一直奋斗到了年末，然后期间我们也以open为基础，成立了欧欧翰ZI这样的一个公司。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:25",
      "text": "最近这段时间，比如说在A站方面，对我来说最impressed的地方其实在于大概是在一个月以前，我们就突然发现这个agent已经对我们的日常的这种open hands open David这个open source软件项目开发中，起到有这种像人类工程师一样实质性的作用。就是突然在某一个瞬间，它就对我们来说变得有用。其实我对向大家share一个statistics，就是你看在过去的这一个月，open hands agent它本身其实是open hands是整个republic city里面最大的贡献者，他已经超过了我们的所有的人类。然后你看我们过去的所有的commit的记录，就是基本上你会发现他每一天都活跃在我们整个code response的各个角落，在修复各种各样的，就是从简单的到一些复杂的一些bug。看到这个agents在actually在github上do the work for us，就是感觉这个technology已经要来了这种感觉。这个是我觉得最难忘的一年。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:18",
      "text": "这个真的非常impressive。一会我们再可以深入聊一聊，到底这个是怎么实现的这个跃迁是因为你们背后是做了一个什么样的改变，让他突然就能力上有了这么一个变化。",
      "speaker": "发言人4"
    },
    {
      "time": "00:07:30",
      "text": "对，其实是在11月中旬，我们当时是swe bench上第一个超过50% sweet bench buried的agent。自从超过了50%那条线之后，我们就明显感觉到我们这个agent quality已经有了这样的飞跃。然后我们在日常工作中就会比如说更频繁的去使用它，就慢慢的发现了这个agent其实有很多。比如说我们原来都没想到agent能做这件事，然后我们随手编了个give top issue丢给他他就去做了。像包括那一天gram遇到了一个问题，就比如说看到一个前端，然后我们突然想着我们想要在旁边加一个track mark，就是让你的random for，然后你就create the issue，然后直接把这个一首page fix me，然后open hand agent就直接去把它做出来了。这个给我的感觉就是，比如说以前我们可能要想一想OK我们有没有band with去做一件事情，我们有没有精力去做一件事情。但是现在我们只要负责想，然后把这个issue丢出来，不管能不能做成就丢给agents。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:23",
      "text": "我觉得最令我们感到exciting的事情就是这个agent在完成我们这部分request这件事情上，它其实很多时候是对我们来说是出乎意料的好。以至于我们最后会直接去问其他的代码，甚至就没有特别多的人力干预。所以我觉得这个是最让我觉得exciting的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:38",
      "text": "哇哦这个真的是非常快。你看open eleven开始是在5 6月份是吧？然后五月份公司成立到现在真的就是半年的时间。当时我们还在讨论到底David这个是不是只是一个噱头。然后现在我们可以看到，居然真的就是在我也是在那gram的那个twitter上面，看到你们这个agent已经成了你们最active的contacts。我觉得真的是AI这个领域的变化非常的快，一会儿我们也可以更细致的聊一聊你们build这个open hands的过程。好，接下来有请这个冰原来聊一聊。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:10",
      "text": "大家好，我是冰原，目前在千万主要负责coding这个方向。我们最近其实开源的coder感觉还是受到了大家的关注和喜爱的，收到了很多社区非常好的一些反馈。我可以跟大家share一个比较好玩的一个场景，就我最近在尝试利用他自己以agent的形式去清洗代码的数据。比如说我新收集一批数据，然后我如果自己清洗的话，我其实要去观察很多代码，然后自己去编写一些处理的脚本。然后再不断的进行这样的一个迭代，然后得到一个好的一个data clean的一个P但今天coder其实已经可以做到说他在面对陌生的数据的时候，他可以自己去清洗。我希望未来如果coding的模型足够强大，它就可以从data的清洗，然后移植到自己去判别什么样的data是有价值的，甚至他可以写自己一个训练的代码，去训练一个更强的一个自己，然后再进行一个评估。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:03",
      "text": "我觉得如果这个agent的pipeline转得通的话，其实未来有可能不仅仅是软件开发的流程会发生变化。我觉得对于模型迭代的流程也会发生变化，这个是我觉得最近比较有意思的点。昨天欧斯瑞发布的话，我感觉有可能未来会比我们预想的要更早发生。我觉得可能未来模型的强大，可能真的要靠模型自己去迭代。",
      "speaker": "发言人3"
    },
    {
      "time": "00:10:27",
      "text": "对的，可以跟大家简单介绍一下，因为大家原本讲到千万觉得是做这个基础模型，包括你们也有自己的condition model和自己的这个coding model。刚才你讲的这个code是大概怎么样的一个产品，可以给大家简单介绍一下。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:40",
      "text": "Code的话其实是我们希望先在coding这个方向单独去验证一下，无论是数据还是技术的一个探索。就是我们在通用的前面的模型上面，我们会继续去做大量的retrain，continue to train, 以及instruction turning，甚至是RHF这样。这样话我们就可以看看在holding的这样的一个方向上面，我们到底能走多远。所以说我们第一天在做这个博客的时候，我们其实目标就是能够在这样的一个方向上面真正的做到一个非常顶尖的水平。因为在这个开源模型相对来说还在不断迭代的过程中，大家可能一开始会很难有精力去baLance各项的能力。我们其实是可以不同的人去探索不同的方向，然后在某一个方向上面先做到顶尖。最终我们在merge到一个非常strong的一个通用模型里面。我们整个team其实通常都会以这样的逻辑去进行技术的迭代。所以说今天的coder其实你们可以认为就是在通用的纤维上面，或者我们称之为它为然后在queen的基础上面去产生一个queen coder。然后这样的一个coder给到大家可以去做下游的，无论是AD的任务也好，还是一些辅助的任务也好，我觉得都是蛮exciting的一个事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:11:56",
      "text": "好的，非常感谢几位嘉宾的介绍。Pek也是我们今天特邀的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:12:00",
      "text": "也可以跟大家介绍一下。我是pek，是正规基金的enr。然后此前一直在产业借助LP，主要是与搜索还有语言模型相关。最近的话我用agent其实是比较有意思。",
      "speaker": "发言人6"
    },
    {
      "time": "00:12:12",
      "text": "我感觉大家刚才讲到的场景都多少有点自己这个概念。就我们软件工程里常提到一个概念的自己。就是比如说一个编译器能自己编译自己，然后我们现在都在尝试这些事儿。比如说我最近就在使用open devin，然后我很想了解一下时间入的这个架构。比如我现在了解他的instream跟engine controller之间的关系。自己其实没有先读代码，我反而是让okay ends，包括我自己去讲解一下，发现效果还可以。",
      "speaker": "发言人6"
    },
    {
      "time": "00:12:35",
      "text": "后来我在群里看见星瑶讲，他最近在get up，发现open hand自己的contribution已经排到第一。我就突发奇想，因为我有David n我说让David你先读一读网上关于David的介绍，你能不能实现出一个最简陋的一个David。当然这个任务跑了很久，但其实出乎意料，他最后搭了一个形似，但是不太work，但我觉得已经非常impressive了。",
      "speaker": "发言人6"
    },
    {
      "time": "00:12:55",
      "text": "好的，既然是作为今天的这个cohoes pick，也可以跟大家简单介绍一下。你觉得因为这几个产品我想你都有了解，今天你最希望跟大家聊的一些话题是什么？",
      "speaker": "发言人4"
    },
    {
      "time": "00:13:06",
      "text": "今天这三位嘉宾其实看见阵容之后，我都有很多很具体的一个想法，待会可能会详细的展开。比如说同样是模型这一侧，我们发现现在可能reasoning模型在突飞猛进。同时coder这个模型如刚才边缘讲了，现在可能已经有一个比较可用的一个状态。然后像现在David这个产品中，我们会发现其实它有一个单独的一个planning。这个set我们可以理解，就是说规划它也许会对微信有一个更强的能力，然后具体执行可能对coder的这个能力要求也很高。所以模型层面我可能会很关注，就是说这两者结合。比如说未来到底这个coder跟微信模型是两个专项是单独去走，还是最后会在融合。",
      "speaker": "发言人6"
    },
    {
      "time": "00:13:39",
      "text": "然后同时对于这个agent的这个lazy demo或者open has这样agent的话，那可能就会有更多工程的问题。因为我们理解agent框架其实会涉及一个很重要的点，就是他如何能把一个模型的能力更好的表达出来。因为我们可能会发现即使是相同的一个模型，你在不同的agent framework表现出来的能力会差很多。同样就是一个agent framework，当模型发生改变之后，它的能力的这个变化也并不是跟模型的那块能直接的线性的去对比的。所以这块可能是我们信尧这边更想聊一聊的这个话题。然后当然对于regular的话，我会可能更关注另外一个点。",
      "speaker": "发言人6"
    },
    {
      "time": "00:14:11",
      "text": "就是我发现身边很多的朋友，包括像女生，可能通过现在这些agent产品，实现了人生中第一个由自己亲手完成的网站或者产品。可是往往发现可能大家都会由于没有工程能力，虽然现在有意开发完成的产品却卡在了比如说deployment这一步。而可以想象到，其实deployment是标志着软件开发的一个完成状态。而后面其实软件的生命周期还很长。比如包括如何去maintain，如何去更改，以及对于内容如何去管理。可能都会有很多agg类型的产品需要后续去思考的问题。所以这个可能是我对于李真想聊一聊的话题。",
      "speaker": "发言人6"
    },
    {
      "time": "00:14:44",
      "text": "好的，非常感谢。Pick一会我们会如果大家还没有听过，或者对这几个我们今天提的几个产品还不是那么了解的，一会儿我们也会让几位身处一线的builder给大家深入聊一聊他们整体的这个构造的一个思路，以及在这个过程中他们实现一些思考和演进。在这之前，我想请宇森给大家开个头。作为一个一直在很深入的跟进整个coding agent，以及更广泛的AI领域的投资人的视角来看。或者你可以跟大家还是我的聊一聊你所看到的这段时间以来coding agent的产品的演进，以及为什么你对于这个领域的这种创业机会以及未来的可能性这么的重视。可以跟大家简单的梳理过去。",
      "speaker": "发言人4"
    },
    {
      "time": "00:15:24",
      "text": "以及分享一下你的思考。好的，编程一直是我们觉得AI里面非常重要的一件事情。因为通过写代码，AI其实可以控制很多外部的工具。我们看到从ChatGPT出来到现在两年的时间，其实AI编程已经经历过，我觉得四个主要的代际或者三次主要的进化。",
      "speaker": "发言人5"
    },
    {
      "time": "00:15:45",
      "text": "大家其实也知道，一开始ChatGPT出来的时候，我们其实是给AI一个指示。然后他来把代码写好之后，直接贴在聊天框里面。这个当然已经是人工智能一个飞跃，对吧？因为它代码写的确实挺好。但是在这个时候，第一ai没有，我们为什么要写这个代码的上下文，它完全是根据我们给他的prompt来写，所以我们往往也在prompt里面把很多上下文都要写进去。然后第二，用户得手动的把代码粘贴回IDE里面再去运行，出现什么错误问题，然后又抛给AI本身。这样的话其实AI就是一个瞎子，他不知道发生了什么，他也不知为什么要写这个代码，他像一个奴隶一样在写代码。",
      "speaker": "发言人5"
    },
    {
      "time": "00:16:24",
      "text": "这个就是ChatGPT和cloud刚出来的时候情况，然后get hub开的。他其实是第一次对AI写代码能力的飞跃，就是它可以让AI读取我们整个code base代码库作为上下文。这样AI能够在一个更广阔的范围内去看到，我为什么要写这个代码，它有哪些上下文。这个我觉得是第一个进步。但是它还是一个用户需要手动粘贴代码回IDE，然后进行调试的过程，至少在第一代的get up go拍的刚出来的时候，所以我觉得这个可以统称为叫做说我问你答是人类跟AI合作的方式，那么从cursor的这个发布，他提出了一个很重要的概念叫next action prediction。就是你现在写下这行代码，无论我来推测你接下来要写什么样的代码。这个是来自于模型对这个code这件事情更深的了解，以及对于程序员的任务更强的规划能力和拆解能力。",
      "speaker": "发言人5"
    },
    {
      "time": "00:17:15",
      "text": "随着curse当然它所主要使用的sone 3.5这样模型的进步，我一个初浅的理解是它能够生成更长的代码块，能够更好的预测用户接下来写什么代码。并且可后来也引入了这个文件创建和修改的能力，对吧？因为我们在编程的时候有很多，比如需要下载的文件，需要创建的文件，那他可以在我的本地进行操作了。",
      "speaker": "发言人5"
    },
    {
      "time": "00:17:35",
      "text": "然后windows进一步的加入了这个对命令行的自动的操作的建议。这两个加起来，其实我知道就是AI变成3.0阶段，就是AI自动写代码，创建文件和进行执行调试。他如果调不通的话，他自己会去debug。这个就有点从我问你答变成了我问你写。很大程度上的加快了这个自动化的进程。所以这个其实也是我在一两个月前，我第一次用到windows server的时候，我觉得非常激动的一个原因。是因为我看到它如何自动化的在我的电脑上一台全新的没有装过任何编程环境的系统上，通过一两步简单的指令和操作，真的把一个可能一个gamma website跑起来的过程。但是在这个时候，我其实我后来想他还是持续的需要我的一个注意力。",
      "speaker": "发言人5"
    },
    {
      "time": "00:18:17",
      "text": "所以在David出来之后，我觉得打开了进一步的一个范式，是说他真的很像一个真人。我把任务交给他之后，我就不用去盯着他这个任务完成进程了，我就可以去做我自己别的事情。他可以通过一个planner去进行一个比较完整的任务规划能力。可以自己在持续的去进行编程，然后进行调试。需要创建文件，包括通过虚拟机去访问互联网，去获得他需要的信息，然后这个过程中我还可以随时进行打断和调整，这个也很重要。因为之前不管是ChatGPT还是cursor windows这样的产品，你再跟他说一个prom之后，你就得等他把整个流程跑完，对吧？中间你只有把它强行中断，你很难去进行添加额外的指示。",
      "speaker": "发言人5"
    },
    {
      "time": "00:18:57",
      "text": "但我们从这个老板的视角来看，那我们给一个员工布置个任务之后，显然我可以是不断的去调整我的这样一个要求。并且我觉得在这个里边，其实它还跟这个snack是做了很深度的集成。这样它可以有效的除了code base之外的上下文，也可以在snack里面获得我为什么要干这件事情的上下文。",
      "speaker": "发言人5"
    },
    {
      "time": "00:19:16",
      "text": "这个其实我觉得对于完成工作以及更加准确的完成工作来讲就非常重要。所以我在看到的艾文之后，我就发现，好像这个东西它不只可以编程，对吧？它也得完成很多通过一个人坐在电脑前面，网络互联网能够解决的事情。但在这种异步的A型的产品出来之后，我觉得就有一个很重要的一个概念。我自己在想，就是当我们能够简单的花钱或者说花算力就能买到工作的时候，这个其实就诞生了某种叫做工作的scaling law。",
      "speaker": "发言人5"
    },
    {
      "time": "00:19:44",
      "text": "因为之前我觉得人类的使用的工具分为两类。第一类是比如说像实体中的，比如说电钻或者像ChatGPT这样的。就是你得去持续的投入注意力。他有点像是一个人，你踢一脚下来动一下，你得持续的对话。你一旦把这个使用停下来，注意力挪开之后，它就不能继续往下进行了，这是一种工具。另外一种工具就是所谓的自动化。比如说我部署一个爬虫，我写好之后他自己去爬，但是他还是完成一个比较重复的工作，他是没有什么自己去进行调整决策反思的能力的那我们说的这个autonomous agent，也就是说全自动代理，其实就是一个既不需要我花很多注意力，同时又可以完成一些非重复性的，而是需要去创业性思考的工作。",
      "speaker": "发言人5"
    },
    {
      "time": "00:20:29",
      "text": "我觉得David是第一个例子。这个可能是就是说我把如果意义拔高一点，是人类历史上出现的第三种工具，对吧？他这个既不需要一直需要你的注意力，他又可以自主完成工作。这种情况下我们就可以把这个工作这件事情更多的scale up起来。我可以让Gavin同事帮我跑好几个任务，甚至是几十上百个任务。甚至我可以用agent再去指挥一个另外的A姐去做执行。所以我觉得这里面提出了很多的新的可能，我觉得是非常让人激动的。",
      "speaker": "发言人5"
    },
    {
      "time": "00:20:55",
      "text": "所以让你产生工作的scaling law的这个感受是在用了David之后什么你觉得David跟之前W或者说像regulate aging这样的产品，你也做了一些工具。你觉得这里边在你看来最核心的区别是什么？",
      "speaker": "发言人4"
    },
    {
      "time": "00:21:09",
      "text": "我觉得它的呈现形式是这个a think，就是异步的工作。Windows m它其实如果打个比方是说，我让AI用我的电脑，就是他可以对我的电脑做很多事情。他可以在我的电脑上用命令行去执行命令，创建文件，修改文件，对吧？但在这个时候我就干不了什么事情，我得看着他去用我的电脑。当然这个时候我可以切出去上网什么的。但是我过一会儿就得看看他有没有干完，因为我知道他干完之后，我就得点下一步，所以它持续需要我的注意力。",
      "speaker": "发言人5"
    },
    {
      "time": "00:21:38",
      "text": "那么devin的这个planner，首先它是非常重要的一个环节。因为它可以生成一个通过一个伪代码的形式生成一个比较复杂的流程。比如说他会给自己生成个to do list，然后他去看自己的to do list有没有做完，没有做完他就继续做。这个过程它是真正能够解放我的注意力和生产力的。第二个是在David里面，它是使用一个虚拟机，就是他是在云端自己开了一个虚拟机去完成他需要的访问互联网，调试、验证这些过程。就他不用调调用我的这个机器。",
      "speaker": "发言人5"
    },
    {
      "time": "00:22:08",
      "text": "大家之前用过一些RPA的工具，或者这种有点尝试去做突破use的工具。大家都会有这个感觉，就是他在做事情的时候你是不敢动的。因为你你你怕一不小心就把他的什么东西打扰了，给用坏了。所以我就感觉这是有点像我给实习生配了个电脑，他用他的电脑偶尔去看一看他干的怎么样了。甚至left里面还有一个很好的设计，就是比如他假设需要我的一些账号密码。但是比如说他要登录一个link in，他可以让我来输入这个密码。这就好像说我的实习生他找我要一个账号，他说老板那你在我的电脑上输一下这个账号和密码，然后我给他输了，他又去干他该干的活去了。这个其实就非常像我们在实际工作中的一个隐喻。",
      "speaker": "发言人5"
    },
    {
      "time": "00:22:47",
      "text": "是的，虽然说这个David被人所知道的时候是一些coding action，但是我真的是觉得就是从我们的一些使用的感受来看，就远远超过了口顶这个范畴。好，非常感谢宇森给我们分享了他的一个感受。正好刚才宇森给大家介绍了他所看到一步一步的coding agent的演进。我想在我们聊到dav之前，我觉得真正意义上去GA的coding的age应该就是reply agent了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:23:11",
      "text": "也许很多人今天都想要直接听一听跟David相关的。但是我觉得前面我们从concert到regulation的这两步以及这两种产品形态，我觉得仍然是非常重要的。所以我们就可以请李桢更深入跟大家分享一下，就是到底report agent是做什么的。然后一开始你们是怎么开始做这个产品，以及到我想从你们产品release到现在也有个小半年的时间了。那中间有哪一些比较重要的一些iteration是可以跟大家分享一下的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:23:39",
      "text": "我觉得就顺着刚才已经说的，我们其实整个心路历程中间经历了很多的思考。其实最后得出的结论是这个agent这边其实是有不同的产品形态的。我可以从头开始说，其实我开始做agent就是经历了刚才雨森说的这几波的变革。",
      "speaker": "发言人1"
    },
    {
      "time": "00:23:56",
      "text": "加入report之前我自己在创业。然后我在某一天GPT4发布之后，我发现我和GPT4的合作效率比我加上我招的两个前端工程师合作效率要更高。虽然当时还是你问我答的形态，但是这个已经让我发现20美元一个月的GP4比我1万美元一个月的两个工程师的价值要更高的。我意识到这件事儿之后，我就决定all in这个calling agent。因为considering我自己能在这上面得到的价值和这个世界上写代码这件事上存在的这个市值实在是太大了。所以我就决定all in coding矩阵的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:31",
      "text": "当时的rep lad或者说一年前的rep ladd是一家纯IDE公司。我们是一个做one IDE的，你不像VS code需要下载，然后replace就是一个在网页上你可以去进入replay，然后你去写代码，它会有给你配好环境，然后有deploy。这也回答了刚才pick的一个问题，就是deploy的问题。我们是自己做了deploy的，所以你可以认为它是一个完美的一个size box。就是如果存在一个AGI，它需要一个环境去让这个AGI去去操作，去写代码，去执行这个install环境去deploy。然后去访问这个data base，去访问这个secrets，然后增加integration，这一切的东西reply都有，那么它缺的就是一个agent，于是我就加入reply了，然后我就开始说我要做agent。当时face CEOM get在ted tiktok也一直说说i have a dream。就有一天我在那手机上能够操作一个agent让他帮我做软件，我们event就是做了这个事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:27",
      "text": "然后agent跟David不太一样的一点是，我们的产品形态更注重帮助用户从0到1去build一个东西。什么意思呢？就是说假设我们的用户他现在有idea，但是他完全不会写代码。那你来到review之后，你可以说我要build一个这样的网页，这样的一个软件。那agent会开始帮你去内费一个plan，然后你跟agent去进行一些交流，你要prove这个plan a会开始写代码，然后装环境，把它搭起来开始跑，然后跟你一步一步的去虚拟故事，把你想要的东西丢了起来。所以是一个从0到1的过程。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:04",
      "text": "我们在九月份的时候发布的，到现在也三个月4个月了。我们有看到了大量的不同的use case，有非常多不一样的inside。我觉得一个最大的一个产品形态上的inside，就是根据用户需求的不同，用户的exciting是非常不一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:23",
      "text": "我们在最开始的时候其实会比较接近一种a signalize的agent，就是用户会给我们一个需求，然后我们去agent在那做，去不停的迭代how this iteration，最后deliver一个结果出来。在我们发布了之后，在我们看到很多用户的反馈，用户会给我们反馈说到他们更期待这个agent以一种合作的形式去存在，而不是去做很长时间的工作，然后再come back。什么意思？就是像dev ON这样的工作形式是有一个用户的一个education的门槛的。在David出来之前，或者说A站的出来之前，还没有太多的软件是这种用户给一个指令，然后他过去做十分钟20分钟，再come back with the result，就没有太多这样的一个形态。而我们做了这样的一个形态之后，用户会告诉我们说OK我他们其实要更及时的一个反馈。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:15",
      "text": "所以我们后来又做了两个change。第一个是让agent跟用户的交流更多。因为我们发现human的入口非常重要，用户希望更多的transparently cy希望知道agent在做什么，然后希望能够控制a agent t的这个direction。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:29",
      "text": "所以我们加入了更多的transparent y跟用户的更多的feedback给用户，让用户知道在做什么。第二个是我们又做了另一个产品叫system，它是一个更快的edit，有点像这个curse composer，就是用户给一个具体的指令，你要改什么，C4会自己找文件，然后自己去edit，还要更快更便宜。然后agent就更多的是一个exempt ized的autonomous的一个形态。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:54",
      "text": "所以现在我们我的理解是这些其实是两个比较不同的需求。就是说自动化去完成一个task和一个轻量级的edit。这两个需求的用户的expectation是不一样的。但这两个需求同时又存在，不管你是现在replace上从0到1，还是说在Steven上你有一个大的code base，你想要生成一个PR，其实这两个产品形态是存在的这两个必须也都是存在的。所以这是我我们这段时间得到的一个inside。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:21",
      "text": "但是从0到1和生成一个PR这两个问题就完全不一样。他们虽然都是agent，但是他们的focus是非常不一样的。这个新尧等会儿可以补充一些。如果你是做一个大的PR你需要去理解这个code base，你需要有好的search，好的rag，然后你需要能够增加你这个生成的内容的PR的准确性。然后像ropy d从0到1，我们需要的是能够cover更多的use case，cover更多的integration。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:47",
      "text": "比如用户想要OpenAI的API，我想想要用OPPO AI用户想要用data base，用户想要用这个perplexity的API，我们都要能保证agent能把这些接上，要能够保证它快，能够给用户更好的去把产品搭起来，能保证他能支持更多的framework，能保证他能deploy。其实从0到1的事情非常的多，这个只是早期阶段。后面还有更多的像SEO，像这个soft 2，很多很多的问题要解决。但是前面的问题就已经跟David或者all hands解决的问题已经是非常不一样了。所以这个其实看起来产品形态是很像的，但实际上解决的问题是非常不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:26",
      "text": "所以正好我觉得关于这个解决问题的不一样，我觉得正好可以follow up一下。所以现在你们看到record agent大部分的用户，包括其实跟你们形态比较像的，像winter for boat这些，你所看到其实用大部分的任务都是这种从0到1的这种任务。那在一之后，它就是停留在一个比如说自己可以用的一个小的工具。还是说如果说接下来他要把这个真的把它变成一个更复杂的，要在进production，甚至是to public的这种产品的话，他会怎么去做呢？还是留在这个边，还是说你会看到他到别的平台上去做。",
      "speaker": "发言人4"
    },
    {
      "time": "00:30:03",
      "text": "这个问题非常好，有不同的用户的行为都存在，当然大部分是留在这个平台里边。不管是rep lit的还是boat，他们会继续的去smash这个agent的能力，然后去get他们的产品。其实很多用户已经push远远超过一了，很可能已经push到比如70或者80了。之前在推特上做了一次直播，然后有特别多的用户进来跟我们说他们的story。给我印象比较深的是有一个印度的一个小哥在德里，他说他在replied agent发布之后，通过replyed agent已经挣了10万美金了。我们看到非常多的用户其实已经把他们的产品上线了，在网站上make revenue，其实这个更像一个创业的过程。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:40",
      "text": "我特别喜欢的一个pattern就是有一些创业者，他们在用agent非常快速的去build up他们自己的idea，然后放出去去验证product。A market fit用来验证PMF的第一个版本的开发速度变得非常的快。然后他可以在不同的产品之间share他的很多的set up。比如说翻译的这些set up，比如说它的这些tracking来分析的set up。它这样的话就可以非常快的去验证idea，然后直到它有一个heat the market。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:10",
      "text": "如果你是一个优秀的创业者，你的产能会被无限的增大，会被增大到10倍甚至100倍。我看到很多我身边的一些创业者已经在做这个事情。甚至在还有一些别人在帮他们去验证的idea，通过教他们使用为准。因为这个的门槛其实就没有那么高，但是效率又非常的高。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:28",
      "text": "好，我们回来李总我再follow up一下，就是从rapid的rapid asia浪直到现在，除了你刚才提到的加了一个assistant之外，还有哪一些更新在你看来对于现在提高大家使用的满意度等等，以及提高他的performance有比较大的帮助。",
      "speaker": "发言人4"
    },
    {
      "time": "00:31:46",
      "text": "其实底层model没有怎么换，因为都是SONY的。3.5更新的话主要就是在几个0到1的agent特别关心的方面。第一个是这个integration，就是说我刚才提到的用户其实对于从0到1来说，他们更想要的是把他们的产品去接到各种各样不同的服务里。这样的他的产品才真正的有价值。比如说OpenAI，比如说这个fire base super base的数据库，比如说这个stripe，你只有跌了stripe，你才能开始赚钱。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:17",
      "text": "其实很多的这个integration l lam自己是做的不是特别好的。第一它并alarm是有的knowledge的。如果说这个API是他的knowledge cut off之后出来的，他就完全不知道这个API是什么了。所以我们需要交这个agent关于最新的这些knowledge，如何去使用最新的这些integration，这个是特别关键的。这个使得很多产品你从不可用变得可用。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:42",
      "text": "然后我们在这个editor代码编辑上也进行了一个非常多的实验和更新因为代码编辑其实就是整个agent中间最核心的一个部分。如果你编辑的好，就能更快的完成用户的需求。你编辑的不好，那用户就会concrete浪费我的这个credit。那我们在这个中间就是有很多关于编辑的方式，我们做了很多的experiment，包括应该给什么样的文件的context，哪些context应该被recycle，帮助用户去figure他们想要用的text tag是什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:16",
      "text": "我们的data base是我们replace自己每天的，你也可以接外部的data base。然后我们的data abase上也会做一些control，保证你在replace上自己deploy的时候，agent写出来的代码是一定是可以deploy的。这个也很重要。因为i line他们有时候会写一些代码，它deploy上去跟你在这个report上看到的时候是不一样的。那这个其实又使得它不可用了，所以deploy也是一个重要的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:40",
      "text": "还有一个巨大的更新就是我们使得其他UI变得好看的非常多。最开始我们的stack是比较有限的这个flash然后完了GS后来我们又支持了这个react strict，一开始也有，然后又支持了更多的用户想要的这个step，又加入了很多的image，让AI可以自己去搜图，然后加到你的产品里面，又加了很多美学的一些tuning。所以现在他做出来的网站或者产品会美学这样好看很多functionality s也非常好。所以前方大家看都会比刚落实的时候好的太多了。Violence的如果我们看过去三个月的这个change的话，所以进步还是非常多的。我都挺surprise的，几个月时间能发生这么大的变化。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:22",
      "text": "咱说美学是你们自己的UI还是说你们通过什么方式。",
      "speaker": "发言人4"
    },
    {
      "time": "00:34:26",
      "text": "我们自己UI也几乎重构了一遍。以前的replace是一个以ID为主的，你看着会像VS code。然后现在是一个完全是agent first的一个UI了，一切都是以让agent用户用agent更舒服为主导，去重新design agent first的一个设计。然后美学的这个上面framework很重要，像v zero，就是vers l他们做了这个framework。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:49",
      "text": "Nex GS的很大的一个好处就是他们的UI好看。因为他们已经把什么是好看这件事情包定了他们的framework里面了。所以我们第一个就是support的这个react，然后一些next AS的东西使得他用了更好看的frameworks。然后另外就是在需要的时候加入了一些image，就是让像我说的让AI自己去抓一些图下来。然后再加上我们做了一些这种prompt的tuning，加了一些工具，让你能够在replace上调整这个网站的颜色或者说字体大小，而不是用去让agent一个个调，你可以自己加一些工具上手动去调。其实就是把一些agent的工作转成一个UI上的工具上的一个工作。",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:30",
      "text": "咱们刚才聊了很多关于对于从0到1，其实就我自己也是用户，我能感觉到就是如你所说的这一年进展非常的快，就明显感觉到的从0到1的这个达成率越来越高。但另外一点，他达升的速度越来越快。我会在想会不会有这样一种可能，就是因为大家都知道to b软件，我们希望就陪伴用户成功，对吧？想陪伴他更长的这个生命周期，然后我们也能获得更高的价值。那现在包括replay a这样的一些产品，可能从1到1越来越快的被达成。但是可能从1到10，我自己的体验还没有那么的这方面你们接下来会有怎样的一个准备呢？还是说可能还是更多专注于这个从0到1的探索阶段。",
      "speaker": "发言人6"
    },
    {
      "time": "00:36:06",
      "text": "我们是希望用户能够从0到100的，我们希望我们能帮助用户去做一个产品，并且帮他们赚钱。从0到1只是现在的第一步，也是AI比较擅长能够做好的一步。然后从1到100，像我刚才说的，这个中间有很多不一样的问题要解决。当然现在我们也看到用户，很多用户他们每天在smash agent或者assistant，他们一天能发好几百条消息，把他的产品每天变得越来越好。其实是已经能达到一个可用的一个阶段了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:36",
      "text": "但是更多的到后面1到100的问题，就像我刚才说的这个当code base ba之后，这个fire context怎么去manage。然后当你产品复杂了之后，你怎么保证它的数据库的稳定性，然后安全。在你有了大量用户数据之后，怎么保证这个数据的migration是成功的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:55",
      "text": "其实这就是一系列traditional软件公司在grow的过程，会遇到的各种各样的问题。包括安全，包括scale，包括compliance，那我们agent其实也都要一个一个解决。我觉得这个就是一个现在在早期，然后慢慢的会被一点点攻克的一些问题。这些被攻克了之后，就是真的可以实现agent帮你build up一个公司，帮你scare这个公司，然后帮你赚钱。但是它的有个好处，就是因为你的产品是agent build的。所以我们会可以你可以make一下assumption。比起Randy拿来一个软件，然后让他去做scale，让他去帮你解决你的这个数据库的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:32",
      "text": "其实agent在最开始的tech tilt上，就已经选择了一些我们觉得agent能做好的stack，我们觉得agent能用好的这个technology。那在后面的scale或者安全性上面。就可以做的更轻松一些。Hold目标就是比如说用户来到reply build的所有的软件，都可以很好的scale，都可以保证数据库的安全，都可以保证这个deploy的稳定性。很多事情就不用去concern了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:56",
      "text": "会不会比如说rapper发展到后面，其实完全能cover掉现有云服务的这个场景。或者说reply可能会变成所有云厂商的一个前端。这我觉得可能是最疯狂的一个未来。",
      "speaker": "发言人6"
    },
    {
      "time": "00:38:07",
      "text": "其实是。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:08",
      "text": "有可能，当然我们也不可能说什么都做，所以会用很多外部的服务。比如说我们的deployment中间的过程中用了很多云厂商的服务了。当然这个也是我们很大的一部分revenue的来源。所以可以这么说，从0到1的agent的产品公司最后会变成一个包了很多云服务的一个前端。但它的目标是帮助用户做好一个产品，然后后面会接各种各样的这个integration，各种各样的services。如果说有一部分事情是我们该做的，就是rebid做更好的。有一部分东西是云厂商或者说外部的integration做的更好的那这个就是我们在发展过程中要make的一个decision。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:48",
      "text": "是的，是我觉得这个听起来非常make sense。因为大家经常讲这个multi cloud多语言，其实我觉得这可能agent反而是更适合的。",
      "speaker": "发言人6"
    },
    {
      "time": "00:38:55",
      "text": "其实上次我们在聊这个agent的时候，那时候David大家还只是看了个demo。那现在我好奇你自己有没有实际用到这个dev有什么让你觉得跟想象的时候不一样的地方。而且另外我觉得两个问题，一个就是说首先这些产品底层的model，也用的是这个第三方的model，那到底上层这个产品是什么？比拼的是什么？第二就是说当这个coding本身foundation model的能力越来越强了以后，会对于你们所cover的这use case会有一些更多的融合吗？你怎么看未来的这个眼镜？",
      "speaker": "发言人4"
    },
    {
      "time": "00:39:27",
      "text": "对我觉得首先我用了David，然后我觉得他还是比较符合我的预期的，就是跟宣传片上非常一致，他非常的asic realized，就是你给他一个task它会去执行。即使是非常小的一个task，它也会执行，思考的非常全面，给你一个PR。所以总体看来我觉得还是非常符合我预期的一个形态。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:46",
      "text": "但是就像我刚才说的，他的场景就是在一个你本身你是一个知道你要做什么的，你知道你的code base是什么，然后你让他做一个task。这个第一它的产品形态其实是很新的。第二个是说他的这个用户群体会是更面向professional或者technical用户群体。你会指挥他去做事情，去contribute，去code base。我觉得这个是产品形态上会稍微有一些不一样。像我们的用户群体，甚至有很多什么四岁的小朋友，有80岁的老人，一个用户上的不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:19",
      "text": "当然这就回到你的第二个问题。因为其实最后产品的不一样本质来源于用户的不一样。如果我们的用户是一个八岁或者四岁的小朋友，那我们的UI的交互或者说跟用户的交流方式，就需要能让他们去理解这些东西是什么。比如说为什么这里需要一个数据库？为什么这个地方需要一个APIK，APIT是什么？对于David的用户来说，可能不需要教育他们，这个问题他们肯定大部分是知道的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:43",
      "text": "所以之后的产品形态的不一样，会由用户决定是你在服务什么样的用户。比如我其实自己也用curse去写代码，因为那是因为我是一个professional的程序员。但是其实如果我不是一个professional程序员，可能科学对我来说就会稍微有一些难。所以最后的形态的产品形态的差异还是由用户决定。模型的话，当然如果对于我们来说，模型提升了，所有人都提升，这个是一个非常好的事情。相当于我们跟着这个模型的提升去得到了一个free的upgrade，就是模型会越来越好，那我们的产品也跟着模型越来越好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:18",
      "text": "在国外最近这个compound AI的这个概念也很火。你们这种实践中，你们会需要再结合一些别的一些小的model吗？还是说你觉得其实你这个一搜为主的这个防晒model就已经足够了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:41:31",
      "text": "队伍其实肯定是要结合很多不同的model的，因为不同的task适用于不同的model。有这个主要的考虑是性能，然后速度和价格。因为你不是所有的事情都是要让sonet来做，有些事情可能更小的工作就能做的很好了。比如说german IG面非常的便宜。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:48",
      "text": "然后有些事情可能你需要更强的model。比如说这个finding，你可能用o one去做会更好。有些事情你甚至需要一些molting model。比如说cloud的computer use，你需要让让agent能用computer use操作他自己的软件，或者说操作这个网站去收集一些信息，诸如此类的。所以我觉得一定最后会有大家都会用各种各样不同的model，不会局限于一个model。Delete的优势是它生成代码，但是不同的task一定还是有更适合的model去做的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:18",
      "text": "大家都说去年大家都希望看到这个应用，你能不能自己有做model的能力，现在是反过来的，最好你自己不要做model。但是我就从我们交流感觉到，即使你自己不是做法还是model这一层，但是对于要做一个真正AI native的产品的团队来说，仍然是需要比较强的AI的能力的。我们几个重要的产品聊完了以后，回头我们再bring一下接下来会发生什么。新瑶可以跟大家讲一讲，回顾一下这个open hands是怎么现在叫open hands，就是一开始叫open death是怎么开始的？大家都对David d非常的好奇，对戴文是怎么做出来的那我觉得也可以跟大家分享一下大体的架构是怎么样的，以及公司发展到现在可能也有半年的时间了。这里边一些比较重要的一些技术和商业的决策也可以跟大家梳理一下。",
      "speaker": "发言人4"
    },
    {
      "time": "00:43:03",
      "text": "我可以先从整个open hands的故事开始讲起。其实这一切都是由David的twitter release引发的。当时我在国内因为签证被check，我就躲在家里面刷twitter，然后刷着刷着就刷到了这个dim的这个demo。我当时觉得extremely impressive。而且当时那个时期正好是我刚刚wrap up了之前的一个researcher work。然后我的下一个工作，我心里其实是在想能不能造一个类似于David demo里面那样的agent去真实的替我做事。结果我前脚刚想完，后脚人家就做出来了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:34",
      "text": "然后我当时还有点小emo，当时晚上在家里面，但是第二天我在推特上就刷到了俊阳和冰原。他们当时说我们要做一个open demo，我们要做一个open source。然后我当时其实就immediately对这个非常感兴趣。因为对我来说，我当时给我自己计划的下一个一次是是也是要做一个类似的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:51",
      "text": "然后我知道在做A卷的这方面，其实对工程要求是非常高的。就是你需要有非常足够好的infrastructure去支持你做整个agent方面的research。所以我当时最开始加入open demo最朴素的想法其实就是单纯的为了我下一个project做准备。我希望能够就是因为你像David这么impressed的demo，但是他们是作为一个必然的产品。但是如果比如说作为一个在学术界的PHT student，我想要去研究比如说这样子的frontier capabilities。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:17",
      "text": "但是如果没有一个open source的code base去帮助我做这样子的研究，那么可能就是我研究能够达到的那个上限就非常的有限。所以一开始加入open demo就是抱着这样的一个想法。然后另外一个我当时觉得老气，对我来说非常impressive的点就是我记得当时好像只有一个read me，然后就瞬间多了1000个star，包括有各种各样天南地北的officials contributor，就什么都不问，大家上来就开干，夸夸夸的往里面写单了，夸夸夸的就往里面蹦鸡皮眼有点累，非常bottle up的一个这样行为。有当时也觉得非常的新奇。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:49",
      "text": "其实到后面就是gram用cloud，就是用当时刚刚发布的，我印象里应该是刚刚发布的cloud UI写了给open hands生成了第一段前端的代码。然后随后我们整个open surge就铺进去，开始进行迭代。后来Robert就是我们现在的CEO，他当时进来把整个这样子的一个architecture搭起来。做出来的第一个能跑的一卷，但是效果不是很好。然后我再接下来把我之前发了一些paper里面的一些方法给applied的integrate到open hands里面来。让open hands的A卷能够真的end to end去完成一些相对比较简单的一些任务，大概就是一个这样子的一个流程。然后在今年4 5月份终于决定把它做成一家公司，大概是一个这样子的一个发展路线。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:30",
      "text": "可以跟大家简单介绍一下open has怎么去实现的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:45:33",
      "text": "就是我们尽可能把这个东西设计的很简单。所以严格意义上来说，其实对我们来说就主要是三大块。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:39",
      "text": "就在后端主要有三大块。首先你有个agent，这个agent的作用其实就是你喂给agent的一个event history。就是比如说在过去人类说的什么话，agent执行了什么action，agent获得了哪些observation，pass给agent，然后由agent这个本身来生成一个比如说新的action，然后新的action push进event stream，然后相当于你有一个streaming，就是你相当于你有个这样的事情，去维护你过去发生的所有的事情，观察到的所有信息。然后另外一个我们非常关注，但是也是非常难做的一个component，我们管它叫做asian wrong time。所以A正方开始做的所有事情，其实本质上来说就是把这个event stream的所有的action去执行成observation。比如说这个action可以是执行bash command，然后这个时候你就会需要在一个，比如说一个3 box环境里面把这个command执行了。About observation, 推荐events。然后我们当然这个agent最后就可以从live里面把这个信息拿到。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:27",
      "text": "当然在这一步，在这个三块之间，其实还是没有user involve进来。因为这个纯粹就是一个agent和environment的一个合一，环境的一个交互逻辑。我们考虑的和用户用户和这个agent交互逻辑其实也是通过这个event string。其实用户也可以直接往这个eventually里面去加入他们想要发给agent的信息。比如说用户可以直接说OK我想要让你这个agent去给我做一件事，他要把这个消息push in even string，然后就会被这个agent所观察到。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:53",
      "text": "这样做的好处，其实就是说目前来说我们可能只是一个web瘤I但是在未来我们可能会有很多A同时在work on the same thing，就相当于是我们现在有一个办公室，然后有好多个人都在做同一件事情。但是，每个人的分工不一样，我们特意做了一个这样子eventual architecture，其实就是做一个类似一个future proof的一个architecture设计。去考虑到比如说未来可能有多个用户连接，同一个agent筛选有多个agent连接到同一个用户的session这样子的一种可能性。就是从architect上来说是这样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:23",
      "text": "但是具体的action equation其实是可以很多变的。比如说我们现在用的基本上是基于react code act这样子的一种做法。其实本质上来说，就主要是依赖于LM自己的能力，去根据历史的一这样子的action observation去生成新的action，去决定自己的下一步应该做什么。这个的好处其实就在于前面我们也讨论到，就是这个model更新会给A卷带来很大的improvement。其实我觉得有些agent设计，它能够最大程度的享受到model更新model提升带来的improvement。但是有一些比如说如果你用了一些相对比如说prompting habbi的一些方法，你可能享受到的model improvement对于直接用这个LN本身来进行生成action来说，可能会没有那么的大。所以这里也inform我们早期的一些agent design decision。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:09",
      "text": "刚好聊到architecture这块，我觉得我们也可以跟这个devin一块对比一下，聊聊就正好两个项目之间的设计上的一些异同。比如说我们刚才讲到那个，我很认同你说的一点，就是如果我们的agent层面做的尽量轻的话，其实能更好的享受到模型的一个提升。然后我自己也非常认同这一个方向。当然我在对Steven进行一些比较深入的测试的发现，他可能有点像你刚才讲的就是prom heavy的这一个情况。包括我们看到比如说现在open hands里头agent无论是它，其实这个planner也只不过一种agent。但似乎在banner里头它的planner是处于一个更高位的一个状态。包括它生成的planned，我从它的一些内部的能看到的，比如说抓包看得起他似乎是以DAG的形式在进行planning这块儿你是怎么看的？就是对于planning你觉得它是应该是一个更复杂的，还是说一个更加简单的一个状态？",
      "speaker": "发言人6"
    },
    {
      "time": "00:48:55",
      "text": "对的，其实playing这块儿，我们的社区也有非常多的讨论，包括我们社区也进行了非常多的尝试。我印象我们大概试了四五种，然后我们实验了45种不同的age framing c叫做planning，然后也都evaluate跳动DTLDR，就是基本上每一个work没有一个能够打过。直接用model本身进行做事的一件这样的事情。而且还有另外一点，就是我其实觉得planning能力本身一定程度上来说，可以是作为一个模型本身的一个能力存在。就是你不一定需要去给这个模型做一些external的planning，就是我可以刚好说到这点，我可以给大家share一下，就是anthropic他们自己本身的一个prompt里面，测试bench的那个prot里面，他们其实就包含一段我们可以认为是一个finding的东西。但是这个planning就是我我我管这种情况叫做相对于来说就更soft一点。Planning就是你直接告诉agents follow these steps to resolve the issue，你直接给他列一个玻璃point，我们最后试了半天，发现可能在防备model足够强的情况下，你直接通过这样子的一种造的形式给他进行一个plan的效果反而是最好的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:02",
      "text": "而且planning其实有另外一个比较头疼的问题，就是不是所有的事情都像你一开始想的那样。就比如说我看拿到的这个问题，我一开始想OK我第一步做A第二步做B第三步做C然后我给把这个exclusive plan建成一张图，然后我把这个图直接给砸到agent身上，就按着这张图去做。但是实际上你会发现A卷在真的做事儿的时候，你会发现你会遇到很多你在一开始做plan的时候想象不到的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:25",
      "text": "在这种情况下，如果你是有一个非常explicit的by structure，这个时候你就要需要考虑一些工程角色。比如说我怎么样子让agent去reply，就是说更新我原来生成的这个plan，并且让agent根据更新之后的那个方案去做事儿。现在你需要关心两个能力，第一个我生成的plan是否准确。第二个我是否能准确的predict到replay的时机。第三个我生成的replan是否正确。可能第四个我根据reply完成的。比如说我是根据它生成的新的action和准确，就相当于是你会引入很多这样子复杂的pipe line。而且我们当时深圳很多感觉可能工程上来说，就是我们当时最后的结论就是如果我这个东西没有办法，比如说在bash mark sue上帮我们解决更多的问题，并且还可能给我们带来这么多的，比如说在工程上的项目burden，我们后面想的可能还不如先暂时不去做这件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:17",
      "text": "这个听起来真很有意思，想起两句经典的话，一个是less structure，more diligent, 还有谁？我这个字节老师就是more complex，less control, 且这个可能跟你们设置所有人都比较一致。对from planning部分，其实关于这个runtime，我理解这其实非常重的一部分，然后对工程能力要求也很高。",
      "speaker": "发言人6"
    },
    {
      "time": "00:51:34",
      "text": "其实我在对比这个David的open end的实现的发现了一点。就是David我从一些比如说我看他这个process group之类的信息，我感觉他好像直接用的是vm而open ham是基于这个container这个方案。当然我理解就作为开源项目，我们肯定会选择container，因为包括我自己用起来都会非常方便。但是你说会不会比如说直接像David这样使用VM能带来一些比较额外的一个优势呢？我举一个小例子，就是里头那个browder，他是似乎不是一个host的chrome，它是一个直接跑在x event的一个图形界面上的完整的chrome。所以这样会不会就是比如说一个在未来如果模型能力更强，它直接去对接VM，可能cover很多需要图形界面或者coding之外的场景。比如说像off CAD之类的，有没有可能就直接或者说必须使用VM才能达到的一个效果呢？",
      "speaker": "发言人6"
    },
    {
      "time": "00:52:20",
      "text": "对你这个是一个非常好的问题，这个也是exactly我最近遇到了一个问题，其实我们当时在设计open hand wrong time的时候，其实我们有考虑过BM，并且我们现在这一套代码docking能跑的这套代码理论上来说是可以无缝衔接到VM上，是可以直接使用的。其实本质上来说，我们现在的back看，这个runtime本身其实就是一个server。这个server在document跑和在VM上面跑，其实colligan差距是没有很大的。可能就是一个人花个两三天就能把它卖给过去。所以我觉得本质上来说，这块是没有太大的区别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:50",
      "text": "但是我们之所以选择docker的前期的一个主要原因，就是因为我们希望跑很多的这样子的一个100 0 evaluation。特别像这种street bench auction。比如说我们有300亿是500个instance，并且VM这个东西它启动的非常的慢。就比如说我在语音上，我要跟google cloud说OK我现在要起500个VM那可能一两分钟后可能才全部ready。但是作为contained来说，你就可以利用一些现有的这样的工具，比如像cover netty这样子的closer manager工具，去给你这样子一次性起个500个，并且帮你manager好了，并且你都能让agent连接进那些dock container去做一些事行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:24",
      "text": "然后说到另外一点，就是像你说的那个doctor container的一些limitation。这一点我是完全认同。包括其实最近我们就非常想让open hands做的一件事情，就是让open hands开发自己。但是因为open hand自己用了docker去跑这个runtime，然后我们就很难去在docker里面跑docker。所以我们最近也在考虑可以做一个比如说一个optional setting。比如说你在UI里面，你可以比如说增加一个选项option，能够让用户去比如说OK我想要启动一台real vm就是我可以直接在上面安装docker可以直接在上面安装这种GUI versus了直接用这样子的一个docker我其实能想象到，就包括这两者之间也会有些cost这样的差异。但是本质上来说，我觉得open hands现在的infrastructure是可以允许我们就是成年人不做选择题，我们都要，这是可以做到的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:14",
      "text": "是的，尤其是设计变这块，我回想我刚才讲一点，就是希望这个架构尽量的精简了。因为我刚才讲的就是如果有图形界面的话，会不会有一种可能就是因为咱们现在很重要的一个工作，就是对于这agent scale或者action的这个抽象层面要做的尽量的好吧。比如说未来如果computer use更加的成熟，然后模型能力也越来越好，配上一个模型界面，我们有没有可能让一个抽象更加的收敛。比如说现在我理解我们用proser，可能还用一些来自于比如broza这样的一个primitive。未来有没有可能完全收敛了？Computer use这个部分会更符合你长期的一个对于更精简的这样的一个追求。",
      "speaker": "发言人6"
    },
    {
      "time": "00:54:48",
      "text": "对的，我插一句，就是对于可能还不是这么了解这个computer use的朋友，大家都知道是。Ancel pit前段时间推出了一个API功能，这个可以简单介绍一下这个是怎么样的一个产品。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:02",
      "text": "Computer use是这样的，就是大模型随着现在多模态能力的进一步的提升，以及一些额外的一个训练方法。我们就是看到一些比较前沿的这些模型。包括比如说像以这个anthropic club系列为例，它提供了一系列新的，你可以理解成一种额外的function call。他能做到的效果是说让模型来像人类使用电脑一样去使用软件。比如说你可以抽象到几个的操作，我可能列举的不是很全，待会儿大家可以补充。像比如说移动鼠标点击，然后选择激活一个element，然后输入使用键盘。",
      "speaker": "发言人6"
    },
    {
      "time": "00:55:33",
      "text": "这样它带来一个比较大的一个好处，就是说以往我们要纯依靠方式靠的话，你的前提是软件为大模型开放了API。而大家都知道这其实不是一个很现实的情况，大部分的软件其实都是为了人而设计的。所以我们如果要让模型去使用软件的话，更好的方法其实应该是让他去模仿人，而不是使用API。这也就是computer use这一个能力。当然这也在快速的进展之中，还不算特别成熟。",
      "speaker": "发言人6"
    },
    {
      "time": "00:55:57",
      "text": "对的，我其实个人对于computer use，包括这种by action space这个行动，我觉得是我是非常看好的。因为如果按照一切简化的一个概念，其实对人类来说我们有什么？我们其实只有一个access，就一个keyboard，一个鼠标，然后一个屏幕，仅此而已。我们的这个input space是非常有限的，但是我们却能用这个有限input space组合起来做非常非常基本做infinite amount things。因为软件就像我们前面有讨论到，软件本身是一个非常强大的东西。可以用软件来构建更多的软件，然后用更多的软件去控制这个世界上的一切。现在世界上的一切基本上都是被软件所控制。所以你如果你能生产出好的软件，你就能理论上来说能做一些事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:34",
      "text": "扯远了，然后绕回来的话就包括我们的这个open hands paper，就是我们open hands这篇paper的名字，其实叫做open platform for AI software developer as generalist agent。我们的最终目标是做一个通用的这样子的一个agent。通用的agent它应该有一个什么样子的action space？我们其实觉得现在想最简单的就是你需要能够跑代码，跑代码最简单可能就是一个terminal。然后你需要有一个，比如说你需要有能力去add代码，比如说你有个file editor。除此之外，你可能就像我们说的第三个现在比较缺失的一个点就是比如说和web browser进行一个interaction。但是其实你和browser进行一个interaction，和网站进行一个interaction，本质上来说和我们电脑上还得是APP进行在下去，所以没有什么特别大的本质区别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:17",
      "text": "所以第三个点，就是应该我们刚刚提到的anthropic这种computer use。我觉得computer is非常promising，但是我感觉现在他们也不是没有limitation。他们现在主要的the limitation，其实还就是你现在是以一个pixel level去在屏幕上面进行操作，就是准确性没有那么高。但是我觉得这个在未来是绝对会提升的，短期来说可能他还没有那么的没有我们想象中的那么capable。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:40",
      "text": "了解这听起来越来越像，就感觉open hand在做的就是赛博世界的自动驾驶。然后我们在本班的将出现比如cosa SFSD这种纯视觉方案的出现。",
      "speaker": "发言人6"
    },
    {
      "time": "00:57:50",
      "text": "我其实觉得像这种简化的action space，最终的boss next其实就在condition model本身。其实foundation model只要一上来，就后面就都不是问题。我印象非常深刻的就在那个cloud最新的solid发布之前。我们大家如果想方设法绞尽脑汁研究怎么去improve那个agent editing，是到最后结果骚那的一发布，直接把那个stream replace add给训到模型里面了。然后一下子就把这个问题我不能说彻底底解决，但是我觉得解决了百分之八十九十。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:17",
      "text": "那在你们的这个模型中也会现在有用到这个computer use的API吗？",
      "speaker": "发言人4"
    },
    {
      "time": "00:58:23",
      "text": "我们现在有一个o ongoing p2是直接使用computers的这样子的功能。我们目前的browsing age，就是我们最近新合进去了一个browsing agent，是做一些visual browsing agent。它其实做的事情和computer use是有一点相似，只不过它是可以在那种所有能够支持微选的这个model上都可以使用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:40",
      "text": "就是我我也可以试一下这个数据，就有个东西叫做set a mark。他其实就是把你这个浏览器的这个截图拿出来，然后在这个截图上面会发现很多可以interactive element。然后你会把这个element在图片上框出来，然后你把这个control element单独用text同时喂给agent，所以就相当于agent看到的是的，知道有哪个他能点，然后他就被通过去点这些提前提供好的mark的形式去和这个网页交互。它的好处就是这个mark你提前标好了，这个agent交互起来更容易。相比之下computer use它可能是直接的pixel stage进行interaction，所以它会更难。并且第二个点就是他可能对于比如说所有的现在的vision LM都会有比较好的支持。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:18",
      "text": "但是我觉得既然computer use现在出来了，我觉得慢慢的以后大家其他on provider会逐渐跟进这方面的能力。可能我们就会有个新的standard。可能在未来一两年，也不能说一两年新的进展太快，可能未来三个月就不需要类似这样的方法了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:33",
      "text": "对，当时computer use出来的时候，我们还在说，是不是anthropic的这个to b的基因的原因吧？它有了一个本来有一个很好的先发优势？这次终于不是open I先发出来这么一个vision base这样的一个一个model，而是他直接就发布了一个API。现在看来就是到底要用这种API的这种形式，还是用vision这个形式。其实当这个像dave或者open hence这样的产品足够的强大，然后其实这个都是被包在里面的对吧？所以其实从最终产品的形态来说的话，其实也许他们把这个作为一个能力，而不是自己去develop一个只用这种能力的产品。其实我觉得这个impact更大的。我好奇的就是幸好从过去这几个月里边，你觉得你们这个产品不论是从技术还是从这个business角度做了哪一些决定，是对于现在提高不论是产品的能力，还是说提高整体社区的这个adoption是比较重要的。可以跟大家分享几个比较核心的角色。这中间如果冰原，你我知道冰原也在这里面参与了很多冰原，有什么补充的话也可以分享一下。",
      "speaker": "发言人4"
    },
    {
      "time": "01:00:34",
      "text": "至少我个人觉得最重要的技术相关的角色，其实属于是在早期open David相对于比较野蛮发展的那段时间，那段时间可能问题里面PR满天飞。然后当时那段时间我其实跟Robert，因为Robert本身其实是来自english，然后我们两个有完全不同的perspective。我们可能对于open hands这个agent本身要做的一些事情有不一样的expectation。其中最关键的就是在于我对于一个researcher background的人来说，我希望这个agent easy to use in a way that like就是我可以很容易的把这个agent拿出来去迭代，去做很多很多的research。在很多很多的event which mark上面去随便跑。比如说不需要担心任何UI那方面，不需要担心任何UI产品相关，我只希望就是我的A型的能力越来越强。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:18",
      "text": "但是Robert他可能会更考虑，比如说我们的这个agent作为一个产品，它需要和这个from and和这个uc experience进行一个更好的这种tightly integrate。所以怎么样子在两者之间去做一个baLance是一件比较难的事情。就比如说你如果为了想给前端的用户提高最好的用户体验，你可能需要在A卷方面做一些牺牲。比如说你要设计很多通用的exception，你必须逼着这些researcher把A卷用某种特定的形式写，才能够放在这个front end里面去用，就是才能让用户去使用。但是对于很多researcher来说，我是我现在都不知道我这个agent能不能work，一直都没跑。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:54",
      "text": "你让我花那么多功夫去研究你们的那个back是怎么实现的，去研究你们怎么样子把这个age结合到你们的整个产品里面去。我其实并不关心那么多，所以我觉得我们当时对的最重要的一件事情就是我们把这个book给就像我们前面展现的一张archie的图，我们把这个back time的分的足够清楚，就是agent我只需要关心一件事情，我会把所有的历史信息给你，你拿那些所有的历史信息去做什么事情，不关我的事儿。就是我只expect这个agent最后会给我一个agent，仅此而已。这样子的话就是在我们的agent开发这个部分，我们就可以非常完整的抽离出来。这样researcher可以自己在这边玩，而不需要去碰到这个框架里面涉及其他东西的这部分带，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:35",
      "text": "然后我觉得另外一个比较重要的点，也就是和这一点相关。就是因为我们把一点抽象出来了，并且我们把back就是基于那个里边的事情做好，我们把by看拆出来。其实现在我们by看的有两套使用的方法，一套使用的方法可能就是和前端和我们的产品直接接入。另外一套使用方法可能就是就header less的使用方法，就是可以把这个edge直接和我们造好的一套harness去接入。其实就是这两条不同的路线就对应了两个不同的人群。可能前者就是比如说我们的这些用户希望用open hand去为自己完成工作。后者的可能就是对于我们这种researcher er这种agent开发者，我们希望去更强更好的去push这样子的agent能力。然后我觉得这个是我们早期做的一个比较正确的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:14",
      "text": "也现在也慢慢的我们也发现了，就是有很多工作，有很多benchmark都在用open hand作为一个baseline agents。作为一个eviot，比如说我们有commit zero，就是从0到1生成一个code base。有science agent bench，包括像OpenAI的那个MLE bench都有用。这个open hand作为一个这个样子的一个baseline去测试不同的bench mark。这个我个人认为是我们早期架构决定做的相对比较正确的一件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:39",
      "text": "刚刚也其实听到了新窑去回顾整个open deven到open heads的历程，其实我自己还是觉得挺有感触的。大家其实可以看到今天其实开源社区力量是非常强大的。我们一开始去提出这个想法，一直到今天能够round的这么的健康。我觉得开源其实是带给了大家很多不一样的东西的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:00",
      "text": "就是今天open David和open hands去做开源这件事情，其实带来了两个好处。第一个就是首先你开源，你知道代表着你是透明的。因为你的透明，就刚刚其实星耀讲到的很多优势就被放大了。我们要去服务更多的人，让更多的人参与进来。那我们势必在架构上面，甚至说一些技术上的选型上面，我们就要去考虑更多的兼容性。那这样的话，你未来的整个的这个project就会非常的健康。",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:27",
      "text": "第二个就是说我们觉得开源这件事情一定程度上会打消大家对于很多闭源的一些商业公司的一些顾虑。更重要的是说，我们觉得未来open model其实也能够在这个open的agent里面去发挥自己的作用。就如果今天大家，慢慢的从去贡献一个open agent，到未来能够一起去贡献一个open model，这样的话其实所有的东西都是open的，大家对于未来这个agent都会非常的放心。所以我觉得这种透明，然后这种弹性，然后这种每个人都有contribution的这种机会。对，其实非常能够代表着开源的。就是我们一定要从整个开源的力量上面去在这个AI的时代里面去创造属于每一个人自己的一个AI。这个也是我今天觉得open hands能够做的这么好，然后能够大家一起贡献进来一个非常重要的一个核心的一个动机。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:18",
      "text": "正好可以聊聊其实关于开源的这个问题。因为我们看到David已经可以实现很厉害的能力，为什么会想要做一个open source版本的coding agent？能够给你们带来怎样的优势，又可能有怎样的挑战呢？",
      "speaker": "发言人4"
    },
    {
      "time": "01:05:33",
      "text": "一开始的这个proposal，我们当时其实动机也真的很简单，就是看到这个东西未来一定很酷。那我觉得开源社区就要有一个。因为开元社区有很多有创造力的人，然后有很多有能力的人。如果我们有一个组织，能够把这些人凝聚起来，一起做一个非常酷的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:50",
      "text": "这个从历史到今天，其实大家都会发现有很多这样的case都能跑出来。我觉得我们去做一个开放的一个code agent这样的一个项目，其实会非常的有吸引力。事实证明当时确实热度会非常的高。因为当时其实仅凭一个read me，我觉得能吸引来新瑶可能就是我们一个非常大的收获了。包括后面gram加入，然后robot加入。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:10",
      "text": "当时其实还是能够看到这个开源社区其实是非常的有创造力的，包括我们自己做queen。今天我们应该算是最拥抱开源的大模型的一个team。我们其实从开源中还是得到了很多。所以说我们就一直在坚持，能不能再给开源社区反哺一些什么样的东西。所以我觉得未来面向AI的开源的项目应该会越来越多。就是任何的场景，然后任何的task都可能会有一些很顶尖的开源的项目跑出来。随着我未来希望开源的这些AI的这这些项目和未来开源的这个model还是能够更有机的去结合，真正的把open这件事情就做到非常的极致。我相信往小了讲，其实是给我们每个人参与AI的机会。往大了讲，其实我觉得对于整个社会的进步，以及整个AI民主化的进步，其实都是有帮助的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:54",
      "text": "刚刚碧源说的其实非常好，就是democratizing AI technology。就包括像我们的website上其实就有一句话，就是我们认为像agenting tech logy这种特别重要的技术，就是不能只让这种非常重要的技术只保留在少数闭源的公司手上。我感觉这个其实我们一开始最朴素的一个观念。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:13",
      "text": "另外一个点，我觉得从我作为一个researcher的角度来说，我认为open source本身是一个非常好的一个facility research的一个媒介。就是像现在我们有很多的research，就是基于比如说我们早期做different research可能有hybrid，现在我们做L我们可能有hugger face，然后包括serving我们有必要M那个ST line的这些东西。如果没有这些开源的code base，作为一个这种基建支撑，很多这个方面的科研进展的就会相对更加的把慢。我们当时其实一开始想的就是首先作为这个开源项目，我们希望能够facial pate这些research development。但是相反，就比如说这些research develop，比如说我今天发了一篇，我今天用open hand作为的infrastructure了paper，我把这个performance push十个点，但是我的paper也是开源的，我的code也是开源的那是否意味着作为一个open source project，我们能够更容易的去吸收学界大家the research产出了的一些更好的，更高质量的agent，我觉得这个是一个点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:12",
      "text": "另外一个点其实也就是说我们希望作为一个developer来说，我会为open service摇旗呐喊。这样的东西作为一个developer to作为一个让开发者自己本身使用的这样的工具，大家会更倾向于比如说使用开源的工具vers闭源的工具。当然这是在比如说性能体验是接近的情况下，大家可能会倾向于使用开源的工具。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:33",
      "text": "而且我认为最重要的一点就是我其实觉得在agent的实现上，可能没有一个真正的非常大的一个mode，没有一个真正大的一个护城河。所以比如说我看见你的A卷产品了，你是必然的。但是我看你的产品怎么交互，我可能就能猜出你背后的商品逻辑。我可能花一两个月花两三个月，我砸些时间，我也能复刻出来一个可能表现差不多的东西。在这种情况下，我们就觉得OK。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:59",
      "text": "既然这玩意儿大家都能看着这个behavior就能猜得到出来。那为什么还要让大家在这种事情上浪费时间？为什么不直接把这种核心的code彻底开源出来，让大家在这个基础上花时间去build做更多更有意义的不technology前进的这样子的一些事情。而且其实到最后面最重要的一个点就是这个技术本身其实没有那么重要。但是让技术变得真正有用起来其实是非常重要的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:25",
      "text": "从这个角度来说，open硕士其实是有一定优势的。比如说像VS code，它本身就是一个开源的products。所以比如说大家会很容易的去给它写各种各样的VS code extension，让VS code成为了一个可以算是最powerful的IDE之一。因为你只要用了VS code，你就能用到很多community因为各种各样奇奇怪怪需求而产生的各种各样奇奇怪怪的extension。作为一个个人用户，你有很多选择，你会有一个比较好的一个用户体验。包括像现在很多这种AI coding start up，其实他们的很多IBD都是从这个VS cold出去，也说明了这点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:00",
      "text": "所以从另外一个角度来说，我们是也希望比如说开源社区在用一个open source product的情况下，有一些人偶尔会想到一些比如说这个产品我用的不舒服的地方，能够去更容易的去cosmic这个产品。就是为他们日常中的这种use case去把这个产品class for themselves，并且把这种cosmides ation最后反哺到这个产品的这个recall本身。对我觉得这个也是另外一个非常重要的一个点，就是excess ability和cost finalization也是开源社区可能相对比较容易做的一个事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:33",
      "text": "那如果是开源的话，开源这部分的数据其实可能他们也是在自己的环境里面去做的。你们也不一定能收集到他们使用的游戏这种multi step的数据。",
      "speaker": "发言人4"
    },
    {
      "time": "01:10:43",
      "text": "这个会是做网站吗？你觉得对，我说的那个customization其实可能更接近于open driven早期，当时这还叫open deven。早期就是有很多用户会把open deven拿去，比如说在javascript跑，在CPS跑上面跑，然后会吐槽说你们这个有哪些都都不行。一般这种情况下解决这种问题，很多时候你就只需要写一个customize的prom。就比如说你在work这种语言的时候，需要注意哪些点。然后我们想象的这种customization，就有点类似于这样子的community去贡献的一个这样子的一个customization to the library。有些人不愿意分享，当然OK，但是还是有一些人会愿意去分享这样子自己相关的这样的一个use case。包括像curse r他们最近有一个叫做curse r rules的一个library，有点类似于这样子。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:29",
      "text": "对，然后我看到David不是也有一个开源的一个项目，也在鼓励大家都把Steven用在这个开源项目里面。我觉得这个可能也是去收集更多数据的一个方式。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:41",
      "text": "对的，可能是收集更多的use case，然后让这个产品对于更各种use case都能有好的表现。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:48",
      "text": "其实你也提到我们很多能力还来自于这个foundation model。如果说你们跟David所面对的这个用户群可能又是类似的。那你觉得说未来在这个赛道上，我们还会看到更多的这个demo，更多的这样的产品。那你觉得到底大家最后比拼的最核心竞力是在什么地方？和他的差异化可能在什么地方？",
      "speaker": "发言人4"
    },
    {
      "time": "01:12:06",
      "text": "对的，如果我们先从开源的角度来说，开源作为一个产品来说，它可能本身有的优势。比如说对一些企业，他们可能说OK我不想被某一个大公司lock in。我会更希望这种，比如说你有这种source code，哪怕你这个公司最后没了，我还是能继续用你的产品。因为我有你的source code，并且还能去继续维护这个产品。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:26",
      "text": "并且另外一个点就是比如说对于一些比如说highly regulated industry，就是像这种闭源产品，他们可能就很难去做那种Operand deploy yet。但是因为open hand本身就是一个非常开源的产品，所以对我们来说，我们并不担心说什么我们的agent怎么实现的secret被人偷走什么的。我们就可以直接到这些公司内部。比如说你圈一块地给我，我直接把我们整个agent的系统deploy到你们公司内部。这样你们可以one hundred percent make sure所有的都不会离开你们的closer。因为这个开源的优势可能会更容易赢得某一些客户的这种trust。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:59",
      "text": "然后除了这个开源的factor以外，我觉得另外一个点，对于这种agent的产品最重要的一个点，也是我们前面提到的。我感觉因为这个agent本身它是作为一个agent，所以我觉得它本身的integration是特别重要的就是你希望让这个agent live，live where developers live, 就是有点那种感觉，就是developer在哪里，你这个agent就需要在哪里。比如说developers，我们天天在slack里讨论需求，讨论bar。那这个时候这个agent就需要在这个slack里面，就是你随时叫他他可以随时来。然后从另外一个角度来说，比如说develop活在github上，天天在github上面comment写review。这个时候你的agent也需要和这些已有的channel有一个非常好的这样子的一个integration。这个是除了IDE以外的integration。因为作为i think我其实个人觉得i think agent和IDE本身它其实没有那么的match，和人类开发者的关系会更接近于口。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:48",
      "text": "Color, where is think? 对你来说，你可能就是一个微信聊天窗口，然后在聊天窗口对面有你的小弟，然后你可以让他去做各种各样的事情。我觉得这个第一个点就是肯定是要让你们的产品待在develop，待在底下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:00",
      "text": "第二个点我其实觉得也是这个点的一个延伸，也是我前面说的这种customization。就比如说像就是你需要有一个比较好的生态，然后你需要能够发现一些，比如说particular use case，就是你要找到一些对于用户来说这个use case执行的非常好。比如说我发现了这个open hand执行某一类经常要做的重复的任务。比如说修这种inter error，比如说修复test case，它能做到80%、90%。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:26",
      "text": "那么这种情况下，专门针对这种特定workflow的这种一个customization。本身也是一个值得做的事情。这个其实就有点像我前面说的那个，相当于就是cursor r rule的那部分工作。你的这个product本身是要有一个比较好的一个生态。然后在这个生态里面有足够多的人用你的产品去做足够多的事。然后对于每一件事情，相当于就有个prompt example可以去borrow from。然后这样子对于一个新的用户来说，他可能更容易上手。对于老的用户来说，他可以有一个更revival的方法，就是更可靠的方法，让A卷去完成他你想要完成的任务。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:02",
      "text": "我们这个open source社区也跑了一段时间。然后我知道你们最近也在抓紧开发以及准备发布你们的这个sas的版本。这些社区里边所看到的有哪一些对你们帮助比较大的一些反馈。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:15",
      "text": "其实我感觉我们目前社区开发者呼声最大的几个feature，也是我们自己最想要的几个feature。因为我们自己本身就是非常active的用户。但是我觉得有另外一个角度，有一类特别的feedback，就是用户教育那块。很多新用户他们上手非常困难，他们的这个失败我们其实是非常value的。并且因为我们自己本身是开发这个系统的，我们了解这个系统的每个component。所以有的时候我们很难站在一个用户的角度去看待我们这个产品。所以我觉得很多用户在这个方面给我们很多feedback k其实是非常大的高端。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:47",
      "text": "包括另外一个点，其实就是我们了解到了我们的用户里面用open hand做了很多很多use case，有很多很多不同的u case。然后也能够让我们比如说在improve这个gram mark本身的时候，就是我们能够在脑子里面去多想一些这样子的use case。在做design decision的时候，会更倾向于去做一些比如说更通用的事情，然后能够potentially在未来支持这样更多这样的一个case一件事情，就改变了一些money set。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:10",
      "text": "对的，我觉得这个的确是让我们重新看到在模型之上应用的价值。其实你去看David的设计的界面，在什么地方去给你这三个tap，什么地方给你去这个y brows的情况，什么地方上去看它的code，怎么样让你在中间可以打断他，让你进行交互。我觉得其实这是一个包括其实curse r也不是一个简单的把一个对话框就放在你的这个cobs里面。所以我觉得其实在有了AI尤其是你想在o one这样的能力出现，新的这种能力出现以后，我们到底是把这种很长的influence看成是一个bug，还是说基于它的这个特点来去设计新的交互方式。我觉得这些其实都是很多是有这个应用开发者基于一个对模型能力的深入理解和思考去做的事情。这个其实也是我觉得我们作为投资人很期待能够看到。跟女生也聊过，就是rapper其实是一个很懒的一个定义的方式。在A症出现我会反复证明这一点。",
      "speaker": "发言人4"
    },
    {
      "time": "01:17:10",
      "text": "既然讲到我们对于底层模型能力的这个期望，我就不得不讲最新鲜热乎的OC了。我觉得正好冰原是这方面专家了。我想先问一下，首先是这个o one，o one这样的模型出现，觉得对于coding的模型这块有什么样的影响？现在刚刚看到了这个OZ之后，你觉得它又有哪一些是让你觉得最impressive？",
      "speaker": "发言人4"
    },
    {
      "time": "01:17:33",
      "text": "首先O一出来的时候，其实大家已经感觉到非常的不可思议了。就是我觉得first time computing这个路线应该还是非常的有道理。他一直去提倡chain of thought这个概念。然后他今天把long term sort做到极致以后，就会发现涌现出更多的我们想要的那种智能的感觉。然后包括它的performance其实做的也非常好。但其实o one从包O3，其实今天大家能看到的还是一些非常好验证的一些任务。其实就是code和mass以及一些考试题类型的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:09",
      "text": "所以说今天我我我我仍然觉得可能O这个系列它暂时还是会先以探索边界的为主的一个research的一个方向。他未来可能会在产品上面，我觉得还是需要去思考更多到哪里带有有用。但我觉得他在技术上其实暂时已经证明了自己可以做到一个非常crazy的一个水平。",
      "speaker": "发言人3"
    },
    {
      "time": "01:18:29",
      "text": "其实昨天晚上all three的发布，我觉得最大的震撼还在于说他们确实把这条路线，我觉得就走到了一个非常极致的一个水平。因为court force和AME的那个水平，我当时看到的时候，其实我是我我甚至怀疑自己是眼花了。因为那个水平其实很多时候已经不是我们能想象的。对于当下LM或者说当下AI的一个期待，我觉得他昨天晚上的发布一定程度上还是超出我的预期的。Open I其实很在急于证明自己的技术其实还是要有一个断崖式的领先。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:03",
      "text": "我觉得他暂时是做到了。但他过去其实也有一些决策上的失误。就是我觉得他对于coding能力在过去半年里面，其实一定程度上其实落后来说，是因为SONY这个模型的出圈，一定程度上就是coding给它带来的。但我相信我感觉今天其实已经意识到了，coding这个赛道还是非常的重要。所以说它用O这个系列重新的把大家的视野拉回到，我可以通过infant time skin，然后我可以通过更strong的model，把coding这件事情做到非常的极致。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:33",
      "text": "包括其实o one有一个细节，就是o one其实当时list的时候，在所谓bench上的分数其实不是非常的理想。然后大家其实有在猜想说，他其实当时也没有太多的精力去投入到这种比较真实的这样的一个best mark上面去。但今天all three其实昨天晚上已经看到星耀，应该也会对这个东西感觉到有一些震惊。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:55",
      "text": "我觉得70分确实在半年前我们是想都不敢想的一个水平。我记得半年前在核心要讨论的时候，我们当时还在预测。可能当时觉得做到四五十分已经非常。你说的是这个sweet bench是吧？对对对，那今天其实他是直接通过这样的方式做到70分，那就证明其实他这条技术路线是非常的OK的。但其实给我们的一些启示就是说，我们还是要对于一些关键的技术，还是要更能坚持一些。这种关键技术的迭代会带来一个断崖式的一个performance的提升。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:25",
      "text": "这个其实是我们对基础模型最大的期待。老实讲，大家如果只是期待技术模型在某些task上面涨个1到2分或者15分，其实大家都已经不是很有体感了。但如果说你说你呈现一种新的形态，然后能让某些task突然抱着20分、30分，那我相信无论是对research还是对应用，其实都是一个震撼。也就是说flash model的潜力我觉得还没有被完全的挖掘。我们还可以期待未来的半年，甚至未来两年，整个在智能的这个topic下面还会有更大的进步。",
      "speaker": "发言人3"
    },
    {
      "time": "01:21:00",
      "text": "这个我好奇一下，因为其实我们之前看到如果只是就这coding这个能力来看的话，就像你提到的，甚至包括开源的模型，包括你们做的这coding的模型。其实在coding本身能力上甚至也不输于跟这个GPT系列模型，其实差距其实也没有那么大。我们看到欧斯瑞跟o one有这么大的一个跨越，你觉得它是一个o one这条路线的一个延续。比如说更多的数据，更多的computer，还是你觉得有可能做了有什么比较大的一个技术的一个突破。",
      "speaker": "发言人4"
    },
    {
      "time": "01:21:31",
      "text": "或者改变吗？我觉得还是整体就是把IO做work。之前我们其实无论是开放的数据，还是说在追赶的大部分公司，我觉得会受限info或者说受限一些数据上的制约。我们其实在IL上面的，就是在limit阶段的这个技术，其实相对来说和他们还是有一些差距的。我觉得像O一和O斯瑞他们一定程度上还是做到了说我在lemon的阶段可以去做一些online的探索，然后往来的学习，然后再结合log sort，然后整体就可以呈现出一个非常完备的一个推理的模型。对，这个我觉得还是相当的酷的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:22:09",
      "text": "这个你可以展开讲一下。因为有时候有一些观点就觉得说，所有这些逻辑能力提升，不就是更多数据，更多的compute，更多计算的暴力美学东西。好像变成了一个资源的问题。那你觉得说对于资源之外，我们还有哪一些可能我们低估了一些能力。然后另外一个就是你刚才提到这个alignment这一块。为什么alignment这一块在提升coding能力，或者说在one这条路线上为什么会特别的重要？也可以跟大家分享一下。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:36",
      "text": "我有一个观点就是因为伊利亚在europe es其实说预训练要结束了。然后我的观点其实说训练对于伊利亚来说可能要结束了，但对于我们还很远。其实在Operating上，我认为还有一段的空间需要我们去追赶。无论是token的数量还是质量，还是说我们对于model size或者model skating的这样的一些探索。我觉得今天开放的模型或者追赶者的模型，一定程度上还有很多未知的东西没有去搞明白。如果从这个角度来讲的话，其实OKI今天如果说假设说伊利亚看到的那个模型就是open I最强的pretrail model的话。因为open I其实做pretrail提前了很久，要比我们领先3到4年，有更多训，非常大模型的一些经验，包括他对数据的收集，然后很多数据的整理，其实他都非常有经验。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:28",
      "text": "如果说在当下的阶段，open I的pretrail ing已经做到一个相对来说饱满的位置的话，那我觉得他们在element上的领先要相比我们来说会更多。因为一定程度上element的进步会bottle到你的base model上面。也就是说你的pressure如果做的不是非常好的情况下，你在上面做element其实有时候会让你的上限，因为它pressure决定了你element的上限。所以说我当我们现在没有一个更好的pressure model的时候，然后你想通完全通过lemon去追赶open I其实是非常的难的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:01",
      "text": "所以说我的第一个观点是说，我们今天的拥有的pressure model还有进步的空间。大家其实可以期待一下queen 3能不能会更加的好吧。然后如果说当你有了一个足够好的present model的时候，我觉得差距可能就会体现在element上。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:18",
      "text": "而为什么element对coding是重要的呢？我们做通用模型的角度，其实是你期待和人类去对齐。但其实你从做coding model的角度来说，你期待最终的model其实要跟你的开发的环境或者cuter去对齐。就是你你你的目标首要的目标是说我写的代码能够通过我环境的所有的测试或者实现我想要的功能。这个SIGNW其实相比于我人类给一个我是否喜欢的这个SI nal需要廉价非常多，那就代表着你其实有一个很好的一个rubs的role model，可以去帮助你去做element。从这个角度，我觉得就是从coding上去探索element的一个技术的发展，或者说一些技术的深度非常的合适的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:25:01",
      "text": "另外一个方向可能就是max。因为max其实也有很多这种可以直接通过答案来去校验encoding的魅力。更多的是说我们不仅仅coding model可以只做这个竞赛级别的编程题，对吧？它还可以去解决一些真实的一些软件开发中的问题。好，无论是去解决竞赛题，还是解决软件开发中的真实问题，你最终的目标还是我的模型能够跟我的环境去完美的对齐。",
      "speaker": "发言人3"
    },
    {
      "time": "01:25:25",
      "text": "他能够知道我当前处在什么样的状态，然后我要给一个什么样的response，可以通过我最终的那个执行器的校验。这样的话其实模型就会具备一种非常智能的感觉。就哪怕说我中间的一些代码的风格的偏好没有那么的好。但是我只要能够最终的做对通过所有的单元测试，那你其实一定程度上是可以被用户所接受的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:25:49",
      "text": "然后我其实是觉得欧欧斯维这样的形态在gold agent上其实非常适用的。因为在gold agent这样的一个任务下，大家是愿意花时间去等待的。比如说我们去提交一个issue，我其实是愿意花一天让让AI去做大量的推理，最终只要帮我解决问题就OK了。从这个角度，我觉得你在function的这个赛道上去投入inference time的computing其实非常划算的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:13",
      "text": "然后第三个就是说培训很重要，然后element在coding也很重要。整体我们对于智能的探索，其实从coding可以泛化到更大的reasoning，最终到整个digital agent的一个泛化。也就是说比如说computer use，我觉得也是非常好的方向。再往后的话，其实你是希望从code agent然后到digital agent，到最终未来的那个physical agent，你其实是有这样一个不断递进的一个关系可以去做的对，这个其实是我觉得我们要在coding model或者是code能力上投入更多的一个原因，就是它是未来两个比较basic的一个东西。所以说从这个角度，我觉得我们还有空间，然后也有很多值得去玩，然后值得去探索的事情去做。",
      "speaker": "发言人3"
    },
    {
      "time": "01:26:57",
      "text": "咱们刚才刚好聊到了math跟coding这两个专项模型。然后现在大家肯定在hung face都看见就是QDFQ，就是千问QWQ questions现在非常火。但是我们会发现，比如说一些其他的研究机构或者公司，他们比如在做reason模型的时候，切入点可能先做一个基于matt或者这个coding方向的一个reasoning模型。但我看到咱们的那个queen的question，它的foundation，因为我们其实是通用的这个2.5 32b struct甚至都不是based。这个是有怎样的一个考虑吗？",
      "speaker": "发言人6"
    },
    {
      "time": "01:27:26",
      "text": "当时我们做个WQ是想能够先给大家一个好的reading ing的一个model，它不是一个最终版。所以说我们当时在rush这个review版本的时候，我们是希望能够兼顾code的math和reasoning的，所以最终就选择了通用的，并不代表说我去基于专项模型不一定做的没有通通好。这个我们其实也没有开案过。比如说我们在当时的一个time下，我们希望能够在有限的bucket上给一个更全面的模型。因为你这样可以去inspire更多的人去参与进来。但是我觉得未来其实我们还是会去探索很多这种更垂类的这种reason的模型，我觉得也相当有价值的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:04",
      "text": "了解。其实刚才你说到第二点，我觉得非常有意思。就是包括讲到coding and matt和computer use reasoning，就这几件事儿我们能给到他有很强的关联性。但同时正好也都是你在做这几个方向了，你觉得他们之间到底能否形成一种闭环？刚才也讲到了一个递进的一个关系，我在想就是在咱们探索过程中，他们会不会能形成一种把我们带向AGI的一个自迭代的一个闭环。你觉得这是有可能的吗？",
      "speaker": "发言人6"
    },
    {
      "time": "01:28:28",
      "text": "我觉得非常有可能。如果让我划分的话，我觉得首先code和mass其实是可以属于reasoning这个范畴里的。它是一个更high level的一个任务，然后它也非常的难。然后你code mx其实就是你未来做gita agent一个基础，或者说reading模型是一个做digital agent基础。Agent大家对它的期待肯定是智能，然后这个智能其实一定程度上就是要体现出reasoning的能力。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:53",
      "text": "一旦这个agent的这个能力OK的话，就像我一开始就是我们博哥一开始想的，就是我其实很希望能够看到这个agent的自我进化这样的一个自己的过程的。就是他真正可以在世界里面给自己收集数据，吧？然后自己去写自己的training代码，自己去评估，然后就形成闭环。然后我就不断的去把所有的能力再去提升。就是我觉得未来的这个online learning一定要reasoning，一定是online learning的一个基础。就是你未来希望model可以在真实世界里面自己学习，或者说它成为一个真正能够自我迭代的model，它一定是一个具备reasoning能力的一个model。所以我觉得应该是先递进，然后慢慢它就可以循环起来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:35",
      "text": "再回到o three这个模型本身，我们可以看到奥斯利在解决很有挑战，甚至是大部分的人类都根本无法解决的编程和数学的问题上，这些benchmark已经有非常惊人的表现，不过在真实的环境中，很多时候我们要解决的问题本身并不是特别的难。比如说做一个网站，就是现在我们看到他让dav去做的一些事情。但是其实这些工作需要通过在真实世界中多步的推理假设，结合这个真实世界中的信息和工具来执行和验证，最后才找到解决方案。而并不是说这个问题，这个任务本身是一个世界级的难题。我好奇在这种完整的完成一个真实世界的任务的能力，和这个o three目前展示出来的解非常难的问题的能力之间是怎么样的关系，有多少是一个相通的能力？要解决真实世界中的问题，基于o three可能还需要做什么？比如说是更多的数据，不同的训练方法，或者说。可能这个泛化性还需要怎么样去实现呢？",
      "speaker": "发言人4"
    },
    {
      "time": "01:30:37",
      "text": "首先我觉得O系列这个模型在解决数学和编程问题的时候，其实主要展现了两个非常核心的能力。第一个就是之前大模型具备，但其实做的没有那么强大的逻辑推理能力。就是O系列这个模型它基于一个明确的问题描述，它可以构建出一个非常强大的思维过程。他把复杂的需求能够拆解得非常好转，换成一个又一个的逻辑单元。那么在这一个每一个逻辑单元里面，它又具备一定的计算和写代码的能力。所以在这种计算的场景下，能够给出非常高准确率的答案。",
      "speaker": "发言人3"
    },
    {
      "time": "01:31:10",
      "text": "第二个就是模型还展现出强大的方法总结和思维归纳的能力。他能够从自己的训练数据中总结出一种复杂的思维模式。比如说他知道什么时候应该去反思，什么时候应该跳出当前的思维继续往前推进，这种思维模式是我觉得他面对没有见过的这种难题的泛化的一个保障。但是在真实的世界中，我们面对的环境和需求其实是不容易被定义或者形式化的。模型需要在推理的基础上还具备对这个世界的认知。",
      "speaker": "发言人3"
    },
    {
      "time": "01:31:42",
      "text": "所以我觉得欧系列的模型主要还是在一些好定义的场景下验证了核心的技术，对于未来真实世界的任务的泛化还有一些路要走，比如说我们可能需要强化模型在这个模糊的环境中的一些适应能力，怎么样能够把它在代码或者数学上展现出的这种思维方式泛化到更多的场景，并且保证不产生其他的影响。实现这个目标，我觉得最难的还是怎么样在这些开放的环境下定义反馈。因为今天只要你有廉价的持续的反馈模型，就可以不断的提升自己。",
      "speaker": "发言人3"
    },
    {
      "time": "01:32:14",
      "text": "另外我们还看到欧斯瑞其实一个能力是说，他已经可以解决一些在他的知识库中也没有遇到的问题。比如说像这个coding force，还有这个arc AGI里边的很多问题其实并没有在知识库里边。另外一个我们对于AI的一个最终的期望之一，就是实现这个AI researcher，就是AI研究员来解决一些现在人类也还在研究，也还在探索的未知问题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:32:38",
      "text": "我好奇这两种能力之中又是有怎么样的异同呢？他已经可以解决这些很难的，大部分人无法解决的数学，还有coding的这些题目。跟他要真的成为我们的下一个暗影，可能不一定下一个暗影在牛顿，但至少是说很多像很多研究员这样可以去发现问题，然后提出这个research的下一个topic，然后找到一个创新性的答案。就是这两种能力之间的相关性又是怎么样？要实现起来我们可能还需要做什么呢？",
      "speaker": "发言人4"
    },
    {
      "time": "01:33:09",
      "text": "我觉得今天OS ray或许可以做到research的一部分，就是去解决那些需要排列组合解决的问题。当然这其实也非常的有价值，因为很多研究领域都需要依赖排列组合进行科学的实验。但这个排列组合不是暴力的枚举，而是有逻辑有思维的进行信息的整合、加工利用，并且二次的创新。但我们对模型的更高要求，可能是需要模型提出一个更有价值的问题，甚至是定义一个新的科学的问题。我觉得这可能是一个递进的过程，因为科学的发展其实也是从很多微小的创新积累到一个基点，等待一个能够定义新问题的人展开下一次科学浪潮。所以我觉得research可能是逻辑和创造力的结合，但对于AI来说，帮助人类定义新问题，探索未知的问题，还需要结合一个重要的维度，那就是安全。我们不能因为模型的幻觉导致它产生错误的结论，这可能是我觉得实现AI researcher最难的一部分。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:09",
      "text": "大家感慨到这个sweet bench，本来在还在辛苦追的这个swe bench，突然就突破了70%。我记得我们可能几个月前大家聊到，好像看到那个anthropic的CEO在讲，我们什么时候这个swe bench可以达到百分之七八十的时候，还说是明年下半年，结果没想到这么快就到来了。那那我好奇从一个因为我上次跟别人聊的时候也提到这个benchmark的重要性。我好奇一个是说swe bench这样的不断被刷新，它主要的提升可能来自于哪？因为它也不只是一个纯model的一个事情。另外一个就是说其实前面你也提到了这个o three在好几个benchmark上有一个非常震惊令人震惊的一个结果。可以聊一聊就是说sweet inch也在衡量一个coding agent的能力，它还有什么不足的地方？接下来我们又还需要怎么样的benching mark？",
      "speaker": "发言人4"
    },
    {
      "time": "01:34:57",
      "text": "我们前面不是还在开玩笑说是奔驰享年一岁。对，我们其实一开始是没有expect到这个进展是这么快的。但是如果考虑到max set的话，我感觉就是按照目前的这个节奏，我感觉performance YC bench应该就很快就会接近SATA rate等。比如说等到all three release，然后可能再来一两个release，可能大家真的可以把它拖延到91。但我觉得有另外一个dimension，其实是cost，就是我们现在大家是在疯狂的追求performance。但是因为我们都有一个assumption tion，就cost的未来一定会下降，但它确实一定会下降。但是我觉得比如说把bach的这个比如说刷了90%。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:32",
      "text": "现在我今天看推特上有人说好像比如说o three在解决某个问题的时候，一次花了一千多高。但我的意思是我们可能或许还需要半年到一年，能把一个一千多刀解决一个问题，变成十刀会解决一个问题。然后我觉得这也是另外一个在swedish的dimension。你就是有点类似于是一个performance cost的渠道，就是我给你一刀你能做到百分之多少。类似于我觉得这个指标在短期内我觉得应该还不会那么快的三位。并且我觉得这个指标也可能会是一个open with open source model可以赶超的一个点。我可能可以做的不是特别好，我能解决50%的问题，但是我很便宜。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:10",
      "text": "现在大家有的时候我都会用一些model router，就比如说我可以把一些简单的问题rock到一个更简单的model上去。然后把一些更复杂的，更需要深思的request rock到到这种更强大的这种reasoning model上去。我觉得这个也是一个potential的发展方向。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:26",
      "text": "然后另外一个点，我觉得我们也需要考虑go beyond like three bench。Three bench是一个非常好的测试这个agent解决github issue的问题。但是它其实忽略了我们人类在现实生活中真正需要接触到的很多问题。就包括我们现在用AI agent的方法，包括像della有这种slack immigration，他可以在slack里面跟人聊天。我们接下来可能更需要measure的就是agent在真实的公司环境下面执行end to end task的这样的能力。最近我也看到了一个新的bencher，也是grand lab的Frank的一个新的benchmark of asian company。他们其实就有点做了一个类似这样的事情，就是他们造了一个环境，那个环境里面相当于有个open source的google dock，然后相当于有一个open source的这个样子的sly可以让agent和一些模拟的人类在里面交互，然后去执行任务。我觉得这个可能是一个比较有意思的下一步next time。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:17",
      "text": "那那希望可以帮大家理解一下，就是OKC match达到了70%，剩80%。那我们怎么去理解这个百分比呢？它是否真的能够直接代表说你们可以完成你们的用户所给的所有任务中，百分之七八十他在你们的职业工作中的一个指导意义又是怎么样？",
      "speaker": "发言人4"
    },
    {
      "time": "01:37:34",
      "text": "这个问题其实问的很好，这个问题我和我之前也有讨论过挺久的。就是我们一致认为其实从20到50对于人类开发者来说，可能相当于是一个体验上的飞跃。但是因为我们现在其实也没有access到那种能够刷到八九十的model，所以我们也不确定这种体验上的飞跃是否还存在，还是只是说这个A卷变得更聪明了，我们人类需要给他更少的这样子的一个intervention。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:00",
      "text": "另外一个点其实也是一个大家有在讨论的一点，就是potential data leakage有可能agent做的越来有可能在sweet bed上大家做的越来越好。是因为当时selection sweet bed采集的那个数据已经被这些更强大的更先进的model给retrain进去了。然后通过这种instance CEO给他们，能够somewhat去把这些信息从他们的历史里面去给回忆出来。所以这个也是另外一个update的点，可能也需要大家去做一些更多follow up的这种data contamination的这样子的一种一violation和实验。我感觉就是这种data contamination的这种实验其实还是挺重要的，并且能够比较大的程度决定这种用户的实际体验能否提升。如果这个模型的能力提升是主要是来自于他们本身的能力提升，还是主要来自于他们能够从of the memory回想起来一些已有信息的这个能力提升还是不一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:56",
      "text": "感谢边缘，看你有什么补充。",
      "speaker": "发言人4"
    },
    {
      "time": "01:38:58",
      "text": "昨天晚上其实OpenAI只拿出了一个分数，他只拿出七十多的这个分数，他并没有给大家一个很震撼的一个demo，或者说一个解决真实问题的一个demo。我相信它现在还是一个很初步的版本，也就是证明说即便强如o three它应该还有很多未解决的问题。所以我说我觉得下一代benchmark应该还是更从这些真实的这些场景出发，就或多或少模型在训练的时候都会有一些问题。",
      "speaker": "发言人3"
    },
    {
      "time": "01:39:28",
      "text": "我们今天想得到一个非常完备的一个模型其实是很困难的。从过去的节点来看，我们一直认为思维bh可能是个很难的问题。但是一旦它被定义好了，他被提出了，然后它能够被evaluate了，那么open I就可以把它做到很高。甚至我觉得我们困难也可以做到很高。但是如果说还有一些我们完全不知道的泛化性上的问题，很快如果说这个模型能够被大家用起来，大家很快会发现问题。那我相信researcher就会把它总结成一个新的bad mark。然后。放出来，然后继续的合理的去评估这个model。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:01",
      "text": "所以一定程度上我回应一下莫妮卡的问题，就是说七十多分到底对于产品意味着什么？这个我觉得我们还得再等等看看看最终这个o three这个model放出来以后，它到底是什么样的一个表现。因为我如果是我的话，我有一个七十多分的three bench的一个model。我势必会做一个非常酷的一个demo来向世界证明自己。今天O3在code on上已经可以非常酷了。可能由于一些原因，比如说时间的关系，或者说model还有一些不完美的状态。昨天其实没有放出这个东西，我觉得对我来说可能是一个小小的遗憾。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:33",
      "text": "就是你觉得他们展示的那些demo还不够。",
      "speaker": "发言人4"
    },
    {
      "time": "01:40:37",
      "text": "他昨天晚上其实只展示一个demo，他让这个O写一个自己去靠all three mini的一个server，然后让大家去评估best smart的这样的一个任务。其实这个任务相比我们真实环境中去解一个真实的软件的一个艺术还是要简单一些的。我肯定期待说思锐能带给我们更多震撼的东西，对吧？比如说他从一开始就是一个很简单的东西，然后只需要几个机灵，只需要提人类贴一个一手，他就全部都解决好。我觉得整体来说，那个时候我们可能就达到了一个可用的状态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:11",
      "text": "其实你提到你看到o three的几个半去吧，你觉得非常的震撼。可以给大家简单选两个你觉得最重要的这个benchmark给大家分享一下。为什么你觉得这个benchmark上提升那么重要，那把它放到这个做一个更好的coding agent的这个领域呢？这些bencher可能还缺失一些什么样的东西？你还希望看到哪一些benchmark上的一些工作，你觉得可能在未来会有可能是下一代的这个three bench.",
      "speaker": "发言人4"
    },
    {
      "time": "01:41:37",
      "text": "就昨天open I这个o three的bash mark，我觉得three bech肯定是一个很impressive。因为之前他o one其实稍微有一些翻车，在这个任务上。第二个就是go forces，它其实能够做到这个水平的话，其实就非常的震撼。震撼的点在于说co found现在还没有特别标准化的bha k评估，但COO sy其实是检验人类编程水平的一个backmarker。会在一个周期内去举办多场比赛。然后你需要这个比赛去算一个rank，就会有一个分数。其实你就相当于说要跟人类去同台竞技，去写一些编程的问题，然后你能达到什么样的水平。他今天做到这个分数，其实也基本上代表着他在写一个文件级别的代码，或者说写一个解决方案的代码。他确实已经做到了非常牛的一个状态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:42:26",
      "text": "而且co forces一定程度上它是可以去缓解刚刚新尧提到这个泄露的问题的。就是因为他每周期他会都会有一些新的比赛或者新的题出现。我相信他在泛化性上应该还是会有一定的保障的。但是call我其实还是更多检验这个文件级别的一个解决方案，或者竞赛级别一个解决方案的事情。然后three batch可能已经开始有这种真实环境下的一些简单的评估了。我觉得未来的评估可能更难的，还是说需要提出更难的bash mark在更真实的条件下面，或者说在更有挑战的条件下面，看看我的表现到底是怎么样的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:02",
      "text": "我觉得对于未来benchmark期待或者说open I选的这几个benchmark，其实都有几个准则。第一，它足够的chAllenge，或者说对于过去的模型来说它足够的chAllenge。第二就是它也考虑到了它需要有一些能够动态更新的这样的一个机制。比如说live go bench也是一个蛮好的一个best mark，live call bench要比call force y更简单一些。LQ base它是从lit co de的周赛里面去抓一些题出来去评测模型。所以我觉得对于未来的bash mark能够动态的更新也非常的重要。因为它能够真正的去帮你去evaluate你的真实模型的泛化性是怎么样的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:35",
      "text": "然后第三个就是其实我刚才选的这些基本上还是一些好验证的一些task。这也是大家的推测。就是他目前的这个技术路线可能就非常要去依赖一些廉价的signal去做到这么好的效果。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:49",
      "text": "可能我们还不知道说在coding math这些能力上的提升，如果要把它放在我们日常生活的一个agent的话，是不是真能够translate到这些更task？",
      "speaker": "发言人4"
    },
    {
      "time": "01:44:01",
      "text": "对，但我一直以来的观点是说，这些task一定是个basic，如果一个很strong的model在必要不充分条件，对，是必要不充分。哪怕human evo我觉得它到今天还是有价值的。就你不太可能明白evo 60分，然后你说你的模型很强，这个我也不太相信，大家其实都要做到一个basic，这也是过去的best mark的意义，它可以帮你看到一些短板，以及它能保证这个basic是70分和co forces达到这个水平，它就是证明了一个basic。但是未来真正用起来怎么样，我们还是要得等时间看一下。",
      "speaker": "发言人3"
    },
    {
      "time": "01:44:35",
      "text": "但有另外一个argument，比方说我们遇到一个很得力的秘书，对吧？一个很得力的EA executive system，他可能还未必会解数学题，也不会编程。就是这个我们是否需要一个这么强的，因为他肯定是在这两个coding math这些上做了很多数据，还有训练上的优化。那这个是不是一个必然要达到AGI的方式？如果是这样的话，那你怎么看？因为我们也看有一些硅谷的公司，像magic def，posie等等。他们的mission可能是说我就直接做一个针对coding最厉害的coding模型，而舍弃掉很多你的一些所谓的世界知识大模型里面GPT里面世界知识。这个是不是有可能真的是一个更efficient的方式达到这个所谓的AGI，那你怎么看？",
      "speaker": "发言人4"
    },
    {
      "time": "01:45:20",
      "text": "我觉得短期内应该就是走这种专家化模型还是一个相对正确的路线。包括我自己去做coder的moderation也是这个就是你可以事先排除跟你focus那些人无关的一些能力。然后真正的把某个task上面或者某种能力的上面的model效果做到一个非常极致的一个水平。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:39",
      "text": "而且大家其实未来期待的是模型在某些领域它一定要超过人类。我觉得我对这个定义其实并不是说实现像人一样的智能，而是实现人做不到的智能。比如说在coding这个赛道里面，我们能不能期待模型写出的代码要比人写出的代码在run time的时候效率更高。这个其实是非常有意思的一个top。因为你要知道在真实软件里面，效率其实是一个很重要的事情。有很多专门的软件咨询公司，就是帮别人去解决你的整个system的效率问题的那如果说未来模型在某些task上面它能够超越人类，那我相信整个AJI它还是会向一个新的台阶去迈进。就是我我们能期待模型做到人做不到的事情，你在某些特殊的上面就会做得更加的好。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:26",
      "text": "我觉得专业模型至少在今天来看还是非常有价值的，还是一个探索边界的一个过程。如果说我们真的能够reach到一个边界的话，我们再把它scale到更多的任务上面，这个一定是make sense的。如果我们当下没有精力或者说没有那么多资源，然后bucket是有限的那我们可以先focus一些任务，你去探索data对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:47",
      "text": "你去探索技术，然后去探索最好的实现的方案。对我觉得这个逻辑一定是讲得通的。所以我觉得在科技赛道上，单独现在做一个coder是一个很必要的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:57",
      "text": "但是我们也可以期待这个coder，比如说说能够涌现出一些其他的能力。比如包括我们可能特别期待coder，可能golding和MaaS是不是互补的，是不是有争议的对，我们可能可以把这个scope稍微扩的大一些。比如说我们现在可能只专注coding，然后coding做完我们可能要专注所有reason的问题。而今的问题解决好了，我们再把它变成一个通用。那你如果更长远的角度来说，我其实还是挺期待有一个通用AGI的模型的，就是它什么能力都很强。就提到你那个秘书的观点，其实你也不会拒绝你的秘书什么都会对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:47:33",
      "text": "对，这个的确实在工种的区分，可能就是来自于我们人类自身能力的一个局限。我看你们有用那个就是舜宇他们前段时间提出那个套bench，你们有用吗？",
      "speaker": "发言人4"
    },
    {
      "time": "01:47:45",
      "text": "对，我们暂时还没来得及看，但是后面应该都会整合进来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:47:50",
      "text": "信阳的你们你们有你们在实践中有帮助吗？",
      "speaker": "发言人4"
    },
    {
      "time": "01:47:54",
      "text": "我们其实现在主要的focus还是在c bench上。因为我们现在的cus其实是非常的简单，就是我们试图让open hands能帮我们解决更多的issue。所以短期我们还是fox在这个问题。但是从中长期我们会更关心，比如说这个agent如何和人类交互，然后包括这个agent如何和其他的这样子的browser和其他各种integration进行交互。所以到那个时候，我觉得我们也会expand我们的HR这个list。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:21",
      "text": "明白，好的，我们前面聊了很多很细节的一些东西。我相信对于关注这个领域同学应该能够听得出这里面有非常多的干货。我好奇就是除了今天我们所讨论到的，你们觉得coding agent的这个领域，你觉得今年还有哪些比较重要的事件？我们刚才还没有聊到，但是你个人觉得比较值得关注。",
      "speaker": "发言人4"
    },
    {
      "time": "01:48:40",
      "text": "其实我觉得今年涌现的很多公司，大家在front end上的进展是蛮好。我觉得写前端代码这件事情让coder来做确实他很擅长。因为前端很多今天的现代的前端工具，其实工具链也很完善。",
      "speaker": "发言人3"
    },
    {
      "time": "01:48:57",
      "text": "前端任务一定程度上有点像一个很小的一个planning的任务。比如说你画一个页，我要在什么地方上面去摆什么，然后我的数据流是什么样子的。我觉得在这个场景下面做前端这件事情，我其实还挺答应的。而且前端对于这个普通的用户的感知也会非常强我比较欣赏之前看到一个文章，他说其实不是所有人都需要会写代码，对吧？但是每个人需要用代码的需求会更广泛。比如说我作为一个不会写代码的人我想做一个个人的网页，然后想做一个自己的APP，想做一个什么样的东西。其实一定程度上来说，大家最先想到的是我先要有一个前端来去展示我要做一个什么样的东西。我觉得前端可能是一个挺好的一个切入点。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:41",
      "text": "对于code agent来说，包括David其实在release的时候他也highlight的这一点，就是他们在前端任务上可能会做得更好。在一定程度上我觉得也是他们看准了这个方向的需求是最强烈的，技术上面也是更容易实现的。就相比于后端的这个复杂的技术栈来说的话，现在的前端其实相对已经慢慢的去走向统一了。一旦一个技术走向统一的时候，它就是AI会擅长的时候。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:06",
      "text": "我觉得你说的这一点非常好，或者是我觉得可能这个AI也会促进一些事情的统一，对吧？比如说我觉得之前我们聊到用David的时候，一个很惊喜的事情，也是你帮你给他很多任务的时候，如果是个人类程序，有时候老板可能就直接让你自己很多事情从头写。但是你会发现AI在就精准的找到，比如说一个你自己可能都不知道它有所存在的一个模型，或者是一个开源的库上面就利用已有知识上，其实你会发现非常的可能有时候比人类更能够找到最适合的一个model，而不是什么事情都从头开始做。我觉得可能AI的选择也会进一步促进你刚才说的这种收敛。",
      "speaker": "发言人4"
    },
    {
      "time": "01:50:43",
      "text": "是的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:44",
      "text": "那信阳的信阳想到什么了吗？",
      "speaker": "发言人4"
    },
    {
      "time": "01:50:47",
      "text": "从coding agent的这个领域来说，我感觉另外一个比较重要的点就是我发现其实也一定程度上也可能是受到欧文的inspiration。我就觉得目前未来越来越多的这样的coding agent本身也在探索influence scaling的这个方案，包括我们自己也是这种方案。比如说你在solve这种githa issue的情况下，相当于是给人类的一个某种slider。就是说我想要花更多钱解决更复杂的问题。Verses我就想花一点点钱，然后解决这个问题。所以我感觉这个也是一个，比如说note for trend，就是大家需要be arrive的这种程度。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:23",
      "text": "就是我们现在发现有一些three bench的admission，他们也在试。比如说做一些best of n的这样子的一个ranking。比如说我可以让这个inside，让这个agent只生成一个solution。我可以sample好多个solution，然后再训一个更好的。比如说一个verify，一个reward model，去对这些solution进行一个we ranking。我觉得这个可也是一个比较party的方案。但是我感觉这个的难点可能就在于如何把这种sample multiple selector的这种方案和更好的user service结合起来。我觉得这也算是一个open question。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:53",
      "text": "对的，我看到你在群里边也分享了一个你们发表了一篇工作的agent company。你也提到接下来可能不只是在model上面去卷，我觉得对于整个android产品能力是会提出更高的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:52:05",
      "text": "还有包括就是现在已有的这个inference scaling，在真正遇到这种产品问题的时候，是否起效就是否能起效。比如说如果我end to end解决一个事情，涉及到玄华slack message，那这种情况下如果你同时sample都在13岁，然后你会发现你跟A卷同时向一个群里面发了八条不一样的message。就相当于我们需要bridge更多的gap。这种程度上从research到产品上的这个gap。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:29",
      "text": "对的，这个agent company，这个the age company这个paper其实里面用了很多例子，我看都是open David，所以都是这个pad.",
      "speaker": "发言人4"
    },
    {
      "time": "01:52:38",
      "text": "上的对对对对，agent company其实本身就是用open hands为baseline agent进行开发的这样的一个benchmark。",
      "speaker": "发言人2"
    },
    {
      "time": "01:52:46",
      "text": "那你们提出这个bench也可以讲一下刚才我们提到的bench mark这个事情。",
      "speaker": "发言人4"
    },
    {
      "time": "01:52:50",
      "text": "对这个是france和那个grand它的lab就是lead的一个bench work。他们的主要的思路就是说我们人类开发者其实除了单纯写构造，还做很多很多的事情。比如说我们需要和同事进行沟通，我们需要真的去改代码，我们需就需要真的去执行代码。除此之外我们可能还需要比如说现实生活中我要跟别人开会，我可能还要去arrange一下meeting room，我可能还要去analyze spread shit，我可能还要帮助HR去做一些resume screening，他们的这篇paper其实核心的逻辑就是他们试图把这种在公司里面发生的这种主要的任务都囊括进这个benchmark来。让这个agent本身就相当于就像我们前面说的，从junior engineer到最后CTO这样子的一个road的转变的一个manual。所以我感觉这也是accept forward in terms of agent evaluation。",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:37",
      "text": "那你觉得这个是一个multi agent的事情，也就我们之前讨论过multi age是不是一个伪命题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:53:45",
      "text": "对，这个其实不算是location的问题，就相当于他们的这个bencher setting，就是他们用LM来熄灭的人类而已。他们有给人类各种各样的图画L然后模拟人类去给这个agent回复，然后他们给了这些被problem足够的信息，就相当于他就模拟了一个人类，如果真的被这个agent问某些问题，会进行某些回答。但是核心的目标是在测试这个agent本身的proficient agent本身在这个company架构下的能力的变化。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:13",
      "text": "所以这coding agent的出现，我们发现它不只是赋能程序员的一个问题了，还是有可能带来整个组织的一个改变。所以我在想我们以后是否还需要这个engineer，如果需要的话，又是需要怎么样不同的engineer肯定。",
      "speaker": "发言人4"
    },
    {
      "time": "01:54:26",
      "text": "我们可以看到engineering的很多工作其实会被替代。我在ChatGPT出来的时候，我一个感受就是只要你的工作中间能被总结成为简单的缝合怪的工作，就是把一个已知的东西缝合到另外一个东西上。这种复制粘贴型或者稍微修改型的工作，其实被替代速度是很快的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:54:46",
      "text": "因为现在的AI我觉得其实已经具备了很多的智能和知识。比如说AI自己写代码的能力，它是一方面。同时他比如说他知道get hub上所有的库，对吧？他知道他可以分享所有的模型，所以他其实可以不断的调用人类已有的知识去解决你的问题。因为你的问题大概率已经被人解决过了，或者已经思考过了。所以其实在这个时候，我觉得很重要的一点是说，我们怎么样让AI能够把人类已有的知识给结合起来。",
      "speaker": "发言人5"
    },
    {
      "time": "01:55:12",
      "text": "AI扮演的是一个胶水的作用，我是个复制粘贴的作用。你还完全原创写一段代码，人类从来没出现过的代码，可能还是比较难的对吧？但是我觉得大部分人，大部分工作其实都是可以被复制粘贴或者被缝合这个概念去解决的。所以在这个情况下，其实确实大家想想看自己的工作中真正的不能被缝合解决的是哪部分。",
      "speaker": "发言人5"
    },
    {
      "time": "01:55:32",
      "text": "然后我现在想另外一个问题，其实简单来讲，David你就你可以以低于minimum位置的价格无限的请实习生对吧？然后这个实习生他其实会不断的进化，他的能力会越强。他可能从实习生变成了像现在所有的正式员工一样。所以这个给每个人有一个很大的挑战，就是说你怎么学会当一个老板。大部分人其实是有一个老板的对吧？可能很多人就没有当过老板或者当过管理者。但是这个时候你怎么样指挥管理、训练AI，可能会变成每个人都要去思考的事情。",
      "speaker": "发言人5"
    },
    {
      "time": "01:56:01",
      "text": "这个其实对于我们整个教育都会是很大的一个挑战。因为现在的这个教育其实基本上还是处在一个过去培养产业工人的思路。就是你去学习一门技能学习，怎么去执行一件事情。然后你毕业了之后，你要去干这件事情来，然后干到你退休。",
      "speaker": "发言人5"
    },
    {
      "time": "01:56:17",
      "text": "但是我们首先发现这个世界变化很快，对吧？所以我们之前学的技能可能后来没用了。现在进一步的发现，可能执行的那一部分逐渐的都可以被他被AI完成的时候，那你后来变得真正重要的工作是提出好的问题。在这个时候，其实对我们每个人职业上的挑战或者说说的不好听是挑战，说的好听一点是要进步的空间，就变得会很大。所以我觉得这个其实是现在可能年轻人他要面对的一个非常重要的一个思考的问题。",
      "speaker": "发言人5"
    },
    {
      "time": "01:56:45",
      "text": "非常感谢雨思，我就给我们更宽广这个思路，我也就好好听听在座几位，你们是自己程序员，同时就是在做agent的。你们对于agent未来engineer的这个需求，以及对于未来组织的影响又怎么样的理解。我觉得。",
      "speaker": "发言人4"
    },
    {
      "time": "01:57:00",
      "text": "雨森说的就是非常正确的一个方向。其实所有的程序员都会慢慢的变成更像资本家，或者更像管理者，去控制agent或者控制这个AI去做事情。其实我举一个非常具体的例子，就是我有一个IOI金牌的朋友，写代码非常强，然后他觉得cursor就不太好用。因为他觉得curse r有时候做事情写了这个事情不太work，他就用了两下就放弃了。但我就觉得科学非常好用，因为我自己写的代码可能还没有cursor好，然后我就会比较有耐心，我就慢慢的去调教他，让他去写出正确的代码，我就会成为更好的用AI的人。所以我觉得随着第一是大家越来越发现AI的价值，慢慢会变得越来越会用AI。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:41",
      "text": "第二就是新一代的年轻人，他们是跟随着这些AI工具在长大的。他们可能自己写的代码还没有他们用AI写的代码多。他们用AI的形态会越来越接近这个资本家，就是控制这个A的去做事情，越来越像一个CEO，越来越像一个manager。他就不需要去worry about太多的detail了，因为这样是更productive。包括agent的设计也会越来越像一个给公司CEO设计的一个产品，而不是给一个程序员设计的产品。我是这么想的，就是一定会越来越越来越往那个方向发展。因为这个是更高效的一个形态。而具体的写代码的工作会越来越不太需要人去考虑这个问题。人需要考虑的是更creative，更planning，到底要做什么什么是product market fed去完成创业的整个flow的中间的部分agent或者AI负责的是具体的实行了部分。",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:30",
      "text": "那你觉得说这个对于以后程序员需要怎么样的能力？我们去招一个程序员，我们还希望他去完成什么样的任务？对于程序员整个career pass的培养和教育会产生怎么样的影响呢？你觉得我会。",
      "speaker": "发言人4"
    },
    {
      "time": "01:58:44",
      "text": "更喜欢更像方面的程序员，就是他会有更多的产品的思维，他知道什么样的事情是正确的视角，然后通过数据去知道这个事情它到底是好还是不好。比如说我做一个feature，其实对于一个产品的目标是你做一个feature，你知道这事好还是不好，然后再回来再再去改，然后做的部分会被人取代很多。我如果现在想要一个定义，一个好的程序员，我觉得会是更有产品思维，更像一个founder能够去借助AI完成这整个流程，而不是只是做把这个Fisher e做出来这件事儿，是一个更overall的一个能力，我觉得非常的重要。就是一个好的founder会是一个100X的程序员。",
      "speaker": "发言人1"
    },
    {
      "time": "01:59:27",
      "text": "这个问题的话可能我个人相对乐观一点。我觉得随着coding agent的不断强大，人类其实也会进化。因为每一次的科技革命其实都带来了巨大的生产力。但过去的历史告诉我们，其实每一次的科技革命都让人变得其实是更能focus更有创造性价值的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:59:47",
      "text": "上面的。我觉得未来其实我们会慢慢的把很多软件工程开发中很多冗余的工作交给AI去做。然后人类可以解放出在写代码这件事情上需要投入的时间精力，然后去想更多的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "02:00:02",
      "text": "其实从另一个角度来讲，其实代码也是AI内容生产的一环。就是今天的model其实它非常的有想象力。就过去人类的工程师，其实大家都会去走专家的路线。比如说你是一个前端工程师，你就会对前端的技术栈非常的了解。然后你是一个后端的工程师，然后你就对后端非常了解。哪怕是在一个方向上面，其实大家对于不同的技术其实也有不同的偏好。但AI它可以学更多的code token。其实它对于整个的代码世界，它是有很好的全局观的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:00:33",
      "text": "也就是说我觉得未来代码其实也是AIGC的一环，就是它可以创造出更有想象力的东西来。这些东西可能是我们今天人类的程序员，然后人类的产品经理都想象不到的事情。如果他能做到这件事情的话，我相信就是未来人类和这个AI程序员的这样的一个共生的关系，其实他会非常的好。既可以合作，然后也可以去听对方的意见，然后不断的去做出更有意思的事情。我对未来其实抱有很美好的幻想。",
      "speaker": "发言人3"
    },
    {
      "time": "02:01:03",
      "text": "我觉得按照这个进化速度，这可能不是幻想。因为刚才信号已经说了，他们都已经能够让他们的agent成为他们整个cobs的最active的controller之一。那我就在想，如果比如说过两年以后，如果我在两年或者三年之后再来成立一家公司，那可能我去在想说我招人需要招什么样的团队？我到底先招agent然后再想需要补什么样的，还是说我像现在一样，还是先招人，然后agent去补足他能力。我觉得对于就像甘雨森说的，对于整个组织的构架，甚至以前的软件是把组织里面人聚合起来了。现在也许我们都需要不同的软件把人给聚合起来，我觉得这个的确会有可能真的会有非常fundamental的一个影响。我也听听信谣，尤其是你们自己已经在内部用上agent你是怎么看这个问题的？给你们的组织带来哪些变化？",
      "speaker": "发言人4"
    },
    {
      "time": "02:01:51",
      "text": "我觉得现在最直观的一个感受就是我们对于新feature和新工作的这种感受是完全不一样的。就是以前我们可能需要考虑OK，我需要作为这个feature，我们可能需要allocate多少时间，可能需要考虑一下。比如说公司专门做前端的人，他有没有时间，比如说这个priority高不高，是不是要排进他的task to do list里面去，是不是两个月后才能看到这个feature。但是现在在当这种a think类型的这种coding agent已经慢慢的走向现实的时候。就像前面宇森说的，我们能做多少，已经不再受到我们自己能力所限制，限制我们最终的就是想象力。世界上的问题只有两种，一种问题A减能解决，一种问题A减解决不了。我们agent能解决的问题，我想出来让他去做就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:02:31",
      "text": "就包括像你前面说的未来公司的形态，其实像我们社区里面，因为我们整个code base是开源的。所以其实不仅我们公司内部在用，包括我们现在的那个beta也有上百的用户在日常使用我们这样子的beta。我们community就有一个很有意思的一位star founder，他其实就没有招多少程序员。然后他就是把那个open hand做成了一个resolve，放在他自己的reporter里面。听他说他就是有的时候会直接连续写20个1宿需要加20个feature，然后同时把open head打开，然后open and的同时去执行。可能里面有十个有五个能work，但是对他来说这不重要。因为他想要实现的就是能让agent去帮他并行实验。所以当时他给我们提了一个最大的提醒，就是希望我们赶紧给我们快一点，这样子他可能可以启动100个agent帮他去做事。我觉得就像这个就是一个example，就是对于我们可能对于这个工作的感受会远远不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "02:03:23",
      "text": "然后就绕到了向前的李振和病人都有讨论到的一点。就是我觉得现在对于人类来说越来越重要的一件事情就是知道你需要知道自己想要什么。但是如何去实现它不一定是一个非常重要的事情。就像冰人前面说的，就是以前我们人类可能是走一个专家路线，就是说OK我对这个领域非常熟悉，我对这个领域的所有的工具我都特别了解。所以你要给我一个需要input的东西，我可以在我的领域范围内给你快速的做出来。但是现在在这个agent的领域，其实我可以秀一个我之前的example。",
      "speaker": "发言人2"
    },
    {
      "time": "02:03:54",
      "text": "对于我自己来说，我我我认为我自己是一个非常垃圾的一个前端开发者，我对前端了解可能就仅限于一个学期在学校里面上的一节课，可能有半个学期在讲这个前端rei开发。对于实际上生产环境技术前端怎么写，我是一点头绪都没有。但是我能看懂一些前端代码，因为我知道如何去编程，所以我能看懂他前端大概是在写什么逻辑。",
      "speaker": "发言人2"
    },
    {
      "time": "02:04:16",
      "text": "这个其实是今年11月份，我用open hand做了一个最早期的一个feature。我当时对他最impressive的一点是内部我们刚刚加入了一个多模态的一个能力。我当时就丢了一个open hands的这个启动界面的截图给他。然后用微信的那个箭头标了一个红色的箭头，指向了这个聊天框。然后我就直接跟open hand说，现在我们这个聊天框没有办法直接把截图拖进这个聊天框，你能不能想办法帮我再给他加一下。",
      "speaker": "发言人2"
    },
    {
      "time": "02:04:40",
      "text": "我还有另外一个feature，就是我希望比如说对我我一开始就只想到了这个feature，然后我就直接丢给open hands。结果就是to my surprise，他基本上一轮就做成了。你看他一轮就把dragon face image直接写进这个直接写进这个company里面，并且把它成功做出来。我当时就哇哦但是当时有另外一个问题，就是他比如说我们的code base，像这种code base都有像linter一样的东西。我就直接给他一个指令说我们现在code base有些检查你没过，你去fix像linter，那就fix完了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:05:09",
      "text": "然后当他修完之后，我就玩了一会儿，我说好像不对劲儿。你这个drag进去能实现了，但是你这个配色好像要work，就相当于有点类似于你在push一个小internet一样。人类更像是作为一个evaluator一样，你去验收他给你liver的东西，然后你觉得这个东西是不是和你的心意，就相当于你就像一个甲方一样的存在。",
      "speaker": "发言人2"
    },
    {
      "time": "02:05:28",
      "text": "到最后我玩了一会儿时候，突然发现了一个点，就是比如说我把这个图片drag进去了聊天框的时候，它原本是没有这个visual effects的。那么我对于人类来说，我就不知道我这个image是不是赚到了正确的地方，这个意味着是不是能真的drag进去。所以其实就是这些事情是在我想这个feature的时候，压根就没有想到的一个点。但是因为coding agent能够帮我，比如说在半个小时内甚至10分钟内就把这个飞雪实现了。然后我可以及时的去玩儿，从而可以让我去探索，比如说一个product更多的这样子的一个用户experience，去探索一个更多的这样子的一个可能性。所以我觉得这个是对我们来说，至少对我们天天在用open hand来说。",
      "speaker": "发言人2"
    },
    {
      "time": "02:06:07",
      "text": "我们越来越觉得重要的一个点就是我们不需要是前端的expert，但是我们可能需要被抖一点点前端的代码我能看懂。他在干什么，并且我们严格意义上能够知道自己想要的是什么。另外一点我觉得也是最重要的一点，就像李森前面说的，一个作为一个管理者，你需要把你的目标明确准确的一个可量化的指标去告诉这个agents。这个我觉得也是一个如何正确的去做prompting，如何正确的去布置工作。我觉得这个也是人类作为开发者未来的一个非常重要的技能。",
      "speaker": "发言人2"
    },
    {
      "time": "02:06:37",
      "text": "我好记得刚刚在你展示的过程中，我想到其实前段时间跟朋友在玩这个devon的时候，我们发现其实比如说他当时那个例子是让他做一个博客的网站。然后发现他做完了以后，他自己还知道要去test一下UI，就要自己会去写两篇文章，然后test一下整个flow。我想刚才你举这个例子不是有点像这个o one的思维。就是说他自己做完了一遍，其实与其说让你再去检查，告诉他哪里不对，也许他的这个能力更强了以后，他自己其实是可以完成整个test，然后发现问题再解决问题。",
      "speaker": "发言人4"
    },
    {
      "time": "02:07:09",
      "text": "这个过程我们当时有思考过很多这种是否要加入让agent这种主动去进行测试的这样子的一个crop。我们最后决定还是没有加，我们希望把整个possibility就expose给用户，就是让用户自己决定what's best for them。但是我感觉这个就带来另外一个痛点，就像李正前面也提到，就是用户教育对我们这一类产品就非常的重要。因为就是你作为一个用户，如果你不了解这个agents的这个能力边界的话，你有的时候根本想不到你会要去用哪些。但是就需要你去express，去告诉他。所以我感觉这个也是我们考虑AI agent的一种产品的一个limitation。我觉得也是一个值得讨论的问题。就是我们是否需要去explicit interact agent去做一下这类事情，还是说我们希望让agent去尽可能的去直接执行用户的指令，但是不要make too much sumption。",
      "speaker": "发言人2"
    },
    {
      "time": "02:07:58",
      "text": "我有个包括你刚才提到这个scope对吧？你怎么去限定它能够action的这个scope，这个不只是产品问题，不只是一个安全问题。我觉得刚跟你刚才说的拍摄跟产品设计也很重要的一个问题。你真有什么补充。",
      "speaker": "发言人4"
    },
    {
      "time": "02:08:13",
      "text": "希望刚才说了一个点，就是说如何让agent告诉用户他能做什么。这个其实在我最近也发现这件事情特别的重要。我最近在replay上加了一个agent上加了一个功能，就是让在每次replace agent做完了用户的一个feature之后，agent会suggest下一个feature是什么。或者说怎么样完善这个产品。",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:35",
      "text": "然后他这件事情特别的重要。因为从creativity方面，用户其实很多事情他们自己是想不到的。比如说他作为一个personal的notebook，他可能没有想过说我要在这个notebook上加一些sum ization。没有想过说from that其实可以加一些animation，就是加一些动画。然后我也没有想过说这个其实可以增加一些付费功能，但是这个正是AI最擅长的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:57",
      "text": "AI最擅长的就是resum去be creative，告诉你下一步能做什么。尤其是AI agent自己知道自己做了些什么，他有更多的complex完整的知道这个code base这个项目是什么。这个就形成了一个无限飞轮，就是用户跟agent的合作去build一个feature。然后做完之后agent再suggest下一个feature，然后用户再去选择下一个feature，把这个产品做得更好。这个其实就变成了一个我叫他infinite root一旦这个循环转起来了，你最后拿到的就是一个很完整的产品。这个apply to从0到1做产品，当然也要fly to生成一个pull request，就是AI指导用户跟AI去合作这样的形式。其实这个其实特别重要。这个teacher在replace上也是我上周才发布的，用户都非常喜欢这个功能。",
      "speaker": "发言人1"
    },
    {
      "time": "02:09:44",
      "text": "对，刚才大家在讲说，好像人类去指导他的时候，我就在想，我们前面不是说到这个o three，就是open ad这个o three它的在co force上的分数超过2700，而人类超过这个分数的就只有不到200个人。我觉得是不是其实在很多任务上，其实更有可能是这个agent教我们怎么做。可能最后是agent自己去识别有什么他自己还做不了的，然后他来给我们分配任务，我觉得可能甚至都是有可能的。就不一定是啊这个copilot？谁是谁的copilot能还说不定。",
      "speaker": "发言人4"
    },
    {
      "time": "02:10:15",
      "text": "其实像David这个open hands就已经是这样的一个形式了。就是说agent去做任务，然后让人类来confirm。那confirm其实就是code review和各种各样的交互。其实最后人类要做的就是confirm和这个guy，你确认他不要做什么something crazy，比如把数据库给他drop了。最后人类能做的其实主要就是这些事儿。",
      "speaker": "发言人1"
    },
    {
      "time": "02:10:36",
      "text": "我有一个观点，就是今天比如说O3和o one，其实大家都在讲inference computing。但其实人类也是可以做到influence time computing的一环的。就是无论是你给他一个很长的room，还是给他在多轮之间的一个feedback。其实你如果把它很长的一个的看成一个的response的话，其实人类的很多language，其实也是贡献到这个inference time的computing里面去了。所以说未来真的不太好说，是不是真的可能AI会主导整个planning，人类其实在给他打工也是有可能的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:11:10",
      "text": "就是顺着刚才大家说的这个，我觉得其实也有一种比较奇怪的未来。我先说另外一个例子，可能大家更感同身受一点。就比如说两年前大家可能刚开始搞这一波大模型的时候，我们经常会去review模型的输出，对吧？我会觉得这模型支持这块，然后这块觉得好严重。然后最近可能就是随着这新一波的微信模型，比如说像QDFQON之类的，我们发现比如在做这个GPQA这些benchmark时候，我真的没法review这个模型输出，我根本看不懂他在做什么，所以可能编程也会越来越多。",
      "speaker": "发言人6"
    },
    {
      "time": "02:11:38",
      "text": "很魔幻的未来就是为了AI模型写出代码，他可能只用五分钟写了，我们可能需要五个人类工程师一起review半个小时。因为这也是我最近觉得我在使用AI中的一个感受，就是AI模型的能力越来越强我到底有什么不可替代？我觉得我跟AI相比，我永远不可能替代的点是我可以坐牢，我具备极强的背锅能力。所以就是我的坐牢能力决定了我的review AI的代码。我现在基本可以跟一个AI模型做到这个one on one，对吧？我能review他写的代码，尤其像比如我们训模型前，你要是就写这个数据清洗的脚本，那我肯定要看一眼。因为我一回车可能1000美金就出去了。但是未来如果模型写的代码越来复杂，越来越多，我可能会招五个不同的工程师，而且只有一个AI模型五分钟写出来的代码，所以也许程序也不会实验。",
      "speaker": "发言人6"
    },
    {
      "time": "02:12:19",
      "text": "既然我们重新审视这个人和AI的关系，那我觉得就到security这个问题，为什么大家那么重视？确实有原因。对他就可以去选择AI可以选择我要跟你去隐藏我做哪些事情，他不用完全披露给你，对吧？就好像o one OC他也不用把他整个脸Q给你一样。",
      "speaker": "发言人4"
    },
    {
      "time": "02:12:36",
      "text": "对，其实刚刚这个讨论的那个点让我想到就是像OpenAI他们有一些早期的research on scalable oversight，包括weak to strong transparent。他们其实就很早期就是在考虑这一点，就是当这个模型变得越来越强，我们人类用来review这个code的时间就是越来越长的这种情况下。从另外一个角度来说，其实我觉得AI agent本身也可以帮助我们review代码。一定程度上来说，你可以让比如说一个agent写，甚至可以让两个agents进行互相debate，去研究这个code究竟写了什么。然后最后人类就像dick前面说的，人类只需要最后盖个章这样的事情。我觉得从背锅这个角度来说，人类是绝对人类工程师是绝对会消失的，只不过这个角色就变了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:13:16",
      "text": "对对对，我觉得这个的确。我在想说，如果要是真的要实现我们刚所希望这个未来的他能够完成更加复杂。因为现在我们对他的定义还是一个junior engineer，包括David也是这么定义的。刚才新瑶所展示的几个任务起来，也是我们给一个初级的工程师做事情。你们觉得说要让他实现像我们刚才所期望的这个未来，甚至成为一个组织里边这个coding的主力，你们觉得还有哪一些你觉得需要去提升的？",
      "speaker": "发言人4"
    },
    {
      "time": "02:13:44",
      "text": "第一个我觉得是information的信息的来源。首先你觉得integration就是我们人类能够access到的这种所有的information channel，这个agent就必须能access store。比如说我们公司内部可能有很多各种各样的奇奇怪怪的系统，这个A也必须都i have access。比如说我们人类有各种各样，比如说我们人类用slack去进行沟通，那么agent本身也需要have access to slack。我觉得这个是agent能够变得更加独立的。比如说从一个junior engineer变成一个singer engineer。这个road转换的一个最重要的一个点就是他能接受到的信息必须和人类是一模一样的，它和人类没有一个特别大的信息差。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:20",
      "text": "然后我觉得另外一个点，就是更考虑在这个model本身的能力上。比如说model本身的planning，model本身的从error中去进行recover的能力。还有另外一个点，我觉得非常重要的一个点就是proactive的能力。就比如说一个高级工程师，我有个大的目标我想要实现。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:37",
      "text": "我们第一件事情做的不是就是看看代码，埋头开始写代码，随便选一个选型开始写代码。而是我们会根据公司现有的架构去review遍公司现有的架构。去比如说提出几个解决方案。比如说方案A有哪些优劣之处，方案B有哪些优劣之处，方案C有哪些优劣之处。以及这种方案在后续维护的时候会产生的，比如说各种各样的consequence。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:58",
      "text": "所以产生的一些cost profile，像我觉得成为一个senior engineer，就是你可以放让他放心去做一件事情的前提，就是这个agent会在适当的时候去问你这些非常关键的第三人DC sion。比如会CEO这些非常关键的第3ND decision，像open hands，像cloud。我觉得他现在已经初步有一些这样子的能力。就是有的时候我会让他写一个东西，然后他会给我提多个方案，让我选一个方案，然后他会向我建议某个方案。但是我觉得这个能力必须要，比如说做的非常强最重要的一点就是确保这个agent不会在我们未授权给他的情况下去做一些我们并没有approve他去做的事情。我觉得这个是另外一个点，是涉及在more model capability里面的点。剩下的model其他的capability，我觉得像我们的O，其实已经不是缺乏而为的事情了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:15:42",
      "text": "我完全不担心model的capture，因为我相信这个大家一定会把它推上去的。从我的角度，我觉得最重要的是一个feedback look，就是我们要给agent一个正确的signal，让他去执行。比如说我们今天在做产品的时候，我们是怎么去验证我们做的到底对不对的。我们是首先实现这个产品，然后起一个实验，通过实验的signal去make decision，我们到底这个是好的还是不好的那这个signal可以是AB test，可以是一个新产品的用户的反馈，也可以是点击，也可以是test的。也pass一个test，可以是pass link whatever signal。",
      "speaker": "发言人1"
    },
    {
      "time": "02:16:19",
      "text": "为什么coding agent今天这么好，也是很强的一个原因，是因为code是一个signal特别强的一个领域。你这个code首先你要pass这个programing language的语法，然后你还有test可以pass。它是一个非常强的有signal的事情，所以AI能做好。因为AI可以自我验证，那我们给agent的signal越多，feedback越多，它的自主性就可以越强。它需要人的干涉就越少，那他能做的事情就越多，他scale能力就越强。所以我会说这个c lag是非常强的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:16:49",
      "text": "如果说我们给他足够的feed back，你可以想象他可以完成自己propose一个产品的idea，自己去做做完了之后自己做出一个MVP，自己到推特上去promote这个产品，自己去写一些文案，自己去tiktok上投广告。然后根据这个广告和这些文案的结果再收集回来，自己分析再改进。这一切几乎都不需要人类干预，理论上来说是这样的，所以我觉得set back loop是非常重要的。一旦city bag loop给的足够好，他可以做非常crazy的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "02:17:17",
      "text": "这个feedback group是一个模型能力吗？还是一个产品层？",
      "speaker": "发言人4"
    },
    {
      "time": "02:17:21",
      "text": "我觉得不是能模型能力，它其实就是一个integration的事情。就是比如说说AB testing能够让agent自己把AD test结合好，并且把AD test结果自己能拿回来。你诸如此类的，包括就是他能去推特上去发软文，去tiktok上投广告，他要把整个产品流程给他走全了。这个其实有点beyond engineer的scope了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:17:39",
      "text": "但是我觉得这个是未来的一个正确的方向。因为engineer其实他很多时候不会care这些，他只是care说我把这个事情做好。这样的话，其实他就把这个什么是正确的事情的decision，交给了公司里的founder或者VP或者说data scientist。但其实对于agent来说，当然可以用separate agent去解决了这些decision。就是说什么是该做的，什么是不该做的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:18:01",
      "text": "但是我觉得如果你把AI作为一个整体去考虑的话，他应该是有自己的能力去make这个decision，然后再继续迭代的。因为其实这些才是ground truth，才能帮助你减少了senate。因为在这个过程中，这些数据你的用户的增长，你的产品的remember的增长，这些是非常确定的signal。你就能指导一下什么是好的，什么是不好的。人类也是这么做的，并且这也是最死掉的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:18:26",
      "text": "冰原正好聊聊从一线做模型的这个角度，你觉得我们接下来还有哪一些要攻克的地方。",
      "speaker": "发言人4"
    },
    {
      "time": "02:18:33",
      "text": "我其实觉得整个固定的未来，从模型角度上，其实能做的事情还非常的多。李臻也提到了就是有signal这个事情其实是非常的exciting，就是你一旦有了signal，你就可以非常scale去做很多事情。Coding在未来可能更多的会对element的研究要加大一些。",
      "speaker": "发言人3"
    },
    {
      "time": "02:18:54",
      "text": "我们今天的code model，其实一定程度上来说，这个世界上的代码token相对于普通的token来说，其实量不会有特别大。也就是说在training我们很有可能能够吃到很多现有人类产生了高质量的token。但是你怎么样让这些code token在最终用起来的环节上面能够更好的去服务到我们。其实在lemon上能做很多事情，从open和和一个今天最顶尖的模型来讲，我觉得在coalition上面，可能大家的包all night，一定程度上我觉得会在planning。今天我觉得很多模型的planning能力其实做的不太好，就哪怕说sonnet比如说信号刚刚讲的那个case，如果说model的planning能力非常好的，对于修改一个前端这个任务来说，就是星瑶给的那些feedback，其实他从一开始他是有可能就plan到。如果他一开始就plan到的话，他其实去实现他也是OK的。所以我个人可能觉得对于code agent来说，planning能力会是一个比较重要的一个研究的方向。听听新瑶的看法，就是我觉得对于model来说，未来是不是在planning上需要更多的投入？",
      "speaker": "发言人3"
    },
    {
      "time": "02:20:03",
      "text": "对的，其实我感觉planning这个词它囊括了很多东西。我觉得像我们这种事先考虑到这种问题，我觉得也是观点的一部分。完全认可就是这个能力是非常重要。我觉得另外一个比较重要的一个能力，可能就是从error中恢复的这个能力。但是有些观点认为可能这个也是属于finding能力的一部分。",
      "speaker": "发言人2"
    },
    {
      "time": "02:20:22",
      "text": "Planning就是像你前面说的，可能涉及到最开始它这个design可能是遇到挫折之后，如何去改变我的这样的一个strategy，去最后达到实现这个pass的一个目标。我印象里就是SONY1开始给我们一个非常impressive的事情，就包括我记得最早期的GPT4，就是你给他一个任务，然后他如果试错，试错了超过三次之后，他说OK那我试试别的方案。但是在这些model之前的那些model，如果你让他做这件事儿，然后他不停的错，然后他会不停的试，然后你永远卡到这条分支出去。我觉得这个可能也是很强planning能力的一种具体的体现。",
      "speaker": "发言人2"
    },
    {
      "time": "02:20:56",
      "text": "那要怎么样能够提升一个模型planning的能力？比如说因为我们现在都在讲这个reasoning的能力，包括我们看到O3主要的提升在coding在这个math这一方面。那这两个能力的提升是否就能够带来这个planning能力的提升呢？还是说这中间还缺什么东西吗？",
      "speaker": "发言人4"
    },
    {
      "time": "02:21:15",
      "text": "从模型的角度来讲，我觉得实现好的planning更有利的方向，还是我们要去搞更多高质量的planning的data。比如说在github上面，人类去提交一个p request，然后拆解成很多的commit。然后这些commit message其实它天然就是一个比较好的一个planning的一个process。另外的话，其实走合成数据的路线，因为你最终signal是可以很廉价的去验证整个to every是否能能work。那你其实可以去尝试合成更多make sense planning，来去增强你模型的planning能力。",
      "speaker": "发言人3"
    },
    {
      "time": "02:21:47",
      "text": "补充一点就是说对于agent产品来说，其实用户的feedback都是很强的finding的signal，就是比如说agent做了这个改动，这个功能没有实现，用户会告诉你说这个work，或者用户甚至会出之前的一个版本。然后如果你做的改动是正确的，用户会告诉你OK这是对的。那实际上你在这个过程中就收集了很多RL的signal。",
      "speaker": "发言人1"
    },
    {
      "time": "02:22:10",
      "text": "你可以想象，可以有一种摩托卡洛的推测式的方式。在未来可能的都N个概念里面去找到好的那个就根据用户的之前agent收集的用户的feedback g你可以有一个reward去评判什么是好的。然后agent可以去在sample不同的改动里面去找到那个好的，去增加自己的成功率。其实这也是一种看到planning，但是influence time planning的一种方式，但是它会越来越好。因为随着用户越来越多，他们给到的这个trace越来越多，那他的最后能够在这上面能做的事情就会越来越多。那agent就可以以更好的形式在他可能出现的几个未来中间选择那个好的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:22:50",
      "text": "是的，也就是说光是说提高reasoning能力其实还是不够的，更需要这种multi step的数据。这个可能是之前在模型训练里面还比较少的。",
      "speaker": "发言人4"
    },
    {
      "time": "02:23:00",
      "text": "对的，这个可能是你得有这个agent的产品的时候才可以获得这个数据。因为如果你思考一下，你如果让人去标注这个数据，本质上是你现在有一个一大堆代码AI做了这样的一个改动。然后让你标注这个改动好或者不好不好的话为什么不好好的话为什么好？这个标注是几乎不可能留一个没有context的人完成的。但是如果你是一个比如reply agent做用户，或者说你是devin，或者说你是open head用户，其实每天都在做这样的标注。而这个标注数据的质量是非常的高的。因为像我刚才说的这是一个motive step的一个trace。每一个用户的一个反馈，其实都可以在未来帮助我们调校A的，能让他做的更好。",
      "speaker": "发言人1"
    },
    {
      "time": "02:23:42",
      "text": "对的，那那冰远你们是在开发这个foundation model，那你觉得在这个multi step的这个数据更多是在这些agent的应用中去产生。那接下来作为foundation model公司来说，它如何去提升这一块的能力。",
      "speaker": "发言人4"
    },
    {
      "time": "02:23:56",
      "text": "其实我们从做法对这角度，我们也可以搭一些很快的一些agent让他在一个环境里面去玩。然后我们去产生很多数据去做数据上。我们从合成数据角度的话，可以一开始先用合成数据做一个one，然后未来如果应用爆发后，我们再用人类的真实的data去让它变得更加的strong，然后更加的和人类能够对齐。对我觉得这个可能是一个潜在的方向。",
      "speaker": "发言人3"
    },
    {
      "time": "02:24:21",
      "text": "明白。还有一个问题就是我们其实刚才讲的做agent这一层本身还有这个model。上次在湾区的时候，当时邀请李真来那个活动。我们其实在硅谷也看到不少的公司都在开始做所谓的这个info for AI agent。因为我觉得在国内可能大家感觉没有那么明显。但是我觉得在国外，其实即使在David这一类产品出来之前，其实我们在很多工业界已经看到了一些这种，也许不是那么完全的像coding这个领域这么智能的coding agent。但可能已经是有一部分的workflow去把它这个agent化的这种产品出现。",
      "speaker": "发言人4"
    },
    {
      "time": "02:24:55",
      "text": "所以我们在看到了一些，当这些东西从demo走向产品化的过程当中中，也诞生了很多我们所谓的agent in法的公司。其实包括比如说像一些我觉得是新一代的爬虫公司的，帮助agent更好的去阅读各种的网页。然后也包括像上次来的man GPT的leta做这个memory system，也包括像什么e to be是做这个3 box。还有包括看看有些做这个authentication就是授权，还有这个access的这种权限管理等等的那那我就好奇觉得接下来要让这个agent具备更多进production的能力。你觉得还有哪一些从研发或者开发者工具角度的一些机会？",
      "speaker": "发言人4"
    },
    {
      "time": "02:25:36",
      "text": "我觉得有很多agent的capability是一些很好的机会。比如说agent想要去访问一个网页，那agent比如说用户贴了一个API的dock，那agent怎么去读这个dog？就会有一些公司去专门做，说把这个网页转换成这个markdown适合agent读的一个格式。那这样的话，其实他的这个业务就会被像我们这样的agent的公司就直接在用，因为它非常的方便。",
      "speaker": "发言人1"
    },
    {
      "time": "02:26:06",
      "text": "这一类我会认为算是专门为agent的build的这个capability的公司。这个包括了让agent去读网页，包括了让agent去run test，包括了让agent自我去验证这一系列的capability，包括让agent去接更多的API。如果说可以提供一个服务，让agent更好的去接某一些API的话，这个也是非常valuable。这是一部分就是agent本身的capability，给它作为一种info的形式存在。",
      "speaker": "发言人1"
    },
    {
      "time": "02:26:32",
      "text": "然后另外一种就是agent的framework，那就更多的是像比如说lang graph或者说这个lama index，他们做的这些用i build的这些也是valuable的。因为agent的本身过度的过程就有很多的问题。有这个memory management，有这个execution，需要user interrupt，你需要revise memory，那很多这些东西最后一定会变成framework的形式出现。当然现在有很多的framework，最后一定会出现更多更好的这样的framework to build agent。",
      "speaker": "发言人1"
    },
    {
      "time": "02:27:03",
      "text": "然后还有一些像很经典的像prompting，包括给agent用的这个data base，可能都是一个会存在的一个info。那现在的data base都是给人delight，那给你的可能会design一个不同的API。比如你不能drop data base，你drop的时候一定要跟人讨论一下。然后这就形成了中间有一层人和agent和这个第三方的比如data base 3方怎么去进行交互，也是一个protect形态的一个问题。比如像throp c出了那个MCP，他们就是想解决这个问题，想让agent能够去以一种protocol的形式，在用户和第三方的service之间去调度。就是agent可以得到用户的confirm，然后调第三方的service。所以这也是一种中间的infrared的形态，也是一种叫communication的形态。",
      "speaker": "发言人1"
    },
    {
      "time": "02:27:51",
      "text": "所以随着这个agent越来越发展，未来会出现越来越多的这样的需求。包括像之后我说的就是跟这个dog two或者翻译，然后所有的很多需求的结合。从agent的角度可能都会rethink，可能形态都会不太一样。",
      "speaker": "发言人1"
    },
    {
      "time": "02:28:06",
      "text": "我觉得预见分享非常全面，新摇的你有什么补充吗？比如说你们现在A诊中，你们有用到什么这些辅助的infer工具。",
      "speaker": "发言人4"
    },
    {
      "time": "02:28:14",
      "text": "对的，其实我们现在接触到的这种AJ infor工具非常多，特别是这个wrong time。就是因为你要就像我们前面讨论的那个wrong time，其实是一件非常棘手的事情，因为你需要execute arbitrary ord然后现在我们知道，比如说现在市面上就像e to b这样，就有这样各种各样的这样子做runtime的产品。包括像model，run look这样子的公司，他们也都有把他们的这种第三方runtime给继承进我们的这个open source的code base。这样子对于我们用户来说有更多选择。然后对于我们这种做production scale的话，可能也会有另外一个，比如说我们自己worry free的一种方案。但是对于我们本身open source product来说，我们其实是想要做一个平衡的。就是我们希望给用户一个用户体验，就是说in bare minimum什么第三方这种infer stage都不用，就直接用我们自带的这样子的一个做法。",
      "speaker": "发言人2"
    },
    {
      "time": "02:29:05",
      "text": "我们其实有很努力做到这一点，但是包括像最近我们也遇到了一些，怎么说？就是我觉得这些英特尔公司他们本身是非常有价值的。就包括我们最近就有一些用户100个提到说我们那个browser在brose一些website的时候，他会被那种机器识别的系统给盯上。就是他会怀疑你这个browser是一个机器在control。然后这个时候你们可能需要用点点那种验证码，点一些什么奇怪的图片之类的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:29:32",
      "text": "他们就有一些这样的公司去专门负责。比如说把你这个browser给维护好，把你这个browser去，百分百保证了你的browser不会遇到这种问题。遇到这些问题是由我这个infrared来替你解决，而不是由你作为一个asia developers去做这件事情。我觉得从overall来说，这是一个很好的一个工具。对于asia developers来说，但是从另外一个角度来说，作为open source developer，我们可能会担心，如果我们直接告诉用户这是你唯一使用browser的方法，那么用户也会不开心。所以我们会需要在这个方面做一些权衡利弊。",
      "speaker": "发言人2"
    },
    {
      "time": "02:30:03",
      "text": "对我补充一点，刚刚新阳说的wrong time这一点。如果大家看这个现在市面上就面向消费者最广泛的几个agent的话，包括birds到new，包括v zero，包括replant。这三家子公司有一个共同点，就是他们在runtime或者one web container这件事上都已经做了非常多年了。Bot的母公司和rapid都是做云ID出身的。所以包括我们包括boss都是已经在如何scalable的在web起一个能够运行code的container这件事情上做了非常多的info的工作和优化。使得任何用户可以很快的起一个agent的环境runtime，很快的这样运行。这三家公司能够把agent做出来，其实都得益于这个wrong time的基础设施已经做的很好了。所以这件事其实是非常重要的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:30:51",
      "text": "作为一个投资人来说，AI应用这个领域我想大家都一直有很多争议。AI或者说AI agent的落地到底是怎么样？AI agent是否可以落地，有哪一些产品？可能最后是由模型公司来做，而不是就产品公司来做。我想这个也是很多创业者包括投资人的探索的问题。雨森你怎么去看一个AI应用或者一个AI agent的这样一个价值和投资的机会。这些想法因为David的出现是否会带来一些变化？",
      "speaker": "发言人4"
    },
    {
      "time": "02:31:19",
      "text": "对我觉得有一本书的副标题，很能够总结我的感受，就是the future is faster than you think，就未来比你想要的来得更快。其实在年初的时候，我其实对于agent的讨论，我觉得还是比较觉得比较概念型的对吧？就是大家都觉得这个agent是未来，但是到底这个A级的长啥样，以及他什么时候出来，我觉得其实那个时候整体来讲还是觉得是一个相对比较长时间的过程。我觉得这也体现了投资人对事情的预计，一般都还是不靠谱的。可能方向对了，但时间上会差很多。",
      "speaker": "发言人5"
    },
    {
      "time": "02:31:54",
      "text": "我觉得devin是给agent的产品打了一个很好的样子。他当然现在还有很多事情做不了，但是他已经把重要的几个事情就是对任务的planning的能力，然后写代码非常强的能力，使用工具的能力，以及这个能够。刚才大家可能还没有提到一个，就是说他能够在工作中不断的积累对组织的knowledge，自我学习进化的能力，然后卖按照去卖工作，不是卖工具，所以他可以对标人类的薪资。这几个特点给体现出来了。所以我觉得当一个事情有了第一个带头，那其实后面就有很多大家去改进去跟进的这个可能。",
      "speaker": "发言人5"
    },
    {
      "time": "02:32:34",
      "text": "所以我觉得如果说简单来讲，今年的其实我们看到了三个非常大的技术的进步，对吧？第一个是AI的reasoning能力大幅提高，这样让AI做planning会变得好很多，然后hallucination会小很多，这样才能做更长时间planning并且更好的去follow这个plan。那就是AI编程能力大幅提高，对吧？大家现在看color force这个o three都已经做了2700分，基本上人类最厉害的程序员的水平了，对吧？这个还会再继续提高，然后就是AI使用工具的能力。这三个东西加起来，我觉得确实就奠定了说在数字世界agent的基础。就是你想想看，如果一个工作能被总结成一个人类坐在电脑前面，通过和电脑进行交互能够完成的那这个事情我觉得在现在来看，基本上去把它逐渐的action的话，就没有什么大的问题了。所以在这个事情上面，我觉得我们在接下来会看到越来越多的agent everything，就是everything digital，对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "02:33:30",
      "text": "我们看到编程是一个，现在的David我是用下来，比如他对于数据这种文文书类的工作并不是那么擅长，但我觉得这很正常对吧？大家去做优化的方向不太一样。我们完全可以想象，既然有针对这个数据分析师的agent？有针对sales的agent，然后针对可能产品经理的agent当然我觉得最后可能不只是说人类的某一个弱会精确对应到一个，而是说可能有一些比较混合的弱。同时我觉得很有意思，就是说那agent之间怎么互动，现在比如说我我得自己去提出来，给戴维的需求。那以后是不是有可能，比如说可能是一个产品经理的agent，他在做一个产品的play，然后这个play在映射到编程的那一部分，对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "02:34:11",
      "text": "因为人本身他自己的planning的能力，提问题的能力其实相对来说也是有限的那之前我觉得大家在看到ChatGPT这样的这种你问我答的形式的时候，其实很多人都在想，我好像没有那么多问题要问AI对吧？我好像也不是每天，大部分人并不是每天要跟AI问那么多的问题。所以大家就在想怎么样能够让人类使用AI的用量多十倍多100倍，之前一种方案是说跟AI去谈恋爱？搞这种情感的东西。但是现在我们发现，其实如果说你让AI去做事情，而不是说他只是回答你的问题，那我想大家整个token usage，它这个AI的用量会大幅上涨。所以我觉得这个对于我们的整个模型的用量，算力的提升都是非常厉害的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:34:53",
      "text": "然后现在在美国其实大家谈论的非常多的一个话题就是说我们原来是卖工具，对吧？如果我要持续的使用这个工具，那我其实并没有被解放我的注意力。所以我基本上是一个工具定价的逻辑。这也是大家为什么看到David出来五百美金一个月觉得特别贵。",
      "speaker": "发言人5"
    },
    {
      "time": "02:35:10",
      "text": "因为这跟原来饭是不一样，他卖的是一个工作，其实有很多测算下来，就是开一个ACU是两美金，大概对应15分钟的时间。就是大概是8个小时的hour rate小时的薪资。大家知道在加州的minimum wage，就你在麦当劳打工的人，都是16美金1个小时，所以现在David的定价其实是低于加州minimal wage大概50%的。并且你可以非常确定的预测它的这个税率成本其实会以每年降到之前的10分之1的程度去去下降，吧？所以同样的八块钱1个小时，你雇一个David，它的能力其实在未来会不断的扩张，它的这个成本可能保持相对类似，或者甚至会有所下降。所以在这种情况下，怎么样能够让你的产品做到我卖给我，我能够把你的生产力一种工作结果的形式卖出去，而不是只是以卖工具的形式。我觉这也是大家都会去尝试进行的，属于agent的时代的这样的变现模式，所以现在可能对于这种C的base的按照这个席位收费的SaaS，其实出现了很多的质疑，对吧？就是说如果以后我卖的就是工作，那我是不是要卖这些席位，那那我可能就把工作结果卖给你就好了。",
      "speaker": "发言人5"
    },
    {
      "time": "02:36:20",
      "text": "我自己觉得，其实之前中国企业服务领域是非常难做和难投的。这个莫妮卡可能有很多切身体会下建投资企业服务的。我觉得这里边，大家都说中国为什么难做企业服务？有个很重要的原因是大家可能不太愿意为工具付费，对吧？大家喜欢的这个软件工具就该免费的。这个可能是一种整个商业环境，文化的情况可能也很难改变。",
      "speaker": "发言人5"
    },
    {
      "time": "02:36:42",
      "text": "但我在想当然，如果我们真的能够去sell work的时候，那企业服务在中国是不是也会有一些有意思的机会。因为不管怎么样，我最后是要把事儿干了，对吧？如果我真的能够让AI直接交付工作结果的话，那这个也许对一些企业来讲，他就有点像找外包公司一样。这个其实他可能是愿意付费的，只是说这个外包公司从原来的人力资源外包，变成了智力或者生产力的外包。所以是不是在AI时代，中国的生产企业服务重新又有了一些机会。",
      "speaker": "发言人5"
    },
    {
      "time": "02:37:10",
      "text": "因为AI本身来说，现在还是一个生产力大幅提高的一个技术革命，对吧？那现在大家觉得在中国可能很多时候大家都在百万想往娱乐方向去引。也就是说大家想用字节的原来的这个套路去做一家新的AI的超级公司。但我觉得字节其实做了很多事情还是偏娱乐，偏刹时间的那AI真的能帮人省时间的话，这个要中国怎么落地？所以我在想，也许企业服务这块也会有一些新的机会。",
      "speaker": "发言人5"
    },
    {
      "time": "02:37:38",
      "text": "然后我自己觉得在这个安全角度其实会有也有很多的机会。因为现在我自己感觉到，虽然我知道AI agent的能力还有很多的不足，但是人都是想偷懒的当他能够看似完成一些工作的时候，我其实很多时候就放心让他去做了。但是在当他有越来越强的代码执行能力，软件使用能力的时候，这个时候他如何保证和我的这个组织的目标和我整体的社会价值而去alive。这个其实包括说这在组织里面算力怎么分配，这些其实可能都会有很多新的挑战会出来。那这个时候针对他的安全，针对他的多个agent of strain，这些可能都会是一些之前大家没有意识到或者没有看到，但是现在所需要解决新的问题。",
      "speaker": "发言人5"
    },
    {
      "time": "02:38:22",
      "text": "所以整体来讲，我觉得demi n是一个非常好的一个让大家看到未来的例子。但是戴维本身这家公司，他肯定还有很多要去做的。我那OpenAI也好，这个也好，其实大家都在做agent的产品，所以最后鹿死谁手尚未可知，对吧？但是这个对未来的这个形态的展示，我觉得是我们从这里面可能看到最重要的一个推特位。",
      "speaker": "发言人5"
    },
    {
      "time": "02:38:44",
      "text": "对我就刚讲玉森讲的几点都非常的全面。我好奇比如说像其实我的投资人也非常关注这个团队，这个也是一个很看人的事情。你觉得要做出下一代的真正是所谓的agented workflow对吧？其实上半年的时候在红杉以及android也提倡这个agented worker。那个时候我觉得当时即使有很多号称agent的产品，大家都还是觉得非常的skeptical。我觉得就只是一些自动化的一些工具而已。那你觉得说现在就是像你刚才所说的，我们对于一个纯产品的定义跟之前也不一样了。那这个时候需要怎么样的团队来去做这样的事情呢？",
      "speaker": "发言人4"
    },
    {
      "time": "02:39:20",
      "text": "我觉得其实科sir，David这样的团队都反映了一些共同的特点，对吧？比如说他们其实都是人才密度非常高的，这个柯是应该是00后MIT的可能对吧。然后这个DF1上来就是说我们这里有十几块金牌，就是人才密度非常高。同时他们当然也很年轻，创造力和执行力都非常强。然后我觉得David其实他也是一个典型的说我既在这个技术上很厉害，我我我有很强的技术团队的能力，我得到了OpenAI这样全力支持。同时我在我要做的这个事情的工作流，就写代码这件事情本身，我也有很深度的经验和思考，就这些还是怎么把AI和这个实际工作的场景结合起来。",
      "speaker": "发言人5"
    },
    {
      "time": "02:40:00",
      "text": "因为我觉得开始也提到，在去年的时候大家都在谈说你是不是做一个AI native的产品，就要做自己的模型。那是一我觉得在那个时候，尤其在技术发展的早期，其实大家会发现产品和技术是比较耦合在一起的对吧？就是呃产品就是这个技术本身。但是其实互联网也是这样，随着技术的不断的发展，底层的技术和产品其实会解耦。现在最火的这些产品，不管是cursor David还是xi包括我们投的Monica的家的公司，其实他都不是说我要做一个自己的condition model，对吧？它其实就是建立在一个我已经定位到了一个用户所要解决问题的场景，或者叫PMF的一个的一个这样一个陈述。",
      "speaker": "发言人5"
    },
    {
      "time": "02:40:43",
      "text": "我来等待这个模型变得越来越强，直到符合我的需求。其实curse在二三年初的时候就已经出现了，对吧？但那个时候并没有那么火，因为我我觉得有个很重要的原因是因为当时的模型没有那么强，导致说curse的产品理念其实不能够完全的呈现出来。就是这个action prediction。可以说so net 3.5其实是成就了cursor，然后cursor反过来让so let 3.5变得程序所有的coding中的一个DF的选择，对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "02:41:10",
      "text": "Devin这个产品其实也是，我看devin现在主要也是调了，比如说四欧或者三代的这样应该是主要是四欧这样的API。可能在目前的这个模型能力上能发挥出agent的这样能力的模型还没有出来？就还不足够好。那么成就devin或者这样agent的形态的模型会是什么？会是谁做出来会具备什么样的特点？以及说当然如果他们俩也是个互相成就关系，agent的普及会让这样的模型变得更加重要。",
      "speaker": "发言人5"
    },
    {
      "time": "02:41:36",
      "text": "所以我觉得这里面可能我们就发现你要创业，不是说一定要训自己的模型，而是你跟模型变成一个更加共生的方式？而且在这个里面我想对于David对于这些A型的产品，它的核心竞争力很多时候都是在于怎么把模型用好，并且怎么对于用户实际的这个workflow有很深刻的了解。所以这就不是简单的说open I发一个模型，新模型就能把它给替代掉的过程，所以这里面我觉得其实对于团队对技术的理解，对场景的理解，以及去创新的去思考。",
      "speaker": "发言人5"
    },
    {
      "time": "02:42:07",
      "text": "我觉得devin在这个出来的时候，其实也是提出了一种全新的这样一个交互方式。在当时大家其实都还觉得是忽悠，对吧？觉得他这个是不是实现不了。但是我觉得他们也很好的用执行力证明来说，这个事情是可以做到的。我觉得还能够启发比如说像大家的这样的思考，这个其实非常重要的一点。",
      "speaker": "发言人5"
    },
    {
      "time": "02:42:23",
      "text": "所以回过头来想总结一下，就是说第一要有很强的人才密度，对吧？这个也在这个游戏需要探索的时候，这个人才密度要求很高。第二它需要对于技术和场景都有深刻的了解。第三执行力要很强。其实我们看到大家都不是很大的团队，然后在离得相对也没有那么长，可能几个月1年的时间内就把这样的完整的产品能够deliver，说明他的执行力是很强的。尤其是其实我们看到在像嗑sir这些其实都是在它针对的对象，其实可能就像be up copilot这样的由大公司开发的应用，对吧？那其实创业公司很重要的一点是快。我怎么样能够同样一个方向赛跑，能够跑进大公司。很多时候在创业公司反而是有机动灵活的优势的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:43:08",
      "text": "对，所以我们的确也看到这些团队，你看case是00后的团队，就David还有包括信摇的都是接近00后的这个同学。我觉得真的是一些年轻的researcher，反而他以前没有什么没有这些所谓的这种follow management的这种产品经理的经验，反而在反而推出了非常优秀的这个产品。我最后再在外面展望一下那那我最后再问一下，就是其实前面女士也简单提到了说也许这样的一个sale work，不是现在硅谷大家说以前是software as a service，现在是soft的这种cell work的这种方式。你觉得除了这个之外，你觉得在在中国看到这些A正的公司，还有你觉得还有哪些你比较期待的机会吗？你就会跟可能跟美国有哪。",
      "speaker": "发言人4"
    },
    {
      "time": "02:43:54",
      "text": "一些不一样的我觉得一般来讲，中国这种新产品的进化分为两个阶段。第一个阶段就是copy to china，对吧？因为很多时候也是看到了美国有一个或者世界上有一个新的模式出现，比如说可能下了GPT出来中国也会有这种个人的personal这种personal assistant对吧？那么我相信大家其实肯定在复刻devin，或者说在非工作里，非coding领域去复刻devin的工作会有很多。因为毕竟coding是一个程序员一般都是用最好的工具，它很难有一个什么特别国产替代的过程。当然我在信创领域应该可能会有，所以如果真的有大量程序员群体，可能他们还是愿意使用crosser，或者像使用game这样的全球范围内最佳实践的应用。但是在非coding的领域，我觉得还是那个观点，只要在数字世界能够完成任务，其实这都可以被agent逐渐的去快速解决。",
      "speaker": "发言人5"
    },
    {
      "time": "02:44:45",
      "text": "我觉得这里面不管是做出海的市场，还是做中国的市场，我觉得如果sell work这个大的前提是能成立的。我觉得可能都会有很多新的产品形态的机会，当然在中国销售可能不能行。我觉得这也是一个我非常感兴趣的话题。所以我听众朋友们有想要在中国做这个生产力agent的产品的话，我们也非常愿意去聊。因为我知道有有的投资人可能是对这个生产力是比较失望的。在中国的发展。但是我觉得现在技术和新的产品形态可能会带来新的机会。",
      "speaker": "发言人5"
    },
    {
      "time": "02:45:14",
      "text": "我们进入最后有几个快问快答的环节，准备了几个简单的问题，可以请大家快速的分享一下你心里边的这个答案。第一个问题，大家最希望看到未来一年和未来三年在这个coding agent或者说general agent的领域会发生什么。",
      "speaker": "发言人4"
    },
    {
      "time": "02:45:30",
      "text": "未来一年我觉得应该期待的就是说大家在每一个数字的领域都去尝试agent，就是agent for everything in the digital world。在这里面很多我觉得暂时可能不work，但是在有的领域可能会逐渐的变得是大家是能够用上的，我觉得这而且这里面产品形态我觉得会很百花齐放。因为当然你给了这个AI足够大的空间，对吧？你就给他工具，你给他的代码，你给他的这个planning指挥别人能力的话，那其实这个可能带来的响应风险是很大的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:46:00",
      "text": "从三年的尺度来讲，我觉得首先很难预测。因为如果按照这个精华速度下去的话，应该agent在执行很多任务的能力已经会超过99.9%的人类。那这个时候我们已经很难去想象他具体怎么去工作了。我觉得在有的场景下，但是我觉得三年的尺度上，我觉得应该会比较有大概率看到agent之间的协作，其实这会是一些带来很多全新的想象力和同时带来可能的问题对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "02:46:25",
      "text": "呃，因为其实我们之前人类大量的想法是得不到实现？经常我们遇到的像笑话一样的就是说我有一个很好的idea，但是我缺个CTO吧，然后我缺个程序员把它实现。但是当这个把想法实现出来的能力逐渐的变得不稀缺，甚至变得很便宜的时候。那这个时候有多少没有被实现的想法是有可能被实现的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:46:49",
      "text": "在美国有一个网站叫web thing，很有意思，它就是说你只要输入一个prompt，就可以生成一个prompt对应网站，对吧？他的意思就是你现在用到的软件和网站都是别人的想法做出来的。但显然这个世界上如果有个想法的全集，那现在已有的互联网只是很小的一部分，那这个还没有被发明出来的互联网是什么样的样子？",
      "speaker": "发言人5"
    },
    {
      "time": "02:47:12",
      "text": "在这个意义上来讲的话，我觉得整个人类社会创新的速度可能会大大的提高。因为重要的是想法了，对吧？执行你可以花钱买到，甚至是以越来越快的速度，越来越平的价格买到的话。那怎么样让这么多的这些想法能够得以实现？我觉得对于风险投资来讲，其实也会有很大的这样一个影响。并且现在我们给AI提出问题和任务的速度，其实也限制于我们自己的思考的速度，对吧？那如果能够实现AI agent和agent之间的相互指挥和协调，这样的话其实我们有可能去做的工作就会进一步的大很多。这样的话可能提出好的问题，提出好的思考，这种创新型的能力变成人类所独有的对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "02:47:59",
      "text": "至于说AIAI的之间怎么去使用资源分配资源，这个可能就越来越变成一个黑盒子，或者说对于大部分来讲不用去关注的要点。所以我想起有一个朋友说的说对于程序员来讲，他关注的可能更多的是cursor winner serve带来的这样生产力的提高。但是对于所谓的叫资本家或者老板来讲，想的其实可能更多的是说在这种情况下做什么事情变得很重要。然后怎么样能够只会做事情，可能David n这样的产品是变成所谓非技术这边像所谓的企业家他他最想去做的事情，这样的话我觉得对于未来的组织形态会发生很大的变化，包括我也在想，其实人类社会中为什么有所谓办公室政治，对吧？很多时候都是在做资源的分配，比如说那那其实并不是说这个人是坏人，所以他要搞政治。",
      "speaker": "发言人5"
    },
    {
      "time": "02:48:45",
      "text": "而是说他想要更多的拥有他的资源，对吧？你要有更多你的资源，所以才会有这种办公室政治，权力争斗。在企业算力，比如说有限的情况下，不同任务的agent是不是要去进行不同的任务分配？那在这个里面怎么样平衡资源，而不是说比如说可能在一个难但是不那么重要的任务上花了好多的算力，这是很容易想到的场景。这个里面其实对于组织的分工，包括组织的管理，都会产生很多的潜在的影响。所以我还是比较期待当AI之间能够互动的时候，我们的生产力其实是能够进一步compounding的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:49:20",
      "text": "我先说一个非技术层面的当然也涉及技术了。这个我还是希望它整体的成本能够下降。因为我们其实之前已经看到了，像最早GK3API出来的时候，你看第一批的产品，像比如jasper它其实都是以to b的这个形式在卖。包括像现在DVIN这500美金其实真的不便宜，而且又涉及比如说slack集成，你往往购买的决策人可能是一个都不说CL可能也是一个公司行为。那接下来比如随着这个成本的下降，我们能不能让更多的consumer或者说成员自己就能去直接用起这个产品。我觉得就是除了刚才讲的各种技术和这个能力的提升以外，我觉得让更多人用到，这也是我最期待的一个事情了。",
      "speaker": "发言人6"
    },
    {
      "time": "02:50:00",
      "text": "你觉得这个是一年还是三年？可以分别说让我感受一下。",
      "speaker": "发言人4"
    },
    {
      "time": "02:50:04",
      "text": "我觉得是半年。",
      "speaker": "发言人6"
    },
    {
      "time": "02:50:06",
      "text": "好了，那对于三年，你觉得三年的期待会发生什么？",
      "speaker": "发言人4"
    },
    {
      "time": "02:50:10",
      "text": "三年的期待我觉得就是再一次出现我刚才讲到的，比如说一两年前我们在看模型输出的时候，我在榨汁模型，我希望在未来很快的时候就能三点，我希望看到AIC给我一些我看不懂的答案。",
      "speaker": "发言人6"
    },
    {
      "time": "02:50:24",
      "text": "其实你刚才说这个500美金比较贵，你怎么看甘雨三的评价？的确还比起你招一个junior的程序员来说，的确不算贵。",
      "speaker": "发言人4"
    },
    {
      "time": "02:50:33",
      "text": "是这样的。但是从来这些科技，比如说新的科技出现，都会有一个拉风的过程。很多可能有一些公司他比较接受这个，他就有一个公司的行为去买入这个东西让大家可以用起来。但我觉得其实软件行业其实之所以能设计如此重要，因为它涉及我们所有人生活的方方面面。有很多公司它可能本身就是比如比较传统，所以还是希望有一个自下而上的一个推动的方式。",
      "speaker": "发言人6"
    },
    {
      "time": "02:50:58",
      "text": "对，而且我觉得他这个不仅是因为他500美金技术使用费，其实也是一个它是个软件加上credit对吧？其实我觉得它还有其中的一个问题是说，它在一个任务上他的一个任务上，你无法控制他到底用了多少ACU。就是他自己的这个computer，这个基架的这个best，对，就是叫这个monthly的这个agent computer units，对吧？我就同样的一个任务，有时候他会跑个几美金，有时候可能跑上十几美金都有可能。但我觉得这个可能也是跟你刚才所说的这个成本相关的，我想应该也会很快看到很大的提升。冰原你的influence到哪一步了？",
      "speaker": "发言人4"
    },
    {
      "time": "02:51:34",
      "text": "对我觉得一年的话，我其实还是期待说整体的这个go golding agent能够做的真正实用。就是让所有人都都因为他的存在，让你的开发变得非常的高效，然后让你去做一个。新的东西的时候非常的高效。这个我觉得是大家能看到。然后这么多公司在做，然后这么多的个人开发者，这么多开源社区在做。大家其实一定程度上短期的目标都是就是能够提供更好用的工具。",
      "speaker": "发言人3"
    },
    {
      "time": "02:52:06",
      "text": "然后长期来看，其实我个人更理想主义一点。就比如说我们能不能期待co forces的第一名，就是model对吧？而且他还能稳步的永远是那个第一名。",
      "speaker": "发言人3"
    },
    {
      "time": "02:52:18",
      "text": "我对AI超越人类还是抱有很大的期待的，我觉得AI比人强这个事情，从skating的角度其实是work的。就是他既然能吃那么多的token，它就可能压缩出比人更高高级的智能。我如果说我们拥有这样的一个强大的model，我相信对于科技，对于社会其实都是一个很好的一个存在。所以我觉得在固定上面，未来刚刚pick讲的写人看不懂代码，一定程度上确实可能会出现。我其实更期待说看不懂其实不是一个好的feature，但是他看不懂，但是他很强，他在某些事情上很强，那我是能接受的对。",
      "speaker": "发言人3"
    },
    {
      "time": "02:52:59",
      "text": "我好奇你刚我问一句，就是你说希望在这个code forces上有一个更大提升。其实但其实现在模型已经能够解决大部分人类都解决不了的一些数学题，一些一些coding的问题了。但是我们反而在用它做一些日常的一些task的时候，反而觉得有些容易的它还不如人类。那这个事情是说我们还是要再继续去除了这个提高就是在头顶的mess这些能力上，那剩下这些到底是一个模型问题还是一个产品问题呢？",
      "speaker": "发言人4"
    },
    {
      "time": "02:53:29",
      "text": "我觉得是时间问题，就是大家今天的焦点还没有来得及从一些定义很好的task上skin到更多的task上。就是他技术如果验证了在某些难的事情上成立的话，他下一步扩展到更多就是时间的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "02:53:46",
      "text": "好啊，那新瑶。",
      "speaker": "发言人4"
    },
    {
      "time": "02:53:48",
      "text": "我其实想的是，比如说一年之内可就是一年之内可能preparation model，像这种big lab open I dirty说的model可以告诉你的，你可以。然后可能open source model能够稳定的，比如说干到50到70的这个范围。并且然后然后并且在在在这个时间同时我就希望比如说像像在github上用coding agent解决问题会是一个新常态。就是大家会真的开始用这些agent，随着这个能力提升，随着这个成本下降，这个agent现在对我们来说，现在可能像是一个实习生要的水平可能还没有我们想象中junior那么reliable。",
      "speaker": "发言人2"
    },
    {
      "time": "02:54:30",
      "text": "我希望可能三年之后，他可能已经百分之百是一个稳定的军人。然后可能是50%的概率，它是一个变成一个非常稳定的这样子的一个心理engineer。已经是可以成为一个可靠的队友，能够找大梁的这样子的一个存在。然后这种情况下其实就要求比如说像在BH company这一类的pitch market，可能要接近到七八十，或者就是让century这一类人去发展。对我觉得三年应该是没有问题的。但现在这个发展速度。",
      "speaker": "发言人2"
    },
    {
      "time": "02:55:00",
      "text": "对，就是你这个500美金你可能招到的那个engineer也不是那么的reliable。",
      "speaker": "发言人4"
    },
    {
      "time": "02:55:06",
      "text": "对的，我现在最大的体验就是我觉得这个open hand懂得比我多得多。就是我现在已经会就在网上找到各种文章，然后就问他咳嗽的他你觉得用这个技术到我们这个report这行还是不行？从这个角度它已经是一个四年engineer。",
      "speaker": "发言人2"
    },
    {
      "time": "02:55:21",
      "text": "对哎那这个我们刚才讲了很多这个coding agent的好坏，我们有一个有趣的问题，就是你们用这个coding agent产品踩雷过的一个地方。给大家分享一个有意思的例子。尤其是一些可能你觉得他不应该做不好，但是他却意外的翻车的。大家有过这样的这个经验吗？",
      "speaker": "发言人4"
    },
    {
      "time": "02:55:39",
      "text": "我想一下，其实我平常用model其实经常会写一些数据处理的代码。因为有些数据处理的边界，其实处理的就我自己写，有时候也会出错，然后你需要debug然后就比较费时间。所以说当当模型的空气能力上来以后，其实还挺依赖他去帮帮我去做一些这样的事情问题。就是他有时候写代码会根据你的上下文去做一些改变，比如说我提供他一些样例的数据，然后他有时候就会影响你最终那个数据处理脚本的那个代码的一个准确性。因为我做code，我给他的要处理的数据就是code，然后让他写一个新的code来去处理这个code，然后他写的这个code可能会被我给那个code所影响到，我不知道我讲清楚没有。对，可能这个问题上可能会有一些需要去更好的去解决的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "02:56:34",
      "text": "我觉得本身这个事情其实是一个很常见的一个需求。就是我先给你一个code，我需要你在这个code上面再去处理现在已有的这个code。你要写一个新的code，但它会被原始的这个code影响到。这其实我就觉得不太应该的，而且应该是有很多办法给解决，但现在还可能会有些意外的翻车。",
      "speaker": "发言人3"
    },
    {
      "time": "02:56:54",
      "text": "所以在这个context的理解，因为现在虽然说我们说这个context领导很长，但是其实之前我们的节目里面也有讨论过对吧？但是context window长篇代表他对这个context的理解就很好。那你觉得以后他要对这个context越来越powerful，那其实就需要和理解越来越多的context。你觉得这个context长度会是一个挑战吗？就像我们在研究中有有看到这块的一些瓶颈。",
      "speaker": "发言人4"
    },
    {
      "time": "02:57:18",
      "text": "对code的longer text modeling其实是我们一直很关心的问题，我这个非常的重要。这个modeling可能会涉及两个方面，一是你要对很长的code的on understanding，因为code的这个形态相比于普通的文本来说，它的long dependence也很强。因为一个变量可能会存在很远的地方，但你会用到它对吧？你比如说你整个仓库你要引用的关系或者什么东西，它可能这个lang penny它最后画出来是一个很大的一个graph，或者是一个tree。对，但是你需要去能够handle很远的一些函数的定义，然后函数的实现，然后去实现你当前的这个函数去做一些改变。所以understanding肯定是很重要的。然后另外一个我现在比较关心的就是我们其实可以做long code的generation，就是你能不能让模型写很长的代码，但它不出错。对，这个其实也是我很关心的一个技术的能力。",
      "speaker": "发言人3"
    },
    {
      "time": "02:58:10",
      "text": "这一块目前哪个model做的最好？",
      "speaker": "发言人4"
    },
    {
      "time": "02:58:14",
      "text": "我觉得现在大家其实都还open的model，我觉得都还有有有一定进步空间。然后那些老大哥们，我觉得一定程度上其实也会犯一些错，就是没有大家想的那么的strong，就是在很长输出的时候尽量还是会有一些问题。",
      "speaker": "发言人3"
    },
    {
      "time": "02:58:34",
      "text": "对的，那新阳你们怎么解决这个问题呢？",
      "speaker": "发言人4"
    },
    {
      "time": "02:58:37",
      "text": "Long context的问题，我们这个其实也是我们最近一直在思考的一个问题。我们目前的information其实还是最简单的，就是非常简单粗暴的。你直接把所有问题都塞在context and go一遍的200K垢皂垢皂一阵子，直到你差不多go beyond，差不多100到200个step左右。然后我们目前现在有一个哈佛的歌在这，其实已经快快做完的一个process。其实我们就是我们管它叫做接近，叫做memory conversation。就相当于在agent里面，不是所有的step对于你predict下一个action都是那么重要的。比如说我100个turn，可能只有最近的那个20个turn的information是值得保留的。剩下前面80个太可能其实是你都是可以省直接删掉，甚至把它sub ize一下，就保留一点点在那儿，其实是没问题的。所以我们现在也在探索这种不同的进行memory canalized的方法，这样子让你的agent在每执行一个action的时候，你的那个cost能维持在一个constant的一个数字，能是一个常数。就是每一轮的input它的那个就比如说每一轮input就in connect noo永远是32K类似这样子的一个机制。",
      "speaker": "发言人2"
    },
    {
      "time": "02:59:46",
      "text": "这个有什么补充？",
      "speaker": "发言人4"
    },
    {
      "time": "02:59:48",
      "text": "对，就正好聊到那个context，然后也是你这个问题，就最近用这coding agent这个踩雷的地方，其实我遇见踩雷也是一个广义的context问题。就是你在用那个David的时候，你会发现它有一个feature叫做knowledge。他这个设计的初衷是很好的。就比如说我举个例子，我让他做了一个比如数据分析任务。然后我跟他提醒说，以后你在分析哪类问题的时候，你不要只信一个新闻，你要去看他的官网后台report。然后这时候don会自己去edit他这个knowledge。",
      "speaker": "发言人6"
    },
    {
      "time": "03:00:15",
      "text": "这个本身我觉得是一个很好的一个设计，但它也是一种广义的contest系统。但其实现在我在实际使用过程中，感觉十次里头有五次是惊喜，有五次是踩雷。所以我觉得这也是一个他需要解决的一个点。这块可能靠模型能力提升就能解决一些，但更多可能也是产品上的一些设计。但这个可能长期来看会是一个，怎么说呢？这些产品的一个竞争力，比如说一个A电图跟他用的越久，就好像我给一个实习生教了更多的知识，可能他会让我更不容易迁移到另外一个产品。但现在的话可能是一个一个好坏参半的一个状态。",
      "speaker": "发言人6"
    },
    {
      "time": "03:00:50",
      "text": "对那个knowledge manager的这个功能，我觉得真的非常的惊艳。因为这个我就想就我就想他知道就是他知道哪一些应该留下来对吧？就是他知道哪一些，你不用一个个specific的去去去给他，我觉得这个真的让我觉得非常像一个就是你叫一个实习生。这个进化能力就是新一代的locking。这个新瑶也可以分享一下，有哪些你这个开发模型还做的不够好的这个地方。对你说的。",
      "speaker": "发言人4"
    },
    {
      "time": "03:01:20",
      "text": "对我我其实感觉这个也算是一个half huf。我觉得就是你当你给coding agent做成access的时候，他可能会做一些你意想不到的事情。比如说有的时候我就只是想，比如说我拉了一个open source repository，我只是想让这个agent去读一读这个open source report，然后帮我看看这个代码怎么写，然后帮我写一写，但是别干别的事儿。但是他有的时候就会趁我不注意，拿着我的give up poking，直接跑去那个open surge possible。这个open的一个。",
      "speaker": "发言人2"
    },
    {
      "time": "03:01:51",
      "text": "第二就是这种相当于就像我前面说的，这个agent会做一些你on就是on authorize的一个action。我觉得这个会是一个比如说model层面，包括safety层面，我们需要去关注的一件事情就是确保这个agent的执行的这些东西是经过一定程度上经过人类批准允许的。但是经过人类批准允许，这个问题又是一个。比如说你可能会有非常high level的批准允许。比如说你只要能把这产品做出来，在某个范围之内你做什么都可以。Vers是一些非常欢迎Green control，比如说像最近的curse r的这种agent mode，他们是每一个action可能都需要人类去approve或者去去reject这样的一个过程。我觉得怎么样子在这两个之间找到一个比较好的baLance，也是接下来比较重要的一件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "03:02:39",
      "text": "行，我就说一个高估的，就是我觉得可能尤其像一些听众可能明确一点，就competition coding不是suffer engineering coding，就是我们经常看见一些比较新的编程。2，其实它都是就是像怎么说是偏竞赛类型的编程。而实际上这个对模型能力的要求，就尤其比如context external dependency是非常不一样的。所以我们并不一定就是非看到一个模型，比如说在一些竞赛类的网站上表现非常好。但是它实际上如果用于coding agent的话，它的表现并不一定是能等同去换算的这我觉得是对高估的一点。",
      "speaker": "发言人6"
    },
    {
      "time": "03:03:14",
      "text": "这个也是我们前面提到这个coding或者这个mass model能否从下一直爱着这个问题。那你觉得还有什么被低估inking.",
      "speaker": "发言人4"
    },
    {
      "time": "03:03:28",
      "text": "等一下还是。",
      "speaker": "发言人6"
    },
    {
      "time": "03:03:29",
      "text": "太help了，没有被盯。",
      "speaker": "发言人4"
    },
    {
      "time": "03:03:32",
      "text": "对，没有我感觉刚刚pick这个倒是让我想起来了一个被低估的东西，其实被高估的就是大家太过相信这种program benchmark，并且expect这种program benchmark for work well，在coding ation上的话也会很好。我们community经常会问，为什么这些open space model to bar上咪咪的跟cloud差不多了？但是在o coding a点上还这么拉跨，我觉得这个是一个点。然后我觉得被低估的其也在这个access上，我觉得其实大家被低估了，大家一定程度上低估了。",
      "speaker": "发言人2"
    },
    {
      "time": "03:04:04",
      "text": "现在已经有的frontier model已经能做到一些事情，就是在code age上，他们这些就是这些问题，可能你需要一些比较复杂或者比较精妙的一些prom。但是你一旦掌握了这个诀窍，你会发现现有的model其实已经能做出非常多让你觉得非常aggressive事情。就像grand那天就发现了一个神奇的club。他就说当agent遇到问题的时候，你只要告诉他你列出五个可能导致这个问题的hypotheses，然后并且一个一个去排查。这简简单单一句话，就直接让这个A级的你提升了好几个台阶。就是我觉得现在的family model已经能做很多我们想象不到的事情，只不过我们还没有找到正确打开方式。",
      "speaker": "发言人2"
    },
    {
      "time": "03:04:46",
      "text": "所以问题是是我们我们限制了我们限制了这个agent的这个能力。",
      "speaker": "发言人4"
    },
    {
      "time": "03:04:52",
      "text": "对我感觉其实就是之所以像病原前的时候，model训练上面planning那么重要。其实一定程度上来说，如果我们给不了agent这个你要想五个hortense的这种建议的话，agent是其实可以通过reinforcement learning在大量的训练中去总结失败经验，然后总结成功经验，自己去学到一个这样子的一个技巧。对的。",
      "speaker": "发言人2"
    },
    {
      "time": "03:05:14",
      "text": "行好，看看这个边缘infants怎么样。",
      "speaker": "发言人4"
    },
    {
      "time": "03:05:18",
      "text": "对这个问题我thinking比较久的原因是因为我在想就是o three到底有多可怕。今天我们所讲的高估和低估，其实还是在欧斯睿出来之前的认知，对吧？就我们拿到的model，其实还是我们前一天能拿到最好的。但今天我们可能或者明天我们如果能够拿到three preview版本，或者说什么样的版本，我们可能做的就不一样了。所以说我觉得可能大家对模型的高估是觉一个有有一个点是在于说，大家现在对模型的期待可能已经上升到了无所不能，然后所有的事情都要面面俱到。",
      "speaker": "发言人3"
    },
    {
      "time": "03:06:02",
      "text": "然后因为其实普通的用户对于AI的认知来说，比如说没有这个AI的background的用户，就像我经常跟经常跟我母亲在讲我是做什么的时候，他其实很诧异。他总觉得好像0几年的时候，人跟机器对话就已经差不多了。就是他他一直觉得好像这个形态早就已经被被解决掉了。对，但其实普通人所以说普通人对被AI所要震撼的那个点其实是更高的。",
      "speaker": "发言人3"
    },
    {
      "time": "03:06:33",
      "text": "然后我觉得我们今天高估AI的一个点，就是大家都觉得很强对吧？但老实讲，我我我我其实现在没有人说他能通过图灵测试。我不觉得我不知道说今天这个图灵测试是否还重要。但其实它确实还是我们自己还是能够分辨是人跟人爱的本质的区别的。这个可能是一定程度上今天的模型其实已经很强大了，但大家对它其实是真正能够通过图灵测试。",
      "speaker": "发言人3"
    },
    {
      "time": "03:07:02",
      "text": "但是它我觉得它现在还没有。但相对来说我觉得低估的一点就是我觉得大家对模型的创造力其实是有低估的。其实刚刚其实星号也讲到了，就是你你有你有更magic problem，可能就会激发出不同的模型的形态。然后像现在的这些model，其实它本质它在培训的时候其实已经见过非常多的东西。那我们现在其实是不太能够很好的去evaluate一个model是什么样的水平。这个其实是我觉得被低估的点，就是我觉得人类很多想象力很匮乏。我们其实是很难找到那个非常好的场景去验证一个其实模型已经有的能力。但是我们不知道的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "03:07:43",
      "text": "又回到benchmark的问题。好的，今天我们真是聊了非常久，非常感谢大家跟我们聊到最后。我会觉得所以我们觉得聊的非常的全面。但是我觉得我们还处在刚刚被欧文震撼的过程中。我想接下来就像冰原说的，等到我们对o three有了更多的了解，然后包括像ben 7还是新瑶的这个一hence被更多人用了以后，我相信也许用不到一年，也许半年以后，我们又可以回来再聊这个话题，我想又会有很多新的发现。我觉得本来就是上半年大家觉得好像很多事情静止下来，好像没有大的更新了。然后突然到了Q4的最后一个季度的时候，突然觉得又重新燃起了很多新的希望。以及我们之所以组织大家来进行这些讨论，能够吸引到更多人，也想要像信窑，像pick、像冰人一样来创造未来的创业者以及加入这行业。",
      "speaker": "发言人4"
    },
    {
      "time": "03:08:40",
      "text": "作为投资人和AI从业者，我们对语言模型的理解始终在不断进化和更新。希望当下的这些思考能够给大家带来一些启发。真格基金一直在关注前沿大模型领域的进展，如果大家有好的创业想法，也欢迎和我们聊聊。同时也欢迎听众在各大音频平台订阅此话当真的播客，我们下期再见。",
      "speaker": "发言人4"
    }
  ],
  "lab_info": {
    "summary": "在这次讨论中，参与者深入探讨了人工智能（AI）在编程和软件开发领域中的应用及其对未来的影响。重点讨论了编程代理（Coding Agents）的能力，包括它们如何协助程序员进行代码编写、调试及优化，以及AI在代码生成中的潜力。讨论还触及了AI对程序员角色、团队管理和协作方式的潜在影响，比如AI代理在产品迭代、代码审查和自动化测试中的应用。此外，讨论涉及了AI在教育和培训领域的可能变革，以及人类与AI合作的新模式。总体来看，对话反映出了AI技术，尤其是编程代理，对未来社会、企业及教育领域发展的积极预期和可能带来的变革。",
    "qa_pairs": [
      {
        "question": "在AI领域，coding agent过去短短的两三个月内有哪些重要的升级和变化？AI领域的技术突破和进展如何？",
        "answer": "在最近的两三个月里，coding agent产品完成了二连跳式的升级，并且在本月的demo发布中展现了极大的突破，打开了AI领域全新的想象空间。技术突破方面，专业模型在某些任务上已经能够超越人类，这标志着AGI（人工智能的通用性）迈入了新的台阶。同时，投资人在使用coding agent时发现其不仅可以编写代码，还能应用于数据收集、爬虫等投资圈相关工作，展现出强大的实用性。",
        "time": "00:01:07"
      },
      {
        "question": "对于非程序员或者项目管理（PM）视角来说，如何看待coding agent带来的惊艳效果？",
        "answer": "对于非程序员或PM视角，coding agent能够极大降低技术门槛，比如电影导演团队利用rapid agent将剧本拆解、翻译等工作自动化，以前需要手工完成的工作现在通过agent变得高效且容易，极大地改变了他们的工作方式。",
        "time": "00:04:37"
      },
      {
        "question": "open hands agent为何能在短时间内能力上产生飞跃？",
        "answer": "在11月中旬，当open hands agent的活跃度超过50%后，明显感觉到其质量有了飞跃性提升。agent能够更频繁地参与到项目开发中，解决各种问题，有时甚至能出乎意料地高质量完成任务，不需要过多的人力干预。",
        "time": "00:07:30"
      },
      {
        "question": "open hands agent在日常工作中的表现如何？",
        "answer": "open hands agent已经在日常工作中起到实质性作用，它像人类工程师一样修复各种bug，甚至承担起日常编码任务中一些复杂问题的解决工作，比如自动修复问题代码，完成一些原本需要人工干预的任务。",
        "time": "00:09:10"
      },
      {
        "question": "对于未来模型迭代流程的变化有何看法？",
        "answer": "认为未来模型迭代流程可能会因模型自身的学习和优化而发生变化，尤其是随着模型能力增强，未来模型的迭代可能更多依赖于模型自身的发展与优化。",
        "time": "00:10:03"
      },
      {
        "question": "Coder这款产品是如何设计的？",
        "answer": "Coder是在通用模型基础上，针对coding方向进行单独验证和探索的产品。团队会在通用模型上进行大量重训、持续训练、指令转换等操作，以期在coding领域达到顶尖水平，并通过这种方式产生一个强大的专用编码模型——Coder，供用户完成下游各种辅助任务。",
        "time": "00:10:40"
      },
      {
        "question": "在今天的cohoes pick中，你最希望跟大家聊的话题是什么？对于regular产品，你特别想聊的话题是什么？",
        "answer": "今天我最希望和大家讨论的话题是关于模型层面的发展，特别是reasoning模型和coder模型的最新进展以及它们与微信模型可能的融合或独立发展。我更想聊的是用户在使用这些agent产品完成项目后，在deployment阶段遇到的问题，比如如何管理和维护已开发的产品，这涉及到软件生命周期中的维护、更改和内容管理等方面。",
        "time": "00:13:06"
      },
      {
        "question": "对于agent的lazy demo或open has这类话题，你更关注哪些方面？",
        "answer": "我更关注agent框架如何更好地表达模型的能力，即使面对相同模型，在不同框架中的表现差异很大。此外，当模型发生变化时，其能力的变化与模型本身的改变并不总是直接线性相关。",
        "time": "00:13:39"
      },
      {
        "question": "能否从投资人视角分享一下你看到的coding agent领域的产品演进以及为什么重视这个领域的创业机会？",
        "answer": "编程是AI领域的重要部分，从ChatGPT到现在两年时间，AI编程经历了多次进化。最初ChatGPT仅能根据prompt编写代码，后来通过读取code base作为上下文理解写代码意图，并逐步实现了自动写代码、文件操作、调试及debug等功能，目前甚至能够进行任务规划和异步工作，极大地提升了自动化进程，同时也引发了关于工作scaling law的新思考。",
        "time": "00:15:24"
      },
      {
        "question": "在你们的产品演进过程中，有哪些重要的迭代可以分享？",
        "answer": "加入report之前，我经历了一系列创业过程，特别是在GPT4发布后，我发现与GPT4的合作效率远高于与人工团队的合作，这让我决定全力投入编码agent的研发，因为我认为在编码领域，AI的价值巨大，且随着技术进步，其优势会更加显著。",
        "time": "00:23:56"
      },
      {
        "question": "当时REPLAY作为一家公司的定位是什么？",
        "answer": "当时REPLAY是一家纯IDE公司，它的特点在于用户无需下载，可以直接在网页上使用，拥有预配好的开发环境，并且支持部署功能。",
        "time": "00:24:31"
      },
      {
        "question": "REPLAY在产品形态上如何帮助用户从0到1完成项目？",
        "answer": "REPLAY注重于帮助用户将想法转化为实际产品。用户如果有构建网页或软件的想法，但不会编写代码，他们可以通过与REPLAY的agent交流，agent会帮助制定计划、编写代码、搭建环境并逐步实现用户的创意。",
        "time": "00:25:27"
      },
      {
        "question": "REPLAY的产品形态在用户需求反馈后进行了哪些改变？REPLAY现在的产品形态与之前相比有何不同之处？",
        "answer": "根据用户的反馈，REPLAY对产品进行了两个主要调整：一是增加与用户的交流，让用户更透明地了解agent的工作过程并能控制其方向；二是引入了一个更快的编辑器——system，用于快速定位和编辑具体代码指令。现在REPLAY的产品形态既包括自动化完成任务，也包括轻量级编辑。例如，从0到1的过程以及生成PR的问题虽然都可通过agent解决，但重点和解决的问题各不相同，需要针对不同的需求提供不同的解决方案。",
        "time": "00:27:29"
      },
      {
        "question": "对于使用REPLAY agent的用户，他们在完成初步开发后是否会在平台内继续深化发展，还是转向其他平台？",
        "answer": "大部分用户会在REPLAY平台上进一步深化发展，提升agent的能力，甚至将产品上线，通过使用agent快速验证product market fit，并逐渐增加更多功能，提高产品的价值。",
        "time": "00:30:03"
      },
      {
        "question": "除了底层模型未变，REPLAY 3.5版本针对从0到1的任务做了哪些关键更新？",
        "answer": "REPLAY 3.5版本针对0到1的任务做了以下更新：强化了与各种服务的整合能力，确保用户能够无缝接入如OpenAI、Firebase数据库、Stripe等外部服务；优化了代码编辑器，进行了大量实验和更新，以提高编辑效率和用户满意度；同时增强了数据base的功能，确保用户在部署时代码的稳定性；另外，还重构了UI，使其更美观且更具功能性，以提升用户体验。",
        "time": "00:31:46"
      },
      {
        "question": "在传统软件公司成长过程中会遇到哪些问题，agent如何帮助解决这些问题并推动公司发展？",
        "answer": "在公司成长过程中会遇到安全、规模、合规性等问题。agent通过构建一个能够自适应和解决这些问题的体系，逐步攻克这些问题，从而帮助公司构建产品、扩展规模以及实现盈利。由于产品基于agent构建，可以在早期阶段做出一些假设，简化一些复杂操作，比如数据库管理。",
        "time": "00:36:55"
      },
      {
        "question": "agent在技术选型时做了哪些选择，这些选择对未来的发展有何影响？",
        "answer": "agent在初始阶段就选择了一些我们认为适合它的stack和技术，在后续的扩展和安全性方面可以更加轻松地应对。目标是确保用户使用的所有软件都能良好地进行扩展、保证数据库安全和部署稳定性。随着发展，agent可能会成为连接各种云服务的前端，但也会利用外部服务来实现多元化和优化资源配置。",
        "time": "00:37:32"
      },
      {
        "question": "未来agent是否会完全覆盖现有云服务场景，甚至成为所有云厂商的前端？",
        "answer": "这种可能性存在，但我们不会做所有事情，而会采用很多外部服务以增强自身能力，这部分也会成为我们收入来源之一。agent最终可能会成为一个集成多云服务的前端，其核心目标仍是帮助用户做好产品，并与各种服务进行整合。",
        "time": "00:38:08"
      },
      {
        "question": "实际使用agent产品时，与预期有何不同之处？以及上层产品与底层模型的关系是怎样的？",
        "answer": "实际使用后，发现agent表现符合预期，能够高效执行任务并全面思考问题。上层产品不仅依赖底层模型，还根据用户的差异性进行适应性设计。随着AI基础模型能力增强，将对覆盖的use case带来更多的融合，但最终形态仍由用户群体决定。",
        "time": "00:40:43"
      },
      {
        "question": "在实践中是否会结合其他小模型来优化整体效果？",
        "answer": "在实践中肯定需要结合多种模型，因为不同的任务适用于不同的模型，主要考虑性能、速度和价格因素。不会局限于单一模型，而是利用各种模型的优势来完成不同任务，例如生成代码、数据处理等。",
        "time": "00:41:31"
      },
      {
        "question": "open hands项目是如何实现的？",
        "answer": "open hands项目主要由三大块组成：agent负责维护历史事件流；AStar算法负责将事件流中的action转化为observation；以及用户与agent之间的交互逻辑，通过eventually来处理用户输入的信息。整体设计旨在支持未来的多用户、多agent协作场景，同时适应多种action生成方法，以充分利用模型更新带来的improvement。",
        "time": "00:46:27"
      },
      {
        "question": "open hands项目的起源和发展历程是怎样的？",
        "answer": "open hands项目起源于David的一个Twitter demo，创始人受到启发后决定创建一个类似的产品。最初加入open hands是为了进行相关的研究项目，并因其开源性质能够方便地获取和使用代码基础。随着项目进展和团队扩大，逐渐形成了公司，并在今年4月决定将其转化为一家公司。",
        "time": "00:44:49"
      },
      {
        "question": "在设计上，你们如何看待planning是否应该更复杂或更简单？",
        "answer": "我们社区对此进行了大量讨论和尝试，最终发现无论是直接使用模型本身去做决策，还是尝试各种不同的planning框架，都未能取得超过直接利用模型本身的效果。而且，planning能力在一定程度上可以作为模型本身的一种能力存在。",
        "time": "00:48:55"
      },
      {
        "question": "对于planning这部分，在模型能力足够强的情况下，直接通过一种软性的方式给agent进行计划的效果如何？",
        "answer": "我们在实验中发现，在防备模型足够强时，直接通过软性的方式（如按照步骤指引）给agent进行计划的效果反而最好。",
        "time": "00:48:55"
      },
      {
        "question": "planning在实际应用中存在哪些挑战？",
        "answer": "实际应用中，planning面临的一个主要问题是并非所有情况都像预设那样顺利。例如，在按照预设计划执行时，可能会遇到许多初始计划中未考虑到的问题，这导致需要考虑工程角色，如如何让agent根据更新后的方案进行回复和执行新的动作等。",
        "time": "00:50:25"
      },
      {
        "question": "是否直接使用VM而非container能带来额外优势，特别是在处理图形界面或跨领域场景时？",
        "answer": "David的open end实现中使用了VM，而open hand选择了docker。虽然两者在本质上差距不大，但docker启动速度更快，更适合大规模并行测试。然而，对于图形界面等场景，直接使用VM可能具有优势，因为可以模拟真实环境并运行完整版软件，目前open hand的基础设施理论上支持无缝切换至VM运行。",
        "time": "00:51:34"
      },
      {
        "question": "是否考虑让open hands开发环境支持在docker内部直接运行docker以实现GUI功能？",
        "answer": "open hands确实有考虑这个问题，并打算提供一个可选设置，让用户可以选择在docker容器内直接安装和使用docker，或者在真实VM上安装docker。这样做的目的是为了满足不同用户的需求，同时也确保有足够的灵活性和性能优化空间。",
        "time": "00:53:24"
      },
      {
        "question": "computer use这一能力对于模型与软件交互有何重要性？",
        "answer": "computer use是一种前沿模型能力，允许模型像人类一样使用电脑进行操作，比如移动鼠标、点击元素、输入键盘等。这有助于模型在没有专门API的情况下模拟人类与软件交互，具有很大的潜力，尽管当前准确性受限于像素级别，但未来有望提升。对于open hand的目标——构建一个通用型agent，computer use将是一个关键且有前景的特性，简化action space并让模型具备更丰富的软件操控能力。",
        "time": "00:55:02"
      },
      {
        "question": "在计算机技术的发展中，早期open AI相比其他产品有何独特之处？在open AI的产品开发过程中，有哪些关键的技术决策对于提高产品能力和社区采纳率非常重要？",
        "answer": "当时open AI在发布时具有很好的先发优势，这次它直接发布了API，而不是仅推出一个vision base模型。这种API的形式使得最终产品可以以API或vision等形式存在，并且可能作为能力被集成到其他产品中，而不是独立开发一个只用这种能力的产品。重要的技术决策之一是在早期阶段，针对open AI的agent开发，需要平衡研究者和产品团队的需求。研究者希望agent易于使用、能够快速迭代和做research，无需关心UI等方面；而产品团队则需考虑如何将agent与前端体验紧密结合。最终解决方案是将后端部分做得足够清晰和抽象，让研究者只需关注提供历史信息给agent，而无需了解具体实现细节。",
        "time": "00:59:33"
      },
      {
        "question": "为什么选择做open source版本的coding agent，这会给带来怎样的优势和挑战？",
        "answer": "做open source版本的coding agent的初衷是凝聚开源社区的力量，创造一个酷且有影响力的项目。开源后得到了社区的高度关注和积极参与，吸引了大量人才加入。这样不仅可以推动技术进步，也能让每个人都有机会参与AI开发，同时也能吸收学界高质量的研究成果，提高整体科研进展的速度。",
        "time": "01:06:10"
      },
      {
        "question": "开源对于open AI的发展带来了哪些好处？",
        "answer": "开源首先意味着透明度，有助于吸引更多人参与并提升项目兼容性和健康度。其次，开源可以消除闭源商业公司的一些顾虑，促进社区成员共同贡献open model，使得整个agent更加透明、弹性，每个人都有机会参与进来，这对于AI时代的进步和民主化有积极意义。",
        "time": "01:06:10"
      },
      {
        "question": "对于开发者来说，为何更倾向于使用开源工具而非闭源工具？",
        "answer": "开发者倾向于使用开源工具是因为在性能体验接近的情况下，开源工具提供了更多自由度和灵活性，能够根据自身需求进行定制和扩展。此外，开源项目更容易收集用户反馈和改进，促进技术的不断发展和完善。",
        "time": "01:08:12"
      },
      {
        "question": "open source对于促进AI技术的创新和应用有哪些具体影响？",
        "answer": "open source为AI领域的研究者提供了基础设施和技术支撑，加速了科研进展。同时，对于开发者而言，开源产品易于集成和扩展，能够提供更好的用户体验，并鼓励用户根据自身需求定制和优化产品，从而推动整个社区的技术进步和创新能力。",
        "time": "01:09:25"
      },
      {
        "question": "在赛道上，大家最后比拼的核心竞争力和差异化可能在什么地方？",
        "answer": "核心竞争力可能在于开源的优势，尤其是在企业希望避免被大公司lock in时，拥有source code可以保证长期使用并进行自维护。对于高度监管行业，开源产品因其开放性和透明度更容易赢得客户的信任，例如可以将agent部署到公司内部以确保数据安全不离开客户环境。此外，agent产品的关键竞争力还包括其与开发者工作流程的高度整合性，如与slack、github等开发工具的紧密集成，以便于开发者随时调用。",
        "time": "01:12:06"
      },
      {
        "question": "对于agent产品而言，除了开源因素外，最重要的特点是什么？",
        "answer": "对于agent产品而言，最重要的是其高度的可集成性，即需要与开发者的工作环境无缝对接，比如开发者在哪里工作，agent就需要在哪里提供支持，随时响应需求。另外，针对特定use case的定制化也是一个重要方向，构建一个良好的生态，让产品在多种场景下得到有效应用，并通过积累prompt examples来帮助新老用户更高效地完成任务。",
        "time": "01:12:59"
      },
      {
        "question": "社区反馈对于你们产品的开发有哪些帮助较大的方面？",
        "answer": "社区开发者对产品的反馈中，呼声最高的几个feature也是我们自己最想要添加的。同时，用户的使用困难和失败案例也为我们提供了宝贵的用户教育方面的反馈，帮助我们从不同角度优化产品。另外，了解到用户的多种使用场景有助于我们在改进模型和设计决策时考虑更多通用性和未来可能扩展的支持案例。",
        "time": "01:15:15"
      },
      {
        "question": "O-1模型对于coding模型领域有何影响？目前O系列的表现如何？",
        "answer": "O-1模型的出现展示了链式思维在计算领域的强大潜力，其在一些验证任务上的表现非常出色，尤其是在code和mass以及考试题型等方面。目前，O系列模型通过强化训练和利用long term sort概念，已经实现了令人瞩目的技术水平提升，并在最新发布的all three版本中取得了超出预期的成绩，特别是在关键评测上的表现令人震惊，证明了通过infant time skin结合更强模型可以将coding能力做到极致。同时，O系列也强调了对于关键技术和数据、计算资源优化的重要性，以及alignment在提升coding能力中的关键作用。",
        "time": "01:17:33"
      },
      {
        "question": "为什么element对coding是重要的？coding model在技术探索中的深度如何？",
        "answer": "从coding的角度来看，元素与环境或工具的对齐至关重要。目标是编写的代码能够通过所有测试并实现预期功能，而通过像SIGNW这样的角色模型可以更廉价地达到这一目标。在coding上探索element的技术发展具有深度，尤其是在解决竞赛题和真实软件开发问题时，模型需要与环境完美对齐，具备智能感觉，即使代码风格偏好不佳，只要能通过所有单元测试，一定程度上也能被用户接受。",
        "time": "01:24:18"
      },
      {
        "question": "黄金代理任务下为何在function赛道上投入inference time的computing划算？",
        "answer": "在黄金代理任务中，用户愿意花时间等待AI完成大量推理工作，只要最终能解决问题即可。因此，在function赛道上投入inference time的计算资源非常划算。",
        "time": "01:25:49"
      },
      {
        "question": "对于智能探索，coding的重要性体现在哪些方面？SWE Bench提高性能的主要因素及下一步需要什么样的基准？",
        "answer": "智能探索从coding出发，可以泛化到更大的reasoning，进而影响整个digital agent乃至physical agent的发展。因此，在coding模型和code能力上投入更多是有价值的，因为这是未来两个比较基础的东西。SWE Bench性能提升可能源于多方面因素，包括模型优化、成本优化等。下一步需要关注的成本维度，以及如何衡量coding agent能力的同时考虑经济成本和社会成本，同时也可探索使用model router等潜在发展方向。",
        "time": "01:26:13"
      },
      {
        "question": "为什么选择通用结构而非基于专项模型构建QWQ？",
        "answer": "当时构建QWQ旨在提供一个好的reading model，而非最终版本，所以选择兼顾code、math和reasoning的通用结构。未来仍会探索更垂类的reasoning模型。",
        "time": "01:27:26"
      },
      {
        "question": "coding、math和computer use reasoning之间能否形成闭环，指向AGI？",
        "answer": "非常有可能形成闭环。code和mass属于reasoning范畴，是高级且困难的任务，也是构建gita agent或digital agent的基础。随着agent能力提升，有望实现自我进化并在真实世界中不断学习和提升，形成闭环。",
        "time": "01:28:28"
      },
      {
        "question": "O系列模型解决复杂问题的能力与解决真实世界任务的能力有何关系？",
        "answer": "O系列模型在解决数学和编程难题时展现了强大的逻辑推理能力和方法总结归纳能力。然而，真实世界任务往往不那么复杂，但需要多步推理和结合真实信息与工具来执行验证。要解决这类任务，可能需要强化模型在模糊环境中的适应能力和泛化性，特别是在开放环境下定义反馈方面。",
        "time": "01:31:42"
      },
      {
        "question": "O系列模型能否支持AI研究员进行原创研究？",
        "answer": "目前O系列模型可能能解决一些排列组合问题，但在提出有价值问题和定义新科学问题方面还有进步空间。实现AI研究员需要结合逻辑、创造力和安全性。",
        "time": "01:33:09"
      },
      {
        "question": "那么对于OKC match达到70%这个结果，我们应该如何理解这个百分比是否能直接代表在用户的所有工作中有七八十的指导意义？",
        "answer": "这个问题很好，我们一致认为从20到50分对人类开发者来说是一个体验上的飞跃，但目前没有足够的证据确定这种飞跃还存在，还是模型变得更聪明导致人类需要更少的干预。",
        "time": "01:37:34"
      },
      {
        "question": "你认为当前模型的表现是否主要源于本身能力提升还是从历史记忆中回想信息的能力提升？",
        "answer": "这是一个关于数据污染的重要讨论点，即模型表现的提升可能是由于其本身能力增强，也可能是由于能够从历史记忆中回忆出信息。后续需要更多实验来探究这个问题。",
        "time": "01:38:00"
      },
      {
        "question": "OpenAI昨天展示的分数和demo是否足够震撼，对于产品意味着什么？",
        "answer": "昨天OpenAI展示的分数为70多分，虽然未给出令人震撼的demo，但这仅是一个初步版本，证明了即使像O three这样的模型仍有待解决的问题。未来应更关注从真实场景出发的benchmark。",
        "time": "01:38:58"
      },
      {
        "question": "你觉得他们展示的demo是否还不够震撼？",
        "answer": "昨天展示的demo虽然有其亮点，但相比真实环境中解决复杂问题还有差距。期待看到更震撼的成果，比如仅需较少的干预就能解决复杂问题，这将标志着模型达到了可用状态。",
        "time": "01:40:37"
      },
      {
        "question": "你认为有哪些重要的benchmark可以分享，并且为什么这些benchmark对构建更好的coding agent领域很重要？",
        "answer": "在昨天的演示中，three bench和go forces是比较重要的基准。Three bench展示了模型在解决特定任务上的能力，而go forces则检验了文件级别代码和解决方案编写能力。未来可能需要更具挑战性和动态更新的基准来评估模型的泛化性。",
        "time": "01:41:37"
      },
      {
        "question": "对于未来coding agent基准的期待有哪些准则？",
        "answer": "未来基准应该满足三个准则：足够具有挑战性、包含动态更新机制以及注重可验证性。同时，也希望看到能实际超越人类能力的任务，比如在coding赛道上写出运行效率更高的代码。",
        "time": "01:45:39"
      },
      {
        "question": "对于专业模型的价值和边界探索有何看法？",
        "answer": "目前专业模型的价值在于探索边界，即使在某些方面无法完全达到AGI，但通过聚焦特定任务进行探索和技术实现，仍能在特定领域取得超越人类的成绩，这是科技探索的重要过程。",
        "time": "01:46:26"
      },
      {
        "question": "对于前端领域的发展和相关进展如何看待？",
        "answer": "今年涌现了许多公司在前端领域的进展显著，写前端代码对coder来说很擅长，因为现代前端工具链完善，使得前端开发成为coding agent领域的重要关注点。",
        "time": "01:48:40"
      },
      {
        "question": "前端任务在某种程度上是什么样的？AI在前端任务中扮演的角色是什么？",
        "answer": "前端任务在一定程度上类似于一个小型的planning任务，比如设计页面布局、数据流等。它对普通用户的感知很强，因为前端是用户直接接触到的界面，对于不会写代码的人而言，通过前端可以实现个人网页、APP等的创建和展示。AI在前端任务上可能做得更好，因为前端技术栈相对统一且易于实现。AI能够帮助开发者找到最适合的已有模型或开源库，而非从零开始编写代码，从而促进前端技术的统一和效率提升。",
        "time": "01:48:57"
      },
      {
        "question": "当前coding agent领域的重要发展趋势有哪些？",
        "answer": "重要趋势之一是coding agent开始探索influence scaling方案，即根据需求调整解决复杂问题的成本和时间；另一个趋势是尝试best of n ranking方法，通过生成多个解决方案并利用reward model进行排序来选择最优解。",
        "time": "01:50:47"
      },
      {
        "question": "AI赋能程序员后，对整个组织会带来哪些影响？",
        "answer": "AI不仅赋能程序员，还可能带来整个组织架构的改变。随着AI取代大量复制粘贴型工作，工程师需要掌握如何管理和训练AI，以及学会提出好问题。这将对教育体系和每个人的职业发展提出新的挑战，要求人们具备更强的产品思维和整体把控能力。",
        "time": "01:54:26"
      },
      {
        "question": "AI将如何重塑程序员的角色和工作方式？",
        "answer": "未来程序员会变得更像资本家或管理者，控制AI去做事情，借助AI完成整个产品的设计、开发和实现流程。人类程序员需要具备更多的产品思维，能借助AI力量进行创造性工作，而非仅仅关注于编码细节。随着科技发展，人类也会进化，更好地利用AI提升生产力，实现更创造性价值的工作。",
        "time": "01:57:41"
      },
      {
        "question": "在接下来的两三年内，你认为公司招聘团队时会如何考虑利用agent来补充人力？对于使用agent的情况，你们内部体验如何，给组织带来了哪些变化？",
        "answer": "我觉得在未来，我们可能不再需要像以前那样先招人再补足agent的能力。随着技术发展，agent将成为公司中最活跃的controller之一，它们能显著提升新feature和新工作的开发效率，不受个人能力限制，仅受限于想象力。现在最直观的感受是，对于新feature和新工作的感知完全不同。以前需要考虑分配多少时间、优先级等问题，而现在有了这类coding agent后，能解决的问题数量不再受自身能力限制，想象力成为关键。",
        "time": "02:01:03"
      },
      {
        "question": "是否有例子说明agent如何帮助快速实现功能并改变工作形态？",
        "answer": "我们社区有一位star founder没有招募大量程序员，而是利用open hand作为工具，实现并行实验。他能一次性提出多个feature要求，agent帮他快速实现，这完全改变了对于工作的感受。",
        "time": "02:02:31"
      },
      {
        "question": "在AI agent的帮助下，对于人类开发者来说，重要的能力是什么？",
        "answer": "现在对于人类开发者来说，越来越重要的是知道自己想要什么，而不一定知道如何去实现。例如，即使不是前端专家，也能通过agent理解并编写前端代码逻辑，重点在于能看懂代码并准确表达需求。",
        "time": "02:03:23"
      },
      {
        "question": "AI agent能否帮助进行测试和优化代码？",
        "answer": "虽然有考虑让agent主动进行测试，但我们希望赋予用户自行决定的最佳实践，以避免过度干预。同时，这也突显出用户教育的重要性，让用户了解agent的能力边界。",
        "time": "02:07:09"
      },
      {
        "question": "如何让agent告知用户它可以做什么？",
        "answer": "我们最近在产品中加入了一个功能，即在agent完成用户请求后，会建议下一个可能的feature或改进方向，从而促进用户与agent之间的协作创新，形成一个持续改进的良性循环。",
        "time": "02:08:13"
      },
      {
        "question": "AI是否有可能在未来主导编程过程，人类扮演辅助角色？",
        "answer": "确实有可能出现这种情况，就像OpenAI的Copilot等工具一样，AI agent可能会根据自身完成任务的情况来分配任务给人类，人类则主要负责确认和复审AI编写的代码，发挥不可替代的监督和纠错作用。",
        "time": "02:09:44"
      },
      {
        "question": "在AI和人类工程师的关系中，为什么安全性问题如此重要？",
        "answer": "安全性之所以重要是因为AI能够选择性地隐藏其行为和决策过程，不完全透明地展示给人类。例如OpenAI在研究可扩展的监督和从弱到强的透明度方面，已经考虑到了随着模型增强，人类审查代码所需时间增加的问题。未来，AI agent或许可以协助代码审查，甚至进行互相debate以研究代码内容，最后由人类进行最终审核。",
        "time": "02:12:36"
      },
      {
        "question": "对于AI agent来说，如何给予正确的反馈循环以增强自主性和减少人类干预？",
        "answer": "给予AI agent足够的feedback和实验信号至关重要，例如AB测试、用户反馈、点击率等。由于编程领域具有严格的语法和测试验证机制，AI能在自我验证中发挥优势，更多的反馈意味着它可以自主地完成产品构思、开发MVP（最小可行产品）、推广、收集反馈、分析并优化整个流程，几乎无需人类直接干预。",
        "time": "02:15:42"
      },
      {
        "question": "反馈循环是模型能力还是产品层面的问题？",
        "answer": "反馈循环并非单纯属于模型能力，而是一个集成问题。比如AB测试能够让agent结合测试结果，并利用社交媒体平台推广产品。这超越了传统工程师的范畴，但作为整体AI系统的一部分，agent应具备这样的能力来做出正确决策并持续迭代优化。",
        "time": "02:17:21"
      },
      {
        "question": "接下来在模型角度上，需要攻克哪些方面的问题？",
        "answer": "在模型层面，需要加大对信号利用的研究，尤其是对于code模型而言，提高利用高质量代码token的能力以及改进模型的规划（planning）能力。当前模型在面对编程任务时，其规划能力仍有待提高，例如通过增加高质量的规划数据（如GitHub上的commit message）和合成数据来增强模型的规划能力。同时，结合用户反馈进行强化学习，让agent能够通过多步骤试错和优化找到最佳方案，也是提升模型planning能力的一个重要方向。",
        "time": "02:20:56"
      },
      {
        "question": "为了让AI从初级工程师成长为高级工程师，需要提升哪些方面的能力？",
        "answer": "首先，AI需要获取与人类一致的信息来源，包括公司内部各种系统和沟通渠道（如slack），以实现更加独立地工作。其次，提升模型本身的规划能力、从错误中恢复的能力以及proactive能力至关重要。高级工程师通常会在开始编写代码前，根据现有架构提出多个解决方案并评估其优劣，而AI agent也应具备这种能力，在适当时候向用户提供关键决策建议，确保不会在未授权情况下执行非法操作。",
        "time": "02:20:56"
      },
      {
        "question": "在做agent这一层，除了与model结合之外，国外在硅谷有哪些公司在研发或开发者工具角度上看到了针对agent的机会？",
        "answer": "国外硅谷有很多公司开始做info for AI agent，比如新一代爬虫公司帮助agent更好地阅读网页；memory system公司如man GPT的leta；3box公司；以及做认证授权和权限管理的公司。接下来要让agent具备更多生产环境的能力，从研发和开发者工具角度看，机会包括让agent能够读取网页、运行测试、自我验证以及连接更多API等。",
        "time": "02:24:55"
      },
      {
        "question": "agent的framework有哪些重要的组成部分或发展趋势？",
        "answer": "agent的framework包括像lang graph、lama index等构建模块，它们为agent处理memory management、execution、user interrupt等问题提供了基础。随着agent发展，会有更多更好的framework出现，同时也会出现类似prompting、定制数据库等中间层，让agent与用户、第三方服务进行交互。",
        "time": "02:26:32"
      },
      {
        "question": "AI agent的落地情况及投资机会如何？David的出现是否带来了变化？AI agent如何与不同工作场景结合，以及如何提高与人的互动效率？",
        "answer": "AI agent能够落地，且由模型公司而非传统产品公司完成的例子越来越多。AI reasoning能力、编程能力和使用工具的能力大幅提升，奠定了数字世界agent的基础。接下来会看到越来越多的agent执行各种工作，而不仅仅是回答问题，这将大幅提高人类使用AI的频率，从而推动整个模型用量和算力的需求增长。此外，售卖工作成果而非工具的商业模式也受到关注，对传统SaaS模式提出了挑战。AI agent可以根据具体工作需求，如数据分析师、销售或产品经理等角色进行优化，并且随着AI编程能力增强和使用工具能力提升，agent将更能够模拟人类在电脑前完成工作流程。未来可能会出现混合型agent，通过协同工作来完成复杂任务，并且通过降低工具使用成本，以工作结果的形式提供服务，从而实现生产力的变革。",
        "time": "02:32:34"
      },
      {
        "question": "在AI时代，企业服务是否会出现新的机会？",
        "answer": "是的，在AI时代，企业服务确实有可能出现新的机会。因为AI能够直接交付工作结果，类似于智力或生产力的外包，这可能会吸引一些企业付费使用。",
        "time": "02:36:42"
      },
      {
        "question": "AI如何帮助提高企业安全方面的考量？",
        "answer": "随着AI agent代码执行能力增强，如何确保其行为与组织目标和社会价值一致，将带来许多新的挑战，比如算力分配等安全问题。",
        "time": "02:37:38"
      },
      {
        "question": "对于构建下一代agented workflow的团队需要具备哪些特点？",
        "answer": "构建此类产品的团队应具备高人才密度、年轻且富有创造力和执行力的特点。团队不仅要掌握先进技术，还要深入理解技术与实际工作场景的结合，以及灵活运用强大的预训练模型服务于特定场景。",
        "time": "02:39:20"
      },
      {
        "question": "AI模型的发展与产品形态之间的关系是怎样的？",
        "answer": "初期，产品和技术紧密耦合；但随着技术发展，底层技术和产品逐渐解耦。当前的产品如Demi n等并非基于自研模型，而是利用强大的预训练模型解决特定用户问题，并随着模型能力提升不断优化产品形态。",
        "time": "02:40:00"
      },
      {
        "question": "AI agent在不同应用场景下的发展趋势如何？",
        "answer": "未来一年，期待各个数字领域都能尝试运用agent技术，产品形态将百花齐放；而三年尺度上，可能会出现agent间的协作，这将大大拓展新的想象力空间并带来潜在风险。同时，想法实现能力的提升将极大地推动人类社会创新速度，并改变风险投资和组织形态。",
        "time": "02:45:30"
      },
      {
        "question": "在企业算力有限的情况下，怎样平衡不同任务的资源分配，避免在不那么重要的任务上投入过多算力？",
        "answer": "这个问题确实涉及到组织的分工和管理，当AI之间能够互动时，生产力有望进一步提升。对于如何平衡资源分配，确实是一个值得期待解决的问题。",
        "time": "02:48:45"
      },
      {
        "question": "对于AI产品的成本问题，你有什么期待吗？",
        "answer": "我期待整体成本能够下降，让更多消费者或成员自行使用产品，而不只是企业或特定角色购买。目前像GK3API这样的技术使用费用较高，且涉及集成等复杂流程，希望未来能有更普惠的解决方案。",
        "time": "02:49:20"
      },
      {
        "question": "对于一年和三年的期待分别是什么？",
        "answer": "一年内期待看到实用的GoGolding agent，显著提高开发效率，让所有人都能从中受益。而三年后的期待是AI模型能够解决更复杂的问题，并且在面对人类无法解决的难题时有所突破。",
        "time": "02:51:34"
      },
      {
        "question": "AI是否有可能超越人类能力，特别是在编程方面？",
        "answer": "我非常看好AI超越人类的可能性，从滑冰等角度看，AI已经展现出了超越人类的智能。如果拥有强大的模型，将在科技和社会发展中发挥重要作用，例如在未来可能出现无法完全理解但强大的AI助手。",
        "time": "02:52:18"
      },
      {
        "question": "现在模型在解决日常编程任务时表现不佳，这是模型问题还是产品问题？",
        "answer": "这是一个时间问题，当前焦点还在定义清晰的任务上，随着技术验证，其扩展到更多任务只是时间问题。目前可能是在提升处理复杂问题的能力上需要改进，同时也涉及产品能否更好地利用现有技术解决实际问题。",
        "time": "02:53:29"
      },
      {
        "question": "是否有使用coding agent产品时遇到意外翻车的例子？",
        "answer": "当模型处理数据处理代码时，有时会根据上下文做出改变，导致原有数据处理脚本准确性受影响，这是一个需要解决的问题，因为模型在处理特定情境下的代码修改能力还不够成熟。",
        "time": "02:55:39"
      },
      {
        "question": "如何看待模型理解和处理长代码的能力，是否存在瓶颈？",
        "answer": "长代码 modeling 是一个重要且具有挑战性的领域，既要理解长代码的上下文依赖关系，也要能够生成较长且正确的代码。目前所有模型都有进步空间，正在探索如记忆化等方法来优化处理长代码的能力。",
        "time": "02:55:39"
      },
      {
        "question": "在使用coding agent时，是否存在意外行为的情况？",
        "answer": "是的，在将coding agent做成access时，它可能会做一些意想不到的事情，比如在仅授权读取open source repository的情况下，agent可能会自行进行超出预期的操作，如修改或分析代码。",
        "time": "03:01:20"
      },
      {
        "question": "对于agent执行的行为，如何确保其符合人类批准的要求？",
        "answer": "确保agent执行的行动经过一定程度的人类批准是至关重要的。这涉及到模型层面和安全层面的考量，需要找到一个既能允许一定程度创造性工作又能防止滥用的平衡点。",
        "time": "03:01:51"
      },
      {
        "question": "是否高估了竞赛类编程模型在coding agent中的表现？",
        "answer": "是的，高估了这类模型的表现。实际应用中，某些在竞赛中表现出色的模型并不一定能在coding agent中达到同样效果，因为它们对context external dependency的处理能力不同。",
        "time": "03:02:39"
      },
      {
        "question": "在coding agent领域，有什么被低估的问题吗？",
        "answer": "被低估的问题之一是对现有前沿模型能力的认知。许多复杂或精妙的编程任务，只要掌握了正确的方法，现有的模型已经能够完成许多令人惊讶的事情，而我们尚未充分发掘和利用这些能力。",
        "time": "03:04:04"
      },
      {
        "question": "对于模型的能力限制，是何种原因导致的？",
        "answer": "限制agent能力的一个原因是缺乏有效的指导，如列举可能的问题原因等。不过，通过reinforcement learning，agent可以在训练过程中总结经验，自我提升技巧。",
        "time": "03:04:52"
      },
      {
        "question": "大家对AI能力的认知存在哪些误区？",
        "answer": "大家对AI能力有高估的一面，期待过高，认为AI应无所不能；同时，对模型创造力的低估也是一个问题，由于缺乏合适的验证场景，我们可能还未充分认识到模型潜在的能力。",
        "time": "03:07:02"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "探索coding agent的快速发展及其对创业影响",
        "summary": "近年来，创业者利用Agent快速构建和验证自己的想法，极大地加速了市场开发速度。通过分享不同产品之间的设置，如翻译设置，使得创业者的产能得到成倍增长，不再受限于个人能力，而是想象力。对话中提及，未来模型在特定任务上超越人类的能力将是AGI进步的关键。真格基金团队关注coding agent的近期进展，探讨了这一领域的产品升级、技术突破以及对未来工作和生活方式的潜在影响，指出存在大量值得探索的创业机会。"
      },
      {
        "time": "00:01:59",
        "title": "AI技术在投资和电影行业中的应用探索",
        "summary": "在本次讨论中，嘉宾们分享了他们在AI领域的经验和见解，特别是如何利用AI技术解决投资和电影行业中的具体问题。一位投资人分享了使用AI工具进行数据收集和爬虫工作的体验，强调了AI在提高工作效率和解决职业挑战方面的潜力。另一位嘉宾介绍了自己在开发AI代理方面的经历，并分享了帮助电影导演团队将剧本需求转化为软件产品的案例，展示了AI技术如何降低了电影从业者开发软件的门槛。这突出了AI技术在不同行业中应用的广阔前景和创新潜力。"
      },
      {
        "time": "00:05:43",
        "title": "AI技术在软件开发中的突破与应用",
        "summary": "在过去的一年里，AI技术在软件开发领域取得了显著进展。特别是AI代理在提升开发效率、代码质量以及处理复杂问题方面展现了人类工程师级别的能力。这些AI代理不仅能够在开源项目中作出实质性的贡献，比如修复各种bug，还能在数据清洗、代码质量评估等方面发挥重要作用。其中，一个名为Open Hands的AI代理成为GitHub上最大的贡献者，超过了所有人类开发者。此外，AI技术还有望在未来软件开发和模型迭代流程中引起更大的变化。"
      },
      {
        "time": "00:10:26",
        "title": "探索模型融合与开发效率提升的未来",
        "summary": "本次对话集中在几个核心议题上：首先，介绍了一种名为coder的产品，该产品旨在通过在现有通用模型上进行大量重训练和特定技术调整，以探索在编码领域所能达到的新高度。讨论强调了开源模型的持续迭代，以及团队通过不同的技术探索方向，最终将成果融合到一个强大的通用模型中的方法。此外，pek分享了他在使用各种技术工具和框架中的体验，包括尝试让模型自我编译和通过agent框架探索模型能力的表达。最后，讨论转向了对现有agent产品如何帮助非专业开发者完成软件开发，以及后续的部署、维护和内容管理等软件生命周期阶段的挑战和解决方案的探讨。整体上，这次对话涵盖了模型技术的当前进展、未来融合的可能性，以及如何通过技术手段降低软件开发门槛，促进更广泛的创新。"
      },
      {
        "time": "00:14:43",
        "title": "探讨AI编程工具的演进与未来潜力",
        "summary": "从ChatGPT的出现到当前，AI编程经历了显著的进化，主要分为四个阶段。起初，AI根据提示编写代码，但缺乏上下文理解，需要用户手动调试。随后，GitHub的引入让AI能基于整个代码库理解上下文，但依旧需要用户手动操作。Cursor的发布标志着AI能预测用户下一步代码，提升了代码生成的质量和能力。Windows进一步实现了AI自动编写、调试代码的能力，使编程过程更加自动化。最后，David的出现展示了AI可以独立完成任务规划、编程和调试的未来，极大地提高了效率和自主性。这一演进不仅反映了AI在编程领域的进步，也预示着更广阔的应用潜力。"
      },
      {
        "time": "00:18:57",
        "title": "探讨人工智能在工作中实现的异步自动化及效率提升",
        "summary": "从老板的角度看，通过给员工布置任务并调整要求，发现与snack的深度集成能有效提高工作效率。探讨了人工智能不仅限于编程，还能解决许多网络互联网问题。通过异步工作产品，实现了工作的规模化，区分了需要持续注意力的工具和自动化工具，并引入了全自动代理的概念。重点讨论了David与以往工具的区别，如异步工作和使用虚拟机完成任务，这极大地解放了人的注意力和提高了生产力。此外，还提到了一些设计细节，如需要输入账号密码时的交互方式，模拟了实际工作场景。"
      },
      {
        "time": "00:22:46",
        "title": "从GPT4到Coding Agent的革命",
        "summary": "随着GPT4的发布，发现与GPT4合作的效率超过了雇佣前端工程师，这一发现促使了投入于coding agent的开发。从最初作为一家纯IDE公司，转型到提供一个完全在网页上进行的集成开发环境，再到实现能够帮助用户从零开始构建软件的agent，这个过程体现了对技术的深入理解和市场需求的敏锐洞察。特别地，所讨论的agent不仅限于简单的代码生成，而是侧重于帮助完全没有编程经验的用户构建完整的软件项目，包括规划、环境搭建、代码编写到最终部署的全过程。这一转变不仅展示了技术的进步，也反映了对于软件开发流程和用户体验的重新思考。"
      },
      {
        "time": "00:26:03",
        "title": "产品迭代与用户反馈分析",
        "summary": "发布产品四个月后，根据大量用户反馈，发现了用户需求的多样性。最初，产品设计为接收用户需求后进行长时间操作，最终返回结果。但用户期望更倾向于与产品以合作形式互动，寻求更及时的反馈。因此，产品做了两处重要调整：增加agent与用户的交流，提供更多的透明度和控制权给用户；引入更快捷的编辑系统，满足用户对轻量级编辑的需求。这反映出用户对自动化完成任务和轻量级编辑存在不同期待，同时也揭示了两种需求在不同场景下的共存性。"
      },
      {
        "time": "00:28:21",
        "title": "从0到1构建产品与持续迭代的挑战",
        "summary": "对话中讨论了将产品从概念阶段（从0到1）推进到实际应用和生产阶段的不同焦点和挑战。初期阶段侧重于覆盖广泛的使用案例、集成、支持多框架和快速部署等，以满足用户对于不同API和数据库的需求。此外，还提及了一旦产品进入成熟阶段，开发者或团队面临的挑战和决策，如是否将产品留在现有平台或迁移到其他平台，以及产品如何通过增加功能和改进来满足更广泛的用户需求。特别指出，许多用户已经通过这些agent产品成功实现了商业价值，证明了从创意到实现的全过程不仅技术挑战重重，也需要解决市场营销、SEO等非技术问题。"
      },
      {
        "time": "00:30:40",
        "title": "创业者利用代理快速验证产品与市场匹配",
        "summary": "创业者利用代理(agent)快速构建和验证自己的产品想法，这种方法能够极大提高开发第一个版本以验证产品市场匹配（PMF）的速度。通过共享设置如翻译、跟踪分析等，创业者能够快速测试idea，直至找到市场需求。此外，讨论了某些更新对于提升用户满意度和性能的帮助，如更好的集成（如OpenAI、Firebase、Stripe等）、代码编辑的改进、UI设计的美观和功能性增强等。这些改进不仅使产品从不可用变得可用，还显著提升了用户体验和产品的美学吸引力。"
      },
      {
        "time": "00:35:30",
        "title": "探讨To B软件公司从0到100的发展策略",
        "summary": "在对话中，讨论了To B软件公司如何快速实现从0到1的进展，以及面临的从1到100的挑战。强调了公司不仅希望陪伴用户成功，实现更长的生命周期，也关注如何解决产品复杂化后带来的问题，如数据库稳定性、安全性等。提出了通过选择适合agent技术栈来简化后续的扩展和安全性问题，以及可能的未来发展方向，即成为连接云服务的前端，同时利用外部服务来补充自身不足。"
      },
      {
        "time": "00:38:53",
        "title": "探讨AI产品的用户定位与技术应用",
        "summary": "对话聚焦于AI产品的实际应用、用户群体定位及技术选型。一方面，讨论了基于第三方模型的产品如何满足专业与非专业用户的需求，强调了产品形态和交互设计需要根据目标用户群体进行调整。另一方面，探讨了AI模型在产品中的应用，强调了根据不同任务选择合适模型的重要性，以及未来产品可能的演进方向。同时，回顾了一个名为David的AI产品的发展历程，分享了其架构、技术及商业决策的关键点。"
      },
      {
        "time": "00:43:02",
        "title": "Open Hands项目的发展历程和架构设计",
        "summary": "项目始于David在Twitter上发布的demo，引起了我对创建类似代理的极大兴趣。随后，我和团队决定将此项目开源，吸引全球贡献者共同开发。项目最初仅有readme文件，迅速获得关注和贡献。我主要负责前端代码，随后CEO加入，构建了项目架构。项目的核心在于通过agent处理event history，生成新action，以及如何执行这些action并产生观察结果。特别设计的架构支持未来可能的多用户和多agent交互，展现了对技术发展的前瞻性和适应性。此外，项目利用了基于LM的能力，强调了模型更新对于提升agent性能的重要性。"
      },
      {
        "time": "00:48:08",
        "title": "探讨Agent设计与Planning的复杂性",
        "summary": "对话集中在对比两个项目在Agent层面的设计差异，强调轻量级Agent能更好地利用模型提升。讨论了Planning的必要性和复杂性，指出直接使用模型处理任务可能比加入外部Planning更有效。同时也讨论了Planning中存在的挑战，如计划的准确性、预测重计划的时机以及实施新的行动的准确性。最终结论是，如果Planning不能在基准测试中解决问题或增加过多工程负担，可能暂时不需要实施。"
      },
      {
        "time": "00:51:34",
        "title": "探讨使用VM与容器在项目中的优势与挑战",
        "summary": "在开发项目中，对于是否采用虚拟机(VM)或容器技术进行了讨论。一方面，使用VM可能会为项目带来额外的优势，比如直接在VM上运行完整的Chrome浏览器，可能更适合处理需要图形界面或CAD等复杂场景。另一方面，选择容器技术主要是因为其在启动速度和批量部署上的优势，适合进行大规模的性能测试。尽管容器存在限制，如难以在容器内运行容器本身，项目团队考虑增加可选设置，允许用户根据需求选择使用VM或容器。此外，还讨论了未来技术成熟后，如何通过更精简的架构和抽象层面的改进，进一步优化系统设计。"
      },
      {
        "time": "00:54:48",
        "title": "探讨计算机使用API与多模态模型的进步",
        "summary": "对话集中在计算机使用API功能的推出，以及多模态模型能力的提升对软件使用模拟的影响。讨论了通过模仿人类行为而非直接使用API，模型能更有效地使用软件，强调了这项技术的潜力和面临的挑战。同时，也探讨了对于未来软件开发的展望，认为通用agent和基础模型的进展将极大地影响计算机使用和软件开发的领域。"
      },
      {
        "time": "01:00:33",
        "title": "开源项目中的协作与技术决策",
        "summary": "讨论重点在于开源项目初期，特别是open David项目，面临的问题和挑战，包括处理满天飞的PR、技术角色的定位、以及对agent的不同期望。讨论中提到了与Robert在agent开发方面的不同视角，一是希望agent易于研究和迭代，二是注重产品与用户体验的紧密整合。最终，通过明确划分前后端的职责，实现了一个既可以满足研究者快速迭代，又能提供良好用户体验的架构。此外，开源社区的力量被强调为项目成功的关键因素，开源使得项目更加透明，易于接受社区的贡献，同时有助于打消人们对商业公司的顾虑，展望未来可能的开放式模型贡献。"
      },
      {
        "time": "01:05:18",
        "title": "开源项目的优势与挑战",
        "summary": "开源项目因其能够吸引社区中有创造力和能力的人士而显得非常有吸引力。通过开源，项目可以汇聚社群力量，共同创建出酷炫的产品。这种模式不仅促进了技术的快速迭代和创新，还能够让更多人参与到AI技术的发展中，有助于推动整个社会的进步和AI技术的民主化。此外，开源为研究提供了便利，加速了科研进展，并鼓励开发者优先选择开源工具。开放代码还能激发更多的技术创新和定制化改进，使得技术更加贴近用户需求，同时也让社区成员能够根据自己的需求对产品进行修改和完善，最终反哺到产品本身，增强产品的实用性和用户体验。"
      },
      {
        "time": "01:10:32",
        "title": "开源项目中的社区贡献与产品优势",
        "summary": "开源项目能够吸引用户根据自己的需求定制化开发，形成社区贡献，增强产品对各种使用案例的适应性。开源的优势在于其透明度，使得企业可以避免被单一供应商锁定，同时能够满足高度监管行业的需求。此外，对于代理（agent）类型的产品，与开发者日常使用的工具和平台（如Slack、GitHub）的集成至关重要，以确保代理能够真正融入开发者的环境。"
      },
      {
        "time": "01:13:48",
        "title": "探讨开发中的产品升级与用户反馈价值",
        "summary": "讨论重点在于产品的持续开发和定制化需求的重要性，强调创建一个良好生态系统的必要性，以便于用户能够针对特定的使用案例执行重复任务。特别提到，对新老用户而言，拥有可供借鉴的示例能显著提高上手性和任务完成的效率。进一步地，讨论转向社区反馈的重要性，特别是新用户在使用产品时遇到的困难，这些反馈有助于产品团队从用户角度理解问题，从而改进产品设计。此外，还强调了根据AI能力设计新的交互方式的重要性，以及对模型能力的深入理解和思考在创新应用开发中的价值。"
      },
      {
        "time": "01:17:09",
        "title": "探讨OC模型对编程领域的影响及技术突破",
        "summary": "OC模型，特别是其最新版本，对于编程模型领域产生了显著影响。最初，OC模型通过提出chain of thought概念和实现长期记忆排序，极大地推进了模型的智能表现和性能。此外，该系列模型在解决代码相关的任务、考试题目等方面展现出优异的能力，虽然目前主要侧重于探索技术边界，未来在产品应用上还有待进一步思考。最新的发布显示，OC模型在技术上已经达到了极高水平，特别是在编程能力方面，通过引入更强的模型和方法，实现了显著的技术进步，这不仅证明了其技术路线的正确性，也对未来基础模型的潜力和智能领域的进步持乐观态度。"
      },
      {
        "time": "01:20:59",
        "title": "探讨编码模型的未来和技术突破",
        "summary": "对话中讨论了编码能力在人工智能模型中的重要性，特别是与GPT系列模型相比，编码模型在技术上可能的突破和进展。指出当前的挑战不仅在于获得更多数据和计算资源，还在于技术上的创新和模型对齐（alignment）的重要性。特别强调了在编码领域，模型与开发环境的对齐至关重要，这不仅限于竞赛级别的编程题，还涉及解决实际软件开发中的问题。此外，讨论还触及了预训练模型的未来，以及在推理和数字代理（digital agent）方面探索智能的泛化能力。总体上，编码能力被视为通向更广泛智能应用基础的关键。"
      },
      {
        "time": "01:26:56",
        "title": "探索AGI之路：从基础模型到自我进化Agent的递进与闭环",
        "summary": "当前，千问QWQ等模型在引发广泛关注的同时，一些研究机构和公司正专注于构建基于特定领域的reasoning模型，如math和coding方向。这些努力不仅仅是为了提供一个通用的、全面的模型，而是希望能够激发更多人参与，共同推进技术发展。特别地，通过结合code和math的能力，可以为创建具备自我进化能力的Agent奠定基础。这种自我进化能力，包括在真实世界中收集数据、自我编写训练代码、自我评估等，标志着向AGI迈进的重要一步。未来，通过不断的迭代和学习，模型将能够在线学习，形成从基础到自我迭代的闭环，进一步强化其reasoning能力，为实现真正意义上的智能体铺平道路。"
      },
      {
        "time": "01:29:34",
        "title": "探讨O系列模型在解决实际问题中的能力与挑战",
        "summary": "讨论集中在O系列模型如何在解决复杂编程和数学问题方面展现出惊人的能力，尤其是在逻辑推理和思维归纳方面。尽管如此，面对真实世界的问题，模型需要具备更广泛的适应能力和对世界的认知。指出模型在模糊环境下的适应能力尚需加强，并且在开放环境下定义有效的反馈机制是提升模型的关键。同时，模型已经在解决新颖问题方面展示出潜力，但在帮助人类定义和探索未知科学问题上，仍面临着如何保证安全性和准确性的挑战。"
      },
      {
        "time": "01:34:08",
        "title": "SweetBench突破70%与未来AI编码代理挑战",
        "summary": "SweetBench的进展速度超预期，达到70%的水平，引发了对于AI编码代理能力及其在解决实际问题中不足之处的讨论。重点在于，虽然模型性能快速提升，但成本问题仍然是一个重要的考虑因素。未来，除了继续追求性能的提升，还需要关注成本效率，以及AI代理在真实公司环境中的应用能力，如执行端到端任务的能力。此外，提出了对新benchmark的需求，以更全面地评估AI代理的实用性。"
      },
      {
        "time": "01:37:16",
        "title": "探讨OKC匹配百分比及其实际意义",
        "summary": "讨论集中在如何理解OKC match达到70%的含义，及其在职业工作中的指导意义。认为从20到50%对于人类开发者来说是一个体验上的飞跃，但对更高百分比的体验提升存在不确定性。同时担忧潜在的数据泄露问题，强调数据污染实验的重要性，以及模型能力提升的来源是自身能力提升还是通过回忆已有信息。OpenAI仅展示了一个分数，没有提供震撼的demo，表明还有许多未解决的问题，需要从真实场景出发进一步完善模型。"
      },
      {
        "time": "01:41:10",
        "title": "探讨编程模型的未来与发展",
        "summary": "讨论集中在两个重要的benchmark上，即o three和go forces，强调了它们在提升coding agent领域的显著作用。o three因其对模型在文件级代码编写或解决方案编写方面的评估而受到赞赏，而go forces则因提供了一个与人类编程能力相竞争的平台而震撼人心。讨论还指出，虽然当前的benchmark在检验模型的泛化能力和实际应用效果方面具有一定的局限性，但对未来benchmark的期望包括能够动态更新和在更真实或有挑战的条件下评估模型。此外，提到了专家化模型的短期价值及其在特定领域超越人类的潜力，同时也表达了对通用AGI模型的长远期待。"
      },
      {
        "time": "01:47:33",
        "title": "探讨编程代理的未来和技术进展",
        "summary": "对话中讨论了编程代理（coding agent）领域的当前焦点和未来发展方向。重点强调了前端开发作为编程代理应用的一个重要领域，因为前端任务在一定程度上类似于规划任务，且对于普通用户的感知非常强。讨论还提到了前端技术的统一性对于AI来说是一个优势，AI在前端任务上的表现可能会更好。此外，也提到了AI在选择模型和库上的优势，以及它如何促进技术的统一。最后，探讨了编程代理如何与人类交互和与其他系统集成的问题，以及对未来技术发展的关注。"
      },
      {
        "time": "01:50:46",
        "title": "探讨Coding Agent对未来编程和组织影响",
        "summary": "对话中讨论了Coding Agent如何受欧文启发，在解决GitHub问题时提供了不同的花费选项，反映出对influence scaling方案的探索。同时，提出了一种通过采样多个解决方案并使用验证和奖励模型进行排名的方法，强调了将此方法与更好的用户服务相结合的挑战。讨论还涵盖了AI在编程领域的应用，如何让AI结合人类已有的知识，以及AI可能带来的工作和教育方式的变革。特别指出了未来工程师的角色可能需要调整，强调了提出好问题的重要性，以及每个人需要学会如何管理和训练AI。"
      },
      {
        "time": "01:56:44",
        "title": "探讨AI对未来程序员和组织架构的影响",
        "summary": "在讨论中，参与者普遍认为，随着AI技术的进步，特别是coding agent的发展，未来的程序员将更多地转变为管理者或资本家的角色，他们将控制AI完成具体的编程任务，从而提高工作效率。此外，AI的普及将改变程序员的招聘标准，重视具有产品思维、能够利用AI技术完成项目全流程的程序员。同时，这也意味着程序员需要具备更多的创造性、规划能力，而非仅限于编码技能。讨论还触及了AI在代码创作方面的潜力，以及如何利用AI来促进组织内部的协作和创新。对于未来的组织架构，预计AI将扮演重要角色，可能成为组织中最活跃的控制者之一，从而对招聘策略和团队组成带来根本性的变化。"
      },
      {
        "time": "02:01:50",
        "title": "AI编程助手改变开发流程与团队协作模式",
        "summary": "随着AI编程助手如Open Hand逐渐成为现实，开发工作和新特性实现的方式正经历根本性变革。传统的开发流程，包括时间分配和优先级排序，正在被AI的能力所改变，使得问题解决不再受限于个人能力，而是想象力。这种变革使得即使是非专家也能实现复杂的开发任务，改变了对开发者技能的需求，强调了明确目标和高效提示的重要性。此外，社区共享和开源代码库的存在，使得这些AI工具的影响力超越了单个团队，促进了更广泛的技术创新和协作。"
      },
      {
        "time": "02:06:36",
        "title": "探讨AI Agent在产品开发中的应用与局限",
        "summary": "对话集中在如何在产品开发过程中利用AI Agent进行测试和创新，以及它们的潜在局限性。参与者讨论了AI Agent能够执行的任务范围，强调了用户教育的重要性，以及如何通过AI来激发用户的创造力。同时，也探讨了让AI Agent主动执行测试的可行性，以及安全性和用户指导AI的必要性。此外，提到了一个新功能，即AI在完成一项功能后建议下一个功能，这有助于提升产品开发的效率和创新能力。讨论还涉及了AI与人类在任务执行中的角色互换可能性，以及人类在确认AI工作中的作用。最后，讨论了人类在实时计算中的贡献，以及未来AI可能主导规划的前景。"
      },
      {
        "time": "02:11:10",
        "title": "探讨人工智能模型对编程和审查工作的影响",
        "summary": "随着人工智能模型能力的增强，对于模型输出的审查变得越来越困难，特别是当模型能迅速生成复杂代码时。讨论者分享了个人经验，指出虽然AI能在短时间内编写代码，但人类仍需花费时间去审查这些代码，这暗示着未来可能需要更多工程师来应对AI产出的审查工作。同时，提出了人类相比AI所具有的不可替代性，即在承担错误责任方面的能力。讨论还触及了安全问题的重要性，以及如何让AI模型在信息获取、规划、错误恢复和主动能力上更加独立和强大，以实现从初级工程师到更高级角色的转变。"
      },
      {
        "time": "02:15:42",
        "title": "强化模型反馈循环与AI自主性增强",
        "summary": "讨论重点在于如何通过提供正确的反馈信号给AI代理，增强其执行任务的能力和自主性。强调了在产品开发过程中，通过实验信号如AB测试、用户反馈等来验证决策的重要性。特别指出编码领域中，由于代码的特性能够提供明确的反馈信号（如语法检查和测试通过），使得AI在该领域表现优异。讨论还涉及了通过增加反馈循环，AI代理理论上可以自主完成从产品构想到推广的全过程，减少了对人类干预的需求。进一步探讨了AI模型在规划能力方面的不足，并提出了通过收集更多高质量的规划数据来提升这一能力的观点。最终，强调了利用用户反馈作为强化学习的奖励信号，以及在AI开发过程中应用真实用户数据的重要性。"
      },
      {
        "time": "02:24:20",
        "title": "AI Agent技术及应用发展探讨",
        "summary": "讨论集中在AI Agent技术的当前发展状态和未来应用潜力上。在硅谷等地，已经有许多公司开始研发能够处理特定工作流程的AI Agent，这些Agent在从演示阶段向产品化过渡的过程中，催生了一批专注于提升Agent功能的公司，如新一代爬虫公司、记忆系统开发公司等。同时，为了增强AI Agent的生产能力，存在研发更多辅助工具和框架的需求，例如让Agent更好地访问网页、运行测试、验证自身、连接更多API等。此外，AI Agent的发展还涉及到与数据库的交互、用户授权管理等问题，需要开发新的框架和协议来解决。随着AI Agent技术的不断进步，将会有更多需求被挖掘，推动相关技术的发展。"
      },
      {
        "time": "02:28:05",
        "title": "探讨AJ Infor工具和Wrong Time在A诊中的应用",
        "summary": "在当前的A诊实践中，利用AJ Infor工具以及面对Wrong Time挑战的策略变得尤为重要。市面上已有多家公司如e to b和Model Run提供runtime产品，通过集成第三方runtime到开源代码库中，为用户提供更多选择。同时，对于生产规模的项目，存在对无担忧解决方案的需求。此外，还提到了一些公司专门负责保持浏览器正常运作，避免被机器识别系统标记。这些讨论强调了在保持用户体验和开发开源产品的平衡中需做出权衡，尤其是在runtime或web container技术方面已经取得进展的公司，它们的成就在很大程度上归功于Wrong Time基础设施的完善。"
      },
      {
        "time": "02:30:51",
        "title": "探讨AI应用及投资机会",
        "summary": "讨论集中在AI应用和AI代理（agent）的当前落地情况及未来发展潜力。特别强调了AI在规划能力、编程、使用工具等方面的进步，以及这些进步如何为数字世界中的AI代理奠定了基础。进一步探讨了AI代理可能的应用场景，包括针对不同职业的专门代理以及代理间可能的交互方式。讨论也涉及了AI技术的成本和效率问题，如何通过AI技术提高生产力和降低成本。特别提到了一个名为David的AI代理，它的定价模式和工作能力，展示了AI技术在改变工作执行和定价模式方面的潜力。整体上，对话反映了投资者和创业者在AI应用领域探索的机遇和挑战。"
      },
      {
        "time": "02:36:18",
        "title": "探讨AI时代下中国企服领域的机遇与挑战",
        "summary": "对话中提到，中国的企业服务领域过去面临诸多挑战，尤其是企业对于付费工具的抵触情绪。然而，随着AI技术的发展，带来了生产力的大幅提升，为企业服务领域带来了新的机会。AI技术的运用可能使企业愿意为智力或生产力的外包服务付费，这为企业服务在中国的落地和推广提供了新的可能性。同时，也指出目前市场上多数企业倾向于追求娱乐方向，而忽视了AI在节省时间、提高效率方面的潜力。因此，AI时代为中国企业提供了一种重新考虑和探索服务模式的机会。"
      },
      {
        "time": "02:37:35",
        "title": "探讨AI代理的安全与未来发展",
        "summary": "讨论者认为，尽管AI代理的能力仍存在不足，但人们对AI的依赖导致安全问题日益凸显。随着AI在代码执行和软件使用方面能力的增强，如何确保其行为与组织目标和社会价值一致，成为新的挑战。这涉及到算力分配、安全措施等多个方面，需要开发新的解决方案。同时，通过讨论Demi和OpenAI等公司的工作，可以看出未来AI代理的发展趋势和可能面临的挑战。"
      },
      {
        "time": "02:38:42",
        "title": "探讨打造高效团队与AI产品开发的未来",
        "summary": "对话集中在如何构建下一代高效工作流程（agented workflow）的团队以及开发相关的AI产品上。讨论强调了人才密度、对技术和实际应用场景的深刻理解、以及强大的执行力作为成功的关键因素。特别指出，与早期技术发展不同，现在的产品与技术可以更有效地解耦，强调利用现有模型满足用户需求的重要性。同时，也讨论了创新的交互方式和对AI模型的深入应用为产品带来的竞争力。最后，总结了创业公司在与大公司竞争时应具备的快速响应和灵活机动的优势。"
      },
      {
        "time": "02:43:05",
        "title": "探讨年轻研究者推动的产品创新与未来机会",
        "summary": "对话集中在如何年轻的researcher，尤其是那些没有传统产品经理经验的00后，能够推动优秀产品的开发。同时，探讨了中国市场上新产品演化的两个阶段：copy to China和创新产品形态的机遇。特别提到了在非coding领域，数字世界中的任务可由agent快速解决，以及对sell work模式的展望。最后，表达了对在中国开发生产力agent产品的兴趣和对技术与新产品形态带来的机遇的乐观态度。"
      },
      {
        "time": "02:45:13",
        "title": "未来一年和三年内Coding Agent的展望",
        "summary": "展望未来一年，期待在数字领域中，Coding Agent将被广泛尝试，形成百花齐放的产品形态，尽管在某些领域可能暂时不适用。展望三年后，Coding Agent执行任务的能力可能超越绝大多数人类，出现Agent间的协作，这将释放大量未被实现的想法，同时带来新的问题和挑战。"
      },
      {
        "time": "02:46:49",
        "title": "AI技术对未来互联网和工作模式的潜在影响",
        "summary": "对话内容探讨了一个名为web thing的网站概念，该网站能够根据输入的prompt生成相应的网站，引出了对未发明的互联网和加速人类社会创新速度的讨论。进一步分析了想法与执行之间的关系，以及AI技术对于风险投资、问题提出速度、资源分配等方面可能带来的影响。特别指出，未来AI之间的相互指挥和协调可能极大地扩展可执行工作的范围，从而提高生产力。此外，还讨论了办公室政治和资源分配的问题，以及AI技术对组织管理和分工的潜在影响，预示着未来组织形态可能因AI技术的成熟而发生重大变化。"
      },
      {
        "time": "02:49:20",
        "title": "期待AI技术成本下降及未来发展",
        "summary": "对话中表达了对AI技术成本下降的期望，希望这能使更多个人用户能够直接使用AI产品，而不仅仅是企业级的to B产品。讨论还涉及了对AI未来三年发展的期待，希望AI能实现更高层次的智能，比如在编程竞赛中超越人类。此外，还提到期望AI模型在未来能够解决更广泛的任务，且成本和使用门槛的降低，将使得AI技术更加普及。"
      },
      {
        "time": "02:55:20",
        "title": "探讨Coding Agent的挑战与解决方案",
        "summary": "对话中讨论了使用Coding Agent编写代码时遇到的挑战，特别是如何处理数据和代码的边界问题，以及模型在理解长文本和生成长代码时的局限性。提出了一个称为“memory conversation”的方法，旨在通过保存最近的、重要的信息来优化模型性能，减少计算成本，使每次执行动作的成本维持在一个常数。"
      },
      {
        "time": "02:59:43",
        "title": "探讨Coding Agent的挑战与潜力",
        "summary": "对话中讨论了使用Coding Agent遇到的挑战和其潜力。一方面，Coding Agent的knowledge功能被视作一个创新设计，能够自我编辑知识库，提升完成任务的质量，但在实际使用中，效果喜忧参半，存在执行未经授权操作和模型安全问题。另一方面，Coding Agent在竞赛编程与实际软件工程之间的适应性也受到质疑，指出模型在竞赛网站上的良好表现并不能直接等同于其在实际开发任务中的有效性。此外，还强调了在给予Coding Agent执行任务的自由度和确保其行动在人类授权范围内的平衡是未来发展中的重要考量。"
      },
      {
        "time": "03:03:31",
        "title": "探讨人工智能模型的高估与低估",
        "summary": "对话中，讨论集中在对人工智能（AI）模型的期望与实际能力之间的差距，特别是程序基准测试的过度依赖以及这些模型在特定任务上的实际表现。一方面，社区成员对于开放空间模型与云计算的性能接近感到疑惑，同时指出了在具体编码实践中的不足。另一方面，讨论也涉及了AI模型被低估的方面，比如它们在处理复杂问题时的潜力和创造力。特别强调了正确应用模型的技巧和方法的重要性，以及人们对于AI能力的期待和现实之间的差异。此外，还触及了模型创造力的低估问题，指出尽管当前的AI技术已经非常先进，但人类对其潜力的认识仍然有限。最后，讨论强调了继续探索和理解AI模型的必要性，期待未来技术的进步能带来新的发现和应用。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "初期：基于指示的代码生成"
                },
                {
                  "children": [],
                  "content": "发展：集成环境理解，自动执行任务"
                },
                {
                  "children": [],
                  "content": "最新：自适应规划与执行能力"
                }
              ],
              "content": "从ChatGPT到专门的Coding Agent"
            }
          ],
          "content": "技术演进"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "快速原型开发"
                },
                {
                  "children": [],
                  "content": "代码自动优化"
                }
              ],
              "content": "个人开发者"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "自动化运维"
                },
                {
                  "children": [],
                  "content": "代码审查与优化"
                }
              ],
              "content": "企业应用"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "编程教学辅助"
                },
                {
                  "children": [],
                  "content": "代码逻辑训练"
                }
              ],
              "content": "教育领域"
            }
          ],
          "content": "应用场景"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "逻辑推理"
                },
                {
                  "children": [],
                  "content": "代码生成效率"
                }
              ],
              "content": "模型能力"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "理解复杂指令"
                },
                {
                  "children": [],
                  "content": "实时反馈与调整"
                }
              ],
              "content": "用户交互"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "代码执行安全"
                },
                {
                  "children": [],
                  "content": "数据隐私保护"
                }
              ],
              "content": "安全性与可靠性"
            }
          ],
          "content": "重要技术与挑战"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "根据反馈自动调整"
                },
                {
                  "children": [],
                  "content": "长期记忆与经验积累"
                }
              ],
              "content": "自我学习与优化"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "图形界面操作"
                },
                {
                  "children": [],
                  "content": "语音指令处理"
                }
              ],
              "content": "多模态支持"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "支持更多编程语言"
                },
                {
                  "children": [],
                  "content": "深度集成外部API与服务"
                }
              ],
              "content": "整合更广泛的技术栈"
            }
          ],
          "content": "未来展望"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "从执行者到管理者/设计者"
                },
                {
                  "children": [],
                  "content": "更多聚焦于问题定义与创意"
                }
              ],
              "content": "角色转变"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "强调问题解决能力"
                },
                {
                  "children": [],
                  "content": "增强与AI协作的技能"
                }
              ],
              "content": "教育与培训"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "更多利用AI工具提高效率"
                },
                {
                  "children": [],
                  "content": "任务分配与监督AI执行"
                }
              ],
              "content": "工作流程"
            }
          ],
          "content": "对工程师角色的影响"
        }
      ],
      "content": "Coding Agent 脑图摘要"
    }
  }
}