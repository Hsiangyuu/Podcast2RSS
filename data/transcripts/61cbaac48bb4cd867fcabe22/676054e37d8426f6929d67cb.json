{
  "pid": "61cbaac48bb4cd867fcabe22",
  "eid": "676054e37d8426f6929d67cb",
  "title": "EP 63. 直播回放：什么是开发大模型应用的新一代底层技术栈？对谈贾扬清，PingCAP黄东旭和AWS核心AI产品研发",
  "task_id": "zj78qpvpkxzrqxdp",
  "transcription": [
    {
      "time": "00:00:03",
      "text": "欢迎来到onboard，真实的一线经验，走心的投资思考。我是Monica.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:09",
      "text": "我是高宁，我们一起聊聊软件如何改变世界。",
      "speaker": "发言人3"
    },
    {
      "time": "00:00:16",
      "text": "大家好，欢迎来到omber，我是Monica。这段时间跑了好几个国家，怠慢了更新，还请大家多担待。2024年转眼就剩下不到两周了，看来接下来要继续努力。这一期是十月份一场直播的回放，虽然AI时代日新月异，最近几个月相信大家也被winsor devon等一众AI coding产品不断刷新我们对于AI时代软件开发的认知。不过这场几个月前对于更底层AI native应用，对于软件技术栈的讨论仍然不过时。",
      "speaker": "发言人4"
    },
    {
      "time": "00:00:50",
      "text": "今年上半年的第53期，我们邀请到swe bench作者以及replay augment等AI coding相关的明星公司聊了AI coding的话题。这一期我们从应用更底层来看，AI native的软件会对info技术栈有怎样的影响。在ChatGPT发布两周年之际，这个讨论正好也作为我们回顾系列的一部分。",
      "speaker": "发言人4"
    },
    {
      "time": "00:01:14",
      "text": "这次的嘉宾在软件技术上的各个领域都可谓是非常重磅了。Andy是AWS生成式AI核心产品barrak的核心成员，负责了AW上anthon o pic一系列重要API的同时，他也是linux foundation中cuban atis社区的重要成员，从云计算、分布式系统到AI技术设施都是绝对的一线专家。东旭是我们的返场嘉宾，开源数据库ping CAP的创始人兼CTO。这次本话题也是受到他的一条朋友圈的启发，围绕AI的应用开发会对整个软件开发范式，包括开发框架、数据存储和处理方式，观测性工程和质量体系等等带来怎样的变化？",
      "speaker": "发言人4"
    },
    {
      "time": "00:01:59",
      "text": "另一位返场嘉宾也是绝对的大牛，latin AI创始人兼CEO贾扬清。从google brain到facebook AI到阿里巴巴作为咖啡two py toh等核心info产品的元老，到创立lepton AI致力于打造AI cloud，他又看到整个AI开发生态有了怎样的演进，有什么可以从上一代AI inf a的变化中可以参考的变与不变。这次讨论的话题需要一些技术的基础知识。另外嘉宾长期在海外工作生活夹杂英文在所难免。我们不接受抱怨了也希望你能够做一些功课。不过欢迎在评论区提出你们的问题和观点，我们都会一一阅读，对我们以后的选题也会很有帮助。接下来我们还会有更多精彩内容写来保持关注，enjoy.",
      "speaker": "发言人4"
    },
    {
      "time": "00:02:49",
      "text": "今天的这个今天的话题我们来聊一聊大家在构建这个LM，基于这个大模型的application，大家发现需要怎么样新的技术站。我先简单做一做介绍，抛砖一下。大家好，我是Monica，我现在身份是在真格基金做早期投资。然后AI包括整个AI的stack，从底层info到应用层都会是我关注的这个重点。所以说今天也很有幸能够邀请到几位来做今天这个比较比较硬核的一个探讨。我们就开始我们几个嘉宾做一个简单的自我介绍。东旭先开始。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:25",
      "text": "OK大家好，我是东旭，是pink KAP的联合创始人兼CTO。其实pink KAP就是TIDB背后的公司，我们其实做一个分布式的关系数据库。其实我的这个我觉得我个人的主要身份还是一个工程师，作为我的第一个身份。剩下的比如说什么CTO，或者说创业起来都是后续的这些东西。所以其实基本上每天也都在摸代码。就是为什么这一波这一波的LM出来了以后，就开始发现开发的感受已经是完全不一样了。所以叫就就这段时间其实就build了一些东西，然后积累了一些体感。同时也在现在我们的这个IDB的数据库上，开始去拥抱这个AI的一个new的worker worker。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:21",
      "text": "我最早接触AI其实很早，其实甚至是在这一波AI之前的一波AI在之前，我当时应该是20 0809年的时候，当时在microsoft research asia，正好当时在做一些跟computer ation相关的工作。但那时候AI完全就是机器视觉，和AI完全是一个冷门行业。觉得可能找不到工作了，然后就投身这个是系统互联网这个行业去了。现在回头看感觉错过了好多东西。但没关系，这波就是这波AI我觉得像莫妮卡说的，跟之前的所有AI的浪潮，我觉得都是很不一样的一个事情。所以其实很期待今天能跟大家做一些交流。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:10",
      "text": "对我我最近其实是对那个DSPY是特别感兴趣。因为其实从一开始的prot engineering LM gi后这个prt engineering我觉得有些缺陷。然后现在慢慢的有这样的DSPY这样的这种programming from the engineering the framework，很符合我想象中的一些未来的一个pro engineering的发展方向。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:37",
      "text": "跟对于还不是那么熟悉的同学，可以用一两句话跟大家简单介绍一下那个DSPY是什么吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:43",
      "text": "GSPY其实是一个能够将你的自然语言的写的IOM的pro，他通过一个概念编译成了一些小的python的代码，这些代码其实也是一段段很小的point，然后最后把这个组合起来，能够让大约模型去做一些更复杂的任务。所以会让整个工作流变得更加可可编辑、可调试，同时可观测、可实现。所以我觉得DSPY是一个对很好的工具。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:23",
      "text": "那大概是什么时候开始，他应该是我记得应该是stanford的一篇paper出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:26",
      "text": "Stanford的一篇paper，对，大概可能也就是两个月前那的确还是一个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:31",
      "text": "相对来说比较新的一个工具。因为它是开源的，在给hub上已经有了很不错的这个section。下一位就请杨新来来聊一聊。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:42",
      "text": "好，大家好，我叫贾阳青。然后我们应该算是在AI这个领域一个老朋友。基本上在我从硕士开始，当时说还没有还没有流行的时候，就开始做机器学习模式识别这一块的事情。后来在bird读PHE，然后开始做咖啡，onex是他们cancer LOD的这一系列的框架。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:02",
      "text": "我现在的话是let AI在北美这边，我们做这个创业公司的创始人CEO，然后我现在想目前最近关注一些什么事情？最近我觉得最近总体来说都还都还挺有意思的。就是说我们一直在关注开源的模型跟变模型之间的一些平衡。最近的话在LN这个领域，开源的模型相对而言会落后边模型。一些新的这个topic的senate等等出来之后其实关注人很多。开源的模型，我们现在可能也就在继续的等说像伊朗的clock以及facebook的lama，后面新的进展是什么？",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:35",
      "text": "然后在IGC这个领域，其实突然我们会发现说文生图和文章视频一下就开始卷起来了。最近的话快手的这个客户等等这个模型出来之后，效果非常的好。尤其是在中文上的情况下面，他们用的HL08点。如果我记得对的话，那完了之后整体而言这个出图的效果细节，这个堆中的理解什么的都非常不错。所以这也是我们现在在关注的一个事情。从action的角度来讲，我们相当于是做一个AI的color struct。所以说这个开源模型的流行，以及大家对于自定义模型和自己部署AI兴趣，其实对我们来说是一个比较关注的方向。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:11",
      "text": "所以今天其实东旭和杨青都是我们欧过的，算是返场嘉宾。之前都是在东旭，我跟东旭在很久之前聊过一次，当时聊的还是泰迪避雷，当时还是这个大数据库。然后跟杨青应该是几个月前的也聊过一次，那时候我们主要是杨青在做的事情，然后对m LLM of那期也非常建议大家去温习一下。我觉得那期的分享也非常也也非常的棒。安迪来跟大家做下自我介绍。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:41",
      "text": "很高兴加入这个直播。我是接触AI是很早，就是本科的时候我们就开始做实验室的，这个地方是competition相关的项。然后到亚麻之后，我在alexa待过一段时间。然后去年是其实我大部分在亚麻的时间是在watch alizon container这一块。然后属于在亚麻过去这些属于各种参与了各种内部创业的项目，包括alexa的在的和这个computer这边的新的产品叫AW，然后再到去年的五月份是我的以前的包括亚马卡片的老VP或者老领导，他换组换到了新的AI的部门。然后让我开始考虑也去加入这个队伍。所以去年的时候我就加入了bad rock，就开始做。当然去年也是bad rock诞生的一个年份，就是加入一起做这个大logo这一块。",
      "speaker": "发言人5"
    },
    {
      "time": "00:09:44",
      "text": "然后主要现在负责的业务就是做跟entropic对接，然后做所有atropine cloud相关的模型。然后close three class three point five基本上都是我负责在bp上发布。这个大概就是我在亚麻，outside company可能在莫妮卡的这个简介上也提到，我从19年开始就参与这个。因为我个人的这个in interest兴趣导向去参与这个CNCF link foundation的各种开源项目的tribute。然后有一部分后来也有业务相关，所以我也一直是这个cp抗和排除抗的身高，所以也会。时不时都会业余贡献一些这种社区的时间。",
      "speaker": "发言人5"
    },
    {
      "time": "00:10:38",
      "text": "然后最有意思的一个最近比较关注的可能还是因为一直和ano pic合作，最近他们出了很多新的那种小工具，包括from engineering，他可以去evaluate你的prom的这个writing，然后去帮助你修改这个prom，让他变得更可爱。同时它还有一个叫enroll c artifacts，它可以让你去利用你的promo生成相关的各种租赁，包括代码H6在代码这一块做的特别好。然后你这些所有的artifex，包括你的prom，包括你的这个租赁work low，它变成了一个fx包，然后可以show到，cos不同的user可以消。所以这是目前我关注的。",
      "speaker": "发言人5"
    },
    {
      "time": "00:11:29",
      "text": "然后因为审稿的原因，我看那边有很多有意思的培训项目。有一个项目是比较底层的，叫clean matic，是一个在github上面搜到的。那个是他提供了一个目前解决的一个一种痛点，还可以画hardway来做这种model service的一个平台，这个是目前关注的几个东西。",
      "speaker": "发言人5"
    },
    {
      "time": "00:11:52",
      "text": "感谢几位的介绍。我就今天既然要聊这么一个话题，我读一下东西的那个朋友圈。我觉得这个是我觉得今天我们要聊的，提了一个很好的提纲挈领的一个一个主题。同时在你的朋友圈里面说说最近深度动手做了点东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:09",
      "text": "有一个感受是围绕着AI的应用开发，会诞生出一整套软件开发的新范式。会带来新的开发框架，新的数据存储和处理方式，新的可观测性工程，新的debug的方式和质量体系。这种级别的范式迁移也许意味着snowflake data break and data dog和oracle，而LM只是位于这个范式变化的中心，就跟台风也一样。而真正破坏力的势能是周边这些boring engineering所所带来的。我觉得对于可能对于整个赛还不那么了解的同学，我觉得几位也可以从自己的感受聊一聊。就是到底说开发一个基于大模LM的一个应用，跟我们所说的传统非LM的应用有什么相同，有什么不同的地方？为什么我们需要一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:00",
      "text": "新的对，我可以说一下，当时我写了一个朋友圈的一个背景，就是我当时其实是在做一些personal的这个agent，就有点像我想写一个机器人帮我自动去回复的这个IM的message，去了解我自己的一些偏好，然后帮我总结邮件，甚至帮我去organize我的日程。然后我先说跟传统软件特别不一样的这个地方。就是我刚才说的，所有这些事情在以前绝对是一个人的人力做不了的。比如说我就举个简单的例子，你任何一个程序员在LAM出来之前，你让他去单枪匹马一个礼拜去做一个总结邮件的这三句话总结邮件的程序，这是不可能写得出来的，是吧？所以我觉得有很多事情IOM的出现是让这件事情从零变成一。就是像这个终于有个脑子了，这是一个我觉得感受最大的一个不一样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:03",
      "text": "第二个这个不一样就是以前我们去写程序的时候，一切东西都是确定性的。比如作为一个程序员，你所有的东西你只要这个test写对了，或者说你这个print f能up to up to你的expected，那那你的程序应该是没什么错的对吧？但是LM这个东西跟你的这个prompt的关系实在是太大。而且尤其是你的这个prompt，就算你是固定的，你每一次执行出来的结果也是不一样的。所以这个determined这件事情，就我后来其实发现我花了大量的时间在不停的去将我的print的结构和整个工作流不断的polish，让它变得更加的可可复现。所以写写这个过程其实是当时写那个那个朋友圈的一个大致的background。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:56",
      "text": "然后后来在开始接触像包括像DSPY，包括lama index这些AI的这些新一代的application framework了以后，我发现现在大家的这些AI的开发工具想解决的问题，基本也是我刚才说的那些这些这些这些问题。所以这就是为什么我会有一个非常强烈的感受。就是在AI应用的开发过程中，他的这个思考方式以及我们用到的工具会跟传统的这些软件非常不一样，而且这在这一块的应用的场景，我觉得可能会比原来的这个呃传统的软件开发的应用场景会更多。就是比如像我刚才说的，你会突然发现一切程序都突然有了脑子，这件事情其实是想想还是挺惊人的。所以一会儿我再说那个agent这块的事情。我先说这么多。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:56",
      "text": "要不杨静也聊一聊。你们在lapon平台上也可以看到很多你你们用户开发的这个情况，可以让你眼中看到的这个LM应用的开发跟传统软件开发的不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "00:16:06",
      "text": "对我觉得就说是我们可以从两方面来考虑。第一个是从系统软件的方式，第二个是从应用软件的角度，对吧？从系统软件这一块我们会发现说AI今天的软件开发其实越来越多的关注在我们传统叫做科学计算这个领域。怎么样把模型跑得更快，怎么样用GPU等等这样的一些加速的硬件来做更加高效的推理吧。以及怎么样把我们在很多零零碎碎的paper当中所提到的加速的东西给这一块做成了一个标准化的软件。这个是今天我们在整个流程中看见的一个情况。已经收到。",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:39",
      "text": "可以这样说，就AI在越来越多的数据互换。数据互换的意思是说有一群写这个AI核心软件的工程师，他们在非常关注这些怎么把东西跑得更快，也更加稳定，更加规模化。同时其他人不需要关注这里头的代码。以前的时候AI的这个模型的开发和应用的开发是有点融一块的对吧？今天这两边开始分开了。很多大家做应用，比如做agent的，就根本不需要去关注这个GPU是什么，这个GPU里面在跑什么东西，他就调一个API就行。这个分化是和我们在数据领域看见数据库数据仓库什么的这种分化是一致的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:18",
      "text": "从应用的这个角度来讲，我觉得就是很有意思。以前的时候我们在做应用软件的时候，一般而言都是用相对比较deterministic的这样一种想法去做事情。我要写一个逻辑，写一个比如说API spect等。今天越来越多的大家发现说我有很多的应用是可以通过非常loose的input跟非常loose的output来做的那这个时候怎么样来定义一个用户体验，尤其是在在一个不会是100百分之百正确的情况下面，怎么样来提升一个AI的应用的有用的程度然后以及他在错误的时候到底怎么兜底。这些事儿变得作为应用软件工程师来说会想的越来越多。",
      "speaker": "发言人3"
    },
    {
      "time": "00:17:59",
      "text": "那可能我们就会发现说，以前如果说我们说是这个做，怎么说呢？做做系统对接的工作对吧？把这个不同的模块接起来的这样的一些工作可能变得越来越不太重要。而是反而那天而是反而那些产品经理和我经常把它叫做application。那里面就是做应用，做用户体验等等这一块的专业性变得越来越重要。因为就是你就不需要太多的关注系统，关注API等等的事儿，把这个API变得简单了。但是怎么样来保证质量、交互维护体验等这一块变得是最重要。",
      "speaker": "发言人3"
    },
    {
      "time": "00:18:31",
      "text": "刚才其实杨青老师你提的第一点我就挺好奇。你说AI在数据库化，你觉得就是把这个模型开发和应用开发分开。那我在像比如说在上一波LM之前的AI当时也有很多叫CNN conversation。那个时候其实也有些公司尝试也把这个模型当成APII来去做。那这个时候你觉得跟那个时候有什么不一样的地？",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:55",
      "text": "就是泛化能力太差，就是相当于一个场景，你一套API可能只能一个很specific的一个场景。这样对于海外的API的这个公司来说，就没有办法去做到一个很大的垂直的或者说有很大的商业感。对，这是sense。所以其实我觉得从用户体验的角度来说也是一样。就是我可能我一个应用程序有一大堆功能，但是这个API就只能设置这个功能。其实有点像之前推荐系统的那一波是一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:22",
      "text": "讲讲了两点，一个数据孵化，一个就是模型应用分开，还有在一个loosely in input out非常loose的情况下，怎么去设计的用户体验，我觉得都是非常重要的一点。安迪来聊聊你的一个感受。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:36",
      "text": "其实我挺同意刚才东旭和杨青说的，就是他的那个放化。尤其是虽然我大部分人我是做怎么让模型跑起来这件事，就是属于白凯明粉云厂商。包括bad rock上已经让模型可以直接通过API的扩音，非常方便的能够用这个模型。所以其实就像我们说的，就是印刷这一层就是更少的群体或者是关心了，这可能是少数的slow group need to do that，但是可能更上一层，就是application层需要更多的一些规范。",
      "speaker": "发言人5"
    },
    {
      "time": "00:20:13",
      "text": "尤其是从两方面，一个是现有模型的基础上怎么去做这个规范，就是刚才东旭说的deterministic。Deterministic是一个非常重要的概念。其实现在每一个模型提供商。都在想办法让这个东西变得趋近于百分之百。如果百分之百的，其实基本上已经达到AGI的状态了。",
      "speaker": "发言人5"
    },
    {
      "time": "00:20:37",
      "text": "然后另外一个方向就是说怎么通过工程的手段去让没有百分之百的deterministic的这个模型的效果趋近于百分之百。这个其实就是通过目前是两种方式，一种是prom engineering。然后现在包括亚麻，包括android，包括其他的提供商肯定可能不知道，但是肯定已经有类似这种evaluate你的problem的方案。就是evaluate你的problem是不是是一个best practice。他通过各种的程序的自动化手段来帮你完成，然后这样提高一个效果。然后第二个方面就是说翻出你翻出一张和prom的这个ending并不是冲突的。它可能是某些场景需要反复，你某些场景并不需要的over它的这个scenario，所以大概目前就是这样一个状态。",
      "speaker": "发言人5"
    },
    {
      "time": "00:21:33",
      "text": "所以我这里稍微comment一句，就是我个人觉得那个transformer这个模型本身的一个上限，其实就是没有办法去解决这个幻觉的问题的。所以要求他百分之百的determined，基本我个人觉得是不太现实的。所以我早早就放弃了去追大模型这条路，而是说去看看能不能用一些engineering的手段去可能的让它变得有用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:01",
      "text": "另外我想多加一句，就是昨天的AW submit NYC就是我们刚刚发布了一个新的产品叫apple studio。只是其实更像刚才杨青说的，就是application engineer product manager。他们可以直接通过这个no code或者node的方式去直接写一个程序。直接通过大模型支持的平台，来直接通过非代码的方式来写。",
      "speaker": "发言人5"
    },
    {
      "time": "00:22:28",
      "text": "如果说我们没有办法很好的控制？A这个output的时候。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:32",
      "text": "有什么比较好的设计，基本上没有特别好的方法。我觉得我们所见到的基本上就是说是说如果说你需要多样性的话，你就会需要比如说把它push提高发烫的这种方式。今天其实很多时候大家反而会关注模型输出的一致性，而多样性可能不是一个特别重要的一个事情。我发现说LM本身如果说你要单纯通过context的这种方式去来解决掉hellos ation，解决掉这个规划有problem injection等这些问题的话。其实今天我们可以通过一些addition的模型等等，来在LM的周边上面再来加上一些court。就举个例子，比如pollution的问题，纽约有一家公司叫patronage是AI他们最近发布了一个新的模型加密。那么他就可以来是说监测大模型的输入和输出，然后来看出这个模型有没有或者是所以今天经常经经常还是我们会出现说不光光是一个店铺的一个up就了事儿的这种状态。我们还是会把不同的这个包括不同的模型，包括其他的一些组件。比如说像TDB，比如说像GD其他的GDB，比如说像各种的q story，是用这种结合起来做一个完整统计的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:41",
      "text": "我其实这块的这个经验是说，第一就像我非常同意刚才杨青说的那个，就是现在我已经基本放弃对于这个大模型的多样性的追求了。对于应用我来说，我尽可能把他的工作限定在一个比较具体的任务上面。同时我觉得比较好的一些辅助手，就是类似像rag，或者说像刚才其实一开始我提到的DSPUI这这种这种工程上的优化，来去辅助这个不停的相当于不停的让大模型去做这个fact check。所以基本也就是这样。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:17",
      "text": "我觉得在企业的，针对enterprise的应用里边，其实还是有不少。前段时间看有一家公司，他们的一个典型的场景就是说比如你在比如说你nike的网站上面的这个chat，不论别人让你推荐什么，你都不可能推荐阿迪达斯的这个产品，对不对？一个policy是一个比较容易在业务层面上去确定出来的。然后他们就可以帮你说把这些policy都可以很好的管理起来。他们用了一个比较好的一个加速的框架，使你感受不到这多的一层的fact checking的latency。同时你也可以看到他，我觉得他是很聪明的设计师，你可以看到他帮你拦截了多少这种holo nation。我觉得对于企业用户来说，这个心理感受是非常好的。而这种其实我觉得都是的确藏在藏在背后。但是我觉得说，如果谈到产品设计上怎么样去怎么样去设计，我觉得可能这个观众里面有一些做这个产品经理的同学，应该会更有更有感触一些。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:11",
      "text": "大家从你们的观察来看，你们觉得就是这个IM的开发工具领域，你们觉得从去年以来这一年半，你觉得最重要的几个变化是什么？去年年初的时候，可能我们能想到就是像launching，在国内可能是个低代码版的long train对吧？这个def算是也是比较早开始的那除了这个之外，也许就是东西前面提到的这个DSDY这种更进阶版的这个chrome engineering。其他还有哪一些你们觉得比较值得关注的一些变化可以跟大家分享一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:25:39",
      "text": "要不东旭先来，我应用层的角度来吧。然后一会儿杨青可以介绍一些AI info相关的东西。除了刚才你说那几个，我觉得还有像function calling platform。其实因为你可以在未来，我觉得下一步很重要的就是怎么去把多个agent联动在一起，这样的这些事情，我发现一个特别大的痛点，就是说这个build agent的这个过程是非常boring的。所以我我我判断一定会出现一个一个类似这种function calling的。不管是一套particle还是一个platform，能够去把不同的agent的能力变成一个统一的API或者interface来去做管理。不然的话，现在就相当于不同的这个agent，你要去配置管理一大堆不同的APIP，其实这还挺烦的。我觉得这块就是agent function calling其实是一块东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:33",
      "text": "第二个我觉得我最近看到比较多的人在做的事情就是类似像去做这种，怎么说呢？Reg的这个build reg的过程的中间会去包括像做文本的trumping，或者说去做这个embedding这一整套流程里边。其实比如说你怎么去切分这个词，怎么去切分这个文章，怎么去解析这个文章，怎么去方便的选择不同的emda算法，或者怎么去做v rank。这一整套build red的这个workflow里边有一些很细节的痛点。也都开始有一些公司，包括比如说lamin gas，其实就开始他的cloud就是在做这些类似东西。我觉得包括刚才是提到国内define local的公司，其实也有很多这样的小工具。然后包括gina，gina其实就是做这种chunking或者说the rank，我觉得在社区里也挺火的。所以我觉得一个新的热点，其实在build reg这个过程里边其他的我觉得都，唯一值得一提的就是那个function calling是它是一个build agent的一个foundation。对这我从应用层感受到的一些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:52",
      "text": "那你刚才所说的这个方向coding的这个包括对于多个API的这个管有什么好用的工具吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:59",
      "text": "我现在有有几个项目，一个是叫by data，PHPHI data，这是几个open source的项目。对对对，然后另外一个我印象中也是我的朋友做的，是那个叫叫恩泰NPI。但目前我还这两个我都没有正在用在我的生产的这个环境里面。目前我还都是自己在定，只是说有这样的一个痛点存在的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:24",
      "text": "东旭刚才提到的，比如说像这个NPI等等的话，他其实在做的一件事情是说光光一个check up的一个一段话输进去，一段话说出来这个事情不够。因为那只是一个从一个不准确的输入到一个不准确的输出的一个过程。但是如果说我要把AI的各种各样的它的一些交互和最后的计算机系统组合起来。比如举个例子，我说帮我和东旭明天我或者说下周一的早上七点钟来一个会。这个东西它最后要变成一个无论是企业微信、钉钉、飞书，对吧这个snack goole Helen的一个function。这个时候怎么样从一个language的输入到一个标准化的输出，并且去call。Function它其实有一个有点像以前我们小RPA直播，RPA的这个输入变成了三元这么一个模式。现在就会有一些一系列的工具开始来做这些，我把它叫L来MRPA的那一个工作。这个我觉得是最近一段时间其实比较有意思的一个动向。因为我觉得大家今天对于chatbot已经累了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:28",
      "text": "就是这句话聊完了之后，因为我会发现的一点是说是我们去将就大模型对吧？但是我们需要大模型最后回来又来帮我做些事情。这个时候我觉得像方辰后像这种就说是叫什么能用的，这个可能不能叫agent但是我想来想去就是RTA似乎是一个最合适的一个词语，对吧？或者开始就又回来了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:50",
      "text": "比如说LM是一个大脑，但是如果你没有这个东西，它就像没有手脚一样的，你只能跟着这个大脑不停的说话，就很烦。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:59",
      "text": "那你刚才所提到的这种，比方说agent的工作流里边，function calling的这种多个API的管理，跟传统的这个API在中国有什么不一样吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:08",
      "text": "我觉得传统的API管理它更像是比如说数据治理的一部分，但是就是LM的API的或者说LM的agent管理。它的interface可能是一个natural language，比如说send email，然后就是它可能会更灵活。但老实说我并不是没有stop或者是传统API的管理的专家。但是从我自己的体感来说，可能没有像传统的这么复杂。",
      "speaker": "发言人2"
    },
    {
      "time": "00:30:40",
      "text": "你刚才说完了吗？你觉得还有什么过去一年看到的比较重要的变化可以跟大家。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:45",
      "text": "对我觉得应用这次大概可能是这样。然后在系统这一侧的话，我觉得标准化的工具出来的越来越多，我觉得这是一个好事儿。这个系统是有两个趋势，我觉得第一个是就说是比如说像BORM这样的，是高性能的低成本的这样的一个推理的工具，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:03",
      "text": "另外一个的话，其实我觉得很有意思的一点是我觉得hike在逐渐的褪去。就举个例子，比如说像这个去年的前年的是吧？去年是去年有一个叫做奥特GPT的项目，就这些，我觉得在说的可能稍微直白一点，就是说这稍微有一点玩玩概念和走的太靠前的项目。我觉得大家今天逐渐的在尝试之后，也发现它能力边界了。因此，我们就开始稍微往回一点来看说，最有效的这个消费到底长什么样子。甚至一定程度上说像long chain这样的更加是往前冲。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:39",
      "text": "然后完了之后希望做一个obstruction，大家也开始往回来讲转化来做。就是说有些事情其实是网购的是这样子，就像东西刚才提到的，今天很多的时候我们在这个底下不确实的时候，我们发现说与其用一个非常well abstract or over abstract这样的一个框架，我不如首先自己先写个50行code。这件事情我觉得就是前面一段时间在在往回调，从台湾初始的兴奋点和欧拉相声开始往回调说。让我们来关注在what is sure what the pardon上。但我觉得可能在接下去的一年左右当中，这些人的这些包括chain around XDSY MPI等等的。大家我觉得也会再进一步的再调整，说自己中间这个baLance在什么地方。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:24",
      "text": "东西来说，就我们可能现在用，之所以东西能够用几行代码先去把它做出来，可能是因为就现在这些应用你还没有到要in production去上线。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:34",
      "text": "我觉得一个核心的原因是因为我现在做的东西都太简单了。就是我已经能预测到如果我接下来要做的更复杂的东西的时候，比如说现在我的pro t基本都是一轮或者两轮这样的一个简单的一个flow。但是我能想象出出未来可能会有点像这个杨青肯定知道Spark吧？就是以前那种一个很复杂的一个RGB的一个data friend的一个你可能有N多个stage。就是我预计可能未来一些复杂的AI的application的任务，它可能会被展开成一个非常复杂的有向无环图。就是到那个时候我手写我肯定是不行了，只是现在这件事情可能在整个业界都没发生，但是我觉得未来一定会发生。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:19",
      "text": "对，你刚刚在苹果那边回复的说这个auto GPT启发的reg怎么理解？",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:27",
      "text": "其实我我是觉得LT GPT是应该是第一个开始尝试去用这些外部的信息加上填充crown的模板，再加上一些这种agent的想法，build一个demo，这是我第一个见到的。然后后来其实这套pattern就慢慢变成了现在rag的这个模式。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:49",
      "text": "一提到A准大家总是在说，好像是不是雷声大雨点小，对吧？是不是都是在玩票。大家看到到底有现在A准的落地的情况是怎么样？如果说不如预期，那到底是什么样原因？如果已经有的话都是怎么样的场景？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:03",
      "text": "Best rock它本身是提供叫一个feature叫bedrock agent。那其实就是解决东旭刚才提到的可能是implementation层的各种痛点，然后去让用户的更好去开发自己的agent。所以其实从bad rock本身，它因为有已经有1万个enterprise的customer在用battle。然后包括做dash，做dash其实就已经在用这个，然后包括xi，他们其实像做黛西的那个是公开的这个feature，就是去做这种智能的chatbot。Chatbot这种，他们其实就用到了bad rock，不管是模型还是他的australian这个能力，然后把肉基本上就是把从前端到后端所有的东西都打包不同的，都赋能了开发工具层的变化。",
      "speaker": "发言人5"
    },
    {
      "time": "00:34:56",
      "text": "因为我做那个审稿，我做那个patch ch包括who come的审稿，我能看到有很多很多的新的开源的这种对应用，对于infant的这种创新。尤其是good night good night。因为当时我是在第一个在东区的朋友圈上面评论了，我也有同样的一个共鸣。",
      "speaker": "发言人5"
    },
    {
      "time": "00:35:16",
      "text": "Good notice这边作为input其实有很多很多的创新。对，举例子的话，其实就更多的是在于怎么去。因为大部分行业的公司是让你比如说怎么去更加的省钱，然后同时怎么去更加的跨不同的平台，尤其是AI和machine work load是非常不一样的。相对于以前传统的，不管是传统AI或者是传统的这个web application，它的workout是完全不一样。其实和native已经其实已经能够看到一些minute作为一个行业的offeror的标准。这个时候其实我期待的是肯定会有一个space能够有新的范式出来。要么是在good notice的基础上原有去创新，要么是有一个新的平替。",
      "speaker": "发言人5"
    },
    {
      "time": "00:36:10",
      "text": "那酷酷这样一个已经被很广泛使用的这样的一个inflame，它在surf JLM的这些应用的时候有什么样的limitation呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:19",
      "text": "今年coogan natives它成立了两个新的working group，一个叫model serving working group，一个叫AI，我忘具体名字忘记，好像叫access errors working。所以这个是我的社区，就CNCF专门针对新的generate VI large model，它的word做的两个新的working group，然后去立的innovation。",
      "speaker": "发言人5"
    },
    {
      "time": "00:36:47",
      "text": "其实最所以typical的一个不同点就是，做model serving，你的这个时长是需要非常长。你的时长是很长，然后这个其实是一个跟typical的web server其实是非常不一样的一个点。然后因为你需要去process你的process，你需要有这个response，你需要去may be in the middle，你需要做fashion。我看到已经有很多公司在做这个action相关的事情，就是在整个计算层面，这个其实都是一些。然后包括你的这个带宽，尤其是那种token，那个context window是非常长的，包括像control x支持200K然后其他的模型可能支持100，或者是有这种长的context window的情况下，其实也需要你这个计算层面。尤其是比方如果是不拿地址去跑一个GPU，那他的这个networking的这个层面其实就有很多很多需要去考虑的。他可能更加的net book。然后其实我从公开的各种这种working group的文档或者。",
      "speaker": "发言人5"
    },
    {
      "time": "00:37:55",
      "text": "对所以这个地方我也有一个简单的comment，就是刚才其实andy讲了很多是关于那个model serving跟CPU的这个organic tion的这款。但是我觉得AI或者说LM，它其实可以去用它来去重构整个cover native的调度的模块。你可以认为现在科技本身的这些pog和这些资源的调度，还是一个非常room base的一个东西。其实我当时发那个朋友圈的讲到infrastructure这一块，其实在想的就是说combination的整个interface，或者是因为combination现在实在是太复杂了，对吧？就是不管什么东西，你先上来写一个yma，自己定义一套API这个server，然后而且它的这个调度逻辑还违法是吧？所以尤其是这种在现实世界的NPR的这种调度问题，我觉得用LM其实是能够解决的很好的。所以有可能最后carbonates还是complex，只是中间的它的这个调度器换成了一个AI driven的东西，但是它仍然还是调这个本身的很多controller。我觉得这个项目。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:11",
      "text": "一定会很有意思。其实现在已经有一个项目就是类似东西，刚才说的这个方向叫good native GPT，这个是CNCF放着的一个开源的项目。他因为库巴那实在就像东西说的太复杂了。那有一个这种auto chat的这个chat for他去做各种workflow或者基本的一些organize，其实是一个实际上是有这个需要的，所以可以搜一下google就可以收到。第一个就是good GPT，所以算是大家业余爱好都会contribute一些。",
      "speaker": "发言人5"
    },
    {
      "time": "00:39:48",
      "text": "对，其实顺着这个需求往下说，你就可以展开到这个options ability.",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:52",
      "text": "跟大家提到这个inform的一个变化的时候，我想问一下，multi modality的这种这种数据或者on structure的增加，它会带来哪些新的需求？Lens DB杨鑫肯定也很熟和，他们就是support多模态数据的一个back data base。包括我们其实也看到像什么on structure，什么data follow，就这一些针对instruction data的这个ETL的工具也在出现。多模态肯定是今年的一个一一个很重要的一个主题。就是多模态的这些数据对的出现，会同样会对这些方法和工具能产生哪些新的需求。",
      "speaker": "发言人1"
    },
    {
      "time": "00:40:27",
      "text": "我其实想去说是说连着刚才我们所提到的，就是说计算的这一块，也说两个，一个是计算，一个是存储这方面的一个引发的整体的变化。以前我们在云计算的这个过程当中，其实是有非常多的思维定制的。计算这个领域，我们今天看到的11个1个怎么说呢？一个非常明显的一个趋势。我把它总结成为虚拟化的节节败退和科学计算的重新崛起。就是以前的时候云的非常强烈的观点就是我一切都要虚拟化，我要摆一个大的机器，切成很多小的机器，买个小的虚拟机，然后用最小的虚拟机去卖。所以在当地外部服务的时候是make sense的。但今天我们会发现说GPU虚拟机上来会带来不少的overhead，但同时并不带来任何的任何的收益。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:13",
      "text": "因为其实GPU本身我们用的时候，其实是以一个非常具体的方式去用，因此的话今天我们发现说不同的云厂商对吧？这个在AWS，在EC two的之外，CH meter里面放了一个hyper pod来做这个类似于物理机的一种能源资源形态。阿里云放弃了ECS，然后做了一个叫做林俊是吧？这是我们银行团队做的一个更加接近物理机的形态。微软其实已经从他很早之前就开始是说提供这种类似于高清计算机的这种方式。我觉得今天是在计算这领域发生巨大的一个变革。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:48",
      "text": "然后在存储这一块，我觉得今天其实就是说在加速从以前我们说叫数据仓库，或者数据库向数据库的转变。然后比如说我们说今天说动模态的，比如说像那个图片，视频，包括各种各样的prompt conversation等等的。更多的像是一种random的以文件为背景的存在。这件事情非常有意思，我自己以前是做AI出身的，我从我们从最开始的2017年开始，是做english net动手。从来没有用过一个真的非常低DMS的数据库，我们用的是KV对吧？就是KV存什么呢？就是说说这个key是这个文件，这个文件存在什么地方，我就是那么一个列表，然后。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:29",
      "text": "但是在传统的云计算跟大数据的领域，一群人都依然非常强烈的希望把计算揉到数据引擎里头去。把那什么把这个把数据揉到DDMS里头去。我可以非常confident说他们都失败了。到最后计算standalone的GPU的计算存储是数据库的这种形态。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:48",
      "text": "刚才数据库的形态的问题是说它很乱。因此，就是我需要有更加清楚的meta data的存储。我需要有更加好的，比如说像象量化等这样的存储index等等。因此，今天我觉得比比其实在做一个很好的一个事情，他说今天我的数据的存储形态不再是RDBMS，我是一堆的文件，一堆的数据，再加上meta data。这个meta data无论是比如说是KV的这个纯纯数字的KV还是说是我出来的index，我可以把它放在一个light way。这个DBM的时候，因此是说meter data的结构化存储，再加上一堆文件的一个组合，我觉得越来越多的变成今天数据的存储这个领域的一个范式，大概是那么一个状态。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:30",
      "text": "我操良心说这个为什么呢？因为过去之所以大家搞这么多稀奇古怪的各种各样的文件存储，p value存储。我觉得一个核心的原因就是过去我们没有办法去把非结构化的数据，用一个很好的桥梁跟这个传统的结构化数据连接在一起。但就是eddying的这个技术的出现，我觉得其实是就把这个桥梁给打通了。因为以前其实你没有办法去直接对这个非结构是做这种语义级别的检索，或者说一种index统一的index。但现在其实你想只要基于ebel ding，我其实相当于就可以把这个非结构数据变成可被结构化检索的一部分。这样的话原来C口的这些优势又一下就又都OK了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:22",
      "text": "上个月data bricks和这个snowflake都在同一个月开了他们的大会。那那刚才你们提到的说现在因为这个embedding，使得我们可以同样用这个SQL去检索这些非结构化数据。那这个对于现在的这些整个大数据结构里面的这公司意味着什么呢？Data break这些这公司对于他们来说，他们是一个适合更加强他们的能力。还是说其实带来一些新新应该有一些新的玩家去做呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:47",
      "text": "我觉得其实这个答案我也没有，但是可以去看最近那个OpenAI的收购，他把那个rock set也收购了。其实rock set这个东西它跟传统的这个data way house不一样，就是他的这个online serving能力是比较强的。它其实还是或者说我觉得未来的这个AI的workload更会面向混合，我可能它不会去有这种特别。第一，我是一个纯在线的应用，或者说我是一个纯离线的data processing，这个界限会变模糊。第二就是相当于每一个人都会有自己的personal data。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:24",
      "text": "我可以接着东旭刚才说的那个look set说过，因为我自己其实在在amazon s3待过。然后我自己其实也在那个开源社区的话，我自己因为也和那个rock set那边，因为rock DB我是做过rock DB的contribution。然后rock DB就那个founder，其实就是root set CPO。对，他们每年都会组织非常小规模的这个meeting，大概不超过20个人，然后每年都会组织。然后也是去年的时候，rock DB作为一个开源的项目，好像十周年了。三号这我觉得像杨青刚才说的，其实有一种虚拟化节节败退，其实更多感觉是一个时代已经在更替了。包括good at是今年十周年，去年rock bb十周年，就有很多很多的开源项目已经到达了十周年，然后变得非常成熟了。",
      "speaker": "发言人5"
    },
    {
      "time": "00:46:16",
      "text": "然后包括rock set收购之后，其实open IE我觉得也是因为rock c本身是一个embedded的KV sort。它它是不是一个distributed system，它是一个非常粗糙的，或者比较简单的原始invited。这个rock set它其实把这个思想做到了，就变成了一个人的搜索这样的一个data的。当然这个收购是一个title的收购，但是我觉得他们open I也是看中了欧沃这个团队，他们对这个数据的理解和对包括应用场景的各种理解。",
      "speaker": "发言人5"
    },
    {
      "time": "00:46:51",
      "text": "其实我叫rox d你想他过去擅长的worker，还是这种conception和online workshop就还其实还挺不一样的。因为你去看传统的这些big data的这些，包括snow flake in the bricks，他关注的存储层基本都是像比如类似塔会这种纯静态的数据结构。所以这为什么我刚才会有一个推论，就是说这个online serving maybe会变成一个在AI时代比较重要的一个capability对data。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:27",
      "text": "以后我们有更越来越多的结构化非结构化数据会在一起。对于像什么data lake，本来它就支持了更多结构化非结构化数据的这种这种架构，是不是它会更有优势呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:38",
      "text": "数据这领域我觉得很有意思的一个趋势可能就是说是说我们会从传统ETL开展为基础，然后同时又催生出来越来越多更加多样化的一些数据的派送。以前的时候，就是我们传统的我们说叫数据pay plan的时候，ETL instruction transform load的时候，其实更多的都是在不同的structure的数据库之间来做转换，就是我今天要从原S转到这个DB，我今天要从这个怎么说呢？要从一个mysore转到这个boost gress，我今天要从一个boss gress转到比如说oracle这种的那今天其实我们会发现说，我们不光光是在不同的各种各样的数据库里转了。我有google dock，我有slack channel conversation messages，我有PDF，我有本地的各种各样的文件，我有各种各样的截屏，什么乱七八糟的事。因此的话，就是说我有更多的ETL其实是在做从on structure的files来变成一种我只能叫做sami structure的信息，对吧？就是这个last time model和AI的model可以consume的信息。",
      "speaker": "发言人3"
    },
    {
      "time": "00:48:44",
      "text": "这边比如说像硅谷有两家公司，我觉得很有意思，一家叫做demolition地方，一家叫做on structure IO，这个名字很典型对吧？他的意思就是说你看你各种各样的slow all the data to me and I deal with that。今天比如说如果说大家用kimi，用等等其他的时候，大家会发现说你需要，怎么说呢？就说是把你的文件传上去等等，这些都是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:49:05",
      "text": "On structure data, 要怎么样把它变成text markdown 3马上的这种方式，让包括做做rap的前期准备，然后让888能够去很适用，这个我觉得是一个很有意思的事情。包括比如说我们前段时间做了一个就做了一个网页插件，叫做almo almost chat在做的一个很多的事情。就是说说用户打开了一个网站，这个网站是一个HML，那我怎么样去在form的插件里头去抓取这个时间的内容，去理解这个是内容。然后完了之后再把它转换成一个类似于像markdown或者更多text的这种格式。然后让让它再发到一个的mode里面，让他去做做finalization，做总结归纳推理等这一系列的事情。这个其实也是一个是在用户的客观环境当中来做这个instruct data processing跟。",
      "speaker": "发言人3"
    },
    {
      "time": "00:49:54",
      "text": "EL这么一个意思。对，其实刚才我想补充就是说说到ETL这个话题，刚才我们其实都在说ETL for AI working，其实我我我现在最近开始自己在做一些项目是反过来的，就是AI服务一体。就有点像比如说我有一大堆knowledge base，但是我想去把这些knowledge变成一个knowledge graph。这个graph其实是我存在这个结构化数据库里面的。比如说我想通过这些原始的文本把它提取成自动生成知识图谱。这件事情以前传统的做法就是我可能要写很复杂的Spark job，或者说一些map reduce来去分析这些点和边之间的关系。但现在其实我刚才在整个ETL的过程都是完全用DSPY来做的。所以我只是把我的这个要求，以及我最后要把它输出的这个格式告诉这个IOM，他来去帮助我去做从这个entity的提取到这个点和边的构建，然后最后帮我存到数据库里。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:58",
      "text": "这个过程我觉得还是挺有意思。首先我们先看现在的observably去解决已有的这些系统的问题，最大的痛点是什么？最大的痛点是matrix太多了。而且这些system matrix变成insight的这个过程，还是需要老司机或者说一些数据分析师，或者说一些专家去在后面去看啊。我觉得AI在这里面其实可以做一些更新分析，或者说一些通过异常的这些已有的metrics来做一些这种预警之类的。我觉得这是一种应用。另外一个这个我不说不具体相关的事，但是他反过来就是说怎么去用现在的这个，怎么用心，怎么去给AI的application feel的一套。其实现在刚刚一开始我们也提到有一些这种新的大模型公司，他去做这个结果输出的评估，就这一块我觉得未来市场还是挺大的对，其实这也是跟大ETR那个话题一样，正面是一条线，反过来也是一条线。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:03",
      "text": "东旭刚才说的第二点就是像artifical analyze点com其实是一个比较聪明的一个平。他是做不同的aspects，做各种的模型评估。然后包括你的a currency，包括你quality，包括你的input token token这个speed，包括你的其他的各种性能。我觉得这其实就像冬玉说的，引出了很多新的这种obo BT的aspects。尤其是从硬件到我去确认到in其实有用的matrice。在我个人的感觉里，就是不管是在开源社区还是我工作中，我感觉有用的trip还是很少。我觉得这一点其实有很多地方可以应付。",
      "speaker": "发言人5"
    },
    {
      "time": "00:52:44",
      "text": "怎么理解什么叫做一个有用的metrics？你可以举个例子，比如说为什么现在一些matrix你觉得它它的这个gap在哪？",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:51",
      "text": "其实现在的coop notice的这个over treat，当然我说的是工程nail，不是模型或者应用层面，或者我不做必就从info level来说的话，hub notice他去run，比方说跟英伟达合作，run英伟达的这个GPU，是英伟达GPU里面有一些bad host。就怎么去很快的有效的去detect这个英伟达的GPU failure。然后怎么去做这个hardway的模型的serving，或者是啊do replacement。其实这些是目前来说的话，像我觉得他们包括现在英伟达有有那个in，但是其实有用的market还不够，因为有的很多情况就是各种不同的情况。如果这个hardwork feel他可能有十种情况，但你的matric可能只能检测到5种情况。这个其实是我说的不够的意思。",
      "speaker": "发言人5"
    },
    {
      "time": "00:53:42",
      "text": "其实我我稍微summarize一下，现在传统的这个obs ability里面，我觉得特别大的问题就是虽然可能有很多metrics，谁也不能说matrix没用，只是说有很多这些matrix是要通过不同的matter组合起来，你才能去诊断问题。就比如说你单开了一个GPU的realization，它可能要跟比如说你的这个find ways这配合起来去看，可能才或者说跟功耗配合起来看，才能找到一些原因。就是有很多这样的例子，所以为什么我觉得这块其实AI还挺适合去去去做的。因为我我现在我们在我们公司就他那边自己这边大概几千个卖。我现在发现我自己常用的可能也就那么几十个，而且这些knowledge完全可以给AI来去来去做的。所以现在我们也在尝试做类似的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:37",
      "text": "在LM的这个背景下的这个可观测性，它有什么特殊的地方？为什么我们需要新的工具来去来去满足这可观测性的问题？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:47",
      "text": "对我觉得我觉得其实挺重要的一点就是说今天在AI玩色性和以前的时候可玩性有点不太一样。第一个是在infer层面上面，第二个是在education层面上面。Info层面上面的话，以前的时候我们可能就比如像CPU ization，这个memory consumption等等这些都还在。但是GPU因为它比较复杂，我们怎么样保证说GPU的健康度？GPU的在无论是从最底层的driver到中间的code的two k的这一层，到上location，对GPU到底好的多更甚的等，这块的定义其实相对比较少。我们对CPU知道的比较多，对，就比较少，这第一个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:24",
      "text": "第二个话是在上层的客观特性。我们以前说service其实有很多，比如像ATC诸葛等这些。然后在AI的时候就不光光是一个雷电子的。举个例子，比如说我访问一个网页，我基本上就说这个用户打开这个网页需要多久。然后完了之后这个网页的详细显示有可能。",
      "speaker": "发言人3"
    },
    {
      "time": "00:55:39",
      "text": "Online它是比如说它有很多的非常详细的指标，我的这个TTFT time first token是多少？我的这个token到token之间的他的ltc这是多少？如果说我的收入变多了，我的我的这个输输输输入这个输入的数字变多了，我会有什么的变化？如果我的输入的prom的长度变长了，会有什么变化？这一系列的东西都更加的胆单位。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:05",
      "text": "今年我们其实没有特别好的一个方式，去以一种传统的ability的方式去去观测它。而且还有一点是是说这些各种各样的指标，一定程度都不是一个马上就会死人的指标。我没法说说这个行，这个不行，而是在逐渐的变化说，如果说我的这个pump长了之后，我的conversation那就是我的这个protocols ed变慢了，用户不开心，但是也还OK等等，全是夸的。就是怎么样来做更加精准的定义，这是一个比较具体事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:36",
      "text": "我这边其实可以补充一点，从应用开发的角度讲这个例子比如说我其实特别想，就现在可能这个用的还不太多的一个但是我觉得未来一定会有需求的场景。就是说我跟我不管是chatbot也好，还是这样的AI的vacation也好，engage的越来越多了。以后我的这些historical的这些比如说chat history，或者说我的这些summarize，或者我的behavior，现在其实缺乏一个机制，能够让这些机制能够让这些历史信息不停的去polish。接下来我跟LOM对话或者使用的这个用户体验，就是我要去完成最后利用已有的这些些交互。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:23",
      "text": "按理来说大模型应该是越来越理解我的，但是怎么去观测这个理解的程度？第二是怎么去看到他他能够在我的记忆里去调用哪些知识。这些其实现在都还挺缺的，所以我们其实也自己build了一些这个工具，就像我现在在read里边，我自己build一些知识图谱的可视化，所以我就能看。那我去问一个问题，他会去trigger哪些这个图里面的这些激活的节点，但我觉得这个还是不够的，做一些简单的case还行。但就像我刚才说，以后有些更复杂的例子的时候，还是挺麻烦的一个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:03",
      "text": "有人有提到这个graphite应该是最近微软推出的，它能够一定程度解决这个问题吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:10",
      "text": "你看这个就属于大厂，说的话就是厉害。你看我们搞过graph g我们已经搞了快半年了，结果微软这么一说大家就知道了。其实也我我我觉得他只可能只是一个很好的辅助reg的方式，但是它不是全部，而且这个可能也是一个最终答案。是不是graphed能够解决刚才我们说这个reg的一些准确率，召回率的问题我不好说，但是我自己的测试数据就是我们用同样的这个rag的architecture，但是加上了graph rag了以后，它的效就是准确率提升了30%左右。我觉得还是挺有效的，因为LM有些时候很难去理解这个概念之间的联系，而且有时候你不同的概念之间的联系是有好多层的，比如说我跟杨青可能是朋友啊，也可能是同事，也可能是反正有很多什么关系，就这种在LM里面比较难。但是如果你有一个比较清晰的一个knowledge graph去辅助这个LM，它的就相当于他会更好的根据这个上下文去去去激活相关的机器。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:26",
      "text": "对这个地方我有一个补充的一个观察，就是最近我们在硅谷这边听到一个很有意思一个吐槽叫做。然后他们来了之后，好像大家都不知道突然都不知道怎么做搜索了。因为rug本质上是搜索，对吧？因为一下子说AI base的to act data base的这种搜索，它是如此的简单直接和容易让一个人上手，使得开发者的兴趣大量的其实都被这边所所吸引过去的。因为他镇守，所以说这个大家突然好像就是传统的搜索的体现。",
      "speaker": "发言人3"
    },
    {
      "time": "01:00:00",
      "text": "在搜索引擎上做这么多年，其实有很很成熟的？无论是text based还是another path based，还是等等这一系列的东西。因此大家在那边很难见，也没有开通解决方案。所以大家突然发现说那我就拿好使。很多说因为很多人其实是新入行到retrieval的这个领域的，其实并不知道对吧？这一系列的传统的搜索的这些technical stack，所以大家就突然发现说，说好像这个现在red或者说that设置就是搜索的全部。但是这个地方我觉得其实我们还挺难忽略，就是传统的搜索引擎流的地方的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:00:36",
      "text": "无论是像google还是微软，还是百度，对吧？百度前一段时间做理工程什么什么的，这个CPW百度点com那个文成命名我忘了，就你可以显示我你可以发现的一点就是说传统的搜索引擎它在搜索这一块的能力其实是挺保障状。那他再加上今天这代言的上面的generation的这个能力，对于不同对于很多的外国公司来说，有可能会形成一定的怎么说降维台积，或者说至少就是这些大的科技引擎，或者这大的搜索引擎会比较容易的catch up跟通过他的唱片。对对对，谢谢。就是他能够那什么他能够比较好的来开创大学模型，就land的这一块。因为项目都比较标准，沙发的产品形态也比较简单。所以很有可能就是说它的壁垒没有像传统车这里那么的深，这个我们也拭目以待。",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:27",
      "text": "其实刚才东旭在讲那个那个知识图谱的时候，我就我心里面想说，当时LN出来的时候，一群原来做知识图谱的人都觉得自己原来这么多年白做了。然后没想到现在当我们深入到这个应用的开发里面的时候，发现这个知识库又回来了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:44",
      "text": "天底下没有新鲜事，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:46",
      "text": "在这种reg这个system里面的这个搜索，跟传统的这个搜索有哪些不一样的这个地方。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:54",
      "text": "我说这个可能说稍微有点老气横秋，搜索其实最简单的一个定义就是说我有一个搜索的query。然后我有一堆的搜索的candidates。然后我要来找说用某一种matrix某某一种指标来找到和我的这个Perry最近的这些candidate。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:09",
      "text": "传统的搜索本来就有很多的信号。比如说像这个最典型的大家知道的基于文本的TFIDF。然后也有一些基于用户行为的，其他用户搜的这个Carry之后，他点了哪些搜索结果，点的越多的越像等这系列的那比如像谷歌、百度、微软，它有几十个甚至几百个这样的一个不同的领域的搜索的信号。然后他把这个信号最后再做一次组合，最后算出来的是最像的是哪几个。那么今天比如像vector b就是说fact in Better等等，它相当于在这些那么多的信号当中又增加了一个信号。这个信号是由大元模型给算出来的，也就是说他我们我们需要就把这个信号和传统的搜索信号做柔和，做一个wait上，然后完了之后来算出说在这些组合的信号的基础上面，哪一个能够更强的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:58",
      "text": "Imagine它能够获取更多的，比如像semantics的信息等等。所以说它的质量是一个比较高的一个质量所以它对很多就是以前我们比如说纯用文字，或者说是它的用户扣费的信息比较少的时候，搜索质量比较低的情况下，是一个很好的一个补充，或者对很好的补充。那这种情况下就说是说你就很多时候就比如说像我们在做AI的rag的时候，我发现说我们手头没有一个其他的搜索引擎，那怎么办呢？我就只有唯一的微信号就是卖家，那我就拿这个卖家来做测试。",
      "speaker": "发言人3"
    },
    {
      "time": "01:03:30",
      "text": "Andy和东旭对这一点有什么要补充的吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:33",
      "text": "我可以说一下我的这个user journey入历程。我一开始就是直接prom the engineering就是非常裸奔的，就是这些写front不太稳定。然后后来去开始去做这个产品，做整体数的向量化，变成这个向量的这个，然后在在向量上做这个语义检索也不太work。后来就开始加入那个graf knowledge graph，是相当于把我的这个knowledge变成这个grab以后检索的结果去跟那个那个great knowledge grab的结果，再加上向量检索结果，三个不同的结果合在一起在做the rank，然后再做这个最后这个效果目前来说我觉得是非常好的。所以就是慢慢的开始变成了一个传统的数据检索的架构。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:32",
      "text": "这个agents就是这个agent化对吧？这个agent化工作流是我们最在讨论的一个重点。刚才其实大家提到的这种不论是可观测性还好也好，还是这种检索也好。其实当它放到了一个agent这一个workflow里边，那又会提出什么新的需求呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:50",
      "text": "我个人觉得现在agent的这个开发还没有到，反正在我看来其实基本都是一些engineering的问题。还是说我的token的管理，以及我觉得最大的困难是对面的那个那个公司。比如说我要买张机票，对吧？我要对接携程，携程给不给我开放这个API，这个其实是现在我变成A选最大的困难。所以我觉得倒还不是这个application framework有什么问题，反而我现在觉得大多数的这块的agent framework can like刚才说的这个long time也好，其实我觉得long time是属于有点过度设计了，本来没有这么复杂的事情，但是搞得现在挺复杂的。所以现在这是我最大的感受，所以我现在的态度大概就是观望，同时我能自己定的我先自己定的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:48",
      "text": "在网上其实有一个段子说浪琴现在当然浪琴已经因为代码也不多，其实自己可以着手写一个狼圈，就是工程量也不大。就像刚才东西说的，其实大部分其实都是工程手段。然后狼圈这个范式本身s framework其实它没有达到一个从至少从那个code base，它没有达到一个很好的让大家都满意的，一个质量和规范。所以现在也有很多很多的平替，包括有很多创业公司也在做这一块。",
      "speaker": "发言人5"
    },
    {
      "time": "01:06:26",
      "text": "但我觉得这个argument其实对于大部分的developer tools，是永远存在的。就是the suspect。对，因为他们的用户群都是developer，developer都觉得自己啥都能干。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:37",
      "text": "现在的问题是啥呢？现在的问题就是因为这个领域太新了，所以有很多尝鲜的，或者说一些小朋友看到闻到味道就马上过来了。但是可能很多小朋友对设计系统或者设计API，它的这个sense不一定那么太好。对这个我非常含蓄的说一下，就是专业玩家还没还还没过来，所以你就会看到有各种各样稀奇古怪的东西就都出来了。所以我觉得这是为什么我在观望。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:08",
      "text": "对，我我我接着东西的这个他们的说一下，说一个我自己的一个观察。就是我觉得包括我自己在内，作为软件工程师，我们其实非常喜欢build的所谓叫orchestration或者叫obstruction。你看当时的时候，比如说像之前的这个AI framework时候，大家都喜欢build一个自己的一个模型格式。然后大家所有人都觉得说，你看那那只模型格式写的乱七八糟的，我要写一个好的XCACD有一个著名一个漫画说大家一看说有14个标准，写一个第15个标准，所以这个事儿就很。而且另外一个就是这个故事，即使到今天的我还是有这种感觉。就是我觉得说我来定义一个标准，大家都按照我的这个框架来写东西，这是一个很漂亮很舒服。而且对我来说是属于那种我就觉得说我在把控一切问题，IT feels good.",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:57",
      "text": "所以因此很多时候软件工程师，包括我们自己在内个地方，很多时候都会都会喜欢去view construction。然后问题就来了，就是说假如说应用其实不需要那么花活，对吧？比如说我说说我今天要做的一个标准，大家都用这个标准来点饮料。无论是点星巴克还是点这个巴巴，这个还还还是点还还还是点其他喜茶，还是什么都可以用我的这种标准。那么我就可以在中间连接一边连接消费者，一边连接用户，连接商家。但是后来大家一想说，原来其实没有那么没有标那么标准，而且这事儿不需要那么一个点饮料的标准才能够去做。其实我就直接把鲜花喝酒给我的咖啡就行，于是大家就绕过我了。然后我就想说，我变了那么好的一个标准，为什么没有人用呢？就是说就premature of premature construction。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:41",
      "text": "有些时候其实是经常会出现的一个事儿。那么多年了，在以前数据的时候一聊，大家在那儿做station，或者说是说当年做数据的时候，各种各样的任务，做做管理，做调度什么的，需要一个就competition graph。其实那么多年了，没有什么变化过。所以我们也在在AI来了之后，我们在经历一个类似的一个情况。不是什么坏事儿，反正总会有一些struction死掉，总会有一些session出来。伴随着我们对于这个是计算需求越来越清晰化，我们就会有一些比较好的一些表示出来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:11",
      "text": "你知道我觉得现在最好的upset是啥吗？我觉得现在最好的objection其实就是actual code。比如说所以为什么我觉得在front或者说应用，具体的应用和这个print中间一定会有一层IL一个中间语言。这个中间语言可能不一定是任何标准，而是其实是actual python code的直播这克扣到底是我写的，还是说是一个机器生成的对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:38",
      "text": "如果说你们觉得现在的abstraction可能是一个premature的organization，因为通常对flather Billy和你的这个应用性通常之间是一个trade off。那你们是不是觉得说现在做一些以这种易用性为priority的这些工具，可能它就有一些是太过早的做了这个optimization。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:59",
      "text": "至少我不知道，我觉得跟东旭刚才说的可能差不多。就是我觉得在我们自己平时手工撸一些样例，撸一些demo的时候，我们用不到，对吧？这是一个现状。然后同时这个原因有可能是说我们自己的用例太简单，所以暂时还用不到这些destruction。同时我们知道说比较复杂的一些agenting flow等等的，肯定是需要有一些obstruction。理想的情况下面会有一个蘸水在哪？但是今天的此庐山是不是那个理想状态，我们不知道，而且看起来今天的solution都还离这个理想状态有一些距离，但是没有人还没有人figure out出这个东西，我觉得现在是处于这个状态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:40",
      "text": "我看到东旭说，你说在你自己朋友圈里面自己扣板说每当这种时候都是老美擅长的事情了。谁敢跳出来对整个业界做一些定义，谁就掌握了未来。你说这个开源软件、互联网、大数据、云原生等等这些范式迁移的历史机会，都是很多时候都是美国人跳出来定义的那我觉得是否可以，比如说举个例子，就你在里边可以举这其中任何一个例子。当时的这些变革是怎么样去去发生的那我们能够从过去这些变革当中学到哪一些，得到哪一些。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:15",
      "text": "启发呢？这个例子太多了，简直一个cookie data。云原生我相信云原生这个词发明之前，可能中国无数大的互联网公司内部都有自己的这个容器调度框架，对吧？但是偏偏这个CNCF把原生带成一个新的云计算标准，这是一个很典型的例，包括现在我看到这个AI的这个趋势也开始有这样的一个趋势了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:43",
      "text": "就是包括像reg，也好像刚才说的这个grab red，包括lunch这些，你会看到美国的这些，尤其硅谷它。所以不仅是在推他的产品，同时他还在用很高超的技巧来去推广整个做这个事情的思考方式和理念。有时候他相当于是把理念先推广开来。他这个自然就比如说我觉得还有一个例子叫向量数据库，是吧？还靠谱。对，就当时他刚才说出来的时候，这就搞得好像相当数据库就是他家的一样，就是有很多这样的这些例子，简直不要太多。但你会发现一对比中美，你就会发现中国很少有soft leadership跳出来去给整个业界去做这个定义。大家可能肚子里还是想着自己卖东西，但是我觉得最高级的卖东西，你应该先是说，我我我能有这个定义生态的这个能力以后才。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:49",
      "text": "当时我写这一段的时候，主要就是因这个觉得很可惜。因为看到现在这个状况，有点又像老师的往事又重新这样的感觉。稍微解释一下。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:02",
      "text": "就我们前面所讲到的，可能更多的focus在一些变化的东西上。其实对于怎么样做一个好的一个软件工程，怎么做一个能够支撑大量的复杂数据管理工程，其实也还是有很多不变的。这个地方你也提到说新的范式也会构建在已有工具的改良上。举例子就在现在这个新的范式。我们在讨论的新方案中有哪一些是基于现有工具，或是基于现有工具的一些改良，哪一些有可能会是新玩家的机会。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:32",
      "text": "对我其实我觉得刚才像数据这块，就因为我最熟悉，我现在可以看到几几乎在AI的worker里面，百分之八九十的这个workload还是原来的workout。ETR还是ETL，database还是database，可能有一个向量，但销量这个东西也不是什么太新的东西。这个例子还很多，简单来说就是database肯定是一个原来的workload，就是没有太多特别的变化，就是技术还是原来的技术。第二个就是像杨青做的现在这些AI的inform，就像理想现在在在做这些系统的管理，GPU的这些matrix的关注性，所有这些东西其实还是原来的这个技术，只是说放在一个新的应用场景里面。对，我觉得很多东西还是不变的，所以软件工程师可能还是不会失业。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:23",
      "text": "尤其是系统公司。杨谦你有什么补充吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:26",
      "text": "对我觉得也是怎么说呢？我觉得今天的话，其实很多时候了解最后应用应该长什么样子，这个我觉得还是挺重要的。我看刚才咱们在群里头有一位有一位提到一点，就是比如说像long graph和lang chain等等这样的一个设计的情况。我个人的感觉像今天其实我们理论上并不太需要太多的obstruction，我们需要更多的指投。就是稍微自夸一点的一个，就是我们今年早些时候不是发了一个六百行的一个聊天器是吗？我觉得他的就是这样的一些例子的好处是让大家遗憾说，到底这个应用应该怎么做。然后看完之后，大家反过头来可以想说，我将来开发这些应用要有效的话，我应该有哪些软件的struction，哪些抽象等等。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:12",
      "text": "但是今天很多时候应用还处于一个大家八字没一撇的一种状态。就一个先把应用给做起来，然后先说的说的稍微这个稍微稍说的稍微政治化一点，先开发后治理。今天就是大家先做应用，做着做着时候大家觉得说这个东西会出现下来，那抽象就会出来了。所以我觉得今天可能更多的还是在应用样例。Ample es as practical上面。",
      "speaker": "发言人3"
    },
    {
      "time": "01:15:35",
      "text": "其实我更好奇的就是，当然这有可能就是最后这个范式，就是因为IM这个现在因为它特殊性，就肯定会有一个新的方案出来。然后我比较好奇它是开源的可能性更大，还是闭源的可能性。但是目前来看，其实更多的现在可能开源的可能性就是从house company来说的话，可能更多相当确认一下inference这边VIM这些其实有更多的开源的space在，就是大家一起合作，然后去定义一个东西。",
      "speaker": "发言人5"
    },
    {
      "time": "01:16:07",
      "text": "对对我我觉得未来可能这个范式会是这样的。当时我想象中的是说99%的code，可能还是现在的我们用的数据库用的这是input 3的1%，是一层LM的ATI。这个API可能是连到这个OpenAI上，也可能是连到自己的私有模型上，但是那个也是一个很薄的抽象，就你像我这锅菜，我最后需要撒一把盐，那把盐其实是灵魂，但是那把盐很小，大概就这种感觉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:42",
      "text": "那你觉得现在这样一个如何去选？不论是你说要去做定义也好，做抽象也好，一个新的新切入的一个开发工具，这个时候你觉得怎么去选择开源还是闭源。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:55",
      "text": "这个问题我觉得如果你是在做开发工具的，基本上没有别的选择了。你本身你必须得是开源的，同时在云上提供增值的这个云服务。这好像我也没看到其他的太好的选项。因为我觉得现在的开源更多的像是一个收集市场反馈的一个动作。就是因为是包括这个创业公司本身，他自己肯定也不知道这个东西的答案。所以它的开源，我觉得更多的是让用户帮帮他去试，能够有个快速迭代的机制。包括我觉得看像这个拉玛index也好，这个蓝圈也好，其实都是在用这样的方式来去不停的迭代自己。所以如果它不是开源的那那这种迭代的速度是不可能达成的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:42",
      "text": "我可以理解为，其实这跟我们所处的timing也有关系。就是因为现在其实哪怕是提出的人，可能就比方说当时Harris做做这个lang chain的时候，可能他自己也不知道最终这个东西会演进成成什么样。就越是在这样一个新的范畴，早期可能你越是需要靠开源这个社区的这个力量。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:04",
      "text": "而且我现在不太认为现在这些人的开源是一种原教旨主义，与这个开源理解不是更像一种商对对对对对商业的造纸。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:16",
      "text": "对怎么理解原教旨主义的开源？",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:21",
      "text": "就像像我们这样的这个老老炮真信。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:26",
      "text": "正好我在之前抛出这个活动的时候，跟大家也收集了一些问题。我觉得这里面还是有几个不错的问题。有一个问题是GPT FO的模型早就训练完了，但是API始终没有开放这个多模态的流式交互。当然有些同学可能怀疑说open I是不是遇到了这个last scale这种工程的问题，那这个我们就不去猜测了。但是我觉得他这个问题是很有意思，就是说你们会怎么去看待说这个多模态实时交互对于模型以及应用所带来的一些挑战。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:56",
      "text": "我觉得OpenAI的佛4O就是它的这个全双工的等等这样一个聊天。刚才我觉得可能已经有了更多的，有一点像是一个就是怎么说呢？Music experience improvement前一段时间的话，有一个公司，我忘了他的这个公司名字叫什么了，但是他的那个他的那个产品名字叫做moshi，moshi就是日语的那那个东西，然后他们也是做是说那个全双工的，就是基于你的对话等等的的或者作为一个研究的人来说，我觉得他的他可能没有特别大的本质的变化。是相当于我要把这个模型变成一个带streaming输入，以及他来design什么时候做输出的那么一个状态，但是其他的有很多原子资源这一块，这个事情对于计算的需求肯定会更大。因为如果说是我是做事实的话，很多时候怎么说呢？就是我就我就我就必须要保证我有足够的competing resources在那儿堵着。对LM其实也是类似的情况，比如刚才提到的alia analisa面，大家就会比较的速度，速度这个东西基本上是说我堆一堆的资源在哪，我自然跑得快。我如果说要找profitability，那我肯定这个速度自然就低。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:08",
      "text": "举一个例子，比如说像如果说大家去看到的就是MX的话，亚马逊的模型永远都是有有亚马逊的服务永远都是最快的，是吧？但是我觉得原因是因为亚马逊，还是说反正我看亚马逊更加实在。你说我是个公司，我要挣钱，我又不愿意，我又不想送钱，大自然的馈赠让大家随便来用一天。如果说AP跑的很快已经成了，那我就在烧钱，今天谁都笨谁笨。所以我觉得刚才就这个问题的猜测就是OpenAI会不会考虑到成本因素，我觉得应该是会的。GPT4O包括这个soa等等，它背后如果说它计算的成本高到一定程度的话，那的确就是会对上线会造成一定的hesitation。然后完了之后，但是这计算的成本来说会是一个不断指数低下降一个状态。所以我觉得可能过一段时间也就好了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:20:56",
      "text": "正好有一个同学说想要听杨青聊聊刚才我们聊的开源的这个问题。因为杨晨当时做这个咖啡two？也是开源。那你怎么看到什么样的这个事情，它开源了以后，它是像credentials咖啡two这样成为一个业界标准，但是却但却不是一个可可作为公司化的一个项目，哪些工具你们需要开源，哪些是要需要闭门。",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:14",
      "text": "对这个是对我觉得开源其实是一个很有意思的一个事情。就是一定程度上说十年前或者20年前基于开源做一个公司比今天基于开源做一个公司要更容易。如果说我们说十年二十年前的时候，开源和商业化的一个结合是怎么样的呢？基本上就是说首先我用开源来聚集流量，因为那个时候这个整体的云等等还没有那么的发展，于是企业说，我现在开始对吧，就是国家这一块用的挺好，但是我要开始管起来，玩起来，他说我管控运维什么的很麻烦。于是开源的公司说说，那好，我我我弄好客户，我给你做管控运维干活了一会，讲完了之后我就我收一个辛苦钱，这个商业模式被云服务商给干死了。所以这也是为什么前面几年当中，云服务商和开源社区其实发生了非常大的冲突的缘故。",
      "speaker": "发言人3"
    },
    {
      "time": "01:22:03",
      "text": "With for respect，这里面最大的一个玩家就是ALS。对，比如像advice跟elastics search，搞得死去活来的是吧？跟芒格比利搞得死去活来，最后逼着很多的开源的这些开源的项目的背后的公司叫license。",
      "speaker": "发言人3"
    },
    {
      "time": "01:22:19",
      "text": "说你是一个非云的厂商你会用，但是你云厂商不许用，这是一个很有意思的一个状态。因为就是我觉得不是云服务商的错，也不是开源街公司的错，而是体现出来一个市场上供需的关系。这个供需的关系是说管控和运维今天已经比50年前、20年前变得更加容易了。因此它不成其为一个商业模式。所以今天我觉得开源就变成了另外一种模式，开源在商业变得更难，但是同时也更加的怎么说呢？更加的有技术壁垒。",
      "speaker": "发言人3"
    },
    {
      "time": "01:22:50",
      "text": "今天的开源就是我我首先我得做一个开源的一个软件，让大家觉得说不错，这个至少打平或者略微高于业界平均水平。然后我继续用开源来做这个市场，来做await，来做社区。然后我说在这个开源的基础上面，我们作为这个开源项目的公司背后我还有一套更加牛逼的。无论是稳定性还是规模，还是效率还是等等的。更加牛逼的不光光是管控运维更加牛的那么一套引擎或者那么一套系统。你告诉用户说如果你用开源就用的不错，那对吧？就是你可以用买我的这套必然的。比如说像这个data box他做Spark，但Spark做完之后他说你看我有一个be Spark公开的眼睛叫做pot，用户如果说你喜欢Spark，你再买我的福塔，效率高一大截。",
      "speaker": "发言人3"
    },
    {
      "time": "01:23:38",
      "text": "这个地方难的是在于，首先你的开源的这部分就要就就需要比业绩要好一些，这已经很难。然后同时你的闭源的话要比你自己的比业界好的还更好一些，而且要好到用户愿意买钱，你愿意掏钱，这是一个很难的一个事儿。但是我觉得这个是技术往前推的时候的价值所在。所以说今天的开源，就说说更难了，但是也如果做出来也。",
      "speaker": "发言人3"
    },
    {
      "time": "01:24:02",
      "text": "更有技术P其实我想对从echo一下，刚才杨青说的，其实今天因为我是那个links foundation的那个AI data的那个take wether，然后今天他们有一个meeting notes，就是我没有参加那个会，是因为现在其实行业上有一个非常流行的influence的frame mo叫VIIM。然后这个其实是目前last number model这个时期就是这几年这两年，是去年到今年比较成功的一个范式，就是专门做model inference。那他今天他就是宣布要加入到living foundation来进行一系列的organization。其实这个也是现在目前开源的一个，就是你需要有一个organization去支持你，然后去让这个东西更加的去expand。但是这是一个option。当然除此之外还有像hugin fsh另外一个option。",
      "speaker": "发言人5"
    },
    {
      "time": "01:25:04",
      "text": "对我来来打个广告，正好VLM的确是现在我给大家使用最广泛的一个the inference的框架。然后他们的作者其实就是berkeley data bricks同一个lab出身的一群博士生。然后我们在on board的前两期也请到了the BLM的核心作者之一卓涵，跟大家分享了他们的一些经验。所以欢迎大家去on boy来收听，感谢杨新刚的分享。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:30",
      "text": "然后刚才还有一个问题，是给东旭的。就是他提到就是说传统软件开发中，这个数据库和搜索引擎有很多交集，但是始终没有完全融合。这个给开发者也带来了数据一致性等方面的困扰。那在AI时代，数据库是否会吞并掉向量索引，或者说你希望用户同时使用这个TDD加，还是只用一个？",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:55",
      "text": "按我的意见，我肯定是这个很厉害的，对吧？因为我就是做这个，我觉得以前因为对于从用户的使用的体验角度来说，能用一个东西搞定政府没必要用多的东西了。只是以前可能是因为不管是市场还是经济的原因，这样的东西没有出现而已。所以反正而且我包括最近那个sn break er和那个andy polo，他也出了一个新的paper来去描述了一下现在的这个向量的数据库未来的一些趋势，我觉得最后反正总结一下就是向量它应该是数据库的一个功能，不应该是一个单独separate的一个东西。所以SQL never die。刚才我也提到对the SQL is still the best in the have。好，反正我的我的观点大家对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:48",
      "text": "安迪和杨琪，我想听你们对这个问题的看法。",
      "speaker": "发言人1"
    },
    {
      "time": "01:26:53",
      "text": "我我其实我很同意c nail的，就是刚才circle back，那就刚才的那个comment.",
      "speaker": "发言人5"
    },
    {
      "time": "01:27:01",
      "text": "对我也我也很同意同学说的一点，然后完了之后我觉得说现在数据库there is no back database。There's database with vector index, 就是entitled ase这个东西就是说我从一个搞数学的一个一个一一个人或者搞机器学习的角度讲，它是什么东西呢？它是一个matrix，每一个每这个matrix的每一行是一个向量，然后完之后我要把这个向量乘一下，然后找到最近的最近数据上就是那么个东西。那么他我们以前的时候做的时候，我们就是我们就我们就这些本子loads跟他们排位要去做。后来我说说我把它存下来，然后我要做增产改查等等。然后我们一看说这不就是个KP于是今天的after database很简单的，就都是最底层是一个KB那比如说上面这样你做一些就是说比如说你做一些structure都能使得它这个技能变得快。于是他就在想说，这个TV做的更大的时候，我能不能够做offline？那我就把它，比如说现在DB就把它放到一个data类里面去做了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:27:55",
      "text": "然后我们发现说做着这一堆各种各样的怎么说呢？就这以前的数据库的时候，我们要解的问题全来了。于是所以大家看见的点对它又出来了。所以所以你看就比如现在SDBYCB就是很聪明的做了一个。他说你看我底下存储就是这个lake，然后上面我build next。",
      "speaker": "发言人3"
    },
    {
      "time": "01:28:12",
      "text": "那既然我那个那我和和其他的数据源等等对接什么就变得更加容易，他就很非常难受的融入到整个数据排放里头去了。然后比如说很多时候我做那什么，我做那个我做一下来的，如果说我只是一个KB加上加上加上加上加上我的vector，那我发现如果有时候要做一些filtering对吧，我要找比如说离我最近的semantic最近的，但是同时又是前面三天之内这个pose内容，于是要做filter。我也想说这不就是一个传统思维的事情吗？于是你会发现说Victor database就变成了vetter，IMAX加上格斗机构。所以那就回到了那就是我就索性我把它作为一个index。因为数据库有数据库以前就有非常多的index，基于hash的基于这个数据的位置等等的那我就往there yet another index that can be embedded a database。于是这个时候就说是说那就是一个data abase加上一个veto index，加上CO作为一个格斗struction那么一个状态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:29:08",
      "text": "但是我觉得有一个东西我觉得可能是很重要的。第一是对象存储，我觉得特别重要。就是对象存储可能会变成一个the source of truth。然后SQL其实上面应该会给这一块，这块就是会这是第一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:24",
      "text": "第二个我的common就是说未来相关数据库我觉得也不会死掉。它可能会介于那种活的像有点像现在的redis这样的感觉。就是在一些非常立体，但是比较extreme的场景里边，一定会有专用的数据库和数据产品方案出现。但是你要说它是一个general的一个case，那不一定对。你看redis也活的好好的，大概就是这个感觉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:52",
      "text": "对，是redis作为一个in memory的cash或者说in memory KV就是这样的一个状态。对，类似于说是我觉得就是我觉得其实会有一种形态，怎么说呢？就是说单机的可以迅速拉起来in memory，然后直接从我的这个object store去线上emory的build的一个index，然后就开始做迅速的计算了的那么一种小规模的有点像东西你肯定最高蜡瓶吗？",
      "speaker": "发言人3"
    },
    {
      "time": "01:30:15",
      "text": "辣的好，就是CQOSICO light。SICO light其实有向量插件，第一个是CQ light，第二个是打卡DB，我觉得对对对，PGPG vex可能还太重了。但是比如说像大的PG也好，big light也好，想象的能力基本就是你说这个东西我之前有一个自己给自己写的一个component，就是说我非常看好本地的AI开发的这个工作流里边。Sicle light replace, very important road，就是因为SQL拉起来还超方便。第二就是它是一个good的SQL，第三它的这个plugged的这个机制其实是很好的。所以就是我很看好CQY在未来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:57",
      "text": "就你刚才所说的CQY他们的这种优势，其实在ALM的时代也有。对，为什么就他的这个优势在LM的这个时代里面，它会更加的明显，或者说带来更多的一个机会。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:09",
      "text": "其实这样的，我我我先说一下我主要觉得希克莱的以前他他就是压根一个原教之神，开源精神就是你说你想say life，如果以前想挣钱，他他有无数种方法去做这个商业化，但是他们选择没有这么做，这是一点就不是他不能相信。第二就是现在在AI的这个work load里面，我觉得大家都在build demo，就这种本地的开发，而且开发的体验这种东西被越来越多的提及。这是我觉得没有什么东西比本地拉取一下这个siclike开发体验更好的。这个experience可能更再说多，那可能就那个可能是都没有sick light的这个体验好啊，这也是为什么我觉得sick light还是挺厉害的对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:01",
      "text": "其其实其实c light去做一个那种小的application是最方便的。就像当时安卓刚出来的时候，一大堆的人用SQL light去写一个那种小的那种应用。刚尤其是早些年，那个时候还在读书，大家都用C他做那种特别能快的出一个application的东西的这种场景的时候是最快的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:32:24",
      "text": "在作为LN的应用中，大家这个DFDB用的多吗？FDB和CUI用的多吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:32",
      "text": "也，老实讲其实在做MA的时候，大家不会特别关注说我到底是在用到DB还是工作，还是post c或是买C扩什么。但这个反正我数据库我用的就行了，状态。",
      "speaker": "发言人3"
    },
    {
      "time": "01:32:45",
      "text": "不能这么说，现在大家本地开发的时候都在写python code，就是这个框架支持什么东西。所以我觉得包括python为什么带了一波流量，可能也就是因为一开始让back，然后有封装的这些东西。现在开发这些AI vacation的developer，所以根本也不懂什么是数据库的，只会写拍摄。大的数据是。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:07",
      "text": "作为资深AI researcher，我非常同意这点。我压根儿不知道水库是啥，我就是反正有水库，我就写个题库就可以了，底下管他是什么，就像比如就比如说你打个P的时候，你一般不会要指定说我要一辆比亚迪车。什么时候你就说我要打车，就是你不会去指定说我这辆车到底要什么型号。",
      "speaker": "发言人3"
    },
    {
      "time": "01:33:26",
      "text": "对吧？这个再推的远一点，那时候现在我们有这么多coding agent对吧？David这种coding agent。我最近还看到一些在说他们要做AICTO或者AI这个architects right如果以后是由AI来根据我们的这个应用，我们的这个model来去决定我们要设计怎么样的back。那其实我们是是不是以后这个backhand我到底是用AWS还是要用这个vocal，也是有也是有这个AI来去来决定的。也许像良心就更不需要去了解到底用什么数据库了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:56",
      "text": "对我觉得标准化的产品永远都是越来越变的标品，低成本的。就举个例子，今天比如咱们都在用的手机里面的那那层颗粒是什么？你手机里面的电池是谁家的？我们都不给，作为消费者，我们作为供应链都用他。今天手里面都有一个电脑，电脑里面的硬盘是合同子的。20年前我们去中关村攒机的时候，我在那算了它分成的耐拓的对吧？其他系的IBM的各种各样的。今天我就说买个macbook，反正它里面反正有个人给我设计好了，有个硬盘就好了。所以我觉得标准在整个的工业化生产力最后都会变成具体讲完之后，就标准指标我就一定要有个写。",
      "speaker": "发言人3"
    },
    {
      "time": "01:34:32",
      "text": "可以找我。我的想法有点不太一样，就是我我不觉得软件开发这件事情会变成一个特别标品的东西。或者说特别标品的东西已经被像什么notion，或者说被恢复，或者是RPA工具已经解读过一遍了，这个效果也不是太好。所以到最后我所以我其实有点看不懂，为什么现在硅谷这么多这些所谓的AI engineer的starbuck的出现，其实我还是挺挺困惑的。这个世界上不缺写这种CRUD的demo，小小表单程序。比如说我就让比如demo你给我写一个台DB，我保证我这辈子应该，但这辈子说的太大了，就是我我至少我五年之内也不是报复。当然可能一年以后有人来打脸，那那也挺好的，这个乐于看到打脸。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:25",
      "text": "后面一个问题就说就现在的确有不少开发者，他会选择直接从这个OPI或者其他这些LM的provider对吧？这个model provider直接用他们这个API，从原来从他们用这个LM provider的提供的API转为使用这个AWS，对吧？这些云厂商的服务。那以后云厂商跟这些公司之间会是会是什么样的关系？因为他们又不像elastically开源的跟跟这个云厂商之间的关系。因为开源你还可以有一些控制的，我哪些开源，哪些做商业化设计。那那其实这那这些model的大模型公司提供的也就是一个11个API。他们是有什么样的优势和劣势，以后的格局有可能会是怎么样的？",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:09",
      "text": "因为我是一直跟tropic合作，其实我们就是云厂商跟model provider它并不是一个直接的竞争关系。就是one p他提供one p他自己的API跟我们提供three p给他们的模型，其实并不是一个直接的冲突的关系。就举一个最简单的例子我先说一下为什么就是其实云厂商它更多的是给这个模型的provide的赋能，让用户因为模型是最bottom的一层，除了GPU芯片之外最bottle的一层。那怎么让这个模型很好的跑起来，满足用户的性能需求，这是第一第二。其实station那一层就怎么去做agent或者其他的客户需要的customization相关的东西。然后第三层就是真正的应用层，就通过像completely，像多点H都用这个class three and five。这样的话他能够真正的把这个模型的能力给开发出来。",
      "speaker": "发言人5"
    },
    {
      "time": "01:37:07",
      "text": "还有一个最经典的例子就是其实昨天我的那个sister team，我们刚刚当然我也是从一开始就支持这个feature这样factory这个scouse high库能够在AW and the bad rock，这是因为这个是跟google跟stoker说，他也自己提供完批。但是昨天的那个发布是啊一个非常积极的信号，就是它是首发，就是唯一在ads上他能够做反图灵对这个海库的目录，也是唯一的就对这个class three这个模型family这一系列模型做finally这个feature。其实从我至少我过去一年跟and pig我们合作。我感觉这是作为云计算提供商或者模型提供商，其实我们是一个比较积极的一个关系。就是我们是给他让他更多的赋能，给把他这个模型的潜力开发出来。然后他其实做的是模型本身的提供，然后他又会给我们额外提供，就是他们觉得应该在模型在云厂商上先应该有的，或者是至少就比one p需要更多的distance的feature，他会放在我们。",
      "speaker": "发言人5"
    },
    {
      "time": "01:38:19",
      "text": "这两千有什么。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:21",
      "text": "补充吗？我还挺挺我还挺同意你的观点的。云和模型厂商之间其实是一个相对比较互补的一个关系。",
      "speaker": "发言人3"
    },
    {
      "time": "01:38:29",
      "text": "因为反正都是自己车身，而且但我觉得有一点不确定了，就是以后在云上去提供这个model会是一个其实我觉得是您的一个新的增长点。未来很多又有点像KVCP1样的这样的一个东西，但也会存在就是有很多自己建设自己host GPU，GPU class。我觉得会有新一代的这个cloud出现，但是目前我还没有看到这个worker能够去撼动传统预算的这个根基，所以对那基本就是个合作关系。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:07",
      "text": "最后一个关于这个观众的问题，端测模型未来的一个11个1个空间，它跟这种云端的云端部署之间会是什么样的一个关系？",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:19",
      "text": "对我来吐个槽，就是我刚才我去做的很多以前在facebook的时候，我们应该是第一个把一个non trial的一个深度学习的模型。就比如像当时的那种new transfer等部署到全球，大概超过一台手机上的一那么那么一个状态。所以我觉得我可能对政策有一些话语权，但是我觉得有有两个有一个错误的思潮跟有一个正确的思潮，这两个都在一个错误的思潮。就是说说because we can就有那么一群人，包括我就不说是哪些公司的，有那么一群公司永远都在说说一切都要好在端上，我觉得那是错的。就像是你的小汽车，你小汽车可以让你从杭州开到上海，它也不能够让你从杭州开到北京，对不对？也可以对吧？但是你说从杭州开到金山也不行，因为专注的模型永远都会有限制，一定要把所有的东西放到单测试是不现实的。这个其实已经可以set up不少的，这个就要把拿到70B甚至拿到几百B放在单测的这种就是说是明知不可为而为之的那一种为那么一些做法。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:19",
      "text": "同时我觉得单纯一个正确的一个想法，基本上就是从需求出发出单脆我要做哪些事情，它能够起到怎么样的一些怎么样一些效果。就比如如果单侧，我说我可以更加容易的来做一些用户的简单意图的识别，他可以做的更快，它可以做的更加？就说是顺滑。他也不需要说跑到云端去就浪费太多云端的算力。",
      "speaker": "发言人3"
    },
    {
      "time": "01:40:40",
      "text": "它这种本身就比较简单，他就用小模型来实现，那完全就应该把它都放在端上。比如说像这边有一个公司叫做next AI他们做了一个很有意思的事，就是在端上用一个一B到2B的小模型来做方式calling。我没有特别具体的看现在的这些他们的客户在做些什么事情。但是我的比如说educate conduct case是说它可以在在端侧来解决一些用自然语言处理来做意图识别，行为预测等些事。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:07",
      "text": "举个例子，比如说我以前的时候安装空调，我得拿出那个老旧的遥控器，我能看出这个温度的键在哪。然后我就按那个键，那今天我可能就可以直接说说，把温度改到低两度。以前的时候我要做那么一个东西是很麻烦的。但今天我如果是端测有1B2B的小模型，在这个可控的范围之内，其实完全可以做到非常精准的识别。这种的话就是说模型小，能够体验好，然后同时。功耗成就低，这些应该通过观测去。所以说端测今天其实已经成是一个需求驱动的一个市场。就是说找到一个需求，然后找到相应的非商品的模型去部署，这里面会有比较好的机会。",
      "speaker": "发言人3"
    },
    {
      "time": "01:41:46",
      "text": "而且我觉得还有一个很有价值的场景。但是我觉得现在端测模型还没有挖掘出分的就是关于这隐私的一个场景。因为有些数据其实第一我是不想上云的，第二我是想通过云端的这个大模型交互，所以我觉得端侧的这个模型怎么通过不泄露我本地的这些隐私数据的前提下，跟云端的这个大模型去做交互。这种工作流其实我觉得还可能未来会更有意义。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:22",
      "text": "哪些因为我是调用这个云端的模型，我等会我在想说是不是以后会有一个类似于rotor一样的东西来去帮我去决定我应该是哪一个模型，应该是调用哪的来去优化我的成本。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:34",
      "text": "好，等看siri怎么怎么搞，就是先看siri这个。对对对，除了定闹钟以外，他还有没有其他的应用场景就知道了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:43",
      "text": "对我觉得router的一个概念很漂亮，但是说手上真的要用到的时候不多，就是真的不多。这个router的一个好处，他他是说他的一个假设是说所有的这个大元模型都是可以在一条光谱上面顺滑变换的。就是我从模型A切到模型B它就是线性的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:04",
      "text": "这个价格贵一点，能力强一点，价格弱一点，能力弱一点。但是你想今天我们为什么买东西的时候，我们有线下的高档商超，我们有什么线上的，它就是淘这个淘宝、天猫、京东、拼多多等等我也没有一个router。然后我告诉他说我要买个什么东西，你帮我去自动的理解一下我有多cheap，然后给我找到一个性价比最高的，我还是自己主动去找。就因为这个平台的这个电商平台形态是不一样的。AKA今天类似的就是说说今天的不同的模型的形态其实是不一样的。无论是输入的prompt还是它所能够解决的问题。所以想把它们做成一个标品在上面来的，加一个router然后解决问题，这事目前比较难实现。",
      "speaker": "发言人3"
    },
    {
      "time": "01:43:47",
      "text": "我会觉得如果有这么一个auto我还挺想用的。因为有时候我自己也不知道我到底有我想要的。所以我其实为什么我会依赖推荐系统，也是因为他能够知道我，他可能比我自己还了解我。所以在这个123道。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:08",
      "text": "我们今天也聊了很多这个话题，转眼也过了两个多小时，还是当时那个朋友圈里面的你提到了一句，就是这个翻水芊羽意味着有新的snowflake data break和和dar dog和和oracle。我们就这几个公司所代表的这个领域，你们希望这个所谓的下一代下一代的这个公司，你对他们未来1到3年的一个期望是是是怎么样？你期望看到他们未来1到3年会有怎样的变化？Snowfall data break和data door，还有oracle。对这四个东西记得你们可以任选其中的一个来说。",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:46",
      "text": "我觉得这几家都已经是非常established成熟的公司了。所以说我觉得是他们会在他们的产品上面再增加更多的和LN相关的这种能力。比如像soft跟data x他们本身有大量的结构化的数据。那么怎么样把LN通过一个可能是外部的L引擎，怎么样来更好的用来理解和操作结构化数据去使用它。无论是说我这还是在结构化数据的这个在他们的the way house里面的，就比如像text da等等这些理解，这个是他们可能会做的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:16",
      "text": "The dog的话，今天其实很多这些公司其实都在用这个让我们做归集。那这块我觉得他还是一个继续在这个比较clearly defined的领域继续做的一个状态。Oracle的话，今天其实在云服务商的这个领域里面，其实一定程度上作为一个后来者，AI对它是有优势的。它可以比如说通过GPU看等等的，以一种包袱相对比较轻的状态把这个业务做起来。然后作为有可能在在以北美为例的话，北美oracle相当于是第四大云厂商。它有可能是说在这种迅速变化的过程当中，迅速的成长成为一个更加低的市场上的可能性，有变化就有机会，也就是目前可能是另一个人。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:57",
      "text": "那你觉得如果说以后是越来越多，如果是那这样大家其实很多增量的这个数据增量的这个数据使用方式来自于我们前面说after data。这个对于像这个snows这种以table data为主，就是这种以BI这种数据为主的公司，它对于是不是对于这个data brix相对来说机会会更大一些，是不是它会capture更多呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:23",
      "text": "从技术的角度来讲，数据第一是traditional database，第二个是data warehouse，也是structure data warehouse和第三个是on structure data lake。这三个本身是三个不同的领域，他们会在长时间之内都都继续存在而且发展。所以我不觉得他马上会被谁知道谁的状态。比如像dat消费，它更多的是还是data work house这个状态。一个新的领域，他在已有的这个战场他们做的非常的好。然后同时他会有你可以你甚至可以把他们理解成是一个新的公司。如果他是已有的公司当中一个新的公司，那么他们做的是不是好等等，那就像是一个新的产业公司一样。我就可以看到他。",
      "speaker": "发言人3"
    },
    {
      "time": "01:47:07",
      "text": "我觉得AI的这个改变会让在用户去使用这些，不管是snow flake big break，还是已有的一些系统软件的使用方式会有特别大的不一样。第一我特别希望看到一个在交互和使用上的一个变化。第二个就是现在其实刚才我说的很多的自己的公司，基本上都是面向人在在设计的。就是我我是希望比如说以后可能这些公司设有的一部分workload，它的用户或者说他的对象其实是LM或者说是agent，这个是可能会带来不一样的，就是它的这个服务的客群会有变化。",
      "speaker": "发言人2"
    },
    {
      "time": "01:47:56",
      "text": "我也基本上都同意刚才东旭和杨鑫说的。其实因为我其实我更关注他，其实因为在SN staff这边他参与很多是他自己的那个。我看他自己的那个开源的模型叫ddx，他也出了最新的那一代。其实我觉得dead break他自己也做，他自己的开源模型有他独到之处。",
      "speaker": "发言人5"
    },
    {
      "time": "01:48:18",
      "text": "然后data dog，因为我的老领导就是我的direct manager，现在是data dog的SVT。我觉得that作为一个observably的一个company，它其实现在是有很好的一个机会的。因为现在因为它class native的，它是跟cup notice结合的。然后他其实在o word名单上还有很好的机会去做和coverity整个ecosystem合作。去把新的hardway新的AI5 cloud，有很多很多可以improve的地方，这个是有很大的space。",
      "speaker": "发言人5"
    },
    {
      "time": "01:48:55",
      "text": "然后另外的一个公司是oracle OK oracle因为它是我觉得很我觉得是一个很好的一个模板，是跟open I合作。这样的话它有很多机会去在工程上给这个open IG赋能就有点类似像AWS google跟topic赋能一样。我觉得oracle和微软跟open iphone，其实这中间有很多很多机会，但是需要一个很快的工程的迭代。因为有很多很多的应用场景需要去满足。然后最后一家snowflake，其实我基本上没有太多的低深度lens.",
      "speaker": "发言人5"
    },
    {
      "time": "01:49:34",
      "text": "里面有很多的开发者。你们觉得你们自己所在的这个产品，未来未来几个月有什么你希望提醒大家关注的这个地方吗？关于你们自己的公司这个产品在可以打打广告。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:47",
      "text": "那我打个广告，如果说大家需要GPU，无论是高性能的H百还是低成本的CN90，对吧？然后如果说你们觉得说现在的CPU的平台都太多了的话，你可以来用我们我们基本上现在有最性价比最高的GPU，再加上一个完全原生的一个平台，我们几个口方的基本上也都是最快的老兵了。我写了咖啡，然后后来做了开拓者，然后我们有一个可方的做了on。然后另外一个口腔的理想，他是UGCD的作者，同时他在原生的那个CNCF的check work。肯德基这上面也待了好多年。然后我们这以前的时候，比如说在阿里、facebook等都做过发大规模的集群，也做过业务。所以说我们应该是这个市场上面最好的GPU和云和AI的形成，欢迎大家联系。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:34",
      "text": "好的，没问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:36",
      "text": "Andy也不算广告，就是已经有预告了。因为public都是那个tropic，还因为我主要负责atropine，这是我们上个月刚刚推了这个cloud 3.5第一个model，就是在drop上。然后他们今年他自己有public预告说cloud 3.5这个opus，尤其是还酷最快的模型，一个是最强的模型，就是今年应该都会上，然后都在federal上应该也会上。所以这个实际上是我自己也比较期待，因为3.5的SONY已经提升很多的性能了。然后奥克斯作为三这个系列里面最强的这个模型，然后到3.5我觉得那是另外一个阶段。尤其是索尼的3.5，它已经超过了从性能上超过或者引起了GPT for o的o over的quality的性能。",
      "speaker": "发言人5"
    },
    {
      "time": "01:51:30",
      "text": "然后office我觉得是一个很大的提升，所以这个是我自己比较期待的。因为我也会参与这一块的项目负责，所以对也不算广告，这是一个算是一个meston。我觉得这是对欧沃整个word wide level的这个大模型的一个mail。如果305的office出来之后。",
      "speaker": "发言人5"
    },
    {
      "time": "01:51:50",
      "text": "今天我们就这样了也聊了两个多小时的时间。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:53",
      "text": "非常感谢大家的时间。以上就是本次播客的全部内容，感谢大家的收听，希望对你有所启发。如果你喜欢我们播客的内容，欢迎你点赞分享，在评论区写下你的心得。另外onboard也有听众群了，添加小助手微信ID on boy 666。再说一次，非常好记on boy 666加入听众群，了解更多互动机会。另外如果有喜欢两位主播用爱发电，也可以在小宇宙给我们打赏，请我们喝喝咖啡。如果你在用apple podcast收听，也希望你能花几秒钟给我们打个分，打个五星好评，让更多人可以了解到我们我们下期再见，继续更多干货。",
      "speaker": "发言人4"
    }
  ],
  "lab_info": {
    "summary": "本次对话深入探讨了人工智能（AI）对世界的深远影响，以及投资者如何在科技领域的快速发展中把握机遇。讨论覆盖了特定AI项目和科技产品，如AWS的生成式AI、开源数据库和AI编码工具，这些都预示着软件开发的未来趋势。同时，强调了可观测性在AI开发中的关键作用，以及知识图谱和检索技术对于提升应用开发效率的重要性。对话还触及了软件工程中的标准化倾向，指出其可能带来的过度工程化问题，建议技术选择应以实际需求为导向。此外，讨论了云计算、数据库和AI模型在现代技术架构中的地位，以及云服务商与模型提供商之间的合作潜力，凸显了AI在改变数据处理和模型应用方面的潜力。最后，强调了持续学习和个人成长对于适应快速变化的科技环境的重要性。",
    "qa_pairs": [
      {
        "question": "在构建基于大模型的application时，大家发现需要什么样的新技术栈？",
        "answer": "构建LM（Language Model）应用时，新的技术栈体现在对底层AI native应用的关注，以及如何利用AI技术改变软件开发范式，包括开发框架、数据存储和处理方式、观测性工程和质量体系等方面。",
        "time": "00:01:14"
      },
      {
        "question": "DSPY是什么？",
        "answer": "DSPY是一个能够将自然语言编写的指令转化为小段Python代码的工具，这些代码组合起来可以实现更复杂的任务，从而让工作流变得更可编辑、调试、可观测和可实现。",
        "time": "00:05:43"
      },
      {
        "question": "最近在AI领域的开源模型和变模型之间有什么平衡关注点？",
        "answer": "最近关注的是开源模型与自定义模型及部署AI的兴趣增长，特别是在开源模型流行及文生图、文章视频等模型卷起来的背景下，快手客户等模型的表现尤为突出。此外，对于开源模型和自定义模型之间的平衡以及如何在不同场景下灵活运用是目前的关注焦点。",
        "time": "00:07:02"
      },
      {
        "question": "对于AI应用开发的新范式，几位嘉宾有什么感受？",
        "answer": "围绕AI应用开发会带来全新的软件开发范式，例如新的开发框架、数据存储处理方式、可观测性工程、调试方式和质量体系。AI如LM处于范式变化的核心，使得许多以前人力无法完成的任务变得可能，比如个人助手agent的应用，通过AI技术实现了从无到有的突破，并且在开发过程中对思考方式和工具的运用与传统软件开发有所不同。",
        "time": "00:12:09"
      },
      {
        "question": "AI在当前软件开发中，尤其是在科学计算领域，有哪些主要发展趋势？",
        "answer": "现在AI在软件开发中的关注点越来越多地集中在科学计算领域，比如如何更高效地运行模型，利用GPU等加速硬件进行推理，并将各种加速技术标准化，形成便于调用的API。",
        "time": "00:16:06"
      },
      {
        "question": "AI模型开发和应用开发之间的关系是否有所变化？",
        "answer": "是的，现在这两部分工作开始分化。以前模型开发和应用开发是融合在一起的，但如今很多做应用的人不再需要关注底层的硬件实现，他们可以通过调用API来实现功能，类似于数据库和数据仓库的发展趋势。",
        "time": "00:16:39"
      },
      {
        "question": "从应用软件工程师的角度看，现在面临哪些新的挑战？",
        "answer": "现在应用软件工程师需要思考如何在松散输入输出的情况下定义用户体验，尤其是在模型可能出错的情况下如何保证应用有用性以及兜底策略。",
        "time": "00:17:18"
      },
      {
        "question": "AI数据库化或者模型当作API来使用时，与之前LM之前的API相比有何不同？",
        "answer": "主要区别在于泛化能力差，一套API往往只能适用于特定场景，无法实现大规模商业应用。此外，在用户体验设计上也面临挑战，因为一个应用程序可能包含众多功能，但API可能仅针对其中某一特定功能。",
        "time": "00:18:55"
      },
      {
        "question": "对于现有模型，有哪些发展方向？",
        "answer": "发展方向一是通过工程手段提高模型的确定性，使其接近100%准确；二是针对非确定性模型，通过优化和组合其他模型及组件来提升效果，比如解决幻觉问题、规划问题等。",
        "time": "00:20:37"
      },
      {
        "question": "针对大模型输出不一致性和多样性的问题，如何解决？",
        "answer": "目前的做法包括通过增加冗余模型、结合多种技术和工具（如prompt engineering、fact checking等）来降低不一致性和规划问题，并尝试维持模型输出的一致性而非过分追求多样性。",
        "time": "00:22:32"
      },
      {
        "question": "过去一年半IM开发工具领域的最重要变化有哪些？",
        "answer": "重要变化包括低代码平台的出现、更进阶的Chrome Engineering实践、函数调用平台的构建（以整合多个agent的能力并提供统一API接口）、文本处理和embedding流程的优化工具等。",
        "time": "00:25:39"
      },
      {
        "question": "你对传统API管理的看法是怎样的？",
        "answer": "我觉得传统的API管理更像是数据治理的一部分，而LM（假设为某类管理工具）的API或agent管理可能更为灵活，使用自然语言交互，如send email等。但作为非专家，我认为其复杂度可能不如传统API管理那么复杂。",
        "time": "00:30:08"
      },
      {
        "question": "过去一年有哪些重要的变化可以分享？",
        "answer": "过去一年中，标准化工具的出现是一个积极趋势。系统方面有两个明显趋势：一是高性能低成本推理工具如BORM；二是hike逐渐淡出，例如去年的奥特GPT项目，在尝试后暴露出能力边界，大家开始回归到更有效的模型消费形式，以及像long chain这样的前沿探索。",
        "time": "00:30:45"
      },
      {
        "question": "对于auto GPT启发的理解是什么？",
        "answer": "auto GPT是首个尝试结合外部信息、填充模板并融入agent理念来构建demo的项目，这一模式演变为现在的rag模式。",
        "time": "00:33:27"
      },
      {
        "question": "AIGC落地的情况及原因是什么？",
        "answer": "Bedrock提供了feature bedrock agent解决实施层面痛点，方便用户开发自己的agent。已有企业如battle、dash和xi等利用bedrock进行智能chatbot等应用开发。尽管目前存在一些争议，但如果要实现更复杂的应用，将需要构建能处理复杂有向无环图的任务调度系统，这将是未来发展的方向。",
        "time": "00:34:03"
      },
      {
        "question": "Kubernetes在AI应用中的局限性是什么？",
        "answer": "Kubernetes在支持AI应用时存在局限性，尤其是在处理模型服务时，需要处理长时长、响应压力、分布式计算等问题，不同于典型web服务器，对GPU网络计算层提出了更高要求。此外，AI或LM可用于重构Kubernetes调度模块，以适应多模态数据和新型工作负载的需求。",
        "time": "00:36:47"
      },
      {
        "question": "多模态数据的出现会对现有方法和工具产生哪些新的需求？",
        "answer": "多模态数据的增加将引发计算和存储领域的整体变革，包括虚拟化技术的重新审视和科学计算的重新崛起，以及从关系型数据库向数据仓库或类似形态的转变。非结构化数据的结构化检索和管理成为关键需求，使得像EBayding这样的技术能够将非结构化数据与传统结构化数据连接起来，实现统一高效的管理和检索。",
        "time": "00:43:30"
      },
      {
        "question": "Rockset与传统Datawarehouse有何不同之处？",
        "answer": "Rockset相比传统的Datawarehouse，在线服务能力强，它更接近于一个人工智能搜索的数据形态，而且其收购事件也预示着时代更替，许多开源项目经过十年发展已非常成熟。",
        "time": "00:45:24"
      },
      {
        "question": "OpenAI收购了Rockset，你认为这次收购背后的深层含义是什么？",
        "answer": "这次收购表明OpenAI看重的是Rockset的在线服务能力和其团队对数据及应用场景的理解。尤其在AI时代，数据处理的边界变得模糊，不再局限于纯在线应用或离线数据处理，而是需要一种混合型的解决方案。Rockset作为一个具有强大在线服务能力的嵌入式KV存储系统，能够更好地适应未来AI的工作负载。",
        "time": "00:46:16"
      },
      {
        "question": "在数据领域，有哪些有趣的趋势？",
        "answer": "一个显著的趋势是从传统的ETL（数据抽取、转换、加载）为基础，衍生出越来越多多样化数据处理方式。如今的数据处理不仅限于不同结构数据库间的转换，而是涵盖了结构化与非结构化数据，如文件、文本、音频、视频等多种来源的数据整合和转化，以适应AI模型的需求。",
        "time": "00:47:27"
      },
      {
        "question": "如何理解“有用的指标”以及当前存在的问题？",
        "answer": "目前存在的问题是许多监控指标需要组合才能有效诊断问题，例如GPU的健康度就需要与底层驱动、中间层代码、上层应用等多个层面的数据配合分析。而AI技术可以用来处理这些复杂组合关系，通过学习和理解底层逻辑来精准定义和预测系统行为。",
        "time": "00:53:42"
      },
      {
        "question": "如何看待当前数据可观测性的问题以及AI在其中的应用？在大模型背景下，如何看待历史交互信息的利用和理解程度的观测？",
        "answer": "当前数据可观测性存在矩阵过多且难以诊断问题的痛点，很多情况下需要结合多种指标才能发现问题所在。而AI技术如通过异常检测、预警等手段，在这方面有较大潜力，同时也可以应用于评估模型效果、硬件健康度等方面，提高自动化运维和问题解决的能力。随着AI与用户交互的增多，缺乏一个有效机制来持续优化和总结历史交互信息，使得AI能够更好地理解用户并调用相关知识。目前虽然有一些工具可以初步实现知识图谱可视化，但面对复杂的场景时仍存在挑战，需要进一步探索和完善此类观测和学习机制。",
        "time": "00:54:37"
      },
      {
        "question": "在reg模型中，graph g是否能解决准确率和召回率的问题？",
        "answer": "graph g可能是一个有效的辅助工具，但并非全部答案。根据测试数据，使用graph g后准确率提升了30%左右，这表明在概念理解与关联方面，它有助于提升模型表现。",
        "time": "00:58:10"
      },
      {
        "question": "最近业界对搜索功能的看法如何？",
        "answer": "最近有一个吐槽是说大家突然都不太会做传统搜索了，因为rug（可能指retrieval-based）搜索因其简单易上手而吸引了大量开发者，使得传统搜索技术的成熟解决方案显得相对落寞。",
        "time": "00:59:26"
      },
      {
        "question": "传统搜索引擎与现代AI技术结合的优势是什么？",
        "answer": "传统搜索引擎如Google、微软和百度等，在搜索领域具备强大的基础能力，并结合大模型生成能力，可能会对新兴技术形成降维打击，这些大科技引擎有可能较容易地跟进和超越。",
        "time": "01:00:36"
      },
      {
        "question": "在reg系统中的搜索与传统搜索有何不同？",
        "answer": "reg系统中的搜索除了考虑文本信号外，还加入了由大模型计算得出的信号，比如通过向量相似度、知识图谱等多维度信息进行检索和排序，从而提高搜索质量。",
        "time": "01:02:09"
      },
      {
        "question": "如何看待agent化工作流对检索的影响？",
        "answer": "目前agent开发还处于工程问题阶段，最大的挑战在于与外部系统的对接和API获取，而非agent框架本身的设计。大部分尝试尚处于观望阶段，因为该领域尚不成熟，需要等待专业玩家的加入和规范的建立。",
        "time": "01:04:50"
      },
      {
        "question": "对于当前构建的抽象层（如标准、框架），是否可能过早进行优化？",
        "answer": "是的，当前的一些抽象层或标准可能还处于premature construction阶段，随着对计算需求理解的深入，会有更好的表示和发展。现在做的一些易用性工具可能确实有些过早地做了优化。",
        "time": "01:09:38"
      },
      {
        "question": "从历史变革中可以学到什么，例如开源软件、互联网、大数据、云原生等范式迁移？",
        "answer": "这些历史变革表明，当某个技术领域出现时，由美国主导并将其定义为新的行业标准的例子非常多，例如云原生概念由CNCF推动成为云计算新标准。AI趋势也可能遵循类似路径，但目前尚未明确未来的主导者。",
        "time": "01:11:15"
      },
      {
        "question": "在硅谷，一些公司不仅推广产品，还推广了一种思考方式和理念，能举个例子吗？",
        "answer": "比如向量数据库的例子，他们通过高超的推广技巧让人觉得这个概念仿佛是他们家独有。中美对比中，中国较少有类似的soft leadership跳出来说整个业界的定义。",
        "time": "01:11:43"
      },
      {
        "question": "对于如何做好软件工程和复杂数据管理，有哪些不变的要素？",
        "answer": "有很多不变的要素，例如在新的范式构建过程中，很多工具实际上还是基于现有改良，比如AI工作负载中，大部分仍是传统的ETL、数据库等技术，并未有太多本质变化。",
        "time": "01:13:02"
      },
      {
        "question": "系统公司方面有什么补充观点吗？",
        "answer": "解最终应用应该具备的样子很重要，很多情况下，当前应用处于初步状态，随着开发进程推进，抽象和结构会逐渐显现。现在更多的是在实践层面，即开发应用实例。",
        "time": "01:14:26"
      },
      {
        "question": "对于未来技术范式，开源的可能性更大还是闭源？",
        "answer": "目前看来，开源的可能性更大，特别是在像VIM这样的领域，可以大家一起合作定义标准。未来可能会是大部分代码仍然是现有工具的很小一部分，而这一部分将作为关键的抽象层或API连接到OpenAI或其他模型上。",
        "time": "01:15:35"
      },
      {
        "question": "在选择开源还是闭源时，特别是在开发新工具方面，有何考量？",
        "answer": "如果是开发开发工具，基本没有其他选择，必须开源并提供云服务以获取市场反馈。开源有助于快速迭代和社区力量的聚集，尤其是在新的、不确定的领域中。",
        "time": "01:16:55"
      },
      {
        "question": "如何看待OpenAI未开放多模态实时交互API的问题？",
        "answer": "OpenAI的全双工聊天功能等体现了实时交互对于模型和应用的挑战，这涉及到计算需求的增大和成本控制的问题。随着技术进步，计算成本会逐渐降低，未来可能会有所改善。",
        "time": "01:18:26"
      },
      {
        "question": "开源项目如何才能成为业界标准并实现商业化？",
        "answer": "开源在当前环境下更难实现商业化，因为管控运维已经变得容易，不再构成商业模式。开源变成了另一种模式，即首先打造优秀的开源软件吸引用户，然后通过提供更稳定、高效的服务来吸引付费用户。同时，开源项目需要比业界平均水平优秀，且闭源产品需提供超越开源的功能，才能促使用户购买。",
        "time": "01:22:19"
      },
      {
        "question": "在AI时代，数据库是否会吞并掉向量索引，开发者是否需要同时使用TDD和向量数据库？",
        "answer": "我的意见是，向量数据库应该成为数据库的一个功能，而不是单独的一个东西。虽然以前由于市场或经济原因可能没有出现一体化解决方案，但随着技术发展，如sn break er和andy polo的研究表明，向量数据库未来趋势是与SQL结合的，SQL不会消失，而是持续存在并发展。",
        "time": "01:25:55"
      },
      {
        "question": "对于数据库是否会融合向量索引以及未来的发展趋势，安迪和杨琪有何看法？",
        "answer": "我非常同意之前的观点，即当前并没有独立的向量数据库，而是有包含向量索引的数据库。从数学和机器学习的角度看，它本质上是一个矩阵，每行是一个向量，通过计算找到最近的数据。随着技术进步，例如SDBYCB这样的例子，底层存储结构变得更加灵活，能够更好地处理各种查询需求，包括filtering等复杂操作，使得向量数据库变得更加通用和高效。",
        "time": "01:28:12"
      },
      {
        "question": "对象存储在未来会扮演重要角色吗？以及CQOSICO等轻量级数据库是否有优势？",
        "answer": "对象存储在未来可能是source of truth，对SQL的发展也具有重要意义。同时，像CQOSICO这样的轻量级数据库因其易于搭建、良好的SQL支持以及插件机制，在AI工作负载中会发挥重要作用，特别是在本地开发场景下，其优势更加明显。",
        "time": "01:29:08"
      },
      {
        "question": "云厂商与模型提供商之间将如何展开合作与竞争？",
        "answer": "云厂商与模型提供商之间并非直接竞争关系，而是相互赋能的关系。云厂商通过提供基础设施（如GPU芯片）和优化环境帮助模型运行，模型提供商则专注于模型的研发和创新，并根据云厂商需求提供额外的定制化功能。双方合作能够更好地发挥模型潜力，推动整个生态的发展。",
        "time": "01:36:09"
      },
      {
        "question": "在端侧部署模型方面，你认为存在一个错误的思潮是什么？那么什么是正确的思潮呢？",
        "answer": "错误的思潮是认为所有任务都应该在端上完成，比如有公司坚持所有计算都要在手机等终端设备上进行，但这其实并不现实，因为任何模型都有其限制，无法解决所有问题。正确的思潮是从实际需求出发，考虑哪些功能能在端侧实现更好的效果，例如快速、顺滑地处理用户的简单意图识别，而不需要大量云端算力。像next AI这样的公司就在端侧使用小模型来完成自然语言处理和意图识别等任务，这种模式不仅体验好，功耗低，而且随着需求驱动市场的增长，找到合适的非商品模型部署会有很大的机会。",
        "time": "01:39:19"
      },
      {
        "question": "是否有尚未被充分挖掘的端侧应用场景？",
        "answer": "有一个很有价值但目前尚未充分挖掘的场景是关于隐私保护的。用户可能不想将数据上传至云端，但仍希望与云端的大模型进行交互。如何在不泄露本地隐私数据的前提下与云端模型进行有效交互，这可能是未来更加有意义的方向。",
        "time": "01:41:46"
      },
      {
        "question": "对于下一代公司（如Snowflake、Databricks、Oracle等）未来1-3年的期望是什么？",
        "answer": "这些成熟的公司会在产品中增加更多与AI相关的能力，如利用外部AI引擎更好地理解和操作结构化数据。Snowflake可能会增强其在处理半结构化数据方面的功能，Databricks将继续在定义清晰的领域内发展，而Oracle作为后来者在云服务领域可能通过AI优势迅速成长，特别是在北美市场。",
        "time": "01:44:46"
      },
      {
        "question": "AI的发展是否会改变传统BI公司（如Snowflake）的市场地位？",
        "answer": "传统数据库、数据仓库以及数据湖三个领域在未来一段时间内都会持续发展和壮大。Snowflake目前做得很好，但它依然是数据仓库领域的佼佼者，同时也会面临新的挑战。AI将改变用户使用这些系统的方式，未来可能出现面向AI或agent设计的部分工作负载，从而改变服务客群。",
        "time": "01:47:07"
      },
      {
        "question": "关于自己所在的公司产品，未来几个月有什么希望提醒大家关注的地方吗？",
        "answer": "某家公司提供了性价比最高的GPU，并拥有原生平台，适合高性能和低成本的GPU需求。同时预告了Cloud 3.5模型将在Drom上推出，其中包含了性能提升和质量超过GPT-3的模型，这是值得期待的。",
        "time": "01:50:36"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "探讨AI对软件开发范式的影响",
        "summary": "在AI时代，软件如何改变世界成为关注焦点。随着AI技术，特别是AI coding产品的快速发展，软件开发范式、技术栈、数据存储与处理方式等方面正面临重大变革。本对话回顾了AI native应用的讨论，聚焦于ChatGPT发布两周年之际，深入探讨了AI对软件开发流程的影响，包括开发框架、观测性工程和质量体系的改变。讨论由一线专家参与，包括AWS生成式AI核心产品团队成员、开源数据库pingCAP的创始人兼CTO以及lepton AI创始人兼CEO等，他们从不同角度分享了AI技术在软件开发领域的应用和影响。"
      },
      {
        "time": "00:02:49",
        "title": "探讨AI技术及应用：从数据库到编程框架的革新",
        "summary": "在真格基金从事早期投资的Monica主持了一场关于AI技术和基于大模型的应用开发讨论。东旭，pink KAP的联合创始人兼CTO，分享了他对分布式关系数据库和AI新工作流的见解，强调了AI技术对于开发流程的显著影响。特别提到了DSPY，一个通过将自然语言指令编译成Python代码来简化复杂任务处理的工具，展示了AI在编程框架领域的发展方向。此外，讨论还涉及了过去与当前AI浪潮的不同，以及对未来AI技术应用的期待。"
      },
      {
        "time": "00:06:41",
        "title": "贾阳青分享AI领域经验与未来关注点",
        "summary": "贾阳青，自硕士期间开始涉足机器学习和模式识别领域，经历了AI行业的不同时期。目前作为let AI公司的创始人兼CEO，他重点关注开源模型与边模型之间的平衡，特别是在LN领域，开源模型相对落后。他还提到了快手在IGC领域取得的良好成果，以及文生图和文章视频的热门趋势。贾阳青曾与东旭讨论泰迪避雷和大数据库，与杨青讨论MLLM，表明了对AI社区和开源技术的持续关注。"
      },
      {
        "time": "00:08:40",
        "title": "AI技术与开源项目参与经验分享",
        "summary": "分享者自本科起开始接触AI，并在亚马逊（亚麻）参与了多项内部创业项目，包括alexa和AWS相关项目。去年，转至一个新的AI部门，并加入bad rock项目，主要负责与entropic的对接以及atropine cloud相关模型的开发。此外，从2019年开始参与CNCF link foundation的开源项目，对社区有持续的贡献。最近对Ano pic的新工具和clean matic项目表现出浓厚兴趣，关注这些技术如何解决实际痛点并促进模型服务的平台化。"
      },
      {
        "time": "00:11:52",
        "title": "AI技术革新对软件开发的影响",
        "summary": "AI的应用开发正在催生新的软件开发范式，包括新的开发框架、数据存储和处理方式、可观测性工程及debug方法。这种范式转移中心是大型语言模型（LM），但真正的变革力量来源于周边的工程实践。对话强调了开发基于大型LM的应用与传统非LM应用之间的差异，如AI使得原本难以实现的任务变得可能，并引入了非确定性的执行结果，从而需要开发者调整思维方式和工具。此外，AI技术让程序拥有了“智慧”，开辟了更广阔的应用场景。"
      },
      {
        "time": "00:15:54",
        "title": "AI技术在软件开发中的应用与影响",
        "summary": "AI技术正在重塑软件开发领域，尤其在系统软件和应用软件两方面展现出显著的影响。在系统软件方面，AI的开发越来越聚焦于科学计算领域，致力于通过利用GPU等硬件加速来提高模型推理的效率，并将分散在多篇论文中的加速技术标准化。这种趋势表明，AI核心软件的工程师越来越关注于如何让AI模型运行得更快、更稳定、更规模化，而应用开发者则更多地依赖于API调用，无需深入了解GPU等技术细节。从应用软件的角度看，开发人员发现许多应用可以通过处理松散的输入和输出来实现，从而引发对于如何在非完全准确的情况下提升用户体验和应用有用性的深入思考。此外，随着API的简化，系统对接工作变得不如以前重要，而产品经理和用户体验设计师的角色变得越来越关键，他们需要确保应用的质量、交互和用户体验。"
      },
      {
        "time": "00:18:30",
        "title": "探讨AI技术演进及应用开发分离的意义",
        "summary": "对话集中在讨论AI技术，特别是模型开发与应用开发的分离，以及这种分离对数据库化AI的影响。提到了AI技术演进过程中，从早期的CNN到现在的语言模型（LM），AI模型的API化尝试，以及这些变化对商业应用和用户体验带来的影响。强调了泛化能力的提升对于扩大API应用范围和增强用户体验的重要性。同时，探讨了在输入输出设计中，如何提供更宽松、更灵活的用户体验设计，以及数据孵化和模型应用的分离对AI技术发展的重要性。"
      },
      {
        "time": "00:19:35",
        "title": "大模型应用开发中的挑战与策略",
        "summary": "在大模型应用开发中，确定性是极其重要的，尽管完全确定性的追求可能不现实，但仍需通过工程手段提高模型的效果。讨论集中在如何使模型输出更接近百分之百的确定性，包括通过prompt工程和自动化评估问题来提升效果。特别强调了在企业应用中，对模型输出一致性的重视超过了对多样性的需求。同时，提出了通过添加额外的模型和组件，如法院判决模型，来辅助主模型提升准确性和实用性。此外，介绍了新的产品Apple Studio，它允许非技术用户通过无代码或低代码方式直接编写程序，展现了在实际应用中，对模型的可控性和事实核查的重视。最终，强调了在设计产品时，考虑到用户心理感受的重要性，以及通过技术手段隐藏复杂性，提供更好的用户体验。"
      },
      {
        "time": "00:25:10",
        "title": "IM开发工具领域的重要变化与趋势",
        "summary": "在IM开发工具领域，过去一年半见证了显著变化。除了低代码版Long Train和DSDY等技术的进展，Function calling platform的出现被认为是一个重要的发展，特别是对于管理多个agent的能力，提出了将不同agent的能力整合为统一API或接口的需求。此外，文本处理和embedding技术在build reg流程中的应用，以及开源项目如ByData和NPI的兴起，也成为了值得关注的趋势。特别地，结合AI和计算机系统的交互技术，如LMPRA，被视为解决从不准确输入到标准化输出转换过程中的一个重要方向。这些变化反映了开发者社区对于提高效率、简化工作流程和提升交互质量的持续追求。"
      },
      {
        "time": "00:29:27",
        "title": "探讨大模型在任务执行中的应用及API管理的差异",
        "summary": "讨论集中在如何利用大模型（LM）完成具体任务，强调了LM的重要性及其在没有适当的执行工具时的局限性。提出了RTA（实时适应）作为描述这种能力的合适术语。进一步讨论了与传统API管理相比，LM的API或代理管理在界面和功能上更为灵活，尽管发言人表示自己不是传统API管理的专家，但从个人经验出发，感觉LM的管理似乎没有传统API管理复杂。"
      },
      {
        "time": "00:30:39",
        "title": "探讨技术发展与应用落地的挑战与机遇",
        "summary": "在过去一年中，技术领域见证了标准化工具的增加和特定趋势的发展，如高性能低成本的推理工具BORM的出现，以及对过度概念化项目如奥特GPT的反思，表明行业正在寻找更有效的应用方法。讨论还涉及了AIGC工具的潜力和局限性，以及对未来AI应用复杂性的预期。特别提到了模型服务与CPU的有机协作，和使用大型语言模型（LLM）重构云原生调度模块的可能性，同时也指出了现有的技术挑战，比如模型服务对长时间处理的需求。此外，还提到了社区对于生成式AI在云原生领域的应用探索，如通过auto GPT项目解决复杂性问题。"
      },
      {
        "time": "00:39:47",
        "title": "多模态数据与云计算变革",
        "summary": "随着多模态数据的兴起，对计算和存储技术提出了新的要求。云计算领域正经历着从虚拟化向科学计算的转变，GPU虚拟机的使用导致额外开销而无实际收益。各大云服务商开始提供更接近物理机形态的服务，如AWS的EC2和阿里云的林俊，标志着计算领域的重大变革。同时，存储技术也在从传统的数据仓库向适应多模态数据的数据库转变，强调随机文件存储和元数据的结构化存储。Embedding技术的出现，使得非结构化数据能够与结构化数据连接，通过SQL检索非结构化数据成为可能，这预示着大数据处理公司如Data Bricks和Snowflake等可能面临的新挑战和机遇。OpenAI收购Rockset，显示出未来AI工作负载可能更倾向于混合型应用，即同时包含在线应用和离线数据处理，且个人数据的重要性日益增加。"
      },
      {
        "time": "00:45:23",
        "title": "开源项目成熟与数据处理技术的演进",
        "summary": "讨论者分享了其在Amazon S3的工作经验和对开源社区的贡献，特别是对RockDB的贡献。RockDB的创始人后来成为Root Set的首席产品官，并组织了小型会议庆祝项目十周年。讨论转向了开源项目的成熟度及其在数据处理领域的影响，特别是在AI时代在线服务可能成为数据处理中越来越重要的能力。同时，探讨了从传统ETL到处理更多非结构化数据的转变，以及如何将非结构化数据转换为AI模型可以消费的信息。特别提到了两家公司，一家名为Demolition，另一家名为On Structure IO，它们专注于处理非结构化数据。讨论还触及了如何通过网页插件等技术手段，从网页内容中提取信息并进行结构化处理，以供AI模型分析和总结。"
      },
      {
        "time": "00:49:54",
        "title": "ETL在AI项目中的应用与挑战",
        "summary": "讨论重点在于ETL（提取、转换、加载）技术在人工智能（AI）项目中的应用，特别是在处理大量知识库数据，转化为知识图谱的过程。讨论者分享了使用DSPY进行ETL过程的经验，强调了这种方法对于实体提取、关系构建到数据库存储的自动化处理的价值。此外，讨论还涉及了观测技术（observability）面临的挑战，尤其是处理大量指标（metrics）时的问题，提出了利用AI进行数据分析和异常检测的解决方案。同时也提到了模型评估方面的新趋势，以及在实际工作中，如何通过组合不同的指标来诊断问题，强调了AI在优化这些过程中的潜力。"
      },
      {
        "time": "00:54:36",
        "title": "探讨AI领域的可观察性挑战与解决方案",
        "summary": "在AI领域，传统的可观测性方法已经不能满足需求，特别是对于GPU的健康度监控和上层应用的可观测性。GPU的复杂性要求新的工具来确保其从驱动到应用层的性能。同时，AI服务的特性导致需要更多详细的指标来评估用户体验，如TTFT (time to first token) 和token之间的加载时间。此外，对于AI模型与用户交互的历史信息，缺乏有效的机制来优化和利用这些历史数据，提升模型对用户的理解。为解决这些问题，开发了能够可视化知识图谱激活节点的工具，尽管目前对于复杂情况的处理仍存在问题。"
      },
      {
        "time": "00:58:03",
        "title": "Graphite增强搜索准确率与召回率",
        "summary": "微软推出的Graphite能够显著提高搜索系统的准确率和召回率，通过结合知识图谱辅助语言模型，使模型能更好地理解概念之间的复杂联系。讨论中提到，加入Graphite后，搜索准确率提升了约30%，对于解决理解多层概念关系的难题效果显著。此外，还探讨了AI技术如vector-based搜索对传统搜索引擎的影响，以及传统搜索引擎在搜索质量保障方面的持续价值。"
      },
      {
        "time": "01:03:27",
        "title": "从工程实践到数据检索架构的演进",
        "summary": "一开始，我直接投身于工程技术开发，遇到了前端不稳定的问题。随后，转向产品开发，尝试整体数据的向量化和语义检索，但效果不佳。最终，通过引入知识图谱，结合向量检索结果与知识图谱检索结果，形成了更有效的数据检索架构。讨论重点在于agent化工作流，提出在这一流程中会出现的新需求，尤其是开发方面的挑战和与外部服务（如机票预订）的API对接问题。我目前的态度是观望，同时着手解决自己能够控制的部分。"
      },
      {
        "time": "01:07:07",
        "title": "软件工程师对标准化和抽象化的观察与思考",
        "summary": "软件工程师在构建软件系统时倾向于创造新的标准化模型或格式，如AI框架中的模型格式，但这种做法可能导致过度工程化和不必要复杂性。讨论强调，虽然制定标准和框架能带来掌控感，但很多时候应用并不需要如此复杂的构造。此外，还提到，对于一些简单的使用案例，现有的抽象化工具和优化可能过早，未必适用于所有情况。最后，指出实际代码可能是最好的表示形式，而当前的解决方案离理想状态还有一定距离。"
      },
      {
        "time": "01:10:39",
        "title": "中美在科技领域定义权的竞争与启示",
        "summary": "讨论重点在于中美两国在科技领域，尤其是开源软件、互联网、大数据、云原生等方面的范式迁移中，美国如何通过定义新标准和技术来主导行业发展，而中国在此过程中显示出的相对被动。通过分析云原生、AI、向量数据库等具体例子，指出美国不仅在推广产品，更在推广其思考方式和理念，对比之下，中国缺乏在行业定义上的Soft Leadership。同时，讨论强调了即使在不断变化的技术环境中，软件工程和复杂数据管理的基础仍然重要，新范式多基于现有工具和技术的改良，而不是完全的创新。"
      },
      {
        "time": "01:14:22",
        "title": "探讨应用开发中的开放源代码与治理模式",
        "summary": "对话集中在应用开发过程中，对于开源与闭源的选择，以及开发初期应用形态的不确定性和如何通过实例指导未来应用的结构和抽象。特别提到，初期应用开发应注重实践和应用样例，随着时间的推移，应用的抽象和治理结构将逐渐明朗。同时，对未来开发模式的可能转变持开放态度，探讨了开源合作的可能性及其对未来技术发展的重要性。"
      },
      {
        "time": "01:16:40",
        "title": "开源与闭源的选择及开源的商业策略",
        "summary": "在开发新工具时，开源成为了收集市场反馈和加速迭代的有效方式。这种做法不仅能借助社区力量快速改进产品，还能作为商业策略吸引用户。讨论还涉及了开源不一定是出于原教旨主义，而可能是商业考量，以及多模态实时交互对模型和应用带来的挑战。此外，还提到了计算成本对开源项目上线的影响，以及开源项目在社区和商业化之间的平衡。"
      },
      {
        "time": "01:21:13",
        "title": "开源项目商业化之路",
        "summary": "讨论重点在于开源项目在过去和现在的商业化道路上所遇到的挑战和变化。十年前或二十年前，利用开源项目来吸引流量并提供管控和运维服务是一种常见的商业模式。然而，随着云服务的发展，这种模式受到冲击，开源公司与云服务商之间产生了冲突。讨论也提到了开源项目在现代面临的挑战，即如何在保证开源项目质量的同时，通过提供更高级的服务或产品来实现商业化。此外，提到了Linux基金会和VIIM框架作为支持开源项目发展和商业化的例子。"
      },
      {
        "time": "01:25:30",
        "title": "探讨AI时代数据库与向量索引的融合趋势",
        "summary": "在传统软件开发中，数据库和搜索引擎虽有交集但未完全融合，给开发者带来数据一致性等困扰。进入AI时代，讨论焦点转向数据库是否将吞并向量索引，以及未来数据库的发展方向。有观点认为，向量数据库不应是单独存在的实体，而应作为数据库的一个功能，这与SQL仍然是最重要的观点相符。此外，探讨了对象存储的重要性及未来数据库可能的形态，预测将出现介于通用与极端场景之间的专用数据库和数据产品方案，类似于Redis在某些特定场景下的应用。"
      },
      {
        "time": "01:30:15",
        "title": "探讨本地AI开发和数据库选择的未来",
        "summary": "讨论重点在于CQOSICO light及其向量插件的优点，强调了本地AI开发的重要性及其在ALM时代的优势。同时，指出开源精神的价值以及AI在开发工作流中的角色。进一步探讨了数据库选择的未来趋势，包括对标准化产品的预测和AI在数据库决策中的潜在作用。"
      },
      {
        "time": "01:34:32",
        "title": "云计算与模型提供商之间的合作关系探讨",
        "summary": "对话内容涉及软件开发的未来趋势，特别是关于云计算服务提供商与模型提供商之间合作关系的讨论。一方面，对于软件开发不会变得特别标准化的观点进行了分析，指出了目前市场上已经存在的工具和解决方案并未达到理想效果。另一方面，讨论了开发者如何选择直接使用OPI或其他语言模型提供商的API，以及这如何影响到云厂商和模型提供商之间的关系。强调了云计算提供商在赋能模型提供者，帮助其模型更好地满足用户性能需求方面的作用，并指出这种关系是互补而非竞争。最后，对未来云计算可能的增长点进行了展望，认为在云上提供模型服务将是未来的一大趋势，同时也预见了新一代云服务的出现，尽管当前还未看到能颠覆传统模式的新技术。"
      },
      {
        "time": "01:39:06",
        "title": "端侧模型与云端部署的关系及未来展望",
        "summary": "讨论集中在端侧模型和云端部署之间的关系，及其在人工智能领域的应用和未来发展方向。一方面，指出了将所有任务都放在端侧执行的想法是不现实的，因为端侧模型有其局限性；另一方面，强调了根据具体需求将合适的任务放在端侧执行的重要性，如用户意图识别等，可以提高效率和用户体验。同时，探讨了端侧模型在保护隐私方面的潜力，以及如何在不泄露本地隐私数据的前提下与云端大模型交互。最后，对未来1到3年内，像Snowflake、DataBricks和Oracle这样的成熟公司在增强与LN相关能力方面的预期进行了讨论，特别是如何更好地利用结构化数据。"
      },
      {
        "time": "01:45:16",
        "title": "云计算与数据技术发展趋势",
        "summary": "讨论集中在云计算服务提供商如Oracle在AI领域的潜力，及其如何作为后进入者利用GPU等技术减轻业务负担并迅速成长。同时，分析了数据技术领域的不同部分，包括传统数据库、数据仓库和非结构化数据湖的持续发展与共存。特别提到Snowflake和DataDog在各自领域内的机遇与挑战，以及AI技术对用户交互和数据使用方式带来的变化。此外，也讨论了与OpenI合作的潜力，以及快速工程迭代的重要性。"
      },
      {
        "time": "01:49:34",
        "title": "GPU和云AI解决方案及未来技术展望",
        "summary": "播客中讨论了公司提供的GPU解决方案，涵盖了高性能和低成本选项，强调了其产品的市场竞争力和性价比。主讲人介绍了团队的背景，包括在阿里、Facebook等公司处理大规模集群和业务的经验，突出了团队在GPU和云AI领域的专业能力。此外，还提到了对即将推出的cloud 3.5和其模型的期待，特别是其性能的显著提升，以及这将如何影响整个行业。最后，播客鼓励听众参与互动，并介绍了如何加入听众群和对播客表示支持的方式。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "AI技术发展对软件开发的影响"
            },
            {
              "children": [],
              "content": "AI在数据库、数据存储和处理、可观测性等方面的应用"
            },
            {
              "children": [],
              "content": "AI时代的编程工具变化"
            },
            {
              "children": [],
              "content": "多模态数据处理的挑战与机遇"
            },
            {
              "children": [],
              "content": "未来AI在软件工程中的角色和地位"
            }
          ],
          "content": "主要议题"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "DSPY编程框架"
                },
                {
                  "children": [],
                  "content": "多模态数据的存储与检索技术"
                },
                {
                  "children": [],
                  "content": "AI增强的编程助手和代码生成"
                }
              ],
              "content": "大模型的应用开发框架和工具"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "如何处理非确定性输出"
                },
                {
                  "children": [],
                  "content": "AI驱动的异常检测和故障诊断"
                }
              ],
              "content": "可观测性在AI应用中的新挑战"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "低代码和无代码开发平台"
                },
                {
                  "children": [],
                  "content": "AI在软件测试和质量保证中的应用"
                }
              ],
              "content": "AI在系统软件和应用软件开发中的应用"
            }
          ],
          "content": "技术细节"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "社区驱动的创新"
                },
                {
                  "children": [],
                  "content": "如何平衡开源与商业利益"
                }
              ],
              "content": "开源AI项目的优势与挑战"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "专有技术的保护"
                },
                {
                  "children": [],
                  "content": "如何通过闭源项目构建竞争优势"
                }
              ],
              "content": "闭源AI项目的商业策略"
            }
          ],
          "content": "开源和闭源项目"
        },
        {
          "children": [
            {
              "children": [],
              "content": "AI在软件开发中的普及与影响"
            },
            {
              "children": [],
              "content": "下一代编程语言和工具的演化方向"
            },
            {
              "children": [],
              "content": "AI驱动的软件自动化和智能化"
            },
            {
              "children": [],
              "content": "AI对软件工程方法和流程的潜在影响"
            }
          ],
          "content": "未来展望"
        },
        {
          "children": [
            {
              "children": [],
              "content": "对AI技术未来发展的乐观态度"
            },
            {
              "children": [],
              "content": "对AI技术在软件工程中实际应用的深入讨论"
            },
            {
              "children": [],
              "content": "对开源AI项目的重要性和未来潜力的看法"
            },
            {
              "children": [],
              "content": "对AI时代软件开发人员技能要求的变化的见解"
            }
          ],
          "content": "参与者观点"
        },
        {
          "children": [
            {
              "children": [],
              "content": "AI技术在数据库领域的应用和影响"
            },
            {
              "children": [],
              "content": "大模型对软件开发流程和工具的变革"
            },
            {
              "children": [],
              "content": "AI技术在提高软件开发效率和质量方面的潜力"
            },
            {
              "children": [],
              "content": "对未来AI技术发展的预测和期望"
            }
          ],
          "content": "问答环节"
        },
        {
          "children": [
            {
              "children": [],
              "content": "AI技术的快速发展为软件开发带来了新的机遇和挑战"
            },
            {
              "children": [],
              "content": "开源和闭源项目在AI技术发展中的不同角色和价值"
            },
            {
              "children": [],
              "content": "AI技术对软件开发流程、工具、方法和实践的深远影响"
            },
            {
              "children": [],
              "content": "对AI技术未来发展的积极预期以及软件开发领域的可能变化"
            }
          ],
          "content": "总结"
        }
      ],
      "content": "播客对话总结脑图"
    }
  }
}