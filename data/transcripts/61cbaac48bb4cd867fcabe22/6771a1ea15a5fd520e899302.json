{
  "pid": "61cbaac48bb4cd867fcabe22",
  "eid": "6771a1ea15a5fd520e899302",
  "title": "EP 66. 深度解读Coding Agent与OpenAI o3：中美Agent 创业者、研究员与投资人眼里的未来",
  "task_id": "r28pn7e8mpaaq5mz",
  "transcription": [
    {
      "time": "00:00:03",
      "text": "欢迎来到onboard，真实的一线经验，走心的投资思考。我是Monica.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:09",
      "text": "我是高宁，我们一起聊聊软件如何改变世界。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:15",
      "text": "大家好，欢迎来到omber，我是Monica。转眼就是2024年的最后几天了，今天也是omber 2024年压轴之作。那必须是绝对深度绝对精彩的一期。如果你关注AI那一定知道过去一个多月最火的话题之一就是coding agent。不到两个月的时间，coding agent的产品可谓是完成了两级跳式的升级。从超级编程助手科sir，到replay agent wind surf free代表的可以简单的完整开发应用的coding agent，再到千呼万唤始出来的David的发布，向世人展示出真正自主的agent可以独立完成各种多步骤复杂任务的惊人能力，这真的是打开了我们对于coding agent以及agent本身全新的想象空间。更巧的是，就在我们录制这一期节目的凌晨，open I在12天发布活动的最后一天，也发布了让世人震惊的模型OpenAI o three，在多个编程和数学最最有挑战的benchmark上都超越了绝大部分的人类，可以说让我们对于大语言模型能力天花板的预期再次被刷新了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:28",
      "text": "要展望AI的2025年还会发生什么？Coding agent以及强化学习为新范式的OSB系列无疑是最核心的问题。这一期我们就请到了国内和硅谷coding agent领域一线的创业者，大模型研究员以及投资人的重磅阵容，一起跟大家探讨个痛快。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:49",
      "text": "这次的嘉宾包括了replay agent的核心成员李珍。今年9月首次推出的replay agent可谓是引领了winter f boat等一系列coding a选产品的领头羊，也是第一次展示出了这种产品形态。还有开源版David open devin演化出的商业公司，all hand AI的CTO王馨瑶聊聊agent，当然要了解底层模型，我们还请来了最有国际声誉的中国开源大模型。阿里巴巴千问的coding负责人会宾员，分享他看到的模型coding能力的未来。还有一位返场嘉宾就是真格基金管理合伙人戴雨森，从投资人的宏观视角解读coding action对于软件甚至组织新范式的定义。为了更深入的讨论这些话题，莫妮卡还邀请了一位cold真格基金的EIR，17岁就开始在AI领域创业的peak。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:44",
      "text": "这次长达三个多小时的讨论在全网恐怕都很少见了。尤其是来自硅谷亲手打造coding asian的创业者们，分享他们产品设计的思考以及用户实际的反馈，还有最新鲜热乎的对于o three实现难点和未来挑战的拆解，还有一个开源项目，当agent成了最活跃的贡献者，这意味着怎样深远的未来？要理解这次内容需要一些背景知识，非常强烈推荐大家去复习。第62期我们与google deep mind研究员对于O一的讨论，以及第53期在今年上半年我们对于o coding agent的第一次探讨。其中的一位嘉宾姚舜宇作为swe bench的提出人，已经加入OpenAI，负责agent方向的研究。未来以来，不论你是否感知到，这3个小时都绝对值得你的时间。最后感谢大家这一年以来的支持，如果这一年我们的节目对大家有帮助，那在今年这最后一期就可以在小宇宙里边给我们打个赏，也在apple podcast、spotify里面给我们五星好评了让我们在未来一年继续陪伴大家，祝各位新年快乐。2025年我们同样重磅的第一期也都已经准备好了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:02",
      "text": "关注恩布尔，关注科技如何改变世界，enjoy. 好，请几位嘉宾跟大家介绍一下你自己。同时也可以简单介绍一下你是怎么开始进入到AI这个领域，以及你现在工作与coding agent有什么样的关系，老规矩，我们有个fun fact，就是最近大家使用这个coding agent产品，可以任意一款coding a产品做过的让你自己觉得最惊喜或者有趣的一个任务，可以来跟大家分享一下。我们要不从宇森开始。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:29",
      "text": "好，大家好，我是真格的戴雨森，主要在看AI方面的投资，用coding agent的做有趣的事情。因为我们是投资人，所以我们当然也还没有去用agent的去真的去做一个软件或者是网站出来。但是我在David出来之后的第二天，我自己就付费充值信仰对吧？然后充了500美金开始玩了起来。我发现它不仅可以写代码，同时也能有很强的能力去解决很多在我们投资圈需要去做的这种数据收集和这个爬虫类型的案头工作。我自己是做了一些尝试之后，觉得非常的惊艳，所以也推荐给真格的同事。我说让真格也买一个，同事可以试用一下。结果没想到一天时间我们的同事就把500美金的额度给用完了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:09",
      "text": "大家有各种各样很有意思的尝试。在后台看了之后觉得不只是这个程序员面临的职业危机，可能我们投资人也会面临很多的挑战。所以今天也非常开心和激动能跟大家一起去聊一聊这个领域。我们看到了很多新的机会。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:23",
      "text": "大家可以感受到我们这个投资机构也真是要随时一个使用者的形态走在这个前沿。当时你我们展示了他这个爬虫，已经看到他怎么一个爬的这个过程，以及中间他这一步推理的过程。我觉得这样觉得非常impressive。已经超过了我们原来觉得coding agent是程序员编程的一个辅助这么一个定义。一会也可以让宇森给大家展示一下，从一个PM或者说非程序员的这么一个视角或者老板视角，大家问为什么会让我们觉得非常的惊艳？好，下一位就请我们的另外一位返场嘉宾，李桢。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:53",
      "text": "大家好，我是李真，我是在replicate做AI agent engineer，我也是最开始做的创作者。因为最开始这个项目其实只有我一个人在做，后来慢慢成为了来的我们整个公司的这个核心项目。在我们九月份到这之后，现在也非常exciting，在很高速的一个增长的过程中，我们可能也是市面上第一个能typically用到的entry and的一个第一个agent。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:15",
      "text": "我最近在做用agent做的事情就是我最近在帮国内的一个电影导演的团队，把他们的一些需求用rapid agent去转成一些产品去落地。比如说电影的剧本的一些拆解，翻译，我会从他们那里总结一些需求，然后用replace做成一个产品让他们去用。Actually works非常的好。而且也是我们看到一个这种比较大的一个use case，就是internal tools已经有比较多的abortion了，所以这个还蛮exciting的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:40",
      "text": "他让比如电影从业者可以去生产一个软件了。以前对于电影从业者来说，比如我是一个导演，那他是不可能去生产出一个软件的。比如他有一个需求说我要把这个剧本给它拆解成一个什么样的形式，去让其他组的同学们去执行。这些事情之前都是手工在做的。因为手工在做的效率对于一个电影从业者来说，比写一个软件要容易的多了。因为写一个软件的知识的门槛实在太高了。但现在有了agent之后，这件事情门槛突然就变得非常的低于是他们就可以自己去迭代，自己去开发。所以这个是最大的一个不一样的地方。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:14",
      "text": "下一位我们就请新阳来给大家介绍一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:16",
      "text": "大家好，我是王新阳。我现在是欧汉ZI的commander，也是去AI office。我主要是负责做agent quality这块。在加入OTZI之前，我其实是在UIUC做PHE。然后PHT期间我主要做的也是这种LIM in modern interaction，还有包括这种agent相关的这样的一个工作。所以今年年初当David最开始release那个demo的时候，我们都非常的impressive。然后随后像冰原、俊阳他们就在追求上发起了一个这样子的open devil的这样一个project。所以我就从年初一直奋斗到了年末，然后期间我们也以open dev为基础，成立了欧欧翰ZI这样的一个公司。",
      "speaker": "发言人4"
    },
    {
      "time": "00:07:49",
      "text": "最近这段时间，比如说在agent方面，对我来说最impressed的地方其实在于大概是在一个月以前，我们就突然发现这个agent已经对我们的日常的open hand open devil的这个open source软件项目开发中，起到有这种像人类工程师一样实质性的作用。就是突然在某一个瞬间，它就对我们来说变得有用。其实我对向大家share一个statistic，就是你看在过去的这一个月，open hands agent它本身其实是open hands是整个republic 3里面最大的贡献者，他已经超过了我们的所有的人类。然后你看我们过去的所有的commit记录，就是基本上你会发现他每一天都活跃在我们整个code report的各个角落，在修复各种各样的，就是从简单的到一些复杂的一些bug。看到这个agents actually在github上do the work for us，就是感觉这个technology已经要来了这种感觉。这个是我觉得最难忘的一点。",
      "speaker": "发言人4"
    },
    {
      "time": "00:08:35",
      "text": "这个真的非常impressive。一会我们再可以深入聊一聊，到底这个是怎么实现的。这个跃迁是因为你们背后是做了一个什么样的改变，让他突然就能力上有了这么一个变化。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:45",
      "text": "对，其实是在11月中旬，我们当时是swe bench上第一个超过50% sweep entry verify的agent。自从超过了50%那条线之后，我们就明显感觉到我们这个agent quality已经有了这样的飞跃。然后我们在日常工作中会比如说更频繁的去使用它，就慢慢的发现了这个agent其实有很多。比如说我们原来都没想到agent能做这件事，然后我们随手编了个github一首丢给他他就去做了。像包括那一天grand遇到一个问题，就比如说看到一个前端，然后我们突然想着我们想要在旁边加一个check mark，就是让你的random，然后你就create the issue，然后直接把这个一首page fix me，然后open hand agent就直接去把它做出来了。这个给我的感觉就是，比如说以前我们可能要想一想OK我们有没有band with去做一件事情。我们有没有精力去做一件事情，但是现在我们只要负责想，然后把这个要求丢出来，不管能不能做成就丢给agents。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:32",
      "text": "我觉得最令我们感到exciting的事情就是这个agent在完成我们这份request的这件事情上。它其实很多时候是对我们来说是出乎意料的好。以至于我们最后会直接去问其他的代码，甚至就没有特别多的人力干预。所以我觉得这个是最让我觉得exciting的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:09:45",
      "text": "哇哦这个真的是非常快。你看open eleven开始是在5 6月份是吧？然后五月份公司成立到现在真的就是半年的时间。当时我们在讨论到底David这个是不是只是一个噱头。然后现在我们可以看到，居然真的就是在我也是在那gram的那个twitter上面看到你们这个agent已经成了你们最active的contribution。我觉得真的是AI这个领域的变化非常的快，一会我们也可以更细致的聊一聊你们build这个open hands的过程。好，接下来有请这个冰原来聊一聊。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:13",
      "text": "大家好，我是冰原，目前在千万主要负责coding这个方向。我们最近其实开源的coder感觉还是受到了大家的关注和喜爱的，收到了很多社区非常好的一些反馈。我可以跟大家share一个比较好玩的一个场景，就我最近在尝试利用它自己以agent的形式去清洗代码的数据。比如说我新收集一批数据，然后我如果自己清洗的话，我其实要去观察很多代码。然后自己去编写一些处理的脚本，然后再不断的进行这样的一个迭代，然后得到一个好的一个data clean的一个pack。但今天coder其实已经可以做到说，当他面对陌生的数据的时候，他可以自己去清洗。我希望未来如果colney的模型足够强大，他就可以从data的清洗，然后意识到自己去判别什么样的data是有价值的，甚至还可以写自己一个训练的代码，去训练一个更强的一个自己，然后再进行一个评估。",
      "speaker": "发言人5"
    },
    {
      "time": "00:10:59",
      "text": "我觉得如果这个agent的pipeline转得通的话，其实未来有可能不仅仅是软件开发的流程会发生变化。我觉得对于模型迭代的流程也会发生变化。这个是我觉得最近比较有意思的点。昨天欧斯瑞发布的话，我感觉有可能未来会比我们预想的要更早发生。我觉得可能未来模型的强大，可能真的要靠模型自己去迭代。",
      "speaker": "发言人5"
    },
    {
      "time": "00:11:19",
      "text": "对的，可以跟大家简单介绍一下。因为大家原本讲到千万觉得是做这个基础模型，包括你们也有自己的foundation model和自己的这个coding model。刚才你讲的这个code是大概怎么样的一个产品。",
      "speaker": "发言人1"
    },
    {
      "time": "00:11:29",
      "text": "可以给大家简介绍一下。Code的话其实是我们希望现在coding这个方向单独去验证一下，无论是数据还是技术的一个探索。就是我们在通用的前面的模型上面，我们会继续去做大量的project，以及instruction turning，甚至是LHF。这样的话我们就可以看看在holding的这样的一个方向上面，我们到底能走多远。所以说我们第一天在做这个博客的时候，我们其实目标就是能够在这样的一个方向上面真正的做到一个非常顶尖的水平。因为在这个开源模型相对来说还在不断迭代的过程中，大家可能一开始会很难有精力去baLance各项的能力。我们其实是可以不同的人去探索不同的方向，然后在某一个方向上面先做到顶尖。最终我们在merge到一个非常strong的一个通用模型里面。",
      "speaker": "发言人5"
    },
    {
      "time": "00:12:16",
      "text": "我们整个team其实通常都会以这样的逻辑去进行技术的迭代，所以说今天的coder其实你们可以认为在通用的纤维上面，或者我们称之为它为困。然后在queen的基础上面去产生一个queen coder。然后这样的一个coder给到大家可以去做下游的。无论是A真的任务也好，还是一些辅助的任务也好，我觉得都是蛮exciting的一个事情。",
      "speaker": "发言人5"
    },
    {
      "time": "00:12:36",
      "text": "好的，非常感谢几位嘉宾的介绍。Pek也是我们今天特邀的扣host，也可以跟大家介绍一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:42",
      "text": "好，我是pick是正规基金的ER，然后此前也一直在产业界做LP，主要是与搜索还有语言模型相关。最近的话我用agent其实是比较有意思。我感觉大家刚才讲到的场景都多少有点自己这个概念。就我们软件工程里常提到一个概念自举，就是比如说一个编译器能自己编译自己，然后我们现在都在尝试这些事儿。比如说我最近就在使用open devin，然后我很想了解的深入的这个架构。比如说我想了解它的extreme engine controller之间的关系。自己其实没有先读代码，我反而是让open hands帮我自己去讲解一下，发现效果还可以。",
      "speaker": "发言人6"
    },
    {
      "time": "00:13:11",
      "text": "后来我在群里看见新瑶讲，他最近在get up发现了你自己的catch buses排到第一。我就突发奇想，因为我也有David，我说让David你先读一读网上关于David的介绍，你能不能实现出一个最简陋的一个David。当然这个任务跑了很久，但其实出乎意料，他最后搭了一个形似，但是不太work，但我觉得已经非常的present了。",
      "speaker": "发言人6"
    },
    {
      "time": "00:13:28",
      "text": "好的，既然是作为今天的这个cold pick，也可以跟大家介绍一下。你觉得因为这几个产品我想你都有了解，今天你最希望跟大家聊的一些话题是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:37",
      "text": "今天这三位嘉宾其实看见阵容之后，我都有很多很具体的一个想法，待会儿可能会详细的展开。比如说同样是模型这一侧，我们发现现在可能reasoning模型在突飞猛进。同时coder这个模型如刚才边缘讲到现在可能已经有一个比较可用的一个状态。然后像现在在devin这个产品中，我们会发现其实它有一个单独的一个planning，这个set我们可以理解就是说规划它也许会对微信有一个更强的能力，然后具体执行的可能对coder的这个能力要求也很高。所以模型层面我可能会很关注，就是说这两者结合。比如说未来到底这个coder跟微信模型是两个专项是单独去走，还是最后会在山顶融合。",
      "speaker": "发言人6"
    },
    {
      "time": "00:14:07",
      "text": "然后同时对于这个agent的类似于dead open henge agent的话，那可能就是有更多这个工程的问题。因为我们理解agent框架其实会涉及一个很重要的点，就是他如何能把一个模型的能力更好的表达出来。因为我们可能会发现即使是相同的一个模型，你在不同的agent framework表现出的能力会差很多。同样就是一个agent framework，当模型发生改变之后，它的能力的这个变化也并不是跟模型的R直接的线性的去对比的。所以这块可能是我的信瑶这边更想聊一聊的这个话题。但是对于regular的话，我会可能更关注另外一个点。",
      "speaker": "发言人6"
    },
    {
      "time": "00:14:35",
      "text": "就是我发现身边很多的朋友，包括像李森，可能通过现在这些agent产品，实现了人生中第一个由自己亲手完成的网站或者产品。可是往往发现可能大家都会由于没有工程能力，虽然现在有一开发完成的产品，却卡在了比如说deployment这一步。而可以想象到，其实development是标志着软件开发的一个完成状态，而后面其实软件的生命周期还很长。比如包括如何去maintain，如何去更改，以及对于内容如何去管理，可能都会有很多A类型的产品需要后续去思考的问题。所以这可能是我对于这个李真想聊一聊的话题。",
      "speaker": "发言人6"
    },
    {
      "time": "00:15:03",
      "text": "好，非常感谢。Pick一会儿我们会如果大家还没有听过，或者对这几个我们接下来的几个产品还不是那么了解的，一会儿我们也会让几位身处一线的builder给大家深入聊一聊他们整体的这个构造的一个思路，以及在这个过程中他们实现一些思考和演进。在这之前，我想信宇森给大家开个头。作为一个一直在很深入的跟进整个coding agent，以及更广泛的AI领域的投资人的视角来看。或者你可以跟大家还有的聊一聊你所看到的这段时间以来coding agent的产品的演进，以及为什么你对于这个领域的这种创业机会以及未来的可能性这么的重视。可以跟大家简单的梳理过去，以及分享一下你的思考。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:39",
      "text": "好的，编程一直是我们觉得AI里面非常重要的一件事情。因为通过写代码，AI其实可以控制很多外部的工具。我们看到从ChatGPT出来到现在两年的时间，其实AI编程已经经历过。我觉得四个主要的代际或者三次主要的进化。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:56",
      "text": "大家其实也知道，一开始ChatGPT出来的时候，我们其实是给AI一个指示。然后他来把代码写好之后，直接贴在聊天框里面。这个当然已经是人工智能一个飞跃，对吧？因为它代码写的确实挺好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:07",
      "text": "但是在这个时候，第一AI没有，我们为什么要写这个代码的上下文？它完全是根据我们给他的prompt来写。所以我们往往在prompt里面把很多商业文都要写进去。然后第二，用户得手动的把代码粘贴回IDE里面再去运行，出现什么错误问题，然后又抛给AI本身。这样的话其实AI就是个瞎子，还不知道发生了什么。他也不知为什么要写这个代码，他像一个奴隶一样在写代码。这个就是ChatGPT和cloud刚出来的时候情况。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:32",
      "text": "然后get hub copilot，它其实是第一次对AI写代码能力的飞跃。就是它可以让AI读取我们整个code base代码就会上下文，这样AI能够在一个更广阔的范围内去看到，我为什么要写这个代码，它有哪些上下文。这个我觉得是第一个进步。但是它还是一个用户需要手动粘贴代码回IDE，然后进行调试的过程，至少在第一代的get up p拍的刚出来的时候。所以我觉得这个可以统称为叫做说我问你答是人类跟AI合作的方式。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:59",
      "text": "那么从cursor的这个发布，他提出了一个很重要的概念叫next action prediction。就是你现在写下这行代码，无论我来推测你接下来要写什么样代码，这个是来自于模型对这个code这件事情更深的了解，以及对于程序员的任务更强的规划能力和拆解能力。随着curse，但是它所主要使用的是3.5这样模型的进步，我一个初浅的理解是它能够生成更长的代码块，能够更好的预测用户将要写什么代码。并且可后来也引入了这个文件创建和修改的能力，对吧？因为我们在编程的时候有很多，比如需要下载的文件，需要创建的文件，那他可以在我的本地进行操作了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:32",
      "text": "然后windows进一步的加入了这个对命令行的自动的操作和建议。这两个加起来，其实我知道就是AI编程3.0阶段，就是AI自动写代码，创建文件和进行执行调试。它如果调不通的话，它自己会去bug。这个就有点从我问你答变成了我问你写。很大程度上的加快了这个自动化的进程。所以这个其实也是我在一两个月前，我第一次用到windows server的时候，我觉得非常激动的一个原因。是因为我看到它如何自动化的在我的电脑上一台全新的没有包括任何编程环境的系统上，通过一两步简单的指令和操作，真的把一个可能一个demo website跑起来的过程。但是在这个时候，我其实我后来想他还是持续的需要我的一个注意力。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:08",
      "text": "所以在David出来之后，我觉得打开了进一步的一个范式，是说他真的很像一个真人。我把任务交给他之后，我就不用去盯着他这个任务完成进程了，我就可以去做我自己别的事情。他可以通过一个planner去进行一个比较完整的任务规划能力。可以自己再持续的去进行编程，然后进行调试。需要创建文件，包括通过虚拟机去访问互联网，去获得他需要的信息。然后这个过程中我还可以随时进行打断和调整，这个也很重要。因为之前不管是ChatGPT还是cursor windows ver这样的产品，你再跟他说了一个prompt之后，你就得等他把整个流程跑完，对吧？中间你只有把它强行中断，你很难去进行添加额外的指示。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:43",
      "text": "但我们从这个老板的视角来看，那我们给一个员工布置个任务之后，显然我可以是不断的去调整我的这样一个要求。并且我觉得在这个里边，其实它还跟这个snack是做了很深度的集成。这样它可以有效的除了code base之外的上下文，也可以在snack里面获得我为什么要干这件事情的上下文。这个其实我觉得对于完成工作以及更加准确的完成工作来讲是非常重要。所以我在看到在艾文之后，我就发现，好像这个东西它不只可以编程，对吧？他也得完成很多通过一个人坐在电脑前面，网络互联网能够解决的事情。但在这种异步的A型的产品出来之后，我觉得就有一个很重要的一个概念。我自己在想就是当我们能够简单的花钱或者说花算力就能买到工作的时候，这个其实就诞生了某种叫做工作的scaling law。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:24",
      "text": "因为之前我觉得人类的使用的工具分为两类。第一类是比如说像实体中的，比如说电钻或者像ChatGPT这样的，就是你得去持续的投入注意力。他有点像是一个人，你踢一脚才动一下，你得持续的对话。你一旦把这个使用停下来，注意力挪开之后，他就不能继续往下进行了，这是一种工具。另外一种工具就是所谓的自动化。比如说我部署一个爬虫，我写好之后他自己去爬。但是它KINOV是完成一个比较重复的工作，他是没有什么自己去进行调整决策反思的能力的那我们说的这个autonomous agent，也就是说全自动代理，其实就是一个既不需要我花很多注意力，同时又可以完成一些非重复性的，而是需要去创业性思考的工作。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:03",
      "text": "我觉得David是第一个例子。这个可能是就是说我把如果意义拔高一点，是人类历史上出现的第三种工具，对吧？他既不需要一直需要你的注意力，它又可以自主完成工作。那这种情况下我们就可以把这个工作这件事情更多的scale up起来。我可以让David同时帮我跑好几个任务，甚至是几十上百个任务。甚至我可以用agent再去指挥一个另外的agent去做执行。所以我觉得这里面提出了很多的新的可能，我觉得是非常让人激动的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:26",
      "text": "所以让你产生工作的scaling law的这个感受是在用了David之后。什么你觉得David跟之前winsor或者说像regular agent这样的产品，你也做了一些工具。你觉得这里边在你看来最核心的这个区别是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:37",
      "text": "我觉得它的呈现形式是这个a think，就是异步的工作。Windom它其实如果打个比方是说，我让AI用我的电脑，就是他可以对我的电脑做很多事情。他可以在我的电脑上用命令行去执行命令，创建文件，修改文件，对吧？但在这个时候我就干不了什么事情，我得看着他去用我的电脑。当然这个时候我可以切出去上网什么的，但是我过一会儿就得看看他有没有干完。因为我知道他完之后我就得点下一步，所以它持续需要我的注意力。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:03",
      "text": "那么devin的这个planner，首先它是非常重要的一个环节。因为它可以生成一个通过一个伪代码的形式生成一个比较复杂的流程。比如说他会给自己生成个to do list，然后他就看自己的to do list有没有做完，没有做完他就继续做。这个过程它是真正能够解放我的注意力和生产力的。第二个是在David里面，它是使用一个虚拟机，所以它是在云端自己开了一个虚拟机，去完成他需要的访问互联网，调试、验证这些过程。就他不用调调用我的这个机器。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:29",
      "text": "大家之前用过一些RPA的工具，或者这种有点尝试去做突破use的工具，大家都会有这个感觉，就是他在做事情的时候你是不敢动的。因为你你你怕一不小心就把他的什么东西打扰用坏了。所以我就感觉这是有点像我给实习生配了个电脑，就他用他的电脑偶尔去看一看他干的怎么样了。甚至lever里面有一个很好的设计，就是比如他假设需要我的一些账号密码。但是比如他要登录一个link in，他可以让我来输入这个密码。就好像说我的实习生他找我要一个账号，他说老板那你在我的电脑上输一下这个账号密码，然后我给他说了，他要去干他该干的活去了。这个其实就非常像我们在实际工作中的一个隐喻。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:03",
      "text": "是的，虽然说这个David被人所知道的时候，是否有一些coding asian，但是我真的是觉得就是从我们的一些使用的感受来看，就远远超过了口顶这个范畴。好，非常感谢宇森给我们分享了他的一个感受。正好刚才宇森给大家介绍了他所看到一步一步的coding agent的眼镜。我想在我们聊到dv之前，我觉得真正意义上去GA的coding的agent应该就是replay age了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:24",
      "text": "也许很多人今天都想要直接听一听跟David相关的。但是我觉得前面我们从cursor到regulation的这两步以及这两种产品形态，我觉得仍然是非常重要的。所以我们就可以请李振更深入跟大家分享一下，就是到底reagent是做什么的。然后一开始你们是怎么开始做这个产品，以及到我想从你们产品release到现在也有个小半年的时间了。那中间有哪一些比较重要的一些iteration是可以跟大家分享一下的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:48",
      "text": "我觉得就顺着刚才已经说的，我们其实整个心路历程中间经历了很多的思考。其实最后得出的结论是这个agent这边其实是有不同的产品形态的。我可以从头开始说，其实我开始做agent就是经历了刚才雨森说的这几波的变革。加入report之前我自己在创业。然后我在某一天GPT4发布之后，我发现我和GPT4的合作效率比我加上我招的两个强大工程师合作效率要更高。虽然当时还是你问我答的形态，但是这个已经让我发现20美元一个月的GP4比我1万美元一个月的两个工程师的价值要更高了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:20",
      "text": "我意识到这件事儿之后，我就决定all in这个coding agent。因为considering我自己能在这上面得到的价值和这个世界上写代码这件事上存在的这个市值实在是太大了。所以我就决定in coding里的当时的replay d或者说一年前的replay d是一家纯IDE公司。我们是一个做online IDE的，你不像VS code需要下载。然后replace就是一个在网页上你可以去进入replace，然后你去写代码，他会有给你配好环境，然后有deploy。这也回答了刚才pick的一个问题，就是deploy的问题。我们是自己做了deploy的，所以你可以认为它是一个完美的一个and box。",
      "speaker": "发言人3"
    },
    {
      "time": "00:23:53",
      "text": "就是如果存在一个AGI，它需要一个环境去让这个AGIT去操作，去写代码，去执行这个install环境，去deploy，然后去访问这个data base，去访问这些secrets，然后增加integration，这一切的东西不是都有，那么他缺的就是一个agent，于是我就加入了，然后我就开始说我要做agent。当时fed CEOIM get在tiktok也一直说说i have a dream。就有一天我在那手机上能够操作一个agent，让他帮我做软件。我们evacuate就是做了这个事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:22",
      "text": "然后这个agent跟David不太一样的一点是，我们的产品形态更注重帮助用户从0到1去做的一个东西。什么意思呢？就是说假设我的用户我们的用户他现在有个idea，但是他完全不会写代码，那你拿到了之后，你可以说我要build一个这样的网页，这样的一个软件。那agent会开始帮你去内费一个plan。然后你跟agent去进行一些交流。你要prove这个plan的，会开始写代码，然后装环境，把它搭起来开始跑，然后跟你一步一步的去虚拟go shit，把你想要的东西堆了起来。所以是一个从0到1的过程。",
      "speaker": "发言人3"
    },
    {
      "time": "00:24:54",
      "text": "我们在九月份的时候发布的，到现在也三个四个月了。我们有看到了大量的不同的use case，有非常多不一样的inside。我觉得一个最大的一个产品形态上的inside，就是根据用户需求的不同，用户的exciting是非常不一样的。我们在最开始的时候其实会比较接近一种a sync onze ed的agent，就是用户会给我们一个需求，然后我们去逼着的在那做，去不停的迭代好几个generation，然后最后deliver一个结果出来。",
      "speaker": "发言人3"
    },
    {
      "time": "00:25:23",
      "text": "在我们发布了之后，在我们看到很多用户的反馈，用户会给我们反馈说到他们更期待这个agent以一种合作的形式去存在，而不是去做很长时间的工作，然后再come back。什么意思？就是像David这样的工作形式，是有一个用户的一个education的门槛的。在devon出来之前，或者说agent出来之前，还没有太多的软件是这种用户给一个指令，然后他过去做十分钟，20分钟，再come back with the result，就没有太多这样的一个形态。而我们做了这样的一个形态之后，用户会告诉我们说OK他们其实要更及时的一个反馈。",
      "speaker": "发言人3"
    },
    {
      "time": "00:25:56",
      "text": "所以我们后来又做了两个change。第一个是让agent跟用户的交流更多，因为我们发现humane的look非常重要。用户希望更多的transparency，希望知道agent在做什么，然后希望能够控制agents的这个direction。所以我们加入了更多的transparent y跟用户的更多的feedback给用户，让用户知道你在做什么。第二个是我们又做了另一个产品叫a system。它是一个更快的edit，有点像这个curse composer。",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:19",
      "text": "就是用户给一个具体的指令，你要改什么，会自己找文件，然后自己去edit，还要更快更便宜，然后agent就更多的是一个a synonyms ed的autonomous的一个形态。所以现在我们我的理解是这些其实是两个比较不同的需求。就是说自动化的去完成一个task和一个轻量级的edit。这两个需求的用户的expectation是不一样的。但这两个需求同时又存在，不管你是在replace上从0到1，还是说在Steven上你有一个大的code base，你想要生成一个PR其实这两个产品形态是存在的这两个必须也都是存在的。所以这是我我们这段时间得到的一个inside。",
      "speaker": "发言人3"
    },
    {
      "time": "00:26:53",
      "text": "但是从0到1和生成一个PR这两个问题就完全不一样。他们虽然都是agent，但是他们的focus是非常不一样的。这个新尧等会儿可以补充一些，就是如果你是做一个大的PR，你需要去理解这个code base，你需要有好的search of the rag，然后你需要能够增加你这个生成的内容的PR的准确性。然后像refit从0到1，我们需要的是能够cover更多的use case，cover更多的integration。比如用户想要OpenAI的API，我想想要用OpenAI，用户想要用data base，用户想要用这个proxy的API。我们都要能保证age，能把这些接上，要能够保证它快，能够给用户更好的去把产品搭起来，能保证他能支持更多的framework，能保证它的deploy。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:32",
      "text": "其实从0到1的事情非常的多，这个只是早期阶段。后面还有更多的像SEO，像这个sort 2很多很多的问题要解决。但是前面的问题就已经跟W或者all hands解决的问题已经是非常不一样了。所以这个其实看起来产品形态是很像的，但实际上解决的问题是非常不一样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:27:50",
      "text": "所以正好我觉得关于这个解决问题的不一样，我觉得正好可以follow up一下。所以现在你们看到reply agent大部分的用户，包括其实跟你们形态比较相像for boat这些你所看到的其实用大部分的任务都是这种从0到1的这种任务。那在一之后，它就是停留在一个比如说自己可以用的一个小的工具。还是说如果说接下来他要把这个真的把它变成一个更复杂的，要在进production，甚至是to public的这种产品的话，他会怎么去做呢？还是留在这个rappid里边。还是说你会看到他到别的平台上去做。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:22",
      "text": "这个问题非常好，有不同的用户的行为都存在，当然大部分是留在这个平台里边。不管是replay还是boat，他们会继续的去smash这个agent的能力，然后去购买他们的产品。其实很多用户已经push远远超过一了，很可能已经push到比如70或者80了。之前在那个twitter上做了一次直播，然后有特别多的用户进来跟我们说他们的story。我印象比较深的是有一个印度的一个小哥在德里，他说他在replied agent发布之后，通过replay agent已经挣了10万美金了。我们看到非常多的用户其实已经把他们的产品上线了，在网站上make revenue。其实这个更像一个创业的过程。",
      "speaker": "发言人3"
    },
    {
      "time": "00:28:54",
      "text": "我特别喜欢的一个pattern就是有一些创业者他们在用agent非常快速的去build up他们自己的idea，然后放出去去验证product market fit，用来验证PMF的第一个版本的开发速度变得非常的快。然后它可以在不同的产品之间share它的很多的set up。比如说翻译的这些set up，比如说他的这些tracking分析了3B他这样的话就可以非常快的去验证idea，然后直到他有一个idea hit the market。如果你是一个优秀的创业者，你的产能会被无限的增大，会被增大到10倍甚至100倍。我看到很多我身边的一些创业者已经在做这个事情。甚至在还有一些别人在帮他们去验证prada各的idea，通过教他们使用为人。因为这个的门槛其实就没有那么高，但是效率又非常的高。",
      "speaker": "发言人3"
    },
    {
      "time": "00:29:36",
      "text": "好，那我们回来李总我再follow up一下，就是从rapid的relate到现在，除了你刚才提到的加了一个system之外，还有哪一些更新在你看来对于现在在提高大家使用的满意度等等，以及提高他的performance有比较大的帮助的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:52",
      "text": "其实底层model没有怎么换的，因为都是3.5。更新的话主要就是在几个0到1的agent特别关心的方面。第一个是这个integration，就是说我刚才提到的用户其实对于从0到1来说，他们更想要的是把他们的产品去接到各种各样不同的服务里。这样的它的产品才真正的有价值。比如说OpenAI，比如说这个firebase super base的数据库，比如说这个stripe，你只有跌了stripe你才能开始赚钱。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:19",
      "text": "其实很多的这个integration l line自己是做的不是特别好的。第一它并LM是有cut off knowledge c的。如果说这个API是他的knowledge cut off之后出来的，他就完全不知道这个AI是什么了。所以我们需要教这个agent关于最新的这些knowledge，如何去使用最新的这些integration。这个是特别关键的。这个使得很多产品你从不可用变成可用。",
      "speaker": "发言人3"
    },
    {
      "time": "00:30:40",
      "text": "然后我们在这个edit代码编辑上也进行了一个非常多的实验和更新。因为代码编辑其实就是整个agent中间最核心的一个部分。如果你编辑的好，就能更快的完成用户的需求。你编辑的不好，那用户就会很亏，浪费我的这个credit。我们在这个中间就是有很多关于电编辑的方式，我们做了很多的experiment，包括应该给什么样的文件的context，哪些context应该被recycle，帮助用户去fig out他们想要用的text tag是什么。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:09",
      "text": "我们的database是我们replace自己maintain的，你也可以接外部的database。然后我们的database上也会做一些control，保证你在replace上自己deploy的时候，agent写出来的代码是一定是可以deploy的。这个也很重要。因为IOM有时候会写一些代码，它上去跟你在这个report上看到的时候是不一样的。这个其实又使得它不可用了，所以deploy y也是一个重要的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:31",
      "text": "还有个巨大的更新就是我们使得它UI变得好看的非常多。最开始我们的spack是比较有限的，这个flash然后瓦尼娜GS后来我们又支持了这个react street。Late一开始也有，然后又支持了更多的用户想要的这个stack，又加入了很多的image，让AI可以自己去搜图，然后加到你的产品里面，又加了很多美学的一些tuning。所以现在他做出来的网站或者产品会美学上好看很多。Functionality was也非常好，而且from t book都会比刚落实的时候好的太一波了。特别onus的就是如果我们看过去三个月的这个change的话，所以进步还是非常多的。我都挺surprise的几个月时间能发生这么大的变化。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:07",
      "text": "人家说这个美学是你们自己的UI还是说你们通过什么方式。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:11",
      "text": "我们自己UI也几乎重构了一遍。以前的replay是一个以ID为主的，你看着会像VS code。然后现在是一个完全是agent first的一个UI了。一切都是以让agent用户用agent更舒服为主导，去重新design agent first的一个设计。",
      "speaker": "发言人3"
    },
    {
      "time": "00:32:24",
      "text": "然后美学的这个上面framework很重要，像v zero就是VSL，他们做了这个framework next JS的很大的一个好处就是他们的UI好看。因为他们已经把什么是好看这件事情包定在他们的frameworks里面了。所以我们第一个就是support了这个react。然后一些next AS的东西使得他用了更好看的FM mark。然后另外就是在需要的时候加入了一些image，就是让像我说的让AI自己去能抓一些图片来。然后再加上我们做了一些这种prompt tuning，加了一些工具，让你能够在refit上调整这个网站的颜色或者说字体大小，而不是用去让A的一个你可以自己加一些工具上手动去调，其实就是把一些agent的工作转成一个UI上的工具上的一个工作。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:07",
      "text": "咱们刚才聊了很多关于这个从0到1，其实就我自己也是用户，我能感觉到就是如你所说的这一年进展非常的快，就明显感觉到了从0到1的这个达成率越来越高。但另外一点，他达成的速度越来越快。我会在想会不会有这样一种可能，就是因为大家都知道to b软件，我们希望就陪伴用户成功，对吧？想陪伴他更长的生命周期，然后我们也能获得更高的价值。现在包括replay age这样的一些产品，可能从1到1越来越快的被打成。但是可能从1到10，我自己的体感还没有那么的ready。这方面你们接下来会有怎样的一个准备呢？还是说可能还是更多专注于这个从0到1的探索阶段。",
      "speaker": "发言人6"
    },
    {
      "time": "00:33:38",
      "text": "我们是希望用户能够从0到100的，我们希望我们能帮助用户去做一个产品，并且帮他们赚钱。从0到1只是现在的第一步，也是AI比较擅长能够做好的一步。然后从1到100，像我刚才说的，这个中间有很多不一样的问题要解决。当然现在我们也看到用户，很多用户他们每天都在smash agent或者assistant，他们一天能发好几百条消息，把他的产品每天变得越来越好，其实是已经能达到一个可用的一个阶段了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:03",
      "text": "但是更多的到后面1到100的问题，就像我刚才说的这个，当code base by了之后，这个fire context怎么去？然后当你产品复杂了之后，你怎么保证它的数据库的稳定性，然后安全。在你有了大量用户数据之后，怎么保证这个数据的migration是成功的？其实这就是一系列traditional软件公司在grow的过程中会遇到的各种各样的问题。包括安全，包括scale，包括compliance。我们agent其实也都要一个一个解决。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:30",
      "text": "我觉得这个就是一个现在在早期，然后慢慢的会被一点点攻克的一些问题。这家被攻克了之后，就是真的可以实现agent帮你build up一个公司，帮你scale这个公司，然后帮你赚钱。但是它的有个好处，就是因为你的产品是agent build的，所以我们会可以你可以make一些assumption，比起Randy拿来一个软件，然后让他去做scale，让他去帮你解决你的这个数据库的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:52",
      "text": "其实agent在最开始的textile ation上，就已经选择了一些我们觉得agent能做好的stack，我们觉得agent能用好的这个technology。在后面的scale或者安全性上面就可以做得更轻松一些。Hold目标就是比如说用户来到replace built的所有的软件，都可以很好的scale，都可以保证数据库的安全，都可以保证这个deploy的稳定性。很多事情就不用去concern了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:13",
      "text": "会不会比如说rapper发展到后面，其实完全能cover掉现有云服务的这个场景。或者说rapper可能会变成所有云厂商的一个前端。这我觉得可能是最疯狂的一个未来。",
      "speaker": "发言人6"
    },
    {
      "time": "00:35:23",
      "text": "其实。",
      "speaker": "发言人4"
    },
    {
      "time": "00:35:24",
      "text": "有可能，当然我们也不可能说什么都做，所以会用很多外部的服务。比如说我们的deployment中间的过程中用了很多云厂商的服务的。当然这个也是我们很大的一部分revenue的来源。所以可以这么说，从0到1的agent的产品公司最后会变成一个包了很多云服务的一个前端。但它的目标是帮助用户做好一个产品，然后后面会接更多各种各样的这个integration，各种各样的services。如果说有一部分事情是我们该做的，就是rebid做的更好的。有一部分东西是云厂商或者说外部的integration做的更好的那这个就是我们在发展过程中要make的一个decision。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:58",
      "text": "是的，是我觉得这个听起来非常make sense。因为大家经常讲这个multi call多一点，其实我觉得这可能agent反而是更适合的。",
      "speaker": "发言人6"
    },
    {
      "time": "00:36:04",
      "text": "其实上次我们在聊这个agent的时候，那时候David大家还只是看了个demo，对吧？那现在我好奇你自己有没有实际用到这个W有什么让你觉得跟想象的时候不一样的地方。而且另外我觉得两个问题，一个就是说首先这些产品底层的model也用的是这个第三方的model，那到底上层这个产品上比拼的是什么？第二就是说当这个coding本身foundation model的能力越来越强了以后，会对于你们所cover的这个use case会有一些更多的融合。你怎么看未来的这个眼镜？",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:32",
      "text": "对我觉得首先我用了David，然后我觉得它还是比较符合我的预期的，就是跟宣传片上非常一致，它非常的acing coronis就是你给他一个task它会去执行。即使是非常小的一个task，它也会执行，思考的非常全面，给你一个PR。所以总体看来我觉得它是非常符合我预期的一个形态。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:49",
      "text": "但是就像我刚才说的，它的场景就是在一个你本身你是一个知道你要做什么的，你知道你的code base是什么，然后你让他做一个task。这个第一它的产品形态其实是本新的。第二个是说它的这个用户群体会是更面向professional或者technical的用户群体。你会指挥他去做事情，去contribute，去code base。我觉得这个是产品形态上会稍微有些不一样。像我们的用户群体，甚至有很多什么四岁的小朋友，有80岁的老人，一个用户上的不一样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:18",
      "text": "当然这就回到你的第二个问题。因为其实最后产品的不一样本质来源于用户的不一样。如果我们的用户是一个八岁或者四岁的小朋友，那我们的UI的交互或者说跟用户的交流方式，就需要能让他们去理解这些东西是什么。比如说为什么这里需要一个数据库？为什么这个地方需要一个APIK？APIT是什么？对于David的用户来说，可能不需要教育他们，这个问题他们肯定大部分是知道的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:39",
      "text": "所以最后的产品形态的不一样，会由用户决定是你在服务什么样的用户。比如我其实自己也用curse去写代码，因为那是因为我是一个professior的程序员。但是其实如果我不是一个professior的程序员，可能的对我来说就会稍微有一些难。所以最后的形态的产品形态的差异还是由用户决定。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:56",
      "text": "模型的话。当然如果对于我们来说，模型形态的所有的东西节省，这个是一个非常好的事情。相当于我们跟着这个模型的提升去得到了一个free的upgrade，就是模型会越来越好，我们的产品也会跟着模型越来越好。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:09",
      "text": "在国外最近这个compound AI的这个概念也很火。你们这段实践中，你们会需要再结合一些别的一些小的model吗？还是说你觉得其实你这个以搜索为主的这个防晒model就已经足够了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:38:21",
      "text": "对我其实肯定是要结合很多不同的model的，因为不同的task适用于不同的model。有这个主要的考虑是性能，然后速度和价格。因为你不是所有的事情都是要让sonet来做，有些事情可能更小的工作就能做的很好了。比如说这1 german非常的便宜。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:35",
      "text": "然后有些事情可能你需要更强的model。比如说这个finding，你可能用O一去做会更好。有些事情你甚至需要一些molting model。比如说cloud的computer use，你需要让让agent能用computer use操作他自己的软件，或者说操作这个网站去收集一些信息，诸如此类的。所以我觉得一定最后会有大家都会用各种各样不同的model，不会局限于一个model。Sol left的优势是它生成代码，但是不同的task一定还是有更适合的model去做的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:01",
      "text": "大家都说去年大家都希望看到这个应用，你能不能自己有做model的能力，现在是反过来的，最好你自己不要做model。但是我就从我们交流感觉到的是，即使你自己不是做法还是model这一层，但是对于要做一个真正a native的产品的团队来说，仍然是需要比较强的AI的能力的。我们几个重要的产品聊完了以后，回头我们再bring一下接下来会发生什么。新瑶可以跟大家讲一讲，回顾一下这个open hands是怎么现在叫open hands，就是一开始叫open day是怎么开始的？大家都对David非常的好奇，对David是怎么做出来的那我觉得也可以跟大家分享一下大体的架构是怎么样的，以及公司发展到现在可能也有半年的时间了。这里边一些比较重要的一些技术和商业的决策也可以跟大家梳理一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:40",
      "text": "我可以先从整个open hands的故事开始讲起。其实这一切都是由David的twitter release引发的。当时我在国内因为前程被check，我就躲在家里面刷twitter，然后刷着刷着就刷到了David的这个demo。我当时觉得extremely impressive，而且当时那个时期正好是我刚刚rap up了之前的一个research researchers work。然后我的下一个工作，我心里就其实是在想能不能造一个类似于David demo里面那种的agent去真实的替我做事。结果我前脚刚想完，后脚人家就做出来了。然后我当时还有点小阴谋。",
      "speaker": "发言人4"
    },
    {
      "time": "00:40:09",
      "text": "当时晚上在家里面，但是第二天我在推特上就刷到了俊阳和冰原。他们当时说我们要做一个open deal，我们要做一个open source。然后我当时其实就immediately对这个非常感兴趣。因为对我来说，我当时给我自己计划了下一个一次project，也是要做一个类似的东西。然后我知道在做agent这方面，其实对工程要求是非常高的，就是你需要有非常足够好的infrastructure去支持你做整个age方面的research。所以我当时最开始加入open，你们最朴素的想法，其实就是单纯的为我下一个project做准备。我希望能够就是因为你像David这么impress的demo，但是他们是作为一个必然的产品。但是如果比如说作为一个在学术界的PH student，我想要去研究比如说这样子的frontier capability。",
      "speaker": "发言人4"
    },
    {
      "time": "00:40:45",
      "text": "但是如果没有一个open source的code base去帮助我做这样子的研究，那么可能就是我研究能够达到那个上限就非常的有限。所以一开始加入open eleven就是抱着这样的一个想法。然后另外一个我当时觉得淘气，对我来说非常impressive的点，就是我记得当时只有一个read me，然后就瞬间多了1000个，包括有各种各样天南地北的open source contributor。就什么都不问，大家上来就开干夸，夸夸的往里面写代码，夸夸的就往里面问GP2，有点累，非常bottle up的一个这样的行为，我当时也觉得非常的新奇。",
      "speaker": "发言人4"
    },
    {
      "time": "00:41:12",
      "text": "其实到后面就是gram用cloud，就是用当时刚刚发布的，我印象应该是刚刚发布的cloud UI写了给open house生成了第一段前端的代码。然后随后我们整个open测试的问题，就估计就该怎么进行迭代。后来就是robot就是我们现在的CEO，他当时进来把整个这样子的architecture搭起来，做出来的第一个能跑的一卷，但是效果不甚好。然后我再接下来把我之前发了一些paper里面的一些方法给apply的integrate到open hands里面来。让open hands的A卷能够真的end to end去完成一些相对比较简单的一些任务，大概就是一个这样子的一个流程。然后再今年4 5月份终于决定把它做成一家公司，大概是一个这样的一个发展路线。",
      "speaker": "发言人4"
    },
    {
      "time": "00:41:48",
      "text": "可以跟大家简单介绍一下open has怎么去实现的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:51",
      "text": "就是我们尽可能把这个东西设计的很简单。所以严格意义上来说，其实对我们来说就主要是三大块，就在后端主要有三大块。首先你有个agent，这个agent的作用其实就是是啊你喂给agent的一个event history。就是比如说在过去人类说的什么话，agent执行了什么action，agent获得了哪些observation，pass给agent，然后由agent这个本身来生成一个比如说新的action。然后新的action push进行event stream，然后相当于你有一个streaming，就是你相当于你有个event stream，去维护你过去发生的所有的事情，观察到的所有信息。",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:17",
      "text": "然后另外一个我们非常关注，但是也是非常难做的一个component，我们管它叫做agent run time。所以agent runtime做的所有事情，其实本质上来说就是把这个event stream的所有的action去执行成vision。比如说这个action可以是执行bash command，然后这个时候你就会需要在一个比如说3 box环境里面把这个command执行了。把with vision推荐events string，然后我们当然这个agent最后就可以从events ring里把这个信息拿到。当然在这一步，在这个三块之间，其实还是没有user involve进来，因为这个纯粹就是一个agent和environment的一个合一环境的一个交互逻辑。我们考虑的和用户用户和这个age交互逻辑其实也是通过这个events in。其实用户也可以直接往这个events in里面去加入他们想要发给agent的信息。比如说用户可以直接说OK，我想要让你这个agent去给我做一件事儿，他直接把这个消息push in restrain，然后就会被这个agent所查到。",
      "speaker": "发言人4"
    },
    {
      "time": "00:43:00",
      "text": "这样做的好处，其实就是说目前来说我们可能只是一个web UI，但是在未来我们可能会有很多个agent同时在work on the same thing。就相当于是我们现在有一个办公室，然后有好多个人都在做同一件事情。但是每个人的分工不一样，我们特意做了一个这样子adventuring architecture，其实就是做一个类似于一个future proof的一个architecture设计。去考虑到比如说未来可能有多个用户连接同一个a section，有多个agent连接到同一个用户的筛选这样子的一种可能性。就是从archie上来说是这样。",
      "speaker": "发言人4"
    },
    {
      "time": "00:43:26",
      "text": "但是具体的action location其实是可以很多变的。比如说我们现在用的基本上是基于react code act这样子的一种做法。其实本质上来说就主要是依赖于LM自己的能力，去根据历史的这样子的action observation去生成新的action，去决定自己的下一步应该做什么。这个的好处其实就在于前面我们也讨论到，这个model更新会给A卷带来很大的improvement。其实我觉得有些agent设计，它能够最大程度的享受到model更新model提升带来的improvement。但是有一些比如说如果你用了一些相对比如说prompting habbi的一些方法，你可能享受到的model improvement。对于直接用这个LN本身来进行生成action来说可能会没有那么大。所以这里也引发我们早期的一些agent design decision。",
      "speaker": "发言人4"
    },
    {
      "time": "00:44:06",
      "text": "刚好聊到architecture之后，我觉得我们也可以跟这个devin一块对比一下，聊聊就正好两个项目之间的设计上的一些异同。比如说我们刚才讲到那个，我很认同你说的一点，就是如果我们的agent层面做的尽量轻的话，其实能更好的享受到模型的一个提升。然后我自己也非常认同这一个方向。当然我在对devin进行一些比较深入的测试的时候，发现他可能有点像你刚才讲到的就是prom hey的这一个情况。包括我们看到比如说现在open hand里头agent无论是它，其实这个planner也只不过是一种agent。但似乎在band里头他的planner是处于一个更高位的一个状态。包括他生成的planned，我从他的一些内部的能看到的，比如说抓包看得起他似乎是以DAG的形式在进行planning这块儿你是怎么看的？就是对于planning你觉得它是应该是一个更复杂的，还是说一个更加简单的一个状态？",
      "speaker": "发言人6"
    },
    {
      "time": "00:44:46",
      "text": "对的，其实plan这块儿，我们的社区也有非常多的讨论，包括我们社区也进行了非常多的尝试。国际上我们大概试了四五种，然后我们实验了45种不同的AI frame去做planning，然后也都以八为的跳动第T1第二就是基本上每一个work没有一个能够打过直接用model本身进行做事的一件这样的事情。而且还有另外一点，就是我其实觉得planning能力本身一定程度上来说，可以是作为一个模型本身的一个能力存在。就是你不一定需要去给这个模型做一些external的。就是我可以，刚好说到这点，我可以给大家share一下，anthropy c他们自己本身的一个process里面，测swe bench的那个point里面，他们其实就包含一段我们可以认为是一个planning的东西。但是这个planning就是我我我管这种情况叫做相对于来说就更soft也planning就是你直接告诉agent follow these steps to resolve the issue，你直接给他列一个玻璃point。我们最后试了半天，发现可能在防备mode足够强的情况下，你直接通过这样子的一种造的形式给他进行一个plan的效果反而是最好的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:45:45",
      "text": "而且planning其实有另外一个比较头疼的问题，就是不是所有的事情都像你一开始想的那样。就比如说我看拿到了这个问题，我一开始想OK我第一步做A第二步做B第三步做C然后我可以把这个explicit plan建成一张图，然后我把这个图直接给砸到A卷身上，就按着这张图去做。但是实际上你会发现A卷在真的做事儿的时候，你会发现会遇到很多你在一开始做plan的时候想象不到的问题。在这种情况下，如果你是有一个非常explicit的by structure，这个时候你就要需要考虑一些工程角色。比如说我怎么样子让agent去reply，就是说更新我原来生成的这个ly并且让agent根据更新之后的那个方案去做事儿。",
      "speaker": "发言人4"
    },
    {
      "time": "00:46:18",
      "text": "现在你需要关心两个能力。第一个我生成的plan是否准确。第二个我是否能准确的predict到replan的时机。第三个我生成的reply是否正确，可能第四个我根据reply完成的。比如说我是根据发现生成的新的action或准确。就相当于是你会引入很多这样子复杂的pipeline。而且我们当时深圳很多感觉可能工程上来说，就是我们当时最后的结论就是如果我这个东西没有办法，比如说在bash mark store上帮我们解决更多的问题，并且还可能给我们带来这么多的，比如说在工程上的项目burden。我们后面想的可能还不如先暂时不去做这件事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:46:50",
      "text": "这个听起来就很有意思，想起两句经典的话，一个是less structure，more teenage. 还有谁？我这个字节了，老鼠就是more counting，less control, 这个可能跟你们设置所有都比较一致。对from planning那部分，其实关于这个runtime，我理解这其实非常重的一部分，然后对工程能力要求也很高。",
      "speaker": "发言人6"
    },
    {
      "time": "00:47:05",
      "text": "其实我在对比这个David open end的实现发现了一点就是eleven。我从一些比如说我看他这个process c group之类的信息，我感觉他好像直接用的是VM，而OPEAND是基于这个container这个方案。当然我理解就作为开源项目，我们肯定会选择container，因为包括我自己用起来都会非常方便。但是你会不会比如说直接像David这样使用VM能带来一些比较额外的一个优势呢？我举一个小例子，就是David里头那个browser，它似乎不是一个happy to rome，它是一个直接跑在x eleven的一个图形界面上的完整的chrome。所以这样会不会就是比如说一个在未来如果模型能力更强，它直接去对接VM，可能cover很多需要图形界面或者coding之外的场景。比如像auto CAD之类的，有没有可能就直接支持或者说必须使用VM才能达到的一个效果。",
      "speaker": "发言人6"
    },
    {
      "time": "00:47:44",
      "text": "对你这个是一个非常好的问题。这个也是exactly我最近遇到了一个问题。其实我们当时在设计open s rn plan的时候，其实我们有考虑过BM，并且我们现在这一套代码高能跑的这套代码理论上来说是可以无缝衔接到VM上，是可以直接使用的。其实本质上来说，我们现在的看的就是这个runtime本身，其实就是一个server。这个server在dock人跑和在VM上面跑，其实configuration差距是没有很大可能就是一个人花个两三天就能把它migrate过去。所以我觉得本质上来说，这块是没有太大的区别。",
      "speaker": "发言人4"
    },
    {
      "time": "00:48:11",
      "text": "但是我们之所以选择docker的前期的一个主要原因，就是因为我们希望跑很多的这样子的一个edition，就是event，特别像这种street bench event。比如说我们有300 instance是500个，并且VM这个东西它启动的非常的慢。就比如说我在语音上，我要跟google cloud说OK，我现在要起500个VM它可能一两分钟后可能才全部ready。但是作为container来说，你就可以利用一些现有的这样的工具，比如像cover netty这样子的closer manage工具，去给你这样子一次性起个500个，并且帮你manage好了。并且你都能让agent连接进那些doctor container去做一些事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:48:40",
      "text": "然后说到另外一点，就是像你说的那个doctor container的一些limitation。这一点我是完全认同。包括其实最近我们就非常想让open hand做一件事情，就是让open hands开发自己。但是因为open has自己用了docker去跑这个run time，然后我们就很难去在docker里面跑docker。所以我们最近也在考虑可以做一个比如说一个optional setting。比如说你在在里面，你可以比如说增加一个选项option，能够让用户去比如说OK我想要启动一台real vm就是我可以直接在上面安装docker可以直接在上面安装这种GUI versus直接用这样子的一个docker我其实能想象到，就包括这两者之间也会有些cost这样的差异。但是本质上来说，我觉得open hands现在的infrastructure是可以允许我们成年人不做选择题，我们都要，这是可以做到的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:49:24",
      "text": "是的，尤其是涉及VM这块，我回想到你刚才讲一点，就是希望这个架构尽量的精简。因为我刚才想的就是如果有图形界面化，会不会有一种可能就是因为咱们现在很重要的一个工作，就是对于这agent scale或者action的这个抽象层面要做的尽量的好吧。比如说未来如果computer use更加的成熟，然后模型能力也越来越好，配上一个模型界面，我们有没有可能让这个抽象更加的收敛。比如说现在我理解我们用broza，可能还用一些来自于比如broza这样的一个primitives。未来有没有可能完全收敛？Computer use这个部分会更符合你长期的一个对于更精简的这样的一个追求。",
      "speaker": "发言人6"
    },
    {
      "time": "00:49:54",
      "text": "对的，我插一句，就是对于可能还不是这么了解这个computer use的朋友，大家都知道是SO推出了一个API功能。这个可以简单介绍一下这个computer use是怎么样的一个产品。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:05",
      "text": "Computer use是这样的，就是大模型随着现在多模态能力的进一步的提升，以及一些额外的一个训练方法。我们就是看到一些比较前沿的一些模型，包括比如说像以这个FFIC的club系列为例，它提供了一系列新的，你可以理解成一种额外的方式call它能做到的效果是说让模型来像人类使用电脑一样去使用软件。比如说你可以抽象到几个操作，我可能列举的不是很全，待会儿大家可以补充。像比如说移动鼠标点击，然后选择激活一个element，然后输入使用键盘，这样它带来一个比较大的一个好处，就是说以往我们要纯依靠方式，靠的话你的前提是软件为大模型开放了API。而大家都知道这其实不是一个很现实的情况，大部分的软件其实都是为了人而设计的。所以我们如果要让模型去使用软件的话，更好的方法其实应该是让他去模仿人，而不是使用API，这也就是computer use这一个能力。当然这也在快速的进展之中。",
      "speaker": "发言人6"
    },
    {
      "time": "00:50:52",
      "text": "还不算特别成熟。对的，我其实个人对于computer use，包括这种simply by action space这个行动，我觉得是我也是非常看好的。因为如果按照一切简化的一个概念，其实对人类来说我们有什么？我们其实只有一个access，就一个keyboard，一个鼠标，然后一个屏幕，仅此而已。我们的这个input space是非常有限的，但是我们却能用这个有限input space组合起来做非常，基本做infinite about the things。因为软件就像我们前面有讨论到，软件本身是一个非常强大的东西，可以用软件来构建更多的软件，然后用更多的软件去控制这个世界上的一切。现在世界上的一切基本上都是被软件所控制。所以你如果你能生产出好的软件，你就能理论上来说能做一些事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:51:26",
      "text": "扯远了，然后绕回来的话就包括我们的这个open hands paper。就是我们open hand这篇paper的名字其实叫做open filer和AI soft developers as a general alist agent。我们的最终目标是做一个通用的这样子的一个agent。那么通用的agent它应该有一个什么样子的一action space。我们其实觉得现在想最简单的就是你需要能够跑代码。跑代码最简单可能就是一个terminal。然后你需要有一个，比如说你需要有能力去add代码，比如说你有个file elephant。除此之外你可能就像我们说的第三个现在比较缺失的一个点，就是比如说和web browser进行一个interaction。但是其实你和browser进行一个interaction，和网站进行一个interaction，本质上来说和我电脑上开的一些APP进行interaction，所以没有什么特别大的本质区别。",
      "speaker": "发言人4"
    },
    {
      "time": "00:52:03",
      "text": "所以第三个点，就是应该我们刚刚提到的anthropy c这种computer use。我觉得computer is非常province。但是我感觉现在他们也不是没有limitation。他们现在主要的v limitation，其实还就是你现在是以一个pixel level去在屏幕上面进行操作，就是准确性没有那么高。但是我觉得这个在未来是绝对会提升的。短期来说可能他还没有那么的没有我们想象中的那么capable。",
      "speaker": "发言人4"
    },
    {
      "time": "00:52:23",
      "text": "了解就听起来越来越像，就感觉open hand在做的。其实赛博世界的自动驾驶，然后我们在等待着将出现比如特斯SFSD这种纯视觉方案的出现。",
      "speaker": "发言人6"
    },
    {
      "time": "00:52:31",
      "text": "我其实觉得像这种简化的action space，最终的botnet其实就在foundation model本身。其实condition model只要一上来，就后面就都不是问题。我印象非常深刻的就是在那个cloud最新的三代的发布之前，我们大家如果想方设法绞尽脑汁研究怎么去improve那个agent editing。是到最后结果骚那一发布，直接把那个street stream replace add给训到模型里面了。然后一下子就把这个问题我不能说彻底底解决，但是我觉得解决百分之八十九十。",
      "speaker": "发言人4"
    },
    {
      "time": "00:52:55",
      "text": "那是你们的这个模型中也会现在有用到这个computer use的API吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:53:00",
      "text": "我们现在有一个o ongoing p2是直接使用computers的这样的一个功能。我们目前的browsing age，就是我们最近新合进去了一个browsing agent，是做一些visual browsing agent。它其实做的事情和computer use是有一点相似，只不过它是可以在那种所有能够支持微选的这个model上都可以使用。就是我我也可以试一下这个事情，就有个东西叫做SATA Marks，它其实就是把你这个浏览器的这个截图拿出来。然后在这个截图上面会发现很多可interactive element。然后你会把这个element在图片上出来，然后你把这个框出来的element单独用text同时喂给agent，所以就相当于agent看到的声音效果，知道有哪些东西他能点。然后它就可以通过去点这些，提前提供好的mark的形式去和这个网页交互。它的好处就是这个marketing你提前标好了，这个agent交互起来更容易。",
      "speaker": "发言人4"
    },
    {
      "time": "00:53:39",
      "text": "相比之下，computer use它可能是直接的pixel spacing interaction，所以它会更难。并且第二个点就是他可能对于比如说所有的现在的vision LM都会有比较好的支持。但是我觉得既然computer use现在出来了，我觉得慢慢的以后大家其他l provider也会逐渐跟进这方面的能力，可能我们就会有个新的standard。可能在未来一两年，也不能说两年新的进展太快，可能未来三个月就不需要类这样的方法了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:54:01",
      "text": "对，当时computer use出来的时候，我们还在说，是不是anthropic的这个to b的基因的原因，对吧？它有了一个本来有一个很好的先发优势，对吧？这次终于不是OpenAI先发出来这么一个vision base这样的一个一个model，而是他直接就发布了一个API。现在看来就是到底要用这种API的这种形式，还是用vision这个形式。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:20",
      "text": "其实当这个像David或者open house这样的产品足够的强大以后，其实这个都是要被包在里面的对。所以其实从最终产品的形态来说的话，其实也许他们把这个作为一个能力，而不是自己去develop一个只用这种能力的产品。其实我觉得这个impact是更大的。我好奇幸好从过去这几个月里边，你觉得你们这个产品不论是从技术还是从这个business角度做了哪一些决定，是对于现在提高不论是产品的能力，还是说提高整体社区的这个adoption是比较重要的。可以跟大家分享几个比较核心的决策。这中间如果冰原，你我知道冰原也在这里面参与了很多冰原有什么补充的话也可以分享一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:54",
      "text": "至少我个人觉得最重要的技术相关的决策，其实属于是在早期open David相对比较野蛮发展。然后那段时间community里面PR满天飞。然后当时那段时间我其实跟Robert，因为Robert本身其实是来自english，然后我们两个有完全不同的perspective。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:08",
      "text": "我们可能对于open hands这个agent本身要做的一些事情有不一样的the expected。其中最关键的就是在于我对于一个researcher background的人来说，我希望这个agent easy to use in a way that like就是我可以很容易的把这个agent拿出来去迭代，去做很多很多的research，在很多很多的evaluation which mark上面去随便跑。比如说不需要担心任何UI那方面，不需要担心任何UI产品相关。我只希望就是我的A型的能力越来越强。",
      "speaker": "发言人4"
    },
    {
      "time": "00:55:32",
      "text": "但是Robert他可能会更考虑，比如说我们的这个agent作为一个产品，它需要和这个from and和这个uc experience进行一个更好的这种title integrate。所以怎么样子在两者之间去做一个baLance是一件比较难的事情。就比如说你如果为了想给前端的用户提高最好的用户体验，你可能需要在agent方面做一些牺牲。比如说你要设计很多通用的exception，你必须逼着这些researcher把agent用某种特定的形式写，才能够放在这个front end里面去用，才能让用户去使用。但是对于很多researcher来说，我现在都不知道我这个agi能不能work。Evaluation一块都没跑。",
      "speaker": "发言人4"
    },
    {
      "time": "00:56:03",
      "text": "你让我花那么多功夫去研究你们的那个book是怎么实现的，去研究你们怎么样子把这个agent结合到你们的整个产品里面去。我其实并不关心那么多。所以我觉得我们当时对的最重要一件事情就是我们把这个backend给就像我们前面展现的一张active的图，我们把这个back分的足够清楚，就是agent。我只需要关心一件事情，我会把所有的历史信息给你，你拿那些所有的历史信息去做什么事情，不关我的事儿。就是我只expect这个agent最后会给我一个action，仅此而已。这样子的话就是在我们的agent开发这个部分，我们就可以非常完整的抽离出来。这样researcher可以自己在这块玩，而不需要去碰到这个框架里面涉及其他东西的微观代码。",
      "speaker": "发言人4"
    },
    {
      "time": "00:56:39",
      "text": "然后我觉得另外一个比较重要的点，也就是和这点相关。就是因为我们把一点抽象出来了，并且我们把back就是基于那个里面的事情做好，我们back back看拆除。而且现在我们by看的有两套使用的方法。一套使用的方法可能就是和前端和我们的产品直接接入。另外一套使用方法可能就是就header s的使用方法，就是可以把这个边界直接和我们造好的一整套100 harness去接入。",
      "speaker": "发言人4"
    },
    {
      "time": "00:56:59",
      "text": "其实就是这两条不同的路线就对应着两个不同的人群。可能前者就是比如说我们的这些用户希望用open hands去为自己完成工作。后者可能就是对于我们这种researcher，这种agent开发者，我们希望去更强更好的去push这样子的agent能力。然后我觉得这个是我们早期做的一个比较正确的事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:57:13",
      "text": "也现在也慢慢的我们也发现了，就是有很多工作，有很多benchmark都在用open hand作为一个baseline agents作为一个evolution。比如说我们有commit zero，就是从0到1生成个good base，有science agent bench，包括像OpenAI的那个MLE bench都有用。这个open home作为一个这个样子的一个baseline去测试不同的benchmark。这个我个人认为是我们早期架构决定做的相对比较正确的一件事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:57:35",
      "text": "刚刚也其实听到了信号，去回顾整个open deven到open head的历程，其实我自己还是觉得挺有感触的。大家其实可以看到今天其实开源社区力量是非常强大的。我们一开始去提出这个想法，一直到今天能够让的这么的健康。我觉得开源其实是带给了大家很多不一样的东西的。",
      "speaker": "发言人5"
    },
    {
      "time": "00:57:53",
      "text": "就是今天open David或者open hands去做开源这件事情，其实带来了两个好处。第一个就是首先你开源，你表示你是透明的，因为你的透明，就刚刚其实星耀讲到的很多优势就被放大了。我们要去服务更多的人，让更多的人参与进来。那我们势必在架构上面，甚至说一些技术上的选型上面，我们就要去考虑更多的兼容性。那这样的话，你未来的整个的这个project就会非常的健康。",
      "speaker": "发言人5"
    },
    {
      "time": "00:58:17",
      "text": "第二个就是说我们觉得开源这件事情一定程度上会打消大家对于很多必然的一些商业公司的一些顾虑。更重要的是说我们觉得未来open model其实也能够在这个open的agent里面去发挥自己的作用。如果今天大家慢慢的从去贡献一个open agent，到未来能够一起去贡献一个open的model，这样的话其实所有的东西都是open的。大家对于未来这个A都会非常的放心，所以我觉得这种透明，然后这种弹性，然后这种每个人都有contribution的这种机会，其实非常能够代表着开源的。就是我们一定要从整个开源的力量上面去在这个AI的时代里面去创造属于每一个人自己的一个AI。这个也是我今天觉得open hands能够做的这么好，然后能够大家一起贡献进来一个非常重要的的一个核心的一个动机。",
      "speaker": "发言人5"
    },
    {
      "time": "00:59:02",
      "text": "正好可以聊聊关于开源的这个问题。因为我们看到这个devo已经可以实现很厉害的能力，为什么会想要做一个open source版本的coding agent？能够给你们带来怎样的优势，又可能有怎样的挑战呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:14",
      "text": "一开始的这个proposal，我们当时其实动机也真的很简单了。就是看到这个东西未来一定很酷。那我觉得开源社区就要有一个，因为开元社区有很多有创造力的人，然后有很多有能力的人。如果我们有一个组织，能够把这些人凝聚起来，一起做一个非常酷的东西。",
      "speaker": "发言人5"
    },
    {
      "time": "00:59:29",
      "text": "这个从历史到今天，其实大家都会发现，有很多这样的case都能跑出来。那我觉得我们去做一个开放的一个code agent的这样的一个项目，其实会非常的有吸引力。事实证明当时确实热度会非常的高。因为当时其实仅凭一个read me，我觉得能吸引来新瑶可能就是我们一个非常大的收获。包括后面gram加入，然后robot加入，当时其实还是能够看到这个开源社区其实是非常的有创造力的，包括我们自己做queen。",
      "speaker": "发言人5"
    },
    {
      "time": "00:59:51",
      "text": "今天我们应该算是最拥抱开源的大模型的一个team。我们其实从开源中还是得到了很多。所以说我们就一直在坚持，能不能再给开源社区反哺一些什么东西。所以我觉得未来面向AI的开源的项目应该会越来越多。就是任何的场景，然后任何的task都可能会有一些很顶尖的开源的项目跑出来。所以说我未来希望开源的这些AI的这这些项目和未来开源的这个model还是能够更有机的去结合。真正的把open这件事情就做到非常的极致。这个我相信往小了讲，其实是给我们每个人参与爱的机会。往大了讲，其实我觉得对于整个社会的进步，以及整个民主化的进步，其实都是有帮助的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:00:24",
      "text": "刚刚冰原说的其实非常好，就是democratizing AI technology。就包括像我们的website上其实就有一句话，就是我们认为像agenting techno gy这种特别重要的技术，就是不能只让这种非常重要的技术只保留在少数闭源的公司手上。我感觉这个其实我们一开始最朴素的一个观念。",
      "speaker": "发言人4"
    },
    {
      "time": "01:00:41",
      "text": "另外一个点，我觉得从我作为一个researcher的角度来说，我认为open source本身是一个非常好的一个active research的一个媒介。就是像现在我们有很多的research，就是基于比如说我们早期做different research，可能有py ch现在我们做LI我们可能有hugin face，然后包括serving我们有VLM，没有ST line的这些东西。如果没有这些开源的code base，作为一个这种基建支撑，很多这个方面的科研进展的就会相对更加的缓慢。我们当时其实一开始想的就是首先作为这个开源项目，我们希望能够facility这些research and development。但是相反的就比如说这些research develop，比如说我今天发了一篇，我今天用open hand作为的inflation发这篇paper，我把这个performance push上去了十个点。但是我的paper也是开源的，我的code也是开源的那是否意味着作为一个open source project，我们能够更容易的去吸收学界大家the research产出了的一些更好的更高质量的自己agent。我觉得这个是一个点。另外一个点其实也就是说我们希望作为一个developing来说，我会为open service邀请呐喊这样的东西。",
      "speaker": "发言人4"
    },
    {
      "time": "01:01:38",
      "text": "作为一个developer two，作为一个让开发者自己本身使用的这样的工具，大家会更倾向于比如说使用开源的工具vers闭源的工具。当然这是在比如说性能体验是接近的情况下，大家可能会倾向于使用开源的工具。而且我认为最重要的一点就是我其实觉得在agent的实现上，可能没有一个真正的非常大的一个mode，没有一个真正大的一个护城河。所以比如说我看见你的A卷产品了，你是必然的。但是我看你的产品怎么交互，我可能就能猜出你背后的商品逻辑。我可能花一两个月花两三个月，我砸一些时间，我也能复刻出来一个可能表现差不多的东西。在这种情况下，我们就觉得OK。",
      "speaker": "发言人4"
    },
    {
      "time": "01:02:13",
      "text": "既然这玩意儿大家都能看着这个behavior就能猜得到出来。那为什么还要让大家对这种事情上浪费时间？为什么不直接把这种核心的code彻底开源出来，让大家在这个基础上花时间去build up，做更多更有意义的，能够push this technology前进的这样子的一些事情。而且其实到最后面最重要的一个点就是这个技术本身其实没有那么重要。但是让技术变得真正有用起来其实是非常重要的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:02:36",
      "text": "从这个角度来说，open硕士其实是有一定优势的。比如说像VS code，它本身就是一个开源的product。所以比如说大家会很容易的去给它写各种各样的VS code extension，让VS code成为了一个可以算是最powerful的IDE之一。因为你只要用了VS code，你就能用到很多community。因为各种各样奇奇怪怪需求而产生的各种各样奇奇怪怪的extension。作为一个人用户，你有很多选择，你会有一个比较好的一个用户体验。包括像现在很多这种AI coding ARP，其实他们的很多IBD都是从这个VSQ汇出去，也说明了这一点。",
      "speaker": "发言人4"
    },
    {
      "time": "01:03:06",
      "text": "所以从另外一个角度来说，我们是也希望比如说开源社区在用一个open source product的情况下，有一些人偶尔会想到一些比如说这个产品我用的不舒服的地方，能够去更容易的去cosmic这个产品。就是为他们日常中的这种use case，去把这个产品cosme for themselves，并且把这种cosmic ation最后反哺到这个产品。这个本身。对我觉得这个也是另外一个非常重要的一个点，就是accept order和cosy zing也是开源社区可能相对比较容易做的一个事情。",
      "speaker": "发言人4"
    },
    {
      "time": "01:03:35",
      "text": "那如果是开源的话，开源这部分的数据其实可能他们也是在自己的环境里面去做的。你们也不一定能够收集到他们使用的游戏这种multi step的数据。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:43",
      "text": "这个会是做不摘吗？你觉得？对，我说的那个customization其实可能更接近于open eleven早期，当时就还是叫open deven。早期就是有很多用户会把open w拿去，比如说在javascript跑，在CPS上面跑，然后会吐槽说你们有那些东西做的不行。一般这种情况下解决这种问题，很多时候你就只需要写一个customize的prom。就比如说你在work这种语言的时候需要注意哪些点。然后我们想象的这种customization就有点类似于这样子的community去贡献的一个这样子的一个customization的library。有些人不愿意分享，当然OK，但是还是有一些人会愿意去分享这样子自己相关的这样的一个use case。包括像curse，他们最近有一个叫做curse r rules的一个library，有点类似于这样子。",
      "speaker": "发言人4"
    },
    {
      "time": "01:04:24",
      "text": "对，然后我看到David不是也有一个开源的一个项目，就是也在鼓励大家都把David用在这开源项目里面。我觉得这个可能也是去收集更多数据的一个方式。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:34",
      "text": "对的，可能是收集更多的use case，然后让这个产品对于更各种use case能有较好的表现。",
      "speaker": "发言人4"
    },
    {
      "time": "01:04:40",
      "text": "其实你也提到就是说我们很多能力还来自于这个function model。如果说你们跟David所面对的这个用户群可能又是类似的，那你觉得说未来在这个赛道上，我们还会看到更多的这个devo更多的这样的产品。那你觉得到底大家最后比拼的就核心经济是在什么地方，和它的差异化可能在什么地方？",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:56",
      "text": "对的，如果我们先从开源的角度来说，开源作为一个产品说他可能本身有的优势。比如说对于一些企业，他们可能说OK我不想被某一个大公司lock in，我会更希望这种比如说你有这种source code，哪怕你这个公司最后没了，我还是能继续用你的产品。因为我有你的source code，并且还能去继续维护这个产品。并且另外一个点就是比如说对于一些比如说highly regulated industry，就是像这种闭源产品，他们可能就很难去做那种Operant deployment。但是因为open hand本身就是一个非常开源的产品，所以对我们来说，我们并不担心说什么我们的agent怎么实现的secret被人偷走什么的。我们就可以直接到这些公司内部。比如说你圈一块地给我，我直接把我们整个agent的系统deploy到你们公司内部，这样你们可以one hundred percent make sure所有的data都不会离开你们的ster因为这个开源的优势可能会更容易赢得某些客户的这种trust。",
      "speaker": "发言人4"
    },
    {
      "time": "01:05:42",
      "text": "然后除了这个开源的factor以外，我觉得另外一个点，对于这种agent的产品最重要的一个点，也是我们前面提到的。我感觉就是说因为这个agent本身它是以作为一个a agent，所以我觉得它本身的integration是特别重要的就是你希望让这个agent live wear developer live就是有点那种感觉，就是develop在哪里，你这个age就要在哪里。比如说development，我们天天在slack上讨论需求，讨论，那这个时候这个agent就需要在这个slack里面，就是你随时调他他可以随时来。然后从另外一个角度来说，比如说develop活在github上天在给他上comment也review。那么这个时候你的agent也需要和这些已有的channel有一个非常好的这样子的一个integration。这个是除了ID以外的integration。因为作为a think，我其实个人觉得assign agent和IDE本身他其实没有那么的match，和人类开发者的关系会更接近一个copy。",
      "speaker": "发言人4"
    },
    {
      "time": "01:06:25",
      "text": "Er where I think对你来说，你可能就是一个微信聊天窗口。聊天窗口对面有你的小弟，然后你可以让他去做各种各样的事情。我觉得这个第一个点就是肯定是要让你们产品待在develop待的地方。第二个点我其实觉得也是这个点的一个延伸，也是我前面说的这种ization。",
      "speaker": "发言人4"
    },
    {
      "time": "01:06:39",
      "text": "就比如说像就是你需要有一个比较好的生态，然后你需要能够发现一些，比如说particular use case，就是你要找到一些对于用户来说这个use case执行的非常好。比如说我发现了这个open ends，执行某一类经常要做的重复的任务，比如说修这种linter err error，比如说修复test case判断做到80% 90%。那么这种情况下，专门针对这种特定workflow的这种customization本身也是一个值得做的事情。",
      "speaker": "发言人4"
    },
    {
      "time": "01:07:03",
      "text": "这个其实就有点像我前面说的那个，相当于就是cursor我的那部分工作，你的这个product本身是要有一个比较好的一个生态。然后在这个生态里面有足够多的人用你的产品去做了足够多的事。然后对于每一件事情，你相当于就有个prom example可以去borrow from。然后这样子对于一个新的用户来说，他可能更容易上手。对于老的用户来说，他可以有一个更reliable的方法，就是更可靠的方法，让A卷去完成他自己想要完成的任务。",
      "speaker": "发言人4"
    },
    {
      "time": "01:07:29",
      "text": "我们这个open source社区也跑了一段时间。然后我知道你们最近也在抓紧开发以及准备发布你们的这个sas的版本。这些社区里边所看到的有哪一些对你们帮助比较大的一些反馈。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:40",
      "text": "其实我感觉我们目前社区开发者呼声最大的几个feature，也是我们自己最想要的几个feature。因为我们自己本身就是非常active用户。但是我觉得有另外一个角度，有一类特别的feed back就是用户教育那块，很多新用户他们上手非常困难，他们的这个失败我们其实是非常value的。并且因为我们自己本身是开发这个系统的，我们了解这个系统的每个component。所以有的时候我们很难站在一个用户的角度去看待我们这个产品。所以我觉得很多用户在这个方面给我们很多fee bc其实是非常大的挑战。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:08",
      "text": "包括另外一个点，其实就是我们了解到了我们的用户里面用open hand做了很多很多use case，有很多很多不同的use case。然后也能够让我们，比如说在improve这个remo k本身的时候，我觉得我们能够在脑子里面去多想一些这样子的。Us在做design decision的时候，会更倾向于去做一些比如说更通用的事情，然后能够potentially在未来支持这样更多这样的一个case一件事情就改变了一些money size。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:28",
      "text": "对的，我觉得这个的确是让我们重新看到在模型之上这个应用的价值。其实你去看David的设计的界面在什么地方，去给你这三个tap对吧？什么地方给你去这个y brows的情况，什么地方上去看它的code，怎么样让你这中间可以打断它，让你进行交互。我觉得其实这是一个，包括其实curser也不是一个简单的把一个对话框就放在你的这个cobs里面。所以我觉得其实在有了AI尤其是你想在o one这样的能力出现，新的这种能力出现以后，我们到底是把这种很长的inference看成是一个bug，还是说基于它的这个特点来去设计新的交互方式。我觉得这些其实都是很多是由这个应用开发者基于一个对模型能力的深入理解和思考去做的事情。这个其实也是我觉得我们作为投资人很期待能够看到。跟女生也聊过，就是rapper其实是一个很懒的一个定义的方式，在癌症出现会反复证明这一点。",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:20",
      "text": "既然讲到我们对于底层模型能力的期望，我就不得不讲最新鲜热乎的OC了。我觉得正好冰源是这方面专家了。我想先问一下，首先是这个o one，o one这样的模型出现，觉得对于coding的模型这块有什么样的影响？现在刚刚看到了这个OZ之后，你觉得它又有哪一些是让你觉得最impressive？",
      "speaker": "发言人1"
    },
    {
      "time": "01:09:40",
      "text": "首先O一出来的时候，其实大家已经感觉到非常的不可思议了。就是我觉得interest time computing这个路线应该还是非常的有道理。这是他一直去提倡train of thought这个概念。然后他今天把long term sort做到极致以后，就会发现涌现出更多的。我们想要的那种智能的感觉，然后包括它的performance其实做的也非常好。但其实o one从包括O3，其实今天大家能看到的还是一些非常好验证的一些任务。其实就是code和max以及一些考试题目类型的东西。",
      "speaker": "发言人5"
    },
    {
      "time": "01:10:12",
      "text": "所以说今天我我我我仍然觉得可能O这个系列它暂时还是会先以探索边界的为主的一个research的一个方向。他未来可能会在产品上面，我觉得还是需要去思考更多到哪里再有有用。但我觉得他在技术上其实暂时已经证明了自己可以做到一个非常crazy的一个水平。",
      "speaker": "发言人5"
    },
    {
      "time": "01:10:29",
      "text": "其实昨天晚上all three的发布，我觉得最大的震撼还在于说，他们确实把这条路线，我觉得就走到了一个非常极致的一个水平。因为co forces和AME的那个水平，我当时看到的时候，其实我是我甚至怀疑自己是眼花了。因为那个水平其实很多时候已经不是我们能想象的。对于当下LM或者说当下AI的一个期待，我觉得他昨天晚上的发布一定程度上还是超出我的预期的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:10:55",
      "text": "Open I其实很在急于证明自己的技术其实还是要有一个断崖式的领先，我觉得他暂时做到，但他过去其实也有一些决策上的失误，就是我觉得他对于coding能力在过去半年里面，其实一定程度上其实是落后了stroke。所以因为SONY这个模型的出圈，一定程度上就是coding给它带来的。但我相信OK今天其实已经意识到了，coding这个赛道还是非常的重要。所以说它用O这个系列重新的把大家的视野拉回到我可以通过infant time skin，然后我可以通过更strong的model，把coding这件事情做到非常的极致。",
      "speaker": "发言人5"
    },
    {
      "time": "01:11:25",
      "text": "包括其实o one有一个细节，就是o one其实当时list的时候，在所谓bench上的分数其实不是非常的理想。然后大家其实有在猜想说，他其实当时也没有太多的精力去投入到这种比较真实的这样的一个best mark上面去。但今天all three其实昨天晚上已经开发新瑶应该也会对这个东西感觉到有一些震惊。我觉得70分确实在半年前我们是想都不敢想的一个水平。我记得半年前在核心要讨论的时候，我们当时还在预测，可能当时觉得做到四五十分已经非常你说的是这个swe bench是吧？对对对，那今天其实他就直接通过这样的方式做到70分，那就证明其实他这条技术路线是非常的OK的。但其实给我们的一些启示就是说我们还是要对于一些关键的技术，还是要更能坚持一些。",
      "speaker": "发言人5"
    },
    {
      "time": "01:12:07",
      "text": "这种关键技术的迭代会带来一个断崖式的一个performance的提升。这个其实是我们对基础模型最大的期待。就老实讲，大家如果只是期待这种模型在某些task上面涨个1到2分或者是五分，其实大家都已经不是很有体感了。但如果说你说你呈现一种新的形态，然后能让某些task突然抱着20分、30分，那我相信无论是对research还是对应用，其实都是一个震汉。也就是说flash model的潜力我觉得还没有被完全的挖掘。我们还可以期待未来的半年，甚至未来两年，整个在智能的这个topic下面还会有更大的进步。",
      "speaker": "发言人5"
    },
    {
      "time": "01:12:40",
      "text": "这个我好奇一下，因为其实我们之前看到，如果只是就这coding这个能力来看的话，就像你提到的，甚至包括开源的模型，包括你们做的这个coding的模型。其实在coding本身能力上甚至也不输于跟GPT系列模型，其实差距其实也没有那么大。我们看到欧斯瑞跟o one有这么大的一个跨越，你觉得它是一个o one这条路线的一个延续。比如说更多的数据，更多的computer，还是你觉得有可能做了有什么比较大的一个技术的一个突破或者改变吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:08",
      "text": "我觉得还是整体就是把阿尔做work。之前我们其实无论是开放的时候去，还是说在追赶的大模型公司，我觉得会受限info或者说受限一些数据上的制约。我们其实在IL上面的，就是在蓝莓的阶段的这个技术，其实相对来说和他们还是有一些差距的。我觉得像O一和O斯瑞他们一定程度上还是做到了说我在lemon的阶段可以去做一些online的探索。然后我俩的学习再结合lang sort，整体就可以呈现出一个非常完备的一个推理的模型。对，这个我觉得还是相当的酷的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:13:40",
      "text": "这个你可以展开讲一下。因为有时候有一些观点就觉得说，所有这些逻辑能力提升对吧？不就是更多数据，更多的compute，更多计算的暴力美学东西，好像变成了一个资源的问题。那你觉得说对资源之外，我们还有哪些可能我们低估了一些能力。然后另外一个就是你刚才提到这个alignment这一块，为什么alignment这一块在提升coding能力，或者说在万兆路线上为什么会特别的重要，也可以跟大家分享一下。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:04",
      "text": "我有一个观点就是因为伊利亚在eurobourses实说预训练要结束了。然后我的观点其实说训练对伊利亚来说可能要结束了，但对于我们还很远。其实在Operator上，我认为还有一段的空间需要我们去追赶，无论是token的数量还是质量，还是说我们对于model size或者model skating的这样的一些探索。我觉得今天开放的模型或者追赶者的模型，一定程度上还有很多未知的东西没有去搞明白。如果从这个角度来讲的话，其实open I今天如果说假设说伊利亚看到的那个模型就是open I最强的portion model的话，因为open I其实做了提前了很久，要比我们领先3到4年，有更多训非常大模型的一些经验，包括它对数据的收集，然后很多数据的整理，其实他都非常有经验。",
      "speaker": "发言人5"
    },
    {
      "time": "01:14:49",
      "text": "如果说在当下的阶段，open I的pretrail ing已经做到一个相对来说饱满的位置的话，那我觉得他们在element上的领先要相比我们来说会更多。因为一定程度上element的进步会botnet到你的base model上面。也就是说你的pressure如果做的不是非常好的情况下，你在上面做element其实有时候会让你的上限。因为它pressure决定了你element的上限。所以说我当我们现在没有一个更好的pressure model的时候，然后你想通完全通过lemon的去追赶open I其实是非常的难的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:15:18",
      "text": "所以说我的第一个观点是说，我们今天的拥有的precision model还有进步的空间。所以大家其实可以期待一下queen能不能会更加的好吧。然后如果说当你有了一个足够好的precious model的时候，我觉得差距可能就会体现在lemon上。",
      "speaker": "发言人5"
    },
    {
      "time": "01:15:32",
      "text": "而为什么element对coding是重要的呢？我们做通用模型的角度其实是你期待和人类去对齐。但其实你从做coding model的角度来说，你期待最终的model其实要跟你的开发的环境或者cuter去对齐。就是你你你的目标首要的目标是说我写的代码能够通过我环境的所有的测试或者实现我想要的功能。这个SIGNW其实相比于我人类给一个我是否喜欢的这个SINOW需要廉价非常多，那就代表着你其实有一个很好的一个rubs的说model，可以去帮助你去做element。那从这个角度我觉得就是从coding上去探索element的一个技术的发展，或者说一些技术的深度是非常的合适的。另外一个方向可能就是max因为max其实也有很多这种可以直接通过答案来去校验。",
      "speaker": "发言人5"
    },
    {
      "time": "01:16:14",
      "text": "Coding的魅力更多的说我们不仅仅coding model可以只做这个竞赛级别的编程题，对吧？它还可以去解决一些真实的一些软件开发中的问题，无论是去解决竞赛题，还是解决软件开发中的真实问题。你最终的目标还是我的模型能够跟我的环境去完美的对齐。它能够知道我当前处在什么样的状态，然后我要给一个什么样的response，可以通过我最终的那个执行器的校验。这样的话其实模型就会具备一种非常智能的感觉。哪怕说我中间的一些代码的风格的偏好没有那么的好。但是我只要能够最终的做对通过所有的单元测试，那你其实一定程度上是可以被用户所接受的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:16:51",
      "text": "然后我其实觉得O欧斯维这样的形态在gold agent上其实非常适用的。因为在gold agent这样的一个任务下，大家是愿意花时间去等待的。比如说我们去提交一个issue，我其实是愿意花一天让让AI去做大量的推理，最终只要帮我解决问题就OK了。从这个角度，我觉得你在for的这个赛道上去投入inference time的computing其实非常划算的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:17:13",
      "text": "然后第三个就是说培训很重要，然后现在coding也很重要。整体我们对于智能的探索，其实从coding可以泛化到更大的reasoning，最终到整个digital agent的一个泛化。也就是说比如说computer use，我觉得也是非常好的方向。再往后的话，其实你是希望从code agent，到digital agent，到最终未来的那个physical agent，你其实是有这样一个不断递进的一个关系可以去做的对。这个其实是我觉得我们要在coding model或者是code能力上投入更多的一个原因，就是它是未来两个比较basic的一个东西。所以说从这个角度我觉得我们还有空间，然后也有很多值得去玩，值得去探索的事情去做。",
      "speaker": "发言人5"
    },
    {
      "time": "01:17:51",
      "text": "咱们刚才刚好聊到了这个map跟coding这两个专项模型。然后现在大家肯定在huang fac e都看见，就是QDFQ就是千万，现在非常火了。但是我们会发现比如说一些其他的研究机构或者公司，他们比如在做reason模型的时候，切入点可能先做一个基于matt或者这个coding方向的一个reason模型。但我看到咱们的那个congres question，它的foundation用的其实是通用的这个困2.5 32 instruct，甚至都不是base。这个是有怎样的一个考虑吗？",
      "speaker": "发言人6"
    },
    {
      "time": "01:18:16",
      "text": "当时我们做QWQ是想能够先给大家一个好的reading的一个model，它不是一个最终版。所以说我们当时在rush这个review版本的时候，我们是希望能够兼顾code max和reasoning的，所以最终就选择了通用的。并不代表说我去基于专项模型不一定做的没有通通好。这个我们其实也没有开发过。只是说我们在当时的一个产品下，我们希望能够在有限的bucket上给一个更全面的模型。因为你这样可以去inspire更多的人去参与进来。但是我觉得未来其实我们还是会去探索很多这种更垂类的这种人的模型，我觉得也相当有价值的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:18:49",
      "text": "了解。其实刚才你也说到第二点，我觉得非常有意思。包括讲到coding amt和computer use reasoning，就这几件事儿，我们给到他有很强的关联性，但同时正好也都是你在做这几个方向了，你觉得他们之间到底能否形成一种闭环？刚才也讲到了一个递进的一个关系，我在想就在咱们探索过程中，他们会不会能形成一种把我们带向AGI的一个自迭代的一个闭环。你觉得这是有可能的吗？",
      "speaker": "发言人6"
    },
    {
      "time": "01:19:09",
      "text": "我觉得非常有可能。如果让我划分的话，我觉得首先code和max其实是可以属于reasoning这个范畴里的，就是它是一个更high level的一个任务，然后它也非常的难。然后你code mass其实就是你未来做digital一个基础，或者说reason模型是一个做的是agent的基础。",
      "speaker": "发言人5"
    },
    {
      "time": "01:19:25",
      "text": "Agent大家对它的期待肯定是智能。然后这个智能其实一定程度上就是要体现出的能力。一旦这个agent的这个能力OK的话，就像我一开始就是我们博客一开始想的，就是我其实很希望能够看到这个agent的自我进化这样的一个自己的过程的。就是他真正可以在世界里面给自己收集数据，对吧？然后自己去写自己的training代码，自己去评估，然后就形成闭环。然后我就不断的去把所有的能力再去提升。",
      "speaker": "发言人5"
    },
    {
      "time": "01:19:51",
      "text": "就是我觉得未来的这个online learning一定要reasoning，一定是online learning的一个基础。就是你未来希望model可以在真实世界里面自己学习，或者说它成为一个真正能够自我迭代的model。它一定是一个具备reasoning能力的一个model。所以我觉得应该是先递进，然后慢慢它就可以循环起来。",
      "speaker": "发言人5"
    },
    {
      "time": "01:20:08",
      "text": "再回到o three这个模型本身，我们可以看到o three在解决很有挑战，甚至是大部分的人类都根本无法解决的编程和数学的问题上，这些benchmark已经有非常惊人的表现，不过在真实的环境中，很多时候我们要解决的问题本身并不是特别的难。比如说做一个网站，就是现在我们看到他让dev去做一些事情。但是其实这些工作需要通过在真实世界中多步的推理假设，结合这个真实世界中的信息和工具来执行和验证，最后才找到解决方案。而并不是说这个问题，这个任务本身是一个世界级的难题。我好奇在这种完整的完成一个真实世界的任务的能力，和这个o three目前展示出来的解非常难的问题的能力之间是怎么样的关系？有多少是一个相通的能力？要解决真实世界中的问题，基于o three可能还需要做什么？比如说使更多的数据不同的训练方法，或者说可能这个泛化性还需要怎么样去实现呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:02",
      "text": "首先我觉得O系列这个模型在解决数学和编程问题的时候，其实主要展现了两个非常核心的能力。第一个就是之前大模型具备，但其实做的没有那么强大的逻辑推理能力。就是O系列这个模型它基于一个明确的问题描述，它可以构建出一个非常强大的思维过程。他把复杂的需求能够拆解得非常好转，换成一个又一个的逻辑单元。那么在这一个每一个逻辑单元里面，它又具备一定的计算和写代码的能力。所以在这种计算的场景下，能够给出非常高准确率的答案。",
      "speaker": "发言人5"
    },
    {
      "time": "01:21:31",
      "text": "第二个就是模型还展现出强大的方法总结和思维归纳的能力。他能够从自己的训练数据中总结出一种复杂的思维模式。比如说他知道什么时候应该去反思，什么时候应该跳出当前的思维继续往前推进，这种思维模式是我觉得他面对没有见过的这种难题的泛化的一个保障。但是在真实的世界中，我们面对的环境和需求其实是不容易被定义或者形式化的。模型需要在推理的基础上还具备对这个世界的认知。所以我觉得O系列的模型主要还是在一些好定义的场景下，验证了核心的技术。对于未来真实世界的任务的泛化还有一些路要走。",
      "speaker": "发言人5"
    },
    {
      "time": "01:22:06",
      "text": "比如说我们可能需要强化模型在这个模糊的环境中的一些适应能力，怎么样能够把它在代码或者数学上展现出的这种思维方式淡化到更多的场景，并且保证不产生其他的影响。实现这个目标，我觉得最难的还是怎么样在这些开放的环境下定义反馈。因为今天只要你有廉价的持续的反馈模型，就可以不断的提升自己。",
      "speaker": "发言人5"
    },
    {
      "time": "01:22:26",
      "text": "另外我们还看到欧斯瑞其实一个能力是说，他已经可以解决一些在他的知识库中也没有遇到的问题。比如说像这个coding force，还有这个RAGI里边的很多问题，其实并没有在知识库里边。另外一个我们对于AI的一个最终的期望之一，就是实现这个AI researcher又是AI研究员，来解决一些现在人类也还在研究，也还在探索的未知问题。我好奇这两种能力之中又是有怎么样的异同呢？他已经可以解决这些很难的，大部分人类无法解决的数学，还有coding的这些题目，跟他要真的成为我们的下一个，不一定下一个案例在牛顿，但至少是说很多像很多研究员这样可以去发现问题，然后提出这个research的下一个topic，然后找到一个创新性答案。就是这两种能力之间的相关性又是怎么样？要实现起来我们可能还需要做什么呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:14",
      "text": "我觉得今天欧斯瑞或许可以做到research的一部分，就是去解决那些需要排列组合解决的问题。当然这其实也非常的有价值，因为很多研究领域都需要依赖排列组合进行科学的实验。但这个排列组合不是暴力的枚举，而是有逻辑有思维的进行信息的整合、加工利用，并且二次的创新。",
      "speaker": "发言人5"
    },
    {
      "time": "01:23:34",
      "text": "但是我们对模型的更高要求，可能是需要模型提出一个更有价值的问题，甚至是定义一个新的科学的问题。我觉得这可能是一个递进的过程。因为科学的发展其实也是从很多微小的创新积累到一个基点，等待一个能够定义新问题的人展开下一次科学浪潮。所以我觉得research可能是逻辑和创造力的结合。但对于AI来说，帮助人类定义新问题，探索未知的问题，还需要结合一个重要的维度，那就是安全。我们不能因为模型的幻觉导致他产生错误的结论，这可能是我觉得实现AI researcher最难的一部分。",
      "speaker": "发言人5"
    },
    {
      "time": "01:24:06",
      "text": "大家感慨到这个sweet bench，本来在还在辛苦追的这个sweep entry，突然就突破了70%。我记得我们可能几个月前大家聊到，好像看到那个anthropic的CEO在讲，我们什么时候这个sv bench能达到百分之七八十的时候，还说是明年下半年，就没想到这么快就这个到来了。那那我好奇从一个因为我上次跟别人聊的时候也提到这个benchmark的重要性。我好奇一个是说sweet CH这样的不断被刷新，它主要的提升可能来自于哪？因为它也不只是一个纯model的一个事情。另外一个就是说其实前面你也提到了这个o three在好几个benchmark上有一个非常震惊令人震惊的一个结果。可以聊一聊就是说sweet match也来衡量一个coding agent的能力，它还有什么不足的地方？接下来我们又还需要怎么样的benching market。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:48",
      "text": "我们前面不是还在开玩笑说私奔是享年一岁。对，我们其实一开始是没有看到这个进展是这么快的。但是如果考虑到next set的话，我感觉就是按照目前的这个节奏，我感觉performance SYC bench应该就很快就会接近SATA rate等。比如说等到all three release，然后可能再来一两个release，可能大家真的可以把它推迟到90页。但是我觉得有另外一个dimension，其实是cost，就是我们现在大家是在疯狂的追求performance。但是因为我们都有个sumption，就cost的未来一定会下降，但它确实一定会下降。但是我觉得比如说把CBBC的这个比如说刷到90%。",
      "speaker": "发言人4"
    },
    {
      "time": "01:25:19",
      "text": "现在我今天看推特上有人说好像比如说all three解决某个问题的时候，一次花了这一千多刀。但我的意思是我们可能或许还需要半年到一年，能把一个一千多刀解决一个问题，变成十刀会解决一个问题。然后我觉得这也是另外一个在silber的dimension，你就是有点类似于是一个performance cost的道，就是我给你一刀你能做到百分之多少。类似于我觉得这个指标在短期内我觉得应该还不会那么快的赛车，并且我觉得这个指标也可能会是一个open with open source model可以赶超的一个点。我可能可以做的不是特别好，我能解决50%的问题，但是我很便宜。",
      "speaker": "发言人4"
    },
    {
      "time": "01:25:52",
      "text": "现在大家有的时候我都会用一些model router，就比如说我可以把一些简单的问题run到一个更简单的model上去。然后把一些更复杂的，更需要深思的到这种更强大的这种reasoning model上去。我觉得这个也是一个potential的发展方向。然后另外一个点，我觉得我们也需要考虑go beyond的like base。",
      "speaker": "发言人4"
    },
    {
      "time": "01:26:09",
      "text": "Bench是一个非常好的测试这个agent的解决github issue的问题。但是它其实忽略了我们人类在现实生活中真正实际上接触到的很多问题。就包括我们现在用AI agent的方法，包括像deva有这种slack integration，它可以在slack里面跟人聊天。我们接下来可能更需要measure的就是agent在真实的公司环境下面执行end to end task的这样的能力。最近我也看到了一个新的bench bar，也是grand lab的Frank的一个新的bencher，叫做asian company。他们其实就有点做了一个类似这样的事情，就是他们造了一个环境，那个环境里面相当于有个open source的google dock，然后相当于有一个open source的这个样子的sly可以让agent和一些模拟的人类在里面交互，然后去执行任务。我觉得这个可能是一个比较有意思的下一步next time。",
      "speaker": "发言人4"
    },
    {
      "time": "01:26:50",
      "text": "那那希望可以帮大家理解一下，就是OKC match达到了70%甚至80%。那我们怎么去理解这个百分比呢？它是否真的能够直接代表说你们可以完成你们用户所给的所有任务中，百分之七八十他在你们的职业工作中的一个指导意义又是怎么样？",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:05",
      "text": "这个问题其实问的很好，这个问题我和我之前也有讨论过挺久的。就是我们一致认为其实从20到50对人类开发者来说，可能相当于是一个体验上的飞跃。但是因为我们现在其实也没有access到那种能够刷到7 8 9 10的model，所以我们也不确定这种体验上的飞跃是否还存在，还是只是说这个A卷变得更聪明了，我们人类需要给他更少的这样的一个intervention。",
      "speaker": "发言人4"
    },
    {
      "time": "01:27:27",
      "text": "另外一个点其实也是一个大家有在讨论的一点，就是potential data leakage有可能agent做的越来有可能在sweet bed上大家做的越来越好。是因为当时selection swept采集的那部分数据，已经被这些更强大的更先进的model给retrain进去了。然后通过这种instance killing他们能够somewhat去把这些信息从他们的历史里面去给回忆出来。所以这个也是另外一个up的点，可能也需要大家去做一些更多follow up的这种data contamination的这样子的一种evaluation和实验。我感觉这dita contamination的这种实验其实还是挺重要的，并且能够比较大的程度决定这种用户的实际体验能否提升。如果这个模型的能力提升是主要是来自于他们本身的能力提升，还是主要来自于他们能够从the memory回想起来一些已有信息的这个能力提升还是不一样的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:28:16",
      "text": "感谢边缘，看你有什么补充。",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:18",
      "text": "昨天晚上其实open I只拿出了一个分数，他只拿出七十多的这个分数，他并没有给大家一个很震撼的一个demo，或者说一个解决真实问题的一个demo。我相信它现在还是一个很初步的版本，也就是证明说即便强如O3，它应该还有很多未解决的问题。所以我说我觉得下一代batch mark应该还是更从这些真实的这些场景出发，就或多或少模型在训练的时候都会有一些问题。",
      "speaker": "发言人5"
    },
    {
      "time": "01:28:44",
      "text": "就我们今天想得到一个非常完备的一个模型其实是很困难的。从过去的节点来看，我们一直认为service match可能是一个很难的问题。但是一旦它被定义好了，他被提出了，然后它能够被evaluate了，那么open I就可以把它做到很高。甚至我觉得我们可能也可以做到很高。但是如果说还有一些我们完全不知道的泛化性上的问题，很快如果说这个模型能够被大家用起来，大家很快会发现问题。那我相信researcher就会把它总结成一个新的benchmark，然后放出来，然后继续的合理的去评估这个model。",
      "speaker": "发言人5"
    },
    {
      "time": "01:29:12",
      "text": "所以一定程度上我回应一下莫妮卡的问题，就是说七十多分到底对于产品意味着什么？这个我觉得我们还得再等等看看看最终这个O这个model放出来以后，它到底是什么样的一个表现。因为我如果是我的话，我有一个七十多分的three bench的一个model，我势必会做一个非常酷的一个demo来向世界证明自己。",
      "speaker": "发言人5"
    },
    {
      "time": "01:29:29",
      "text": "今天O3在code上已经可以非常酷了。可能由于一些原因，比如说时间的关系，或者说model还有一些不完备的状态。昨天其实没有放出这个东西，我觉得对我来说可能是一个小小的遗憾。",
      "speaker": "发言人5"
    },
    {
      "time": "01:29:41",
      "text": "你觉得他们展示的那些demo还不够。",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:43",
      "text": "他昨天晚上其实只展示一个demo。他让这个o three写一个自己去靠o three mini的一个server，然后让他去评估某个bha t这样的一个任务。其实这个任务相比我们真实环境中去解一个真实的软件的一个艺术，还是要简单一些的。我您期待说思锐能带给我们更多震撼的东西，对吧？比如说他从一开始就是一个很简单的东西，然后只需要几个指令，只需要提人类贴一个一手，他就全部都解决好。我觉得整体来说，那个时候我们可能就达到了一个可用的状态。",
      "speaker": "发言人5"
    },
    {
      "time": "01:30:13",
      "text": "其实前面提到你看到o three的几个bench，你觉得非常的震撼。可以给大家简单选两个你觉得最重要的这个benchmark给大家分享一下。为什么你觉得这个benchmark上提升那么重要，把它放到做一个更好的coding agent的这个领域？这些bencher可能还缺失一些什么样的东西？你还希望看到哪一些benchmark的一些工作，你觉得可能在未来会有可能是下一代的这个sweet bench就昨天open .",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:36",
      "text": "I这个o three的bh mark，我觉得three bench肯定是一个很impressive，因为之前他O一其实稍微有一些翻车，在这个任务上。第二个就是call forces，他其实能够做到这个水平的话，其实就非常的震撼。震撼的点在于说co我现在还没有特别标准化的白smart评估，但co Foster其实是检验人类编程水平的一个白smart。它会在一个周期内去举办多场比赛，然后你去要这个比赛去算一个rank，就会有一个分数。其实你就相当于说要跟人类去同台竞技，去写一些编程的问题，然后你能达到什么样的水平。他今天做到这个分数，其实也基本上代表着他在写一个文件级别的代码，或者说写一个解决方案的代码。他确实已经做到了非常牛的一个状态。而且go for this一定程度上它是可以去缓解刚刚新尧提到这个泄露的问题的。就是因为它每周期他会都会有一些新的比赛或者新的题出现，我相信它在泛化性上应该还是会有一定的保障的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:31:31",
      "text": "但是co forces其实还是更多检验这个文件级别的一个解决方案，或者竞赛级别一个解决方案的事情。所以batch可能已经开始有这种真实环境下的一些简单的评估了。我觉得未来的评估可能更难的，还是说需要提出更难的bash mark。",
      "speaker": "发言人5"
    },
    {
      "time": "01:31:44",
      "text": "在更真实的条件下面，或者说在更有挑战的条件下面，看看我的表现到底是怎么样的，我觉得对于未来benchmark期待或者说open I选的这几个benchmark，其实都有几个准则。第一个它足够的chAllenge，或者说对于过去的模型来说它足够的chAllenge。第二就是它也考虑到了它需要有一些能够动态更新的这样的一个机制。比如说live co bench也是一个蛮好的一个best mark level bank，要比call force更简单一些。Echo bench它是从lit code的周赛里面去抓一些题出来去评测模型。所以我觉得对于未来的batch mark能够动态的更新也非常的重要。因为它能够真正的去帮你去evaluate你的真实模型的泛化性是怎么样的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:32:19",
      "text": "然后第三个就是其中刚才选的这些基本上还是一些好验证的一些task。这也是大家的推测。就是他目前的这个技术路线可能就非常要去依赖一些廉价的signal去做到这么好的效果。",
      "speaker": "发言人5"
    },
    {
      "time": "01:32:31",
      "text": "可能我们还不知道说在coding math这些能力上的提升，如果要把它放在我们日常生活的一个agent的话，是不是真能够translate到这些更general的task？",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:41",
      "text": "对，但我一直以来的观点是说，这些task一定是个basic，如果一个很strong的model，价值必要不充分条件也是必要不充分，哪怕黑没有我觉得它到今天还是有价值的。就是你你不太可能平板evo 60分，然后你说你的模型很强，这个我也不太相信，大家其实都要做到一个basic，这也是过去的best mark的意义，它可以帮你看到一些短板，以及它能保证这个basic s是70分和co forces达到这个水平，它就是证明了一个basic。但未来真正用起来怎么样，我们还是要得等时间看一下。",
      "speaker": "发言人5"
    },
    {
      "time": "01:33:11",
      "text": "大家有另外一个argument，比方说我们遇到一个很得力的秘书，对吧？一个很得力的EA executive system，他可能还未必会解释的题，也不会变成我们是否需要一个这么强的，因为他肯定是在这两个coding math这些上做了很多数据，还有训练上优化。那这个是不是一个必然要达到HI的方式？如果是这样的话，那你怎么看？因为我们也看到有一些硅谷的公司，像magic def process等等。他们的mission可能是说我就直接做一个针对头顶最厉害的coding模型，而舍弃掉很多你的一些所谓的世界知识。大模型里面GPT里面世界知识这个是不是有可能真的是一个更efficient的方式达到这个所谓的AGI，那你怎么看？",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:49",
      "text": "我觉得短期内应该就是走这种专家化模型还是一个相对正确的路线。包括我自己去做coder的moderation也是这个就是你可以时间排除跟你focus那些人无关的一些能力。然后真正的把某个task上面或者某种能力的上面的model效果做到一个非常极致的一个水平。",
      "speaker": "发言人5"
    },
    {
      "time": "01:34:07",
      "text": "而且大家其实未来期待的是模型在某些领域它一定要超过人类。我觉得我对这个定义其实并不是说实现像人一样的智能，而是实现人做不到的智能。比如说在coding这个赛道里面，我们能不能期待模型写出的代码要比人写出的代码在runtime的时候效率更高。这个其实是非常有意思的一个top。因为你要知道在真实的软件里面，效率其实是一个很重要的事情。有很多专门的软件咨询公司，就是帮别人去解决你的整个system的效率问题的那如果说未来模型在某些task上面它能够超越人类，那我相信整个AI它还是会向一个新的台阶去迈进。就是我我们能期待模型做到人做不到的事情，你在某些特殊的上面就会做的更加的好。",
      "speaker": "发言人5"
    },
    {
      "time": "01:34:47",
      "text": "我觉得专业模型至少在今天来看还是非常有价值的，还是一个探索边界的一个过程。如果说我们真的能够reach到一个边界的话，我们再把它scale到更多的任务上面，这个一定是make sense的。如果我们当下没有精力或者说没有那么多资源，那我们bucket是有限的那我们可以先focus一些任务，你去探索data对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "01:35:05",
      "text": "你去探索技术，然后去探索最好的实现的方案。对我觉得这个逻辑一定是讲得通的。所以我觉得在科技赛道上，单独现在做一个coder是一个很必要的事情。但是我们也可以期待这个coder，比如说能够涌现出一些其他的能力。比如包括我们可能特别期待coder，可能golding和max是不是互补的，是不是有争议的对，我们可能可以把这个scope稍微扩的大一些。比如说我们现在可能只专注coding，然后coding的话我们可能要专注所有reason的问题。这个问题解决好了，我们再把它变成一个通采。那你如果更长远的角度来说，我其实还是挺期待有一个通用AGI的模型的，就是它什么能力都很强。就提到你那个秘书的观点，其实你也不会拒绝你的秘书什么都会对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "01:35:46",
      "text": "对，这个的确是对工种的区分，可能就是来自于我们人类自身能力的一个局限性。我说你们有用那个就是舜宇他们前段时间提出那个tall bench，你们有用吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:35:56",
      "text": "对，我们暂时还没来得及看，但是后面应该都会整合进来。",
      "speaker": "发言人5"
    },
    {
      "time": "01:36:00",
      "text": "新阳的你们你们有你们在实践中有帮助吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:04",
      "text": "我们其实现在主要的focus还是在c bench上。因为我们现在的focus其实非常的简单，就是我们试图让open hands能帮我们解决更多的issue。所以短希望我们还是fox在这个问题。但是从中长期我们会更关心，比如说这个A卷如何和人类交互，然后包括这个A卷如何和其他的这样子的browser和其他各种integration进行交互。所以到那个时候我觉得我们也会expand我们的这个list。",
      "speaker": "发言人4"
    },
    {
      "time": "01:36:27",
      "text": "明白，好的，我们前面聊了很多很细节的一些东西。我相信对于关注这个领域同学应该能够听得出这里面有非常多的干货。我好奇就是除了今天我们所讨论到的，你们觉得coding agent的这个领域，你觉得今年还有哪些比较重要的事件？我们刚才还没有聊到，但是你个人觉得比较值得关注。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:44",
      "text": "其实我觉得今年涌现的很多公司，大家在front end上的进展其实蛮好的。我觉得写前端代码这件事情让coder来做确实他很擅长。因为前端很多今天的现代的前端工具，其实工具链也很完善。",
      "speaker": "发言人5"
    },
    {
      "time": "01:36:58",
      "text": "前端任务一定程度上有点像一个很小的一个planning的任务。比如说你画一个页，我要在什么地方上面去摆什么，然后我的数据流是什么样子的。我觉得在这个场景下面做前端这件事情，我其实还挺答应的。而且前端对于这个普通的用户的感知也会非常强我比较欣赏之前看到一个文章，他说其实不是所有人都需要会写代码，对吧？但是每个人需要用代码的需求会更广泛。比如说我作为一个不会写代码的人我想做一个个人的网页，然后我想做一个自己的APP想做一个什么样的东西。其实一定程度上来说，大家最先想到的是我先要有一个前端来去展示我要做一个什么样的东西。我觉得前端可能是一个挺好的一个切入点。",
      "speaker": "发言人5"
    },
    {
      "time": "01:37:36",
      "text": "对于code agent来说，包括David其实在release的时候他有highlights这一点就是他们在前端任务上可能会做得更好。在一定程度上我觉得也是他们看准了这个方向的需求是最强烈的，技术上面也是更容易实现的。就相比于后端的这个复杂的技术栈来说的话，现在的前端其实相对已经慢慢的去走向统一了。一旦一个技术走向统一的时候，他就是AI会擅长的时候。",
      "speaker": "发言人5"
    },
    {
      "time": "01:37:59",
      "text": "我觉得你说的这一点非常好，或者是我觉得可能这个AI也会促进一些事情的统一，对吧？比如说我觉得之前我们聊到用devin的时候，一个很惊喜的事情，也是你把你给他很多任务的时候，如果说人类程序有时候老板可能就直接让你自己很多事情从头写。但是你会发现AI在就精准的找到，比如说一个你自己可能都不知道它有所存在的一个模型，或者说一个开源的库上面。就是利用业务知识上，其实你会发现非常的可能有时候比人类更能够找到最适合的一个model，而不是什么事情都从头开始做。我觉得可能AI的选择也会进一步促进你刚才所说的这种收敛。是的，那信阳的信阳想到什么呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:34",
      "text": "从coding agent这个领域来说，我感觉另外一个比较重要的点就是我发现其实也一定程度上也可能是受到欧元的inspiration。我就觉得目前未来越来越多的这样的coding agent的本身也在探索inference ging的这个方案，包括我们自己也是这种方案。比如说你在solve这种githa issue的情况下，相当于是给人类的一个某种slider。就是说我想要花更多钱解决更复杂的问题，versus我就想花一点点钱然后解决这个问题。所以我感觉这个也是一个比如说note for trend，就是大家需要be real的这种程度。就是我们现在发现有些sweet inch的solution，他们也在试着，比如说去做一些best of n的这样子的一个ranking。比如说我可以让这个inside，让这个agent生成一个solution，我可以sample好多个solution，然后再去一个更好的，比如说一个verify，一个reward model，去对这些solution进行一个recently我觉得这个可也是一个比较party的方案，但是我感觉这个的难点可能就在于如何把这种sample mutio section的这种方案和更好的use change结合起来。我觉得这也算是一个open question。",
      "speaker": "发言人4"
    },
    {
      "time": "01:39:32",
      "text": "对的，我看到你在群里边也分享了一个你们发表了一篇工作的agent company。你也提到就是说接下来可能不只是在model上面去卷，我觉得对于整个android产品能力是会提出更高的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:42",
      "text": "还有包括就是现在已有的这inference killing，在真正遇到这种产品问题的时候，是否起效就是否能起效。比如说如果我end to end解决一个事情，涉及到循环slack message。那这种情况下，如果你同时sample多个13岁，然后你会发现你给agent同时向一个群里面发了八条不一样的message。就相当于我们需要bridge更多的gap。这种程度上从research到产品上的这个gap。",
      "speaker": "发言人4"
    },
    {
      "time": "01:40:03",
      "text": "对的，这个agent company这个paper其实里面用了很多例子，我看都是open demo，所以都是这个hands.",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:11",
      "text": "上的对对对对，agent company其实本身就是用open hands为baseline agent进行开发的这样的一个bench mark。",
      "speaker": "发言人4"
    },
    {
      "time": "01:40:18",
      "text": "你们提出这个bencher可以讲一下刚才我们提到的benchmark这个事情。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:22",
      "text": "对这个是Frank和那个grand，它的lab就是lead的一个边圈。他们的主要的思路就是说我们人类开发者其实除了单纯写构的，还做很多很多的事情。比如说我们需要和同事进行沟通，我们需要真的去改代码，我们需就需要真的去执行代码。除此之外我们可能还是要比如说，现实生活中我要跟别人开会，我可能还要去arrange一下meeting room，我可能还要去analyze，我可能还要帮助HR去做一些resume screening，他们的这边paper其实核心的逻辑就是他们试图把这种在公司里面发生的这种主要的任务都囊括进这个benchmark来。让这个agent的本身就相当于就像我们前面说的，从junior engineer到最后CTO这样子的一个road的转变的一个management。所以我感觉这也是accept forward internal agent evaluation。",
      "speaker": "发言人4"
    },
    {
      "time": "01:41:03",
      "text": "那你觉得这个是一个multi agent的事情，也就我们之前讨论过multi age是不是一个伪命题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:09",
      "text": "对，这个其实不算provocation的问题。就相当于他们的这个benchmark setting，就是他们用LM来simul给人类而已。他们又给人类各种各样的图画L然后模拟人类去给这个agent的回复，然后他们给了这些被problem足够的信心，就相当于他去模拟了一个人类如果真的被A人问某些问题，会进行某些回答。但是核心的目标是在测试这个agent本身的这个production agent本身在这个company架构下的能力的变化。",
      "speaker": "发言人4"
    },
    {
      "time": "01:41:33",
      "text": "所以这coding agent的出现，我们发现它不只是赋能程序员那个问题了，还是有可能带来整个组织的一个改变。所以我在想我们以后是否还需要这个engineer？如果需要的话，又是需要怎么样不同的engineer.",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:45",
      "text": "肯定我们可以看到，engineering的很多工作其实会被替代。我在ChatGPT出来的时候，我一个感受就是只要你的工作中间能被总结成为简单的缝合怪的工作，就是把一个已知的东西缝合到另外一个东西上，这种复制粘贴型或者。稍微修改性的工作，其实被替代速度是很快的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:02",
      "text": "因为现在的AI我觉得其实已经具备了很多的智能和知识。比如说AI自己写代码的能力，它是一方面。同时他比如说他知道get hub上所有的库，对吧？他知道上所有的模型。所以他其实可以不断的去调用人类已有的知识去解决你的问题。因为你的问题大概率已经被人解决过了，或者已经思考过了。所以其实在这个时候，我觉得很重要的一点是说，我们怎么样让AI能够把人类已有的知识给结合起来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:24",
      "text": "AI扮演的是一个胶水的作用，是个复制粘贴的作用。你还完全原创写一段代码，人类从来没出现过的代码，可能还是比较难的对吧？但是我觉得大部分人，大部分工作其实都是可以被复制粘贴或者被缝合这个概念去解决的。所以在这个情况下，其实确实大家想想看自己的工作中真正的不能被缝合解决的是哪部分。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:42",
      "text": "然后我现在想另外的问题，其实简单来讲，David你就你可以以低于mi mm位置的价格无限的请实习生对吧？然后这个实习生他其实会不断的进化，他的能力越来越强。他可能从实习生变成了像现在所有的正式员工一样。所以这个给每个人有一个很大的挑战，就是说你怎么学会当一个老板。大部分人其实是有一个老板的对吧？可能很多人就没有当过老板或者当过管理者。但是这个时候你怎么样指挥管理训练AI可能会变成每个人都要去思考的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:08",
      "text": "这个其实对于我们整个教育都会是很大的一个挑战。因为现在的这个教育其实基本上还是处在一个过去培养产业工人的思路。就是你去学习一门技能学习，怎么去执行一件事情。然后你毕业了之后，你要去干这件事情，然后干到你退休。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:21",
      "text": "但是我们首先发现这个世界变化很快，对吧？所以我们之前学的技能可能后来没用了。现在进一步的发现，可能执行的那一部分逐渐的都可以被AI完成的时候，那你后来变得真正重要的工作是提出好的问题。在这个时候，其实对于我们每个人职业上的挑战，或者说说的不好听是挑战，说的好听一点是要进步的空间，就变得会很大。所以我觉得这个其实是现在可能年轻人他要面对的一个非常重要的一个思考的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:45",
      "text": "非常感谢宇森，我觉得给我们更宽广这个思路。我也正好听听在座几位，你们是自己的程序员，同时又在做agent的，你们对于agent未来engineer的这个需求，以及对未来组织的影响又怎么样的理解。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:58",
      "text": "我觉得宇森说的就是非常正确的一个方向。其实所有的程序员都会慢慢的变成更像资本家，或者更像管理者，去控制agent或者控制这个AI去做事情。其实我举一个非常具体的例子，就是我有一个LY金牌的朋友写代码非常强，然后他觉得cursor就不太好用。因为他觉得cursor有时候做事情写了这个事情不太work，他就用了两下就放弃了。但我就觉得curr zr非常好用，因为我自己写的代码可能还没有curr sr好。然后我就会比较有耐心，我就慢慢的去调教它，让它去写出正确的代码，我就会成为更好的用AI的人。",
      "speaker": "发言人3"
    },
    {
      "time": "01:44:30",
      "text": "所以我觉得随着第一是大家越来越发现AI的价值，慢慢会变得越来越会用AI。第二就是新一代的年轻人，他们是跟随着这些AI工具在长大的。他们可能自己写的代码还没有他们用AI写的代码多。他们用AI的形态会越来越接近这个资本家，就是控制这个agent的去做事情，越来越像一个CEO，越来越像一个manager。他就不需要去worry about太多的detail了，因为这样是更productive。包括agent的设计也会越来越像一个给公司CEO设计的一个产品，而不是给一个程序员设计的产品。我是这么想的，就是因为人也越来越往那个方向发展，因为这个是更高效的一个形态。而具体的写代码的工作会越来越不太需要人去考虑这个问题。人需要考虑的是更creative，更planning，到底要做什么什么是product market fade。去完成创业的整个flow的中间的部分agent或者AI负责的是具体的执行的部分。",
      "speaker": "发言人3"
    },
    {
      "time": "01:45:17",
      "text": "那你觉得说这个对于以后程序员需要怎么样的能力？我们去招一个程序员，我们还希望他去完成什么样的任务？对于程序员整个career pass的培养和教育会产生怎么样的影响呢？你觉得我会。",
      "speaker": "发言人1"
    },
    {
      "time": "01:45:29",
      "text": "更喜欢更像方面的程序员，就是他会有更多的产品的思维，他知道什么样的事情是正确的视角，然后通过数据去知道这个事情它到底是好还是不好。比如说我做一个feature，其实对于一个产品的目标是你做一个feature，你知道这个feature好还是不好，然后再回来再再去改，然后做的部分会VI取代很多。我如果现在想要一个定义，一个好的程序员，我觉得会是更有产品思维，更像一个founder，能够去借助AI完成这整个流程，而不是只是做这个把这个feature做出来这件事儿是一个更overall的一个能力，我觉得非常的重要。就是一个好的founder会是一个100X的程序员。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:06",
      "text": "这个问题的话可能我个人相对乐观一点。我觉得随着coding agent的不断强大，人类其实也会进化。因为每一次的科技革命其实都带来了巨大的生产力。但过去的历史告诉我们，其实每一次的科技革命都让人变得其实是更能focus更有创造性价值的事情。",
      "speaker": "发言人5"
    },
    {
      "time": "01:46:24",
      "text": "上面的。我觉得未来其实我们会慢慢的把很多软件工程开发中很多冗余的工作叫VI去做。然后人类可以解放出在写代码这件事情上需要投入的时间精力，然后去想更多的事情。",
      "speaker": "发言人5"
    },
    {
      "time": "01:46:37",
      "text": "其实从另一个角度来讲，其实代码也是AI内容生产的一环。就是今天的model其实它非常的有想象力。过去人类的工程师其实大家都会去走专家的路线。比如说你是一个前端工程师，你就会对前端的技术栈非常的了解。然后你是一个后端的工程师，你就对后端非常了解。哪怕是在一个方向上面，其实大家对于不同的技术其实也有不同的偏好。但AI它可以学更多的code token。其实它对于整个的代码世界，它是有很好的全局观的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:47:04",
      "text": "也就是说我觉得未来代码其实也是AIGC的一环，就是它可以创造出更有想象力的东西来。这些东西可能是我们今天人类的程序员，然后人类的产品经理都想象不到的事情。如果他能做到这件事情的话，我相信就是未来人类和这个AI程序员的这样的一个共生的关系，其实他会非常的好。既可以合作，然后也可以去听对方的意见，然后不断的去做出更有意思的事情。我对未来其实抱有很美好的幻想。",
      "speaker": "发言人5"
    },
    {
      "time": "01:47:30",
      "text": "我觉得按照这个进化速度，这可能不是幻想。因为刚才信号已经说了，他们都已经能够让他们的agent成为他们整个cobs的最active的controller之一。那我就在想，如果比如说过两年以后，如果我在两年或三年之后再来成立一家公司，那可能我去在想说我招人需要招什么样的团队？我到底先招agent然后再想需要补什么样的人，还是说我像现在一样，还是先招人，然后A去补足他能力。",
      "speaker": "发言人1"
    },
    {
      "time": "01:47:52",
      "text": "我觉得对于就像刚雨森说的，对于整个组织的构架，甚至以前的软件是把组织里面人聚合起来了。现在也许我们都需要不同的软件把人给聚合起来。我觉得这个的确会有可能真的会有非常fundamental的一个影响。所以我也听听信谣，尤其是你们自己机构内部用上agent你是怎么看这个问题的？给你们的组织带来哪些变化？",
      "speaker": "发言人1"
    },
    {
      "time": "01:48:11",
      "text": "我觉得现在最直观的一个感受就是我们对于新feature和新工作的这种感受是完全不一样的。就是以前我们可能需要考虑OK，我需要作为这个feature，我们可能需要还多少的时间，可能需要考虑一下，比如说公司专门做前端的人，他有没有时间，比如说这个priority高不高，是不是要排进他的cusk to do list里面去，是不是两个月后才能看到这个feature。但是现在在当这种a sink类型的这种coding agent已经慢慢的走向现实的时候。就像前面宇森说的，我们能做多少，已经不再受到我们自己能力所限制，限制我们最终的就是想象力。世界上的问题只有两种，一种问题A减能解决，一种问题A减解决不了。Agent能解决的问题，我想出来让他去做就好了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:48:46",
      "text": "就包括像我前面说的未来公司的形态，其实像我们社区里面，因为我们整个code base是开源的。所以其实不仅我们公司内部在用，包括我们现在的那个beta也有上百的用户在日常使用我们这样的betta。我们肯定就有一个很有意思的，1 founder他其实就没有招多少程序员，然后他就是把那个open head做成了一个resolve，放在他自己的report里面。听他说他有的时候会直接连续写20个1宿需要加20个feature。然后同时把open head打开，然后open公式去执行。可能里面有十个有五个能work，但是对他来说这不重要。因为他想要实现的就是你能让agent去帮他并行实验。所以当时他给我们提的一个最大的要求，就是希望我们赶紧变化的快一点，这样子他可能可以启动100个agent帮他去做事。我觉得就像这个就是一个example，就是对于我们可能对于这个工作的感受会远远不一样。",
      "speaker": "发言人4"
    },
    {
      "time": "01:49:31",
      "text": "然后就绕到了像前面李振和病人都有讨论到的一点，就是我觉得。现在对于人类来说越来越重要的一件事情就是知道你需要知道自己想要什么。但是如何去实现它不一定是一个非常重要的事情。就像冰人前面说的，就是以前我们人类可能是走一个专家路线，就是说OK我对这个领域非常熟悉，我对这个领域的所有的工具我都特别了解。",
      "speaker": "发言人4"
    },
    {
      "time": "01:49:50",
      "text": "所以你要给我一个需要implement的东西，我可以在我的领域范围内给你快速的做出来。但是现在在这个agent的领域，其实我可以show一个我之前的example。对于我自己来说，我我我认为我自己是一个非常垃圾的一个前端开发者。我对前端的了解可能就仅限于一个学期在学校里面上的一节课，可能有半个学期在讲这个前端为I开发。对于实际上生产环境和前端怎么写，我是一点头绪都没有。但是我能看懂一些前端代码，因为我知道如何去编程，所以我能看懂他前端大概是在写什么逻辑。",
      "speaker": "发言人4"
    },
    {
      "time": "01:50:17",
      "text": "这个其实是今年11月份，我用open house做了一个最早期的一个feature。我当时对他最impressive的一点是，那会儿我们刚刚加入了一个多模态的一个能力。我当时就丢了一个open hands的这个启动界面的截图给他。然后用微信的那个箭头标了一个红色的箭头，指向了这个聊天框。然后我就直接跟那open hand说，现在我们这个聊天框没有办法直接把截图拖进这个聊天框，你能不能想办法帮我再给他加一下。",
      "speaker": "发言人4"
    },
    {
      "time": "01:50:39",
      "text": "我还有另外一个feature，就是我希望比如说对我我一开始就只想到了这个feature，然后我就直接丢给open hands。结果就是to my surprise，他基本上一轮就做成了。你看他一轮就把dragon face image就直接写进这个company里面，并且把它成功做出来。我当时就哇哦但是当时有另外一个问题，就是他比如说我们的code base，像这种code base都有些inter一样的东西。我就直接给他你指令说我们现在code base有些检查你没过，你去fix加liner，他就fix完了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:51:03",
      "text": "然后当他修完之后，我就玩的会，我说好像不对劲儿，你这个drag进去能实现了，但是你这个配置好像要work。就相当于有点类似于你在push一个小英特尔一样。人类更像是作为一个一样，你去验收他给你deliver的东西，然后你觉得这个东西是不适合你的心意，就相当于就像是一个甲方一样的存在。",
      "speaker": "发言人4"
    },
    {
      "time": "01:51:21",
      "text": "到最后我玩了一会儿，我突然发现了一个点。就是比如说我把这个图片dragged进行了聊天框的时候，它原本是没有这个visual effects的。那么我对于人类来说，我就不知道我这个image是不是drag到了正确的地方，这个image是不是能真的drag去。所以其实就是这些事情是在我想这个feature的时候，压根就没有想到的一个点。但是因为coding agent能够帮我，比如说在半个小时内甚至10分钟内就把这个feature实现了，然后我可以及时的去玩，从而可以让我去探索，比如说一个product更多的这样子的一个用户去探索一个更多的这样子的一个可能性。所以我觉得这个是对我们来说，至少对我们天天在用open hence来说，我们越来越觉得重要的一个点就是我们不需要是前端的expert。但是我们可能需要被懂一点点前端的代。我能看懂他在干什么，并且我们严格意义上能够知道自己想要的是什么。",
      "speaker": "发言人4"
    },
    {
      "time": "01:52:03",
      "text": "另外一点我觉得也是最重要的一点，就像李森前面说的，一个作为一个管理者，你需要把你的目标明确准确的一个可量化的指标去告诉这个agents。这个我觉得也是一个如何正确的去做prompting，如何正确的布置工作。我觉得这个也是人类作为开发者未来的一个非常重要的技能。",
      "speaker": "发言人4"
    },
    {
      "time": "01:52:20",
      "text": "我好记得刚才你展示的过程中，我想到其实前段时间跟朋友在玩这个eleven的时候，我们发现其实比如说他当时那个例子是让他做一个博客的网站。然后发现做完了以后，他自己还知道要去test一下UI，就自己会去写两篇文章，然后test一下整个flow。我想刚才你举这个例子不是有点像这个o one的思维。就是说他自己做完了一遍，其实与其说让你再去检查？告诉他哪里不对，也许他的这个能力更强了以后，他自己其实是可以完成整个test，然后发现问题再解决问题。这个过程我们。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:49",
      "text": "当时有思考过很多，这种是否要加入让agent这种主动去进行测试的这样子的一个crop。我们最后决定还是没有加，就是我们希望把整个possibility就expose给用户，就是让用户自己决定what's best for them。但是我感觉这个就带来另外一个痛点，就像李诞前面也提到，就是用户教育对我们这些这一类产品就非常的重要。因为就是你作为一个用户，如果你不了解这个agents的这个能力边界的话，你有的时候根本想不到你会要去用哪些。但是就需要你去express，去告诉他。所以我感觉这个也是我们考虑AI agent的一种产品的一个limitation。我觉得也是一个值得讨论的问题，就是我们是否需要去explicitly instruct age去做一下这类事情。还是说我们希望让A卷去尽可能的去直接执行用户的指令，但是不要make too much assumption tion。",
      "speaker": "发言人4"
    },
    {
      "time": "01:53:31",
      "text": "我觉得包括你刚才提到这个scope，你怎么去限定它能够action的这个scope，这个不只是个产品问题，不只是一个安全问题。我就刚跟你刚才说的，他也是跟产品设计也很重要的一个问题。李珍有什么补充？",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:44",
      "text": "新阳刚才说了一个点，就是说如何让agent告诉用户他能做什么。这个其实在我最近也发现这件事情特别的重要。我最近在report上加了一个agent加一个功能，就是让在每次reply agent做完了用户的一个feature之后，agent会just下一个feature是什么，或者说怎么样完善这个产品，然后present的这件事情特别的重要。因为从creative ity方面，用户其实很多事情他们自己是想不到的。比如说他作为一个personal notebook，他可能没有想过说我要在这个notebook上加一些summarizing，没有想过说from mt其实可以加一些animation，就是加一些动画。然后我也没有想过说这个其实可以增加一些付费功能。但是这个正是AI最擅长的。AI最擅长的就是brain stone去be creative，告诉你下一步能做什么，尤其是AI一定的自己知道自己做了些什么，他有更多的complex完整的知道这个code base这个项目是什么。",
      "speaker": "发言人3"
    },
    {
      "time": "01:54:32",
      "text": "这个就实际上是一个无限飞轮，就是用户跟agent的合作去build一个feature。然后做完之后agent再select下一个feature，然后用户再去选择下一个feature，把这个产品做得更好。这个其实就变成一个我叫他infinite feature的。一旦这个循环转起来了，你最后拿到的就是一个很完整的产品。",
      "speaker": "发言人3"
    },
    {
      "time": "01:54:48",
      "text": "这个apply to从0到1做产品，当然也fly to生成一个per request，就是AI指导用户，用户跟AI去合作这样的形式。其实这个其实特别重要。这个其实也是我上周才发布的，用户都非常喜欢这个功能。",
      "speaker": "发言人3"
    },
    {
      "time": "01:55:03",
      "text": "对，就是刚才大家在讲说，好像人类去指导他的时候，我就在想我们前面不是说到这个o three，就是open ad的o three，它的在cal force上的分数超过2700，而人类超过这个分数的就只有不到200个人。那我觉得是不是其实在很多任务上，其实更有可能是这个agent教我们怎么做。可能最后是agent自己去识别有什么他自己还做不了的，然后他来给我们分配任务。我觉得可能甚至都是有可能的，就不一定是啊这个copilot？谁是谁的copilot可能还说不定。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:30",
      "text": "其实像David跟这个open hands就已经是这样的一个形式了。就是说agent去做任务，然后让人类来confirm。Confirm其实就是code review和各种各样的交互。其实最后人类要做的就是confirm和这个guy去确认他不要做什么something crazy，比如把数据库给他drop了，最后人类能做的其实主要就是这些事儿。",
      "speaker": "发言人3"
    },
    {
      "time": "01:55:48",
      "text": "我有一个观点，就今天比如说O3和o one，其实大家都在讲inference time computing。但其实人类也是可以做到instance time computing的一环的。就是无论是你给他一个很长的brand，还是给他在多轮之间的一个feedback。其实你如果把它很长的一个看成一个的response的话，其实人类的很多language其实也是贡献到这个inference的computing里面去了。所以说未来真的不太好说，是不是真的可能AI会主导整个planning，人类其实在给他打工也是有可能的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:56:18",
      "text": "就是顺着刚才大家说的这个，我觉得其实也有一种比较奇怪的未来。我先说另外一个例子让大家更感同身受一点。就比如说两年前大家可能刚开始搞这一波大模型的时候，我经常会去review模型的输出，对吧？我会觉得这模型支持这块，然后这块觉得好严重。然后最近可能就是随着这新一波的微信模型，比如像QDFQO之类的。我们发现比如说在做这个TPQA这些分包的时候，我真的没法review这个模型输出，我根本看不懂他在做什么。所以可能编程也会越来越多。",
      "speaker": "发言人6"
    },
    {
      "time": "01:56:42",
      "text": "很魔幻的未来就是为了AI模型写出代码，他可能只需要五分钟写了，我们可能需要五个人类工程师一起review半个小时。因为这也是我最近觉得我在使用AI中的一个感受，就是AI模型的能力越来越强我到底有什么可替代？我觉得我跟他相比，我永远不可能替代点是我可以坐牢，我具备极强的背锅能力。所以就是我的坐牢能力决定了我的review AI的代码。",
      "speaker": "发言人6"
    },
    {
      "time": "01:57:00",
      "text": "我现在基本可以跟一个AI模型做到这个one on one，对吧？我们review他写的代码，尤其像比如我们去模型前，你要是就写这个数据清洗的脚本，那我肯定要看一眼。因为我一回车可能1000美金就出去了。但是未来如果模型写的代码越来复杂，越来越多，我可能会找五个不同的事。例子只有一个，AI模型五分钟写出来的代码，所以也许程序也不会。",
      "speaker": "发言人6"
    },
    {
      "time": "01:57:17",
      "text": "实验我们声音损失这个人和AI的关系。我觉得就到security这个问题，为什么大家那么重视，确实有原因。他就可以去选择AI可以去选择我要跟你去隐藏我做哪些事情，他不用完全披露给你，对吧？就好像O1OC他也不用把它整个400 0PU给你一样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:33",
      "text": "对，其实刚刚pick讨论的那个点让我想到就是像OpenAI他们有一些早期的research，像scalable oversight，包括这种week to，像transfer，他们其实就很早期在考虑这一点。就是当这个模型变得越来越强，我们人类用来review这个code的时间就是越来越长的这种情况下。从另外一个角度来说，其实我觉得AI agent本身也可以帮助我们review代码。一定程度上来说，你可以让比如说一个agent写，然后甚至可以让两个agent进行互相debate，去研究这个code究竟写了什么。然后最后人类就像pick前面说的，人类只需要最后盖个章这样的事情。我觉得从背锅这个角度来说，人类是绝对人类工程师是绝对不会消失的，只不过这个角色就变了。",
      "speaker": "发言人4"
    },
    {
      "time": "01:58:07",
      "text": "对对对，我觉得这个的确，我在想说，如果要是真的要实现我们刚所希望这个未来的他能够完成更加复杂。因为现在我们对他的定义还是一个junior engineer，包括David也是这么定义的。刚才新瑶所展示的几个任务起来，也是我们给一个初级的工程师做事情。那你们就说要让他实现像我们刚才所期望的这个未来，甚至成为一个组织里边这个头顶的主力。你们觉得还有哪一些你觉得需要去提升的？",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:31",
      "text": "第一个我觉得是information的信息的来源。首先你这个integration就是我们人类能够access store这种所有的information channel，这个agent就必须能access到。比如说我们公司内部可能有很多各种各样的奇奇怪怪的系统，这个A也必须都i have access。比如说我们人类有各种各样，比如说我们人类用slack去进行沟通，agent本身也需要have access to slack。我觉得这个是agent能够变得更加独立的。比如说从一个junior engineer变成一个singer engineer，这个road转换的一个最重要的一个点就是他能接受到的信息必须和人类是一模一样的，它和人类没有一个特别大的信息差。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:02",
      "text": "然后我觉得另外一个点，就是更考虑在这个model本身的能力上。比如说model本身的planning，model本身的从error中去进行recover的能力。还有另外一个点，我觉得非常重要的一个点就是proactive的能力。就比如说一个高级工程师，我有个大的目标我想要实现，我们第一件事情做的不是就是看看代码，埋头开始写代码，随便选个选型开始写代码。而是我会根据公司现有的架构去review遍公司现有的架构。去比如说提出几个解决方案。比如说方案A有哪些优劣之处，方案B有哪些优劣之处，方案C有哪些优劣之处。以及这种方案在后续维护的时候会产生的，比如说各种各样的consequence，会产生哪些cost profile。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:37",
      "text": "像我觉得成为一个senior engineer，就是你可以放让他放心去做一件事情的前提，就是这个agent会在适当的时候去问你。这些非常关键的第3IDC选，比如会CU这些非常关键的第3IDC选像open hands，像cloud。我觉得他现在已经初步有一些这样子的能力，就是有的时候会让他写一个东西，然后他还会给我提多个方案，让我选一个方案，然后他会向我建议某个方案。但是我觉得这个能力必须要，比如说做的非常强最重要的一点就是确保这个agent不会在我们未授权给他的情况下去做一些我们并没有approve他去做的事情。我觉得这个是另外一个点，是涉及在model capability里面的点。剩下的model其他的capability，我觉得像我们的O，其实已经不是缺乏而为的事情了。",
      "speaker": "发言人4"
    },
    {
      "time": "02:00:14",
      "text": "我完全不担心model的captain，因为我相信这个大家一定会把它推上去的。从我的角度，我觉得重要的是一个feedback look，就是我们要给agent一个正确的signal，让它去执行。比如说我们今天在做产品的时候，我们是怎么去验证我们做的到底对不对的。我们是首先实现这个产品，然后起一个实验，通过实验的signal去make decision。我们到底这个是好的还是不好的那这个signal可以是AB test，可以是一个新产品的用户的反馈，也可以是点击，也可以是test的。也pass一个test，可以是pass link whatever signal。",
      "speaker": "发言人3"
    },
    {
      "time": "02:00:46",
      "text": "为什么coding agent今天这么好，也是很强的一个原因，是因为code是一个signal特别强的一个领域。你这个code首先你要pass这个programme language的语法，然后你还有test可以pass。它是一个非常强的有signal的事情，所以AI能做好。因为AI可以自我验证。我们给agent的signal越多，feedback越多，它的自主性就可以越强。它需要人的干涉就越少，它能做的事情就越多，他scale能力就越强。所以我会说这个select是非常强的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:01:13",
      "text": "如果说我们给他足够的feedback，你可以想象他可以完成自己propose一个产品的idea，自己去做做完了之后自己做出一个MVP，自己到推特上去promote这个产品，自己去写一些文案，自己去tiktok上投广告。然后根据这个广告和这些文案的结果，我再收集回来自己分析再改进。这一切几乎都不需要人类干预。理论上来说是这样的，所以我觉得sit back loop是非常重要的。一旦sit back loop给的足够好，他可以做非常crazy的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "02:01:37",
      "text": "这个feedback group是一个模型能力吗？",
      "speaker": "发言人1"
    },
    {
      "time": "02:01:39",
      "text": "还是一个产品层？我觉得不是。能模型能力它其实就是一个integration的事情。就是比如说AB testing能够让agent自己把ED test结合好，并且把ED test结果自己能拿回来。你诸如此类的，包括就是他能去推特上去发软文，去tiktok上投广告，他要把整个产品流程给他走全了。这个其实有点beyond engineer的scope了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:01:56",
      "text": "但是我觉得这个是未来的一个正确的方向。因为engineer其实他可能说不会care这些，他只是care说我把这个事情做好。这样的话其实他就把什么是正确的事情的decision交给了公司里的founder或者VP或者说data saentis。但其实对于agent来说，当然可以用separate agent去解决了这些decision。就是说什么是该做的，什么是不该做的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:02:15",
      "text": "但是我觉得如果你把AI作为一个整体去考虑的话，他应该是有自己的能力去make这个decision，然后再继续迭代的。因为其实这些才是ground choose，才能帮助你减少designation。因为在这个过程中，这些数据你的用户的增长，你的产品的remi的增长，这些是非常确定的signal。你就能知道什么是好的，什么是不好的。人类也是这么做的，并且这也是最死掉的方式。",
      "speaker": "发言人3"
    },
    {
      "time": "02:02:37",
      "text": "冰原正好聊聊从一线做模型的这个角度，你觉得我们接下来还有哪一些要攻克的地方？",
      "speaker": "发言人1"
    },
    {
      "time": "02:02:43",
      "text": "我其实觉得整个固定的未来，从模型角度上其实能做的事情还非常的多。李臻也提到了，就是有signal这个事情其实是非常的exciting。就是你一旦有了signal，你就可以非常要去做很多事情。Coding在未来可能更多的会对element的研究要加大一些。",
      "speaker": "发言人5"
    },
    {
      "time": "02:03:01",
      "text": "我们今天的code model，其实一定程度上来说，这个世界上的代码token相对于普通的token来说，其实量不会有特别大。也就是说在training我们很有可能能够吃到很多现有人类产生的高质量的token。但是你怎么样让这些gold token在最终用起来的环节上面能够更好的去服务到我们，其实在lemon上能做很多事情。从open和和一个今天最顶尖的模型来讲，我觉得在cold上面，可能大家的before next一定程度上我觉得会在planning。就今天我觉得很多模型的planning能力其实做的不太好，就哪怕说sonet比如说星耀刚刚讲的那个case，如果说model的planning能力非常好的，对于修改一个前端这个任务来说，就是星瑶给的那些feed back，其实它从一开始他是有可能就plan到。如果他一开始就plan到的话，他其实去实现他也是OK的。所以我个人可能觉得对于code agent来说，planning能力会是一个比较重要的一个研究的方向。听听星耀的看法，就是我觉得对于model来说，未来是不是在上需要更多的投入。",
      "speaker": "发言人5"
    },
    {
      "time": "02:04:02",
      "text": "对的，其实我感觉binding这个词它囊括了很多东西。我觉得像我们这种事先考虑到这种问题，我觉得也是白你的一部分完全认可，就是这个能力是非常重要。我觉得另外一个比较重要的一个能力，可能就是从error中恢复这个能力。但是有些观点认为可能这个也是属于planning能力的一部分。Fanning就是像你前面说的，可能涉及到最开始他是个design。可能是遇到挫折之后，如何去改变我的这样的一个strategy，去最后达到实现这个pass的一个目标。我印象里就是sorry一开始给我们一个非常impressive的事情，就包括我记得最早期的GPT4，就是你给他一个任务，然后他如果试错，试错了超过三次之后，他说OK那我试试别的方案。但是在这些model之前的那些model，如果你让他做这件事儿，然后他不停的错，然后他会不停的试，然后你永远卡在这条分支出去。我觉得这个可能也是很强团队能力的一种具体的体现。",
      "speaker": "发言人4"
    },
    {
      "time": "02:04:48",
      "text": "那要怎么样能够提升一个模型planning的能力。比如说因为我们现在都在讲这个reasoning的能力，包括我们看到o three主要的提升在coding，对在这个math这一方面。那这两个能力的提升是否就能够带来这个planning能力的提升呢？还是说最重要还缺什么东西吗？",
      "speaker": "发言人1"
    },
    {
      "time": "02:05:04",
      "text": "对从目前的角度来讲，我觉得实现好的planning更有利的方向，还是我们要去搞更多高质量的planning的data。比如说在github上面，人类去提交一个request，然后拆解成很多的commit。然后这些commit message其实它天然就是一个比较好的一个planning的一个process。另外的话，其实走合成数据的路线，因为你最终signal是可以很廉价的去验证整个to是否能能work。那你其实可以去尝试合成更多make sense planning，来去增强你模型的planning能力。",
      "speaker": "发言人5"
    },
    {
      "time": "02:05:32",
      "text": "补充一点就是说对于agent产品来说，其实用户的feedback都是很强的planning的signal。就是比如说agent做了这个改动，这个功能没有实现，用户会告诉你说这个不work，或者用户甚至会go back to之前的一个版本。然后如果你做的改动是正确的，用户会告诉你OK这是对的。实际上你在这个过程中就收集了很多RL的signal。",
      "speaker": "发言人3"
    },
    {
      "time": "02:05:51",
      "text": "你可以想象A这个可以有一种摩托卡洛的推测式的方式，在未来可能的都N个概念里面去找到好的那个就根据用户的之前agent收集的用户的pick back，你可以有一个reward去评判什么是好的。然后agent可以去在sample不同的改动里面去找到那个好的，去增加自己的成功率。其实这也是一种看到flying，但是influence time flying的一种方式，但是它会越来越好。因为随着用户越来越多，他们给到的这个trace越来越多，那它的最后能够在这上面能做的事情就会越来越多。那agent就可以以更好的形式在他可能出现的几个未来中间选择那个好的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:06:26",
      "text": "是的，也就是说光是说提高reasoning能力其实还是不够的，更需要这种multi step的数据。这个可能是之前在模型训练里面还比较少的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:06:35",
      "text": "对的，这个可能是你得有这个agent的产品的时候才可以获得这个数据。因为如果你思考一下，你如果让人去标注这个数据，本质上是你现在有一个一大堆代码AI做了这样的一个改动。然后让你标注这个改动好或者不好不好的话为什么不好好的话为什么好？这个标注是几乎不可能有一个没有context的人完成的。但是如果你是一个比如replace agent做用户，或者说你是devin，或者说你是open head用户，其实每天都在做这样的标注。但是这个标注数据的质量是非常的高的。因为像我刚才说的这是一个mode step的一个trace。每一个用户的一个反馈，其实都可以在未来帮助我们调校A的，能让他做的更好。",
      "speaker": "发言人3"
    },
    {
      "time": "02:07:12",
      "text": "对的，那那冰远你们是在开发这个foundation model，那你觉得在这个multi step，这个数据更多是在这些agent的应用中去产生。那接下来对于faction mode公司来说，他如何去提升这一块的能力。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:23",
      "text": "其实我们从做反对这么久的，我们也可以搭一些很快的一些agent让他在一个环境里面去玩。然后我们去产生很多数据，去做数据上。我们从合成数据角度的话，可以一开始先用合成数据做一个warm up。然后未来如果应用爆发后，我们再用人类的真实的data去让它变得更加的strong，然后更加的和人类能够对齐。对我觉得这个可能是一个潜在的方向。",
      "speaker": "发言人5"
    },
    {
      "time": "02:07:45",
      "text": "明白。还有一个问题就是我们其实刚才讲的做agent这一层本身还有这个model。上次在湾区的时候，当时要邀请李真来那个活动。我们其实在硅谷也看到不少的公司都在开始做所谓的这个info for AI agent。因为我觉得在国内可能大家感觉没有那么明显。但是我觉得在国外，其实即使在David这类产品出来之前，其实我们在很多工业界已经看到了一些这种，也许不是那么完全的像cosine这个领域这么智能的coding agent。但可能已经是有一部分的workflow去把它agent化的这种产品出现。",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:15",
      "text": "所以我们在看到了一些当这些东西从demo走向这个产品化的过程中中也诞生了很多我们所谓的agent info的公司。其实包括比如说像一些我觉得是新一代的爬虫公司的，帮助agent更好的去阅读各种的网页。然后也包括像上次来的man GPT的leta做这个memory system，也包括像什么e to be是做这个3 box。还有包括看有些做这个authentication就是授权，还有这个SS的这种权限管理等等的那那我就好奇觉得接下来要让这个agent具备更多的进production的能力。你觉得还有哪一些从enva或者这个开发者工具角度的一些机会？",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:51",
      "text": "我觉得有很多agent的capability是一些很好的机会。比如说agent想要去访问一个网页，那agent比如说用户贴了一个API的dog，那agent怎么去读这个dog？就会有一些公司去专门做，说把这个网页转换成这个markdown适合agent读的一个格式。那这样的话，其实它的这个业务就会被像我们这样的agent的公司就直接在用，因为它非常的方便。",
      "speaker": "发言人3"
    },
    {
      "time": "02:09:16",
      "text": "这一类我会认为算是专门为agent的build的这个capability的公司。这个包括了让agent去读网页，包括了让agent去run test，包括了让自我去验证这一系列的capability，包括让agent去接更多的API。如果说可以提供一个服务，让agent更好的去接某一些API的话，这个也是非常败比较多。这里一部分就是agent本身的capability，给它作为一种infrared的形式存在。",
      "speaker": "发言人3"
    },
    {
      "time": "02:09:40",
      "text": "然后另外一种就是agent的framework，那就更多的是像比如说lang graph或者说这个lamer index。他们做的这些用i build agent的这些tools，这些也是valuable的。因为agent本身build的过程就有很多的问题，有这个memory management，有这个execution需要user interrupt，你需要这个rewind memory，那很多这些东西最后一定会变成framework的形式出现。当然现在有很多的framework，最后一定会出现更多更好的这样的framework to build agent。然后还有一些像很经典的像prompting，包括给人用的这个data base可能都是一个会存在的一个infront。",
      "speaker": "发言人3"
    },
    {
      "time": "02:10:14",
      "text": "现在的data base都是给人用的那给agent可能会design一个不同的API。比如你不能drop data base，你drop的时候一定要跟人讨论一下。然后这就形成了中间有一层人和agent和第三方的比如data base 3方怎么去进行交互，也是一个protocol形态的一个问题。比如像throp c出了那个MCP，他们就是想解决这个问题，想让agent能够去以一种protocol的形式，在用户和第三方的service之间去调度。就是agent可以得到用户的confirm，然后调第三方的service。所以这也是一种中间的info的形态，也是一种叫communication的形态。所以随着这个agent的越来越发展，未来会出现越来越多的这样的需求。包括像之后我说的就是跟这个stock to或者翻译，然后所有的很多需求的结合。从aden的角度可能都会rethink，可能形态都会不太一样。",
      "speaker": "发言人3"
    },
    {
      "time": "02:11:01",
      "text": "我觉得与人分享非常全面，新尧你有什么补充吗？比如说你们现在A诊中，你们有用到什么这些辅助的研发工具。",
      "speaker": "发言人1"
    },
    {
      "time": "02:11:08",
      "text": "对的，其实我们现在接触到的这种AG英特尔工具非常多，特别是这个run time，就是因为你要就像我们前面讨论的那个wrong time，其实是一件非常棘手的事情。因为你需要execute arbitrary ord然后现在我们知道，比如说现在市面上就像e to b这样，就有这样各种各样的这样子做runtime的产品。包括像model，run loop这样子的公司，他们也都有把他们的这种第三方runtime给继承进我们的这个open source的cold base。这样子对于我们用户来说有更多选择。然后对于我们这种做production scale的话，可能也会有另外一个，比如说我们自己worry free的一种方案。但是对于我们本身open source travel来说，我们其实是想要做一个平衡的。就是我们希望给用户一个用户体验，就是说inbar minimum你可以什么第三方这种input struct都不用，就直接用我们自拍的这样子的一个做法。",
      "speaker": "发言人4"
    },
    {
      "time": "02:11:52",
      "text": "我们其实有很努力做到这一点，但是包括像最近我们也遇到了一些，怎么说？就是我觉得这些英特尔公司他们本身是非常有价对的，就包括我们最近就有一些用户100个提到说我们那个browser在browse这些website的时候，他会被那种机器识别的系统给盯上。就是他会怀疑你这个browser是一个机器的control。然后这个时候你们可能需要用capture点点那种验证码，点一些什么奇怪的图片之类的。",
      "speaker": "发言人4"
    },
    {
      "time": "02:12:15",
      "text": "他们就有一些这样的公司去专门负责。比如说把你这个browser给维护好，把你这个browser去，百分百保证了你这browser不会遇到这种问题。遇到这些问题是由我这个infrared来替你解决，而不是由你作为一个age developer去操心这些事情。我觉得从。来说这是一个很好的一个工具。对于agent developer来说。但是从另外一个角度来说，作为open source developer，我们可能会担心，就如果我们直接告诉用户这是你唯一使用browse的方法，那么用户也会不开心。所以我们会需要在这方面做一些权衡的利弊。",
      "speaker": "发言人4"
    },
    {
      "time": "02:12:43",
      "text": "对我补充一点，先要说的wrong time这一点。就是如果大家看现在市面上就面向消费者最广泛的几个agent的话，包括birds到new，包括v zero，包括replay这三家子公司有一个共同点，就是他们在run time或者one web campaign er这件事上都已经做了非常多年了。Bot的母公司和rapid都是做云ID出身的。所以包括我们包括bot都是已经在如何scalable的在web起一个能够运行code的container这件事情上做了非常多的info的工作和优化。使得任何用户可以快的起一个agent的环境run time，然后能很快的上运行。这三家公司能够把agent做出来，其实都得益于这个run time的基础设施已经做得很好了，所以这件事儿其实是非常重要的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:13:25",
      "text": "作为一个投资人来说，AI应用这个领域我想大家都一直有很多专业。AI或者说AI agent的落地到底是怎么样？AI agent的应用是否可以落地，有哪一些产品？可能最后是由模型公司来做，而不是这个产品公司来做。我想这个也是很多创业者包括投资人的探索的问题。雨森你怎么去看一个AI应用或者一个AI agent的这样一个价值和投资的机会。这些想法因为demo的出现是否会带来一些变化？",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:49",
      "text": "对我觉得有一本书的副标题很能够总结我的感受，就是the future is faster than you think，未来比你想要的来得更快。其实在年初的的时候，我其实对于agent的讨论，我觉得还是比较觉得比较概念型的对吧？就是大家都觉得这个agent是未来，但是到底这个agent长啥样，以及他什么时候出来，我觉得其实那个时候整体来讲还是觉得是一个相对比较长时间的过程。我觉得这也体现了投资人对事情的预计，一般都还是不靠谱的。可能方向对了，但时间上会差很多。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:19",
      "text": "我觉得devin是给agent的产品打了一个很好的样子，他当然现在还有很多事情做不了，但是他已经把其中重要的几个事情就是这个呃对任务的planning的能力。然后写代码非常强的能力，使用工具的能力，以及这个能够，刚才大家可能还没有提到一个，就是说他能够在工作中不断的积累对组织的knowledge，自我学习进化的能力，然后卖按照去卖工作不是卖工具，所以他可以对标人类的薪资，这几个特点给体现出来了。所以我觉得当一个事情有了第一个带头，那其实后面就有很多大家去改进去跟进的这个可能。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:55",
      "text": "所以我觉得如果说简单来讲，今年的其实我们看到了三个非常大的技术的进步，对吧？第一个是AI的reasoning能力大幅提高，这样让AI做planning会变得好很多，然后horizontal会小很多，这样才能做更长时间planning，并且更好的去follow这个plan。第二就是AI编程能力大幅提高，对吧？大家现在看code force这个O3都已经做了2700分，基本上人类最厉害的程序员的水平了，对吧？这个还会再继续提高，然后就是AI使用工具的能力。这三个东西加起来，我觉得确实就奠定了说在数字世界a agent的基础。就是你想想看，如果一个工作能被总结成一个人类坐在电脑前面，通过和电脑进行交互能够完成的那这个事情我觉得在现在来看，基本上去把它逐渐的action的话，就没有什么大的问题了。所以在这个事情上面，我觉得我们在接下来会看到越来越多的agent for everything，就是everything digital，对吧。",
      "speaker": "发言人2"
    },
    {
      "time": "02:15:43",
      "text": "我们看到编程是一个现在的嘉宾，我是用下来。比如他对于数据这种文文书类的工作并不是那么擅长，但我觉得很正常？大家去做优化的方向不太一样。完全可以想象，既然有针对这个数据分析师的agent？有针对sales的agent，然后针对可能产品经理的agent当然我觉得最后可能不只是说人类的某一个弱会精确对应到一个，而是说可能有一些比较混合的弱。同时我觉得很有意思，就是说agent之间怎么互动对吧？现在比如说我我得自己去提出来给David的需求，那以后是不是有可能，比如说可能是一个产品经理的agent，他在做一个产品的play，然后这个play在映射到编程的那部分。",
      "speaker": "发言人2"
    },
    {
      "time": "02:16:18",
      "text": "对吧，因为人本身他自己的planning的能力，提问题的能力其实相对来说也是有限的那之前我觉得大家在看到ChatGPT这样的这种你问我答的形式的时候，其实很多人都在想，我好像没有那么多问题要问AI对吧？我好像也不是每天大部分人并不是每天要跟AI问那么多的问题。所以大家想怎么样能够让人类使用AI的用量多100倍。之前一种方案是说跟AI去谈恋爱？搞这种情感的东西。但是现在我们发现，其实如果说你让AI去做事情，而不是说他只是回答你的问题。那我想大家整个token usage，它的这个AI的用量会大幅的上涨。所以我觉得这个对于我们的整个模型的用量，算力的提升都是非常厉害的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:16:55",
      "text": "然后现在在美国其实大家谈论的非常多的一个话题就是说我们原来是卖工具，对吧？如果我要持续的使用这个工具，那我其实并没有被解放我的注意力。所以我基本上是一个工具定价的逻辑。这也是大家为什么看到David出来五百美金一个月觉得特别贵。因为这跟原来范式不一样，他卖的是一个工作，其实有很多测算下来就是它一个ACU是2美金，大概对应15分钟的时间，就是大概是8个小时的our rate小时的薪资。大家知道在加州的MIIMA wage，就是你在麦当劳打工的人？都是16美金1个小时，所以现在David的定价其实是低于加州minimum wage大概50%的。并且你可以非常确定的预测它的这个算力成本，其实会以每年降到之前的10分之1的程度去去下降，所以同样的八块钱1个小时，你雇一个他的能力其实在未来会不断的扩张，它的这个成本可能保持相对类似，或者甚至会有所下降。",
      "speaker": "发言人2"
    },
    {
      "time": "02:17:44",
      "text": "所以在这种情况下，怎么样能够让你的产品做到我卖给我，我能够把你的生产力以一种工作结果的形式卖出去，而不是只是以卖工具的形式。我觉得这也是大家都会去尝试进行的，属于A进的时代的这样的变现模式。所以现在可能对于这种cata base的按照这个席位收费的SARS，其实出现了很多的质疑对吧？就是说如果以后我迈入工作，那我是不是要卖这些席位，那那我可能就把工作结果卖给你就好了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:18:11",
      "text": "我自己觉得，其实之前中国企业服务领域是非常难做，很难投的。莫妮卡可能有很多切身体会，他之前投企业服务的。我觉得这里边，大家都说中国什么难做。企业服务有个很重要的原因是大家可能不太愿意为工具付费，对吧？大家喜欢的这个软件工具就该免费的。这个可能是一种整个商业环境，文化的情况可能也很难改变。",
      "speaker": "发言人2"
    },
    {
      "time": "02:18:30",
      "text": "但我在想当然，如果我们真的能够去sell work的时候，那企业服务在中国是不是也会有一些有意思的机会。因为不管怎么样，我最后是要把事儿干了，对吧？如果我真的能够让AI直接交付工作结果，那这个也许对一些企业来讲，他就有点像找外包公司一样。这个其实他可能是愿意付费的。只是说这个外包公司从原来的人力资源外包，变成了智力或者生产力的外包。所以是不是在AI时代，中国的生产企业服务重新又有了些机会。",
      "speaker": "发言人2"
    },
    {
      "time": "02:18:54",
      "text": "因为AI本身来说，现在还是一个生产力大幅提高的一个技术革命，对吧？那现在大家觉得在中国可能很多时候大家都在把它想往娱乐方向去引。也就是说大家想用字节的原来的这个套路去做一家新的AI的超级公司。但我觉得字节其实做了很多事情还是偏娱乐，偏刹时间的那AI真的能帮人省时间的话，这个在中国怎么落地？所以我在想，也许企业服务这块也会有一些新的机会。",
      "speaker": "发言人2"
    },
    {
      "time": "02:19:17",
      "text": "然后我自己觉得，在这个安全角度其实会有也有很多的机会。因为现在我自己感觉到，虽然我知道AI agent的能力还有很多的不足，但是人都是想偷懒的当他能够看似完成一些工作的时候，那我其实很多时候就放心让他去做了。但是在当他有越来越强的代码执行能力，软件使用能力的时候，这个时候他如何保证和我的这个组织的目标和我整体的社会价值而去align。这个其实包括说这个组织里面算力怎么分配，这些其实可能都会有很多新的挑战会出来。那这个时候针对它的安全，针对它的多个agent of strain，这些可能都会是一些之前大家没有意识到或者没有看到，但是现在所需要解决新的问题。所以整体来讲，我觉得damming是一个非常好的一个让大家看到未来的例子。",
      "speaker": "发言人2"
    },
    {
      "time": "02:20:01",
      "text": "但是戴维本身这家公司，他肯定还有很多要去做的。我那OpenAI也好，这个也好，其实大家都在做A的产品，所以最后鹿死谁手尚未可知，对吧？但是这个对未来的这个形态的展示，我觉得是我们从这里面可能看到最重要的一个推特位。",
      "speaker": "发言人2"
    },
    {
      "time": "02:20:15",
      "text": "对我就刚讲预先讲的几点都非常的全面。我好奇比如说像其实我的投资人也非常关注这个团队，这个也是一个很看人的事情。你觉得要做出下一代的这个呃真正是所谓agented workflow对吧？就上半年的时候在红山，所以也提出这个agented worker。那个时候我觉得当时即使有很多号称agent的产品，大家都还是觉得非常的sceptical。我觉得就只是一些自动化的一些工具而已。那你觉得说现在就像你刚才所说的，我们对于一个成产品的定义跟之前也不一样了。那这个时候需要怎么样的团队来去做这样的事情呢？",
      "speaker": "发言人1"
    },
    {
      "time": "02:20:47",
      "text": "我觉得其实科sir、David这样的团队都反映了一些共同的特点吧？比如说他们其实都是人才密度非常高的，这个柯是应该是00后MIT的团队对吧？然后这个dav一上来就是说我们这里有十几块金牌，就人才密度非常高。同时他们当然也很年轻，创造力和执行力都非常强。然后我觉得David其实他也是一个典型的说我既在这个技术上很厉害，对吧？我我我有很强的技术团队的能力，我得到了OpenAI这样全力支持。同时我在我要做的这个新的工作流，就写代码这件事情本身，我也有很深度的经验和思考，就这些还是怎么把AI和这个实际工作的场景结合起来。",
      "speaker": "发言人2"
    },
    {
      "time": "02:21:22",
      "text": "因为我觉得开始也提到，在去年的时候大家都在看说你是不是做一个AI native的产品，就要做自己的模型。那是一我觉得在那个时候，尤其在技术发展的早期，其实大家会发现产品和技术是比较耦合在一起的对吧？产品就是这个技术本身。但是其实互联网也是这样，随着技术的不断的发展，底层的技术和产品其实会解耦。现在最火的这些产品，不管是cursor David还是relaxing，包括我们投的Monica皮壳加的公司。其实他都不是说我要做一个自己的foundation model，对吧？它其实就是建立在一个我已经定位到了一个用户所要解决问题的场景，或者叫PMF的一个的一个这样一个陈述。",
      "speaker": "发言人2"
    },
    {
      "time": "02:21:59",
      "text": "我来等待这个模型变得越来越强，直到符合我的需求。其实curse在二三年初的时候就已经出现了，对吧？但那个时候并没有那么火。因为我我觉得有个很重要的原因是因为当时的模型没有那么强，导致说curse的产品理念其实不能够完全的呈现出来。就是这个action prediction。可以说so net 3.5其实是成就了cursor。然后cursor反过来让so let 3.5变得程序所有的coding中的一个differ的选择，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "02:22:23",
      "text": "戴维这个产品其实也是，我看devin现在主要也是调的，比如说4O或者三奈的这样应该是主要是4O这样的一PI可能在目前的这个模型能力上能发挥出agent的这样能力的模型还没有出来，对吧？就还不足够好。那么成就devin或者这样agent形态的模型会是什么？会是谁做出来会具备什么样的特点？以及说当然如果他们俩也是个互相成就关系，agent的普及会让这样的模型变得更加重要。",
      "speaker": "发言人2"
    },
    {
      "time": "02:22:46",
      "text": "所以我觉得这里面可能我们就发现你要创业化，不是说一定要训自己的模型，而是你跟模型变成一个更加共生的方式，对吧？而且在这个里面我想对于David对于这些A型的产品，它的核心竞争力很多时候都是在于怎么把模型用好，并且怎么对于用户实际的这个workflow有很深刻的了解。所以这就不是简单的说open I发一个模型，新模型就能把它给替代掉的过程。所以这里面我觉得其实对于团队，对技术的理解，对场景的理解，以及去创新的去思考。",
      "speaker": "发言人2"
    },
    {
      "time": "02:23:11",
      "text": "我觉得devin在这个出来的时候，其实也是提出了一种全新的这样一个交互方式。在当时大家其实都还觉得是忽悠，觉得他这个是不是实现不了。但是我对他们也很好的用执行力证明说这个事情是可以做到的。我觉得他能够启发，比如说像大家的这样的思考，这个其实非常重要的一点。",
      "speaker": "发言人2"
    },
    {
      "time": "02:23:26",
      "text": "所以回过头来讲总结一下，就是说第一要有很强的人才密度，对吧？这个也在这个游戏需要探索的时候，这个人才密度要求很高。第二它需要对于技术和场景都有深刻的了解。第三执行力要很强。其实我们看到大家都不是很大的团队，然后在离得相对也没有那么长，可能几个月1年的时间内就完成这样的完整的产品，能够deliver，说明它的执行力是很强的，尤其是其实我们看到在像嗑sir这些其实都是在它针对对象，其实可能就像变得和copilot这样的由大公司开发的应用，吧。那其实创业公司很重要的是快，我怎么样能够同样一个方向赛跑，能够跑进大公司。很多时候在，创业公司反而是有机动灵活的优势。",
      "speaker": "发言人2"
    },
    {
      "time": "02:24:05",
      "text": "对，所以我们的确也看到这些团队，你看case是00后的团队，就David还有包括信摇的都是接近00后的这个同学。我觉得真的是一些年轻的researcher，反而他以前没有什么没有这些所谓的这种party manager的这种产品经理的经验，反而在发射出了非常优秀的这个产品。我最后再在外面展望一下那那我最后再问一下，就是其实前面女士也简单提到了说也许这样的一个sell work不是现在硅谷。大家说就以前是software as a service，现在是office的这种set work的这种方式。你觉得除了这个之外，你觉得在在中国看到这些agent的公司，还有你觉得还有哪些你比较期待的这个机会吗？你就会跟可能跟美国会有哪些。",
      "speaker": "发言人1"
    },
    {
      "time": "02:24:46",
      "text": "不一样的我觉得一般来讲，中国这种新产品的进化分为两个阶段。第一个阶段就是copy to china，对吧？因为很多时候也是看到了美国有一个或者线上有一个新的模式出现，比如说可能加了GPT出来，中国也会有这种个人的personal的这种personal assistant，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "02:25:03",
      "text": "我相信大家其实肯定在复刻devin，或者说在非工作里非coding领域去复刻dev的工作会有很多。因为毕竟coding是一个程序员一般都是用最好的工具，它很难有一个什么特别国产替代的过程。当然我们在新创领域应该可能会有，所以如果真的有大量的程序员群体，可能他们还是愿意使用crosser，或者像使用戴尔这样的全球范围内最佳实践的应用。但是在非固定的领域，我觉得还是那个观点，只要在数字世界能够完成任务，吧？其实这都可以被agent逐渐的去快速解决。所以我觉得这里面不管是做出海的市场，还是做中国的市场，我觉得如果sell work这个大的前提是能成立的，我觉得可能都会有很多新的产品形态的机会，当然在中国下我可能不能行，我觉得这也是一个我非常感兴趣的话题。所以如果听众朋友们有想要在中国做这个生产力agent的产品的话，我们也非常愿意去聊。因为我知道有有的投资人可能是对这个生产力是比较失望的。在中国的发展。但是我觉得新的技术和新的产品形态可能会带来新的机会。",
      "speaker": "发言人2"
    },
    {
      "time": "02:25:55",
      "text": "我们进入最后有几个快问快答的环节，准备了几个简单的问题，可以请大家快速的分享一下你心里边的这个答案。第一个问题，大家最希望看到未来一年和未来三年在这个coding agent或者说general agent领域会发生什么。",
      "speaker": "发言人1"
    },
    {
      "time": "02:26:09",
      "text": "未来一年我觉得应该期待的就是说大家在每一个数字的领域都去尝试agent，就是agent for everything in the digital world。在这里面很多我觉得暂时可能不work，但是在有的领域可能会逐渐的变得是大家是能够用上的，我觉得这而且这里面产品形态我觉得会很百花齐放。因为当你给了这个AI足够大的空间，对吧？你就给他工具，你给他的代码，你给他的这个planning指挥别人能力的话，那其实这个可能带来的小风险是很大的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:26:35",
      "text": "从三年的尺度来讲，我觉得首先很难预测。因为如果按照这个精华速度下去的话，应该agent在执行很多任务的能力已经会超过99.9%的人类。那这个时候我们已经很难去想象他具体怎么去工作了。我觉得在有的场景下，但是我觉得三年的尺度上，我觉得应该会比较有大概率看到agent之间的协作，其实这会是一些带来很多全新的想象力和同时带来可能的问题，对吧？因为其实我们之前人类大量的想法是得不到实现的对吧？经常我们遇到的像笑话一样的就是说我有一个很好的idea，但是我缺个CTO对吧，然后我缺个程序员把它实现。但是当这个把想法实现出来的能力逐渐的变得不稀缺，甚至变得很便宜的时候，那这个时候有多少没有被实现的想法是有可能被实现的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:27:18",
      "text": "在美国有一个网站叫web thing，很有意思。它就是说你只要输入一个prompt就可以生成一个prom对应网站，对吧？他的意思就是你现在用到的软件和网站都是别人的想法做出来的。但显然这个世界上如果有个想法的全集，那现在已有的互联网只是很小一部分。那这个还没有被发明出来的互联网是什么样的样子？",
      "speaker": "发言人2"
    },
    {
      "time": "02:27:37",
      "text": "在这个意义上来讲的话，我觉得整个人类社会创新的速度可能会大大的提高。因为重要的是想法了，对吧？执行你可以花钱买到，甚至是以越来越快的速度，越来平的价格买到的话。",
      "speaker": "发言人2"
    },
    {
      "time": "02:27:48",
      "text": "怎么样让这么多的这些想法能够得以实现？我觉得对于风险投资来讲，其实也会有很大的这样一个影响。并且现在我们给AI提出问题和任务的速度，其实也限制于我们自己的思考的速度，对吧？那如果能够实现AI agent和agent之间的相互指挥和协调。这样的话其实我们有可能去做的工作就会进一步的大很多。这样的话可能提出好的问题，提出好的思考，这种创新型的能力变成人类所独有的对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "02:28:19",
      "text": "至于说AIA型的之间怎么去使用资源分配资源，这个可能就越来越变成一个黑盒子，或者说对于大部分来讲不用去关注的要点。所以我想起有一个朋友说了，说对于程序员来讲，他关注的可能更多的是cursor winner serve带来的这样生产力的提高。但是对于所谓的叫资本家或者老板来讲，想的其实可能更多的是说在这种情况下做什么事情变得很重要。然后怎么样能够只会做事情。可能David这样的产品是变成所谓非技术人员，像所谓的企业家他他最想去做的事情。这样的话我觉得对于未来的组织形态会发生很大的变化。",
      "speaker": "发言人2"
    },
    {
      "time": "02:28:50",
      "text": "包括我也在想，其实人类社会中为什么有所谓办公室政治，对吧？很多时候都是在做资源的分配，比如说那那其实并不是说这个人是坏人，所以他要搞政治。而是说他想要更多的拥有他的资源，对吧？你要有更多你的资源，所以才会有这种办公室政治，权力争斗。在企业算力，比如说有限的情况下，不同任务的agent是不是要去进行不同的任务分配，那在这个里面怎么样平衡资源，而不是说比如说可能在一个难但是不那么重要的任务上花了好多的算力，这是很容易想到的场景。这个里面其实对于组织的分工，包括组织的管理都会产生很多的产生的影响。所以我还是比较期待当AI之间能够互动的时候，我们的生产力其实是能够进一步component的。",
      "speaker": "发言人2"
    },
    {
      "time": "02:29:30",
      "text": "我先说一个非技术层面当然也涉及技术了，这个我还是希望它整体的成本能够下降。因为我们其实之前已经看到了，像最早GT3API出来的时候，你看第一批的产品，像比如说它其实都是以to b的形式在卖，包括像现在DVIN这500美金其实真的不便宜，而且又涉及比如说slack集成。你往往购买的决策人可能是一个都不说CIO，可能也是一个公司行为。那接下来比如随着成本的下降，我们能不能让更多的consumer或者说程序员自己就能去直接用起这个产品。我觉得除了刚才讲的各种技术和能力的提升以外，我觉得让更多人用到这个A真的也是我最期待的一个事情了。",
      "speaker": "发言人6"
    },
    {
      "time": "02:30:04",
      "text": "你觉得这个是一年还是三年？可以分别说让我感受一下。",
      "speaker": "发言人1"
    },
    {
      "time": "02:30:07",
      "text": "我觉得是半年。",
      "speaker": "发言人6"
    },
    {
      "time": "02:30:09",
      "text": "好了，那对于三年，你觉得三年的期待会发生什么？",
      "speaker": "发言人1"
    },
    {
      "time": "02:30:12",
      "text": "三年的期待我觉得就是再一次出现我刚才讲到的，比如说一两年前我们在看模型输出的时候，我在榨汁模型，我希望在未来很快的时候就能三点，我希望看到AI会有一些我看不懂的答案。",
      "speaker": "发言人6"
    },
    {
      "time": "02:30:24",
      "text": "其实你刚刚才说这个500美金比较贵，那你怎么看甘宇森的评价？的确还比起你招一个junior的程序员来说，的确不算贵。",
      "speaker": "发言人1"
    },
    {
      "time": "02:30:33",
      "text": "是这样的。但是从来这些科技，比如说新的科技出现，都会有一个高峰的过程。我们可能有一些公司他比较接受这个，他就有一个公司的行为去买入这个东西让大家可以用起来。但我觉得其实软件行业其实之所以能就是设计也如此重要。因为它涉及对我们所有生活的方方面面。有很多公司它可能本身就是比较传统，所以还是希望有一个自下而上的一个推动的方式。",
      "speaker": "发言人6"
    },
    {
      "time": "02:30:54",
      "text": "对，而且我觉得他这个不仅是因为他500美金技术的使用费，其实也是一个它这个软件加上credit对吧？其实我觉得它还有其中的一个问题是说他在一个任务上，他的一个任务上，你无法控制他到底用了多少ACU，就是他自己的这个computer，这个基架的对，就是这个monthly的这个agent compute units对吧？我就是同样的一个任务，有时候他会跑个几美金，有时候可能跑上十几美金都有可能。但我觉得这个可能也是跟你刚才说的这个成本相关的，我想应该也会很快看到很大的提升。冰原你的influence到哪一步了？",
      "speaker": "发言人1"
    },
    {
      "time": "02:31:26",
      "text": "对我觉得一年的话，我其实还是期待说整体的这个go golding agent能够做的真正实用。就是让所有人都都因为它的存在，让你的开发变得非常的高效，然后让你去做一个新的东西的时候非常的高效。这个我觉得是大家能看到，然后这么多公司在做，然后这么多的个人开发者，这么多开源社区在做。大家其实一定程度上短期的目标都是就是能够提供更好用的工具。",
      "speaker": "发言人5"
    },
    {
      "time": "02:31:54",
      "text": "然后长期来看，其实我个人更理想主义一点。就比如说我们能不能期待q forces的第一名，就是model对吧？而且它还能稳步的永远是第一名。",
      "speaker": "发言人5"
    },
    {
      "time": "02:32:04",
      "text": "我对AI超越人类还是抱有很大的期待的。我觉得AI比人强这个事情，从skating的角度其实是work的。就是他既然能吃那么多的token，他就可能压缩出比人更高高级的智能。我如果说我们拥有这样的一个强大的model，我相信对于科技，对于社会其实都是一个很好的一个存在。所以我觉得在固定上面，未来刚刚pig讲的写人看不懂代码，一定程度上确实可能会出现。我其实更期待说看不懂其实不是一个好的feature，但是他看不懂，但是他很强，他在某些事情上很强，我是能接受的对。",
      "speaker": "发言人5"
    },
    {
      "time": "02:32:40",
      "text": "我好奇，你刚我问一句，就是你说希望在这个code forces上有一个更大提升。其实但其实现在模型已经能够解决大部分人类都解决不了的一些数学题，一些的一些coding的问题了。但是我们反而在用它做一些日常的一些task的时候，反而觉得有些容易的它才不如人类。这个事情是说我们还是要再继续去除了这个提高就在口鼎的mass这些能力上。剩下这些到底是一个模型问题还是一个产品问题呢？",
      "speaker": "发言人1"
    },
    {
      "time": "02:33:05",
      "text": "我觉得是时间问题，就是大家今天的焦点还没有来得及从一些定义很好的task上skin到更多的task上。他技术如果验证了在某些难的事情上成立的话，他下一步扩展到更多就是时间的问题。",
      "speaker": "发言人5"
    },
    {
      "time": "02:33:20",
      "text": "好啊，那新摇我。",
      "speaker": "发言人1"
    },
    {
      "time": "02:33:22",
      "text": "其实想的是，比如说一年之内可就是一年之内可能prepareing model，像是big lab open I derby to the model，可以让随着你退休。然后可能open source model能够稳定的，比如说干到50到70的这个范围。并且然后然后并且在在在这个时间同时我就希望比如说像像在github上用coding agent解决问题会是一个新常态。就是大家会真的开始用这些agent。",
      "speaker": "发言人4"
    },
    {
      "time": "02:33:51",
      "text": "随着这个能力提升，随着这个成本下降，这个agent现在对我们来说，现在可能像是一个实习生要的水平可能还没有我们想象中junior那么reliable。我希望可能三年后，他可能已经百分之百是一个稳定的june er。然后可能是50%的概率，它是一个变成一个非常稳定的这样子的一个senior er，已经是可以成为一个可靠的队友，能够找大梁的这样子的一个存在。然后这种情况下其实就要求比如说像在BH company这一类的bh mark可能要接近到七八十，或者就是让3 ury这一类人去发展。对我觉得翻脸应该是没有问题的。但现在这个发展速度。",
      "speaker": "发言人4"
    },
    {
      "time": "02:34:24",
      "text": "对，就是你这个500美金你可能遭到的那个engineer也不是那么的reliable。",
      "speaker": "发言人1"
    },
    {
      "time": "02:34:29",
      "text": "对的，我现在最大的体验就是我觉得这个open hand懂得比我多得多。就是我现在已经会就在网上找到各种文章，然后就问他说他你觉得用这个技术到我们这个report行还是不行？从这个角度他已经是一个CI engineer。",
      "speaker": "发言人4"
    },
    {
      "time": "02:34:43",
      "text": "对哎那这个我们刚才讲了很多coding agent的好坏，我们有一个有趣的问题就是你们用这个coding agent产品踩雷过的一个地方。给大家分享一个有意思的例子。尤其是一些可能你觉得他不应该自我不好，但是他却意外的翻车了。大家有过这样的这个经验。",
      "speaker": "发言人1"
    },
    {
      "time": "02:34:59",
      "text": "我想一下，其实我平常用model其实经常会写一些数据处理的代码。因为有些数据处理的边界其实处理的就我自己写，有时候也会出错，然后你需要debug，然后就比较费时间。所以说当大模型的空气能力上来以后，我其实还挺依赖他去帮我去做一些这样的事情。问题就是它有时候写代码会根据你的上下文去做一些改变，比如说我提供他一些样例的数据，然后它有时候就会影响你最终那个数据处理脚本的那个代码的一个准确性。因为我做code，我给他的要处理的数据就是code。然后让他写一个新的code来去处理这个code。然后他写的这个code可能会被我给的那个code所影响到，我不知道我讲清楚没有。对，就可能这个问题上可能会有一些需要去更好的去解决的问题。",
      "speaker": "发言人5"
    },
    {
      "time": "02:35:46",
      "text": "我觉得本身这个事情其实是一个很常见的一个需求。就是我先给你一个code，我需要你在这个code上面再去处理现在已有的这个code。你要写一个新的code，但它会被原始的这个code影响到，这其实我觉得不太应该的，而且应该是有很多办法给解决。但现在还可能会有些意外的翻车。",
      "speaker": "发言人5"
    },
    {
      "time": "02:36:03",
      "text": "所以对这个context的理解，因为现在虽然说我们说这个context middle很长，但是其实之前我们的节目里面有讨论过对吧？但是context window长并不代表他对这个contest的理解就很好。那你觉得以后他要对context越来越powerful，其实就需要和理解越来越多的contest。你觉得这个contest长度会是一个挑战吗？就像我们在研究中有有看到这块的一些瓶颈。",
      "speaker": "发言人1"
    },
    {
      "time": "02:36:25",
      "text": "对code的long contest model in其实是我们一直很关心的问题，这个非常的重要。这个model可能会涉及两个方面，一是你要对很长的code的honor standing。因为code的这个形态相比于普通的文本来说，它的long depends也很强。因为一个变量可能会存在很远的地方，但你还会用到它，对吧？你比如说你整个仓库你要引用的关系或者什么东西，它可能就lunch pendency，它最后画出来是一个很大的一个graph，或者是一个对，但是你需要去能够handle很远的一些函数的定义，然后函数的实现，然后去实现你当前的这个函数去做一些改变。所以understanding肯定是很重要的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:36:58",
      "text": "然后另外一个我现在比较关心的就是我们其实可以做long code的generation。就是你能不能让模型写很长的代码，但它不出错。对，这个其实也是我很关心的一个技术的能力。",
      "speaker": "发言人5"
    },
    {
      "time": "02:37:09",
      "text": "你这一块目前哪个model做的最好？",
      "speaker": "发言人1"
    },
    {
      "time": "02:37:14",
      "text": "我觉得现在大家其实都还open的model，我觉得都还有有有一定进步空间。然后那些老大哥们，我觉得一定程度上其实也会犯一些错，就是没有大家想的那么的strong，就是在很长输出的时候尽量还是会有一些问题。",
      "speaker": "发言人5"
    },
    {
      "time": "02:37:30",
      "text": "对的，那新阳你们怎么解决这个问题呢？",
      "speaker": "发言人1"
    },
    {
      "time": "02:37:34",
      "text": "Long complex的问题。我们这个其实也是我们最近一直在思考的一个问题。我们目前的inform其实还是最简单的，就是非常简单粗暴的。你直接把所有问题都塞在context go里面，cloud 200K够到一阵子，直到你差不多go beyond，差不多100到200个step左右。然后我们目前现在有一个half day，现在其实已经快快做完的一个project，其实我们我们管它叫做接近，叫做memory condition ation，就相当于在agent里面，不是所有的step对于你predict下一个action都是那么重要的。比如说我100个turn，可能只有最近的那个20个turn的information是值得保留的。剩下前面80个，他可能其实是你都是可以使直接删掉，甚至把它summarize一下，就保留一点点在那其实是没问题的。",
      "speaker": "发言人4"
    },
    {
      "time": "02:38:14",
      "text": "所以我们现在也在探索这种不同的进行memory canalized的方法。这样子让你的agent在每执行一个action的时候，你的那个cost能维持到一个constant的一个数字，能是一个常数。就是每一轮的input它的那个就比如说每一轮input就in connect永远是32K类似这样子的一个机制。",
      "speaker": "发言人4"
    },
    {
      "time": "02:38:33",
      "text": "这个有什么补充？那就正好聊到那个context，然后也是你这个问题，就最近用这coding agent这个踩雷的地方，其实我遇见踩雷也是一个广义的context问题。就是你在用那个David的时候，你会发现它有一个feature叫做knowledge。它这个设计的初衷是很好的。就比如说我举个例子，我让他做了一个比如数据分析任务。然后我跟他提醒说，以后你在分析哪类问题的时候，你不要局限一个的新闻，你要去看他的官网和t report。然后这时候戴伦会自己去ebay。",
      "speaker": "发言人6"
    },
    {
      "time": "02:38:57",
      "text": "它这个knowledge本身我觉得是一个很好的一个设计，但它也是一种广义的contact。但其实现在我在实际使用过程中，感觉十次里头有五次是惊喜，有五次是踩雷。所以我觉得这也是一个他需要解决的一个点。这块可能靠模型能力提升就能解决一些，但更多可能也是产品上面的一些设计。但这个可能长期来看会是一个，怎么说呢？这些产品的一个竞争力，比如说一个A店铺跟他用的越久，就好像我给一个实习生教了更多的知识，可能他会让我更不容易迁移到另外一个产品。但现在的话可能是一个一个好坏参半的一个状态。",
      "speaker": "发言人6"
    },
    {
      "time": "02:39:29",
      "text": "对那个knowledges managment的这个功能，我觉得真的非常的惊艳。因为这个我就想就我觉得想他知道他知道哪一些应该留下来对吧？就是他知道哪一些，你不用一个个specific的去去去给他，我觉得这个真的让我觉得非常像一个就是你叫一个实习生。这个进化能力就是新一代的locking。这个新老师可以分享一下有哪些你看来模型还做的不够。",
      "speaker": "发言人1"
    },
    {
      "time": "02:39:52",
      "text": "好的这个地方。Sorry，其实that age，对我我其实感觉这个也算是一个half and hf。就是呃我觉得就是你当你给coding agent做成access的时候，他可能会做一些你意想不到的事情。比如说有的时候我就只是想，比如说我拉了一个open source repository，我只是想让这个agent去读一读这个open source repository，然后帮我看看这个代码怎么写，然后帮我写一写，但是别干别的事儿。但是他有的时候就会趁我不注意，拿着我的give up poking，直接跑去那个open service service这个open的一个。",
      "speaker": "发言人4"
    },
    {
      "time": "02:40:22",
      "text": "第二就是这种相当于就像我前面说的，这个agent会做一些你on unauthorized的一个action。我觉得这个会是一个比如说model层面，包括safety层面，我们需要去关注的一件事情，就是确保这个agent的执行的这些东西是经过一定程度上经过人类批准允许的。但是经过人类批准允许这个问题又是一个。比如说你可能会有非常high level的批准允许。比如说你只要能把这产品做出来，在某个范围之内你做什么都可以。Avers一些非常欢迎Green control，比如说像最近的curse的这种agent mode，他们是每一个action可能都需要人类去approve或者去去reject这样的一个过程。我觉得怎么样子在这两个之间找到一个比较好的baLance，也是接下来比较重要的一件事情。",
      "speaker": "发言人4"
    },
    {
      "time": "02:41:04",
      "text": "行，我就说一个高估的，就是我觉得可能尤其像一些听众可能明确一点就是competition coding不是soft engineering coding。我们经常看见现在比较新的这个bencher，其实它都是就是像怎么说是偏竞赛类型的编程。而实际上这个对模型能力的要求，就尤其比如context external dependency是非常不一样的。所以我们并不一定就是非看到一个模型，比如在一些竞赛类的报名上表现非常好。但是它实际上如果用于coding agent的话，它的表现并不一定是能等同去换算的。这个我觉得是被高估的一点。",
      "speaker": "发言人6"
    },
    {
      "time": "02:41:34",
      "text": "这个也是我们前面提到这个口顶或者这个mass mode能否通向一直艾特这个问题。那你觉得还有什么被低估？",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:46",
      "text": "Thank you. 等一下还是太好了。",
      "speaker": "发言人6"
    },
    {
      "time": "02:41:49",
      "text": "没有被低估。",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:50",
      "text": "对，没有我感觉刚刚pick这个倒是让我想起来了一个被低估的东西。其实就是被高估的，就是大家太过相信这种programme benchmark，并且expect这种program benchmark performance在coding age上perform也会很好。",
      "speaker": "发言人4"
    },
    {
      "time": "02:42:03",
      "text": "这个我们可能问题经常会问，为什么这些open face model coding service mark上明明都跟cloud差不多了，但是在OK in a点上还这么拉跨？我觉得这个是一个点，然后我觉得被低估的其实也在这个X上，我觉得其实大家被低估了，大家一定程度上低估了，现在已经有的frontier model已经能做到一些事情，就是在code age上，他们这些就是这些问题可能你需要一些比较复杂或者比较精妙的一些prom。但是你一旦掌握了这个诀窍，你会发现现有的model其实已经能做出非常多让你觉得非常aggressive事情。就像grand那天就发现了一个神奇的cloud。他就说当agent遇到问题的时候，你就要告诉他，你列出五个可能导致这个问题的hypotheses，然后并且一个个去排查。就这简简单单一句话，就直接让这个AG的能力提升了好几个台阶。就是我觉得现在的防晒model已经能做很多我们想象不到的事情，只不过我们还没有找到正确打开方式。",
      "speaker": "发言人4"
    },
    {
      "time": "02:42:54",
      "text": "所以问题是是我们我们限制了我们限制了这个agent的这个能力。",
      "speaker": "发言人1"
    },
    {
      "time": "02:43:00",
      "text": "对我感觉其实就是之所以像病原前的时候，model训练上面planning那么重要。其实一定程度上来说，如果我们给不了agent这个你要想想五个海报的这种建议的话，agent是其实可以通过reinforcement learning在大量的训练中去总结失败经验，然后总结成功经验，自己去学到一个这个样子的一个技巧。对的。",
      "speaker": "发言人4"
    },
    {
      "time": "02:43:18",
      "text": "行好，看看这个边缘infants怎么样。",
      "speaker": "发言人1"
    },
    {
      "time": "02:43:22",
      "text": "对这个问题我thinking的比较久的原因是因为我在想就是欧斯瑞到底有多可怕。今天我们所讲的高估和低估，其实还是在欧three出来之前的认知，对吧？就我们拿到的model，其实还是我们前一天能拿到最好的。但今天我们可能或者明天我们如果能够拿到three preview版本，或者说什么样的版本，我们可能做就不一样了。所以说我觉得可能大家对模型的高估是去一个有有一个点是在于说，大家现在对模型的期待可能已经上升到了无所不能，然后所有的事情都要面面俱到。",
      "speaker": "发言人5"
    },
    {
      "time": "02:44:00",
      "text": "然后因为其实普通的用户对于AI的认知来说，比如说没有这个AI的background的用户，就像我经常跟经常跟我母亲在讲我是做什么的时候，他其实很诧异。他总觉得好像0几年的时候，人跟机器对话就已经差不多了。就是他他一直觉得好像这个形态早就已经被被解决掉了。对但其实普通人所以说普通人对被AI所要震撼的那个点其实是更高的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:44:27",
      "text": "然后我觉得我们今天高估AI的一个点，就是大家都觉得很强对吧？但老实讲，我我我我其实现在没有人说他能通过图灵测试。我不觉得我不知道说今天这个图灵测试是否还重要。但其实它确实还是我们自己还是能够分辨人跟人癌的本质的区别的。这个可能是一定程度上今天的模型其实已经很强大了，但大家对它的期待其实是真正能够通过测试。",
      "speaker": "发言人5"
    },
    {
      "time": "02:44:52",
      "text": "但是他我觉得他现在还没有。但相对来说我觉得低估的一点就是我觉得大家对模型的创造力其实是有低估的。其实刚刚其实信号也讲到了，就是你你有你有更magic promise，可能就会激发出不同的模型的形态。",
      "speaker": "发言人5"
    },
    {
      "time": "02:45:06",
      "text": "然后像现在的这些model，其实它本质它在pressure的时候，其实已经见过非常多的东西。那我们现在其实是不太能够很好的去evaluate一个model是什么样的水平。这个其实是我觉得被低估的点。就是我觉得人类很多想象力很匮乏。我们其实是很难找到非常好的场景去验证一个其实模型已经有的能力。但是我们不知道的东西又回到。",
      "speaker": "发言人5"
    },
    {
      "time": "02:45:28",
      "text": "benchmark的问题。好的，今天我们真是聊了非常久，非常感谢大家跟我们聊到最后。我觉得我们就聊的非常的全面。但是我觉得我们还处在刚刚被欧文震撼的这个过程中。我想接下来就像冰原说的，等到我们对o three有了更多的了解，然后包括像17还是新瑶的这个over hands，被更多人用了以后，我相信也许用不到一年，也是半年以后，我们又可以回来再聊这个话题。",
      "speaker": "发言人1"
    },
    {
      "time": "02:45:54",
      "text": "我想又会有很多新的发现。我觉得真的本来就是上半年大家觉得好像很多事情静止下来，好像没有大的更新了。然后突然到了Q4的最后一个季度的时候，突然觉得又重新燃起了很多新的希望。以及我们之所以组织大家来进行这些讨论，能够吸引到更多的，也想要像新窑、像pick、像飞跃一样来创造未来的创业者以及加入这行业。",
      "speaker": "发言人1"
    },
    {
      "time": "02:46:17",
      "text": "以上就是本次播客的全部内容，感谢大家的收听，希望对你有所启发。如果你喜欢我们播客的内容，欢迎你点赞分享，在评论区写下你的心得。另外onboard也有听众群了，添加小助手微信ID on board 666。再说一次非常好记欧博666，加入听众群了解更多互动机会。另外如果有喜欢两位主播用爱发电，也可以在小宇宙给我们打赏，请我们喝个咖啡。如果你在用apple procs收听，也希望你能花几秒钟给我们打个分，打个五星好评，让更多人可以了解到我们我们下期再见，继续更多干货。",
      "speaker": "发言人1"
    }
  ],
  "lab_info": {
    "summary": "在这次讨论中，参与者探讨了人工智能（AI）在编程代理领域的潜力、应用以及面临的挑战。尽管AI代理在特定数字领域显著提高了生产力，其在创造性工作和任务执行上的潜力仍待开发。讨论指出，AI在编码及其他任务上的能力在迅速提升，但模型理解代码上下文和执行中的问题仍需解决。此外，讨论还涉及了AI代理的成本、性能管理和优化，以及对技术的高估与低估问题。整体而言，对话展现了对AI技术发展的乐观态度，同时也强调了实际应用中的复杂性和挑战。讨论还触及了AI在编程和软件开发中的进展，AI助手的实用性与限制，以及未来工作与团队协作的变化。随着AI能力的增强，伦理和安全问题也变得日益重要，要求在追求技术进步的同时，重视技术的正确使用和管理。",
    "qa_pairs": [
      {
        "question": "coding agent在最近有什么重大进展？投资人如何看待coding agent的应用和影响？",
        "answer": "最近几个月，coding agent完成了两级跳式的升级，从最初的超级编程助手科sir发展到replay agent wind surf free，再到David的发布展示了自主agent能够独立完成复杂任务的能力。同时，OpenAI在12天内发布的模型OpenAI o three，在多个编程和数学挑战性benchmark上超越了大部分人类表现，刷新了我们对大语言模型能力天花板的认知。投资人戴雨森表示，通过使用coding agent，他在非程序员身份下也能完成一些投资圈内的数据收集和爬虫类工作，并且发现其在投资决策支持方面具有惊艳表现，推荐给真格基金同事后也得到了积极反响。",
        "time": "00:00:15"
      },
      {
        "question": "coding agent在实际应用场景中有哪些令人惊喜的表现？",
        "answer": "李真分享了他们如何利用coding agent帮助国内电影导演团队将剧本拆解、翻译等需求转化为实际的产品落地，大大降低了原本只有专业程序员才能完成的开发门槛，使非技术人员也能通过agent进行迭代和创新。",
        "time": "00:06:15"
      },
      {
        "question": "在AI领域，2025年有哪些核心议题值得关注？",
        "answer": "2025年AI领域的核心议题将围绕coding agent以及强化学习为新范式的OSB系列。这一期我们有幸邀请到国内和硅谷coding agent领域的创业者、大模型研究员及投资人等多位重磅嘉宾，共同探讨这一话题。",
        "time": "00:01:28"
      },
      {
        "question": "这次讨论有哪些嘉宾参与，并且他们的角色是什么？",
        "answer": "这次讨论邀请了多位业内资深人士，包括replay agent的核心成员李珍，阿里巴巴千问的coding负责人会宾员，开源项目all hand AI的CTO王馨瑶，以及真格基金管理合伙人戴雨森和一位17岁就开始在AI领域创业的青年创业者peak。他们将从不同角度分享对coding agent及其未来应用的理解和见解。",
        "time": "00:01:49"
      },
      {
        "question": "开源项目open hand agent目前在日常工作中起到了怎样的作用？",
        "answer": "王新阳介绍，在过去的一个月里，open hand agent在他们的日常open source软件项目开发中发挥了实质性作用，成为像人类工程师一样的存在，每天活跃在code report的各个角落，修复各种bug，甚至承担了大量原本需要人工完成的重复性工作。",
        "time": "00:07:49"
      },
      {
        "question": "在技术迭代过程中，你们团队是如何进行的？",
        "answer": "我们整个team通常会遵循一种逻辑进行技术迭代，从通用的纤维（或称为“困”）出发，通过queen进一步生成queen coder。这个coder可以被用于完成下游的各种任务，无论是真实场景的任务还是辅助任务。",
        "time": "00:12:16"
      },
      {
        "question": "Pek作为一名特邀嘉宾，能否分享一下他对最近在探索的agent产品的看法？",
        "answer": "我是pick，来自正规基金的ER，有产业界LP经验，专注于搜索和语言模型相关领域。最近我对agent产品感到很有趣，尤其是尝试用AI去理解与解析代码。例如，我让open hands帮我讲解open devin的架构，结果令人意外地得到了一个初步但不完全成功的模型。",
        "time": "00:12:42"
      },
      {
        "question": "pick作为今天的主持人，最希望与大家讨论哪些话题？",
        "answer": "我最希望讨论的话题是关于模型层面的进展，尤其是推理模型和Coder模型的结合。例如，当前推理模型在迅速发展，而Coder模型已经趋于可用状态。在Devin产品中，我发现了一个单独的planning set，它可能对微信有更强的能力，同时对Coder模型的要求也很高。我还关注两者是否会在未来融合还是保持各自的专业方向。",
        "time": "00:13:37"
      },
      {
        "question": "对于agent框架，pick最感兴趣的是什么？",
        "answer": "pick对agent框架中如何更好地表达模型能力的问题感兴趣，包括相同模型在不同agent framework下的表现差异以及模型变化时能力的变化，并非与模型参数线性相关。",
        "time": "00:14:07"
      },
      {
        "question": "对于regular（常规）用户，pick希望讨论哪个方面的问题？",
        "answer": "pick关注的是用户在使用agent产品完成开发初期阶段后，面临的工程能力不足问题。许多用户虽然能通过这些工具完成初步的产品开发，但在部署、维护、内容管理等方面卡在了deployment这一环节，这体现了软件开发生命周期中后续维护管理的重要性。",
        "time": "00:14:35"
      },
      {
        "question": "信宇森能否谈谈他对近年来coding agent产品演进的看法以及为何重视这个领域的机会？",
        "answer": "编程一直是AI领域的重要部分。从ChatGPT到当前阶段，AI编程经历了三次主要进化。最初ChatGPT仅能根据prompt编写代码并直接输出，缺乏上下文理解与调试能力。随后get hub copilot进步显著，AI能读取整个code base提供上下文，但仍需用户手动粘贴代码至IDE调试。随着curse和windows的发布，AI开始具备更强大的next action prediction能力，能生成更长代码块并预测用户需求，支持文件创建和修改，实现了自动化编程3.0阶段。而David的出现，则标志着AI编程进入了一个新范式，它具有完整的任务规划能力，能在异步状态下自主完成复杂任务，无需持续注意力，并能与其他工具如snack深度集成，实现工作规模化扩展（scaling law），这为人类提供了第三种工具类型，既不需要持续关注又可以自主完成创造性工作的工具。",
        "time": "00:16:32"
      },
      {
        "question": "在我们聊到David之前，你认为真正意义上作为coding agent的代表是哪个产品？",
        "answer": "我认为真正意义上去GA的coding agent应该就是replay agent了。",
        "time": "00:22:03"
      },
      {
        "question": "能否请李振更深入地分享一下reagent是做什么的，以及从一开始做这个产品到现在有哪些重要的迭代过程可以跟大家分享？",
        "answer": "当初我在GPT4发布后发现与GPT4的合作效率远高于传统工程师团队，并决定all in coding agent。replay agent最初是一家做online IDE的公司，致力于提供一个无需下载、在线编写代码并配备好环境、支持部署等功能的产品。关于产品形态上的迭代，我们开始时更接近asynchronous one ed模式，但根据用户反馈，我们后来增加了更多与用户的交流、透明度和反馈机制，并推出了一个更快的edit系统，让用户可以更快地找到文件并进行编辑，同时让agent以更自主的形式存在。",
        "time": "00:23:20"
      },
      {
        "question": "从0到1和生成一个PR这两个问题在产品形态上有何不同？",
        "answer": "虽然都属于agent范畴，但解决问题的焦点不同。从0到1主要是帮助用户从想法到实现，涉及计划制定、代码编写、环境搭建等；而生成一个PR则更关注对已有代码base的操作，需要理解项目结构、搜索能力以及生成内容的准确性。两个需求虽然同时存在，解决的问题却有很大差异。",
        "time": "00:26:19"
      },
      {
        "question": "对于使用replay agent完成从0到1的项目后，用户是否会留在replay agent平台还是转移到其他平台进行生产部署？",
        "answer": "大部分用户会在replay agent或类似平台继续增强agent能力并购买产品，甚至有些用户已经将他们的产品上线并在网上获得收入，将replay agent作为快速验证产品市场契合度（PMF）的一个工具，提高了创业者的开发速度和验证idea的效率。",
        "time": "00:28:22"
      },
      {
        "question": "除了加入system之外，从replay agent发布到现在，还有哪些更新对提高用户体验和performance有较大帮助？",
        "answer": "更新主要包括增强与各类服务的integration能力，确保用户能将产品无缝接入如OpenAI、Firebase数据库、Stripe等；改进代码编辑功能，优化编辑方式和文件上下文呈现；维护和提升数据库性能，保证代码部署可用性；对UI进行重构和美学升级，采用现代框架如React和Next.js，加入AI抓图功能，调整美学元素和提供自定义工具，让agent工作更直观地体现在UI上，提升了用户体验和视觉效果。",
        "time": "00:30:40"
      },
      {
        "question": "在用户从0到1的阶段，你们的产品能否支持用户更长的生命周期并实现从1到10的快速增长？",
        "answer": "我们希望用户能从0到100，不仅帮助他们在初始阶段成功，还会伴随他们成长，解决从1到100过程中遇到的各种问题，如数据库稳定性、安全性及数据迁移等。这些是传统软件公司在发展过程中常遇到的传统问题，我们也会逐一攻克。",
        "time": "00:34:03"
      },
      {
        "question": "agent是否有可能在未来完全覆盖现有云服务场景，甚至成为所有云厂商的前端？",
        "answer": "有可能，但我们会结合外部服务来提供更全面的解决方案。agent最初会选择适合其发展的技术栈，在scale和安全性上做得更轻松。最终，agent可能会成为一个集成多种云服务的前端，目标依然是帮助用户做好产品并连接各种服务。",
        "time": "00:35:24"
      },
      {
        "question": "实际使用产品时，与预期有何不同？上层产品比拼的是什么？AI能力增强后，对覆盖的use case会有怎样的影响？",
        "answer": "实际使用产品后，我发现它符合预期，能够高效执行任务。上层产品比拼的是如何利用底层模型以及根据用户需求设计友好的交互方式。随着模型性能提升，产品会自然受益，但我们也会根据不同的任务需求选择合适的模型，实现更好的效果。",
        "time": "00:36:04"
      },
      {
        "question": "open hands项目是如何开始的，以及公司的技术与商业决策有哪些？",
        "answer": "open hands项目的起点是David的一个twitter demo，该demo给说话人留下了深刻印象。加入open hands团队是为了准备下一个项目，即构建一个类似David demo中的agent，并为学术界的前沿研究提供一个open source代码基础。团队通过快速迭代和集成最新研究成果，最终决定将项目转化为公司。open hands的核心架构包括一个事件流驱动的agent，负责处理历史事件并生成新的行动；一个agent runtime，负责将事件流中的行动执行成真实环境的操作；以及用户与agent交互的逻辑，用户可以直接向事件流中发送消息，影响agent的行为。",
        "time": "00:42:17"
      },
      {
        "question": "在未来的多agent系统中，为何要采用一种future proof的架构设计？",
        "answer": "我们目前虽然只有一个web UI，但未来可能会有多个agent同时处理同一项任务。为了适应这种变化，我们特意设计了一个灵活的adventuring architecture，以便在未来多个用户或agent可以连接到同一个部分，并根据历史action observation来生成新的action，最大程度地享受到model更新带来的improvement。",
        "time": "00:43:00"
      },
      {
        "question": "对于规划（planning）在模型中的角色，您认为它是应该保持复杂还是简单化？",
        "answer": "规划领域经过社区大量讨论和尝试后发现，直接使用模型本身进行决策往往效果最好。规划能力在一定程度上可以被视为模型本身的能力，不一定需要额外的external规划。例如，在Anthropy C的实践中，他们通过更soft的方式指导agent解决问题，即直接给出一系列步骤，结果表明在模型足够强大时，这种方式效果反而最好。",
        "time": "00:44:46"
      },
      {
        "question": "规划在实际应用中的挑战是什么？",
        "answer": "规划的一大挑战在于现实情况往往与预设计划不符。当agent按照预先构建的plan执行时，可能会遇到未预见的问题。在这种情况下，需要考虑引入工程角色以应对plan的动态更新和agent回复机制，以及如何准确预测到replan的时机等复杂问题。",
        "time": "00:45:45"
      },
      {
        "question": "关于运行时环境的选择，如使用VM还是container，有何看法？",
        "answer": "虽然可以从David open end的实现中看到使用VM的优势，比如直接运行在图形界面环境下的chrome，但在实际应用中，我们倾向于使用docker容器，因为它可以更高效地管理和启动大量实例，尤其适合进行大规模实验和快速响应需求变化。尽管两者在本质上没有太大区别，但docker在扩展性和灵活性上更适合我们的需求，而VM可能更适合需要图形界面或特定软件环境的场景。",
        "time": "00:47:05"
      },
      {
        "question": "对于简化action space和computer use的发展趋势如何看待？",
        "answer": "我们非常看好简化action space和computer use的发展，因为它们能够让模型以更自然、更接近人类的方式来与软件和世界互动，而不仅限于通过API接口。随着技术进步，computer use的准确性等限制将会得到改善，最终有望成为通用agent的一个重要组成部分。同时，像OpenAI等团队也在探索如何将这些能力融入到基础模型中，以简化agent的action space。",
        "time": "00:50:05"
      },
      {
        "question": "现在有一个ongoing p2项目，它具体是做什么的？",
        "answer": "这个ongoing p2项目主要是使用computers的一个功能，最近新集成了一个visual browsing agent。这个agent能够在支持微选的所有模型上运行，通过截图并识别其中的可交互元素，将这些元素以text形式提供给agent，让其能够通过点击这些元素与网页进行交互。",
        "time": "00:53:00"
      },
      {
        "question": "computer use与当前的vision LM有何不同？",
        "answer": "computer use可能是基于像素间距的交互方式，相比而言更难操作。而目前的vision LM对于当前的vision任务有较好的支持，但未来其他供应商可能会跟进这方面的能力，并可能形成新的标准。",
        "time": "00:53:39"
      },
      {
        "question": "openAI发布的API与之前有何不同？",
        "answer": "这次openAI发布的API不同于之前anthropic的to b基因，不再依赖于OpenAI先发优势，而是直接发布了API，让用户可以选择API形式或vision形式来使用。",
        "time": "00:54:01"
      },
      {
        "question": "在早期产品发展中，团队做了哪些重要的技术决策？",
        "answer": "技术相关的重大决策是在早期open David野蛮发展期间，团队将后端与agent部分明确分离。确保研究员只需关注如何使用agent迭代和做研究，而无需关心UI或前端集成问题，通过清晰划分边界，让研究员可以独立开发并使用agent。",
        "time": "00:55:08"
      },
      {
        "question": "团队如何解决不同角色（如研究员和产品经理）之间的需求平衡问题？",
        "answer": "团队决定将后端解耦并提供两种使用方法：一种是直接接入前端产品，另一种是通过特定接口接入预先构建的一整套100 harness。这样既满足了前端用户体验的需求，也满足了研究员和agent开发者的需求。",
        "time": "00:56:39"
      },
      {
        "question": "为何决定做一个open source版本的coding agent？",
        "answer": "团队决定做open source版本的coding agent是因为看好开源社区的力量，希望凝聚创造力一起做出一个酷炫的东西，并从开源中受益，同时也想回馈社区，推动AI时代的开源项目越来越多。",
        "time": "00:59:14"
      },
      {
        "question": "开源对于open hands项目的意义是什么？开源对于AI技术和研究的重要性体现在哪些方面？",
        "answer": "开源使得项目透明化，增强了社区凝聚力，提高了架构和选型的兼容性，同时打消了商业公司对于未来的顾虑，让所有人都有机会贡献自己的力量，共同创造属于每个人自己的AI。开源对于AI技术的普及和民主化至关重要，能让重要技术普惠于所有开发者，促进科研进展，降低开发者获取和使用先进技术的成本，同时也为开发者的创新提供了基础设施支撑。",
        "time": "00:59:51"
      },
      {
        "question": "开源数据是否难以收集，因为开发者可能不会在自己的环境中使用游戏的multi step数据？",
        "answer": "是的，开源部分的数据确实可能只在内部环境中处理，难以获取游戏的multi step数据。",
        "time": "01:03:35"
      },
      {
        "question": "对于产品来说，定制化功能（customization）的作用是什么？",
        "answer": "定制化功能类似于早期open deven阶段，它允许用户根据自身需求修改和扩展产品，如通过编写customized script来解决特定问题。社区可以贡献定制化库，供他人分享和使用，以适应更多use case。",
        "time": "01:03:43"
      },
      {
        "question": "开源项目如何帮助收集更多数据并吸引用户？",
        "answer": "开源项目鼓励用户将其应用于开源项目中，通过这种方式收集更多use case，让产品在各种场景下表现更好，并赢得对产品安全性和可控性的信任。",
        "time": "01:04:24"
      },
      {
        "question": "在赛道上，最终比拼的核心竞争力和差异化体现在哪里？",
        "answer": "核心竞争力可能在于能否提供源代码给企业，避免被单一供应商锁定；同时，在监管严格的行业，开源产品的透明性和安全性有助于赢得客户的信任。差异化可能体现在对不同use case的优化、与IDE的良好集成以及构建强大的生态系统和特定use case的定制化解决方案。",
        "time": "01:04:56"
      },
      {
        "question": "社区反馈对产品开发有哪些积极影响？",
        "answer": "社区开发者提供的反馈帮助识别了最需要的feature，并从用户教育角度提供了 valuable insights。同时，用户的广泛使用和多种use case丰富了产品设计，促使团队在做决策时考虑更多通用性和未来扩展性。",
        "time": "01:07:40"
      },
      {
        "question": "O-LLM模型对于coding模型领域的影响及最新进展如何？",
        "answer": "O-LLM系列模型展现了强大的能力，证明了通过长期记忆和训练可以实现类似人类的智能表现。尽管目前主要关注验证任务，但该系列模型已展现出断崖式的技术领先水平，并有望在未来的产品中得到更多应用。特别是在昨天晚上发布的all three模型中，其在某些关键指标上的表现超出了预期，证明了基于当前技术路线可以实现显著的性能提升。",
        "time": "01:10:29"
      },
      {
        "question": "O-LLM模型与之前模型相比，是否仅是更多数据和计算资源的运用，还是有大的技术突破？",
        "answer": "O-LLM模型不只是简单地依赖更多数据和计算资源，它在学习和推理模型结合方面实现了突破，能够在蓝莓阶段就进行online探索并结合alignment技术，从而呈现出完备的推理能力，这是之前模型所未能达到的。",
        "time": "01:13:08"
      },
      {
        "question": "在当前阶段，您认为open I的预训练是否已经达到了一个饱满的位置，以及它在element上的领先优势如何？",
        "answer": "我认为open I在预训练阶段已经做得相对饱满，但在element上他们有更多的经验和优势，领先优势更为显著。因为open I提前多年投入大量资源进行大模型训练和数据收集整理，这使得他们在该领域比我们领先3到4年。",
        "time": "01:14:04"
      },
      {
        "question": "如果当前的precision model还不够成熟，通过仅优化lemon能否有效追赶open I？",
        "answer": "如果我们的precision model还不够好，那么单纯依靠lemon去追赶open I将会非常困难，因为open I在元素层面的领先会传导到base model上，而如果没有一个足够好的压力模型（即precious model），在元素层面的进步将无法有效提升整体上限。",
        "time": "01:14:49"
      },
      {
        "question": "为什么在coding的角度探索element的技术发展很重要？",
        "answer": "从coding角度看，理想的模型应与开发环境和编译器对齐，确保写出的代码能通过所有测试并实现预期功能。良好的编码模型可以极大帮助解决编码问题，同时也能应用于真实软件开发中，实现智能感知和完美对齐。",
        "time": "01:16:14"
      },
      {
        "question": "对于gold agent任务，为何投入inference time的computing划算？",
        "answer": "在如gold agent这样的任务中，用户愿意花费时间等待AI进行大量推理以解决问题。因此，投入inference time的计算资源是非常划算的，并且能够提供更强大的服务。",
        "time": "01:16:51"
      },
      {
        "question": "为何选择基于通用指令集而非专项模型来构建QWQ模型？",
        "answer": "当初设计QWQ模型时，我们希望它能成为一个全面的阅读模型，兼顾code和reasoning能力，而非单一专项模型。这样做是为了激励更多人参与进来，同时未来仍会探索更垂类的专项模型。",
        "time": "01:18:16"
      },
      {
        "question": "编码模型、计算机程序理解和AGI探索之间是否存在一种闭环关系，推动AGI的自迭代发展？",
        "answer": "非常有可能形成这样的闭环关系。编码和计算机程序理解可以被视为高级推理任务，是构建智能代理的基础。随着模型逐渐具备更强的推理、自我进化和在线学习能力，它们最终将能够形成一个循环，导向AGI的发展。",
        "time": "01:19:09"
      },
      {
        "question": "O系列模型在解决复杂编程和数学问题上展示的能力，与真实世界中完成多步骤推理和验证任务的能力之间有何关系？",
        "answer": "O系列模型主要展现了逻辑推理和思维归纳能力，但在真实世界中解决复杂任务时，除了推理，模型还需要对世界的认知和适应开放环境的能力。要实现泛化，模型需要强化在模糊环境下的适应性和定义反馈机制。",
        "time": "01:21:31"
      },
      {
        "question": "O系列模型能解决未见过的问题，与成为能发现问题并提出创新性科研课题的AI研究员之间有何异同？",
        "answer": "目前O系列模型可以解决一些超出其训练知识库的问题，但要成为能定义新科学问题、探索未知领域的AI研究员，模型还需结合逻辑、创造力和安全性。目前模型可能仅能实现部分科研领域的排列组合计算，而定义新问题和创新研究课题可能是一个逐步递进的过程。",
        "time": "01:23:34"
      },
      {
        "question": "在短期内，是否有可能将一个一千多刀才能解决的问题，变成只需十刀就能解决？",
        "answer": "是的，我认为短期内可能会有这样的发展趋势，而且这是一个开放性问题，open source model有可能在这个性能成本上实现突破。",
        "time": "01:25:19"
      },
      {
        "question": "现在使用model router的情况是怎样的，它是否代表了一个潜在的发展方向？",
        "answer": "现在大家会用model router将简单问题交给更简单的模型处理，而复杂问题则交给更强大的推理模型。这确实是一个潜在的发展方向。",
        "time": "01:25:52"
      },
      {
        "question": "Bench测试对于agent解决github issue的能力如何，是否忽略了现实生活中接触的很多问题？",
        "answer": "Bench是一个很好的测试工具，但它忽略了真实公司环境中agent执行end to end任务的能力。例如，新的bench bar \"asian company\"模拟了一个公司环境，让agent与模拟人类在slack中交互并完成任务，这是一个值得关注的发展点。",
        "time": "01:26:09"
      },
      {
        "question": "OKC match达到70%甚至80%的准确率，能否直接代表该模型完成用户所有任务的80%？",
        "answer": "这个问题很重要，目前一致认为从20%到50%对于人类开发者是一个体验上的飞跃，但对于70%以上是否能代表真实工作场景下的表现还需进一步探讨。",
        "time": "01:27:05"
      },
      {
        "question": "是否有可能agent的表现提升是因为之前模型训练时的数据被更强大的模型重新利用？",
        "answer": "是的，存在潜在的数据泄漏问题，即更强的模型可能从历史数据中学习到了信息，这会影响用户实际体验。因此，评估模型能力提升来源（是本身能力提升还是回想已有信息的能力提升）非常重要。",
        "time": "01:27:27"
      },
      {
        "question": "对于openAI展示的70多分的分数，这意味着什么？",
        "answer": "这个分数并不足以证明产品的完备性，openAI拿出的成绩单并不令人震撼，我们需要看到它在真实场景中的表现和解决问题的能力。",
        "time": "01:28:18"
      },
      {
        "question": "是否认为当前的基准测试已足够完备，还是需要更难的基准来衡量模型的泛化性？",
        "answer": "现有的基准测试可能还存在局限性，未来需要提出更难的基准，考虑动态更新机制以评估模型在更真实、更具挑战条件下的表现。",
        "time": "01:31:44"
      },
      {
        "question": "对于强大模型在编码数学等任务上超过人类后，是否还能应用于日常生活中的通用智能任务？",
        "answer": "短期内，专家化模型可能更为有效，但在某些特定领域超越人类后，将有助于AI整体迈向新的台阶。长期来看，期待涌现出能够解决特定问题的通用AGI模型，即使它可能来源于专门领域的突破。",
        "time": "01:35:05"
      },
      {
        "question": "除了我们今天讨论的内容，你认为今年在coding agent领域还有哪些重要的事件值得关注？AI在coding agent领域的应用有哪些趋势或表现？",
        "answer": "今年前端开发领域有很多令人瞩目的进展，许多公司开始重视利用现代前端工具和完善的工具链进行代码编写。对于coding agent来说，David在release时提到他们在前端任务上的优势，这可能是由于前端任务相对统一且易于实现，AI技术在这种环境下更容易发挥效能。AI能够精准找到适合的模型或开源库来解决编程任务，而不是从头开始编写代码。例如，在处理GitHub issue时，AI能生成多个解决方案并结合reward模型选择最佳方案，这是一个值得关注的发展方向。此外，coding agent也在探索inference和multi-solution ranking方案，以及如何将多种方案与实际业务场景结合。",
        "time": "01:36:44"
      },
      {
        "question": "对于coding agent领域而言，还有哪些重要的趋势或研究方向？",
        "answer": "其中一个重要的趋势是整个产品能力的要求会更高，包括提高agent在各种任务上的表现，不仅限于模型层面的竞争。同时，如何将AI应用于解决真实世界的产品问题，如循环slack message等复杂情况，以及从研究到产品转化的过程中面临的gap，也是当前需要关注的挑战。",
        "time": "01:39:42"
      },
      {
        "question": "是否有基准测试（benchmark）来评估coding agent的表现？",
        "answer": "有一篇名为“agent company”的论文提出了一个基准测试，其中包含了模拟公司内部各种任务的场景，如与同事沟通、修改代码、执行代码、安排会议等。这个基准旨在测试agent在公司架构下的全面管理能力，而不仅仅是编程能力。",
        "time": "01:40:22"
      },
      {
        "question": "随着coding agent的发展，是否意味着未来工程师的角色会发生变化？",
        "answer": "是的，随着AI技术的发展，很多重复性工作将被替代，工程师需要转向更创造性、更具策略性的工作，如提出好的问题、设计产品市场契合度等。未来工程师会更像资本家或管理者，控制AI去做事情，而具体编码工作将由AI接手，人类则专注于创新和整体流程设计。",
        "time": "01:44:30"
      },
      {
        "question": "未来程序员需要具备什么样的能力和技能？",
        "answer": "未来的程序员应具备更强的产品思维，能够借助AI完成从构思到执行的整个流程，而不仅仅是编写代码。优秀的程序员将更像创始人，能够借助AI提高效率，专注于创造性价值的提升。同时，由于AI将处理大量冗余工作，人类工程师也将进化，转向更高层次的创新活动。",
        "time": "01:45:29"
      },
      {
        "question": "未来代码是否是AIGC的一部分，能够创造人类目前难以想象的事物？",
        "answer": "是的，未来代码很可能是AIGC的一部分，它能创造出富有想象力的产品，是人类与AI程序员共生关系的一个体现。这种共生关系可以实现合作、听取意见，并共同创造出更有趣的事物。",
        "time": "01:47:04"
      },
      {
        "question": "AI agent对你们机构内部带来的具体变化是什么？",
        "answer": "现在最直观的感受是对于新feature和新工作的感受发生了变化。以前需要考虑时间、团队资源和优先级，而现在借助AI agent，想象力成为了主要限制，而非自身能力限制。例如，有创始人仅依靠少量程序员和AI agent，通过并行实验实现了快速开发和迭代。",
        "time": "01:48:11"
      },
      {
        "question": "AI agent对人类在编程领域的角色有何影响？",
        "answer": "AI agent使得人类在编程领域越来越重要的是知道自己想要什么，而不一定需要详细了解具体实现方法。例如，即使人类不懂前端开发，也能通过AI agent来理解和实现前端逻辑，从而探索更多产品可能性。",
        "time": "01:49:31"
      },
      {
        "question": "如何明确指示AI agent并设定其行动范围？",
        "answer": "作为管理者，需要将目标准确量化并告知agent，这是正确进行prompting和布置工作的关键。同时，如何限定agent可执行的操作范围不仅是一个产品问题，也是关乎安全和产品设计的重要议题。",
        "time": "01:52:03"
      },
      {
        "question": "AI agent如何协助进行软件测试和代码审查？",
        "answer": "AI agent目前并未主动设计去执行测试任务，而是将可能性暴露给用户，让用户自行决定最佳实践。但这同时也带来用户教育的问题，即用户需了解agent的能力边界，避免盲目使用导致问题。",
        "time": "01:52:49"
      },
      {
        "question": "AI agent是否可能在未来主导编程过程，而人类起到辅助作用？",
        "answer": "未来存在可能性，即AI agent可能会基于自身对项目的全面了解，识别自身能做的事情并指导人类开发者，甚至分配任务。人类则负责确认、反馈和最终把关，形成人类与AI协同工作的新型编程模式。",
        "time": "01:55:30"
      },
      {
        "question": "按照当前AI的发展速度，未来公司在招聘时会如何考虑使用AI还是先招人？",
        "answer": "随着AI技术进步，如agent成为组织中最活跃的controller之一，未来公司在成立时可能不再局限于传统招聘流程，而是思考如何利用AI提升效率和创新能力。这将对组织构架和人才需求产生深刻影响。",
        "time": "01:56:42"
      },
      {
        "question": "在AI模型和人类工程师的合作中，AI能否在未来承担更多复杂任务，并且人类工程师的角色会发生怎样的变化？对于AI agent来说，怎样才能确保它在未授权的情况下不会执行超出人类许可的行为？",
        "answer": "AI模型在未来可能会承担更复杂的任务，例如代码审查、决策制定等。人类工程师的角色将转变为监督和最终审批的角色，不再负责日常的编程工作。尽管人类工程师不会消失，但其角色会发生变化。这是在模型能力方面需要关注的关键点，确保AI agent在执行任务时具备严格的行为约束和边界控制，即使在自主学习和优化过程中，也不会未经批准做出违规操作。",
        "time": "01:57:33"
      },
      {
        "question": "AI agent要实现从junior engineer到senior engineer的转变，需要提升哪些方面的能力？如何为AI agent提供正确的信号以便其执行任务，并提升其自主性和scale能力？",
        "answer": "首先，AI agent需要能够访问与人类相同的信息来源，包括公司内部的各种系统和沟通渠道，以获取完整的信息。其次，在模型本身的能力上，包括规划能力、从错误中恢复的能力以及更强大的proactive能力，即在开始行动前能对整体目标、现有架构和可能方案进行全面评估和思考。关键在于建立高效的反馈循环，例如AB测试、用户反馈、点击率等指标来评估模型的效果，并通过这些信号指导agent自我优化和迭代。在编程领域中，由于code具有强烈的验证信号（如语法正确性和通过测试），AI能做得很好。当有足够的反馈时，agent甚至可以独立完成产品构思、开发MVP、推广、收集用户反馈并据此改进整个产品流程。",
        "time": "02:04:48"
      },
      {
        "question": "提升模型planning能力的主要途径是什么？",
        "answer": "提升模型planning能力的一个重要方向是增加高质量的planning相关数据，比如从开源项目中拆解commit message作为规划实例，以及利用合成数据增强模型的规划能力。此外，利用agent产品中的用户feedback作为强大的planning信号，通过类似Monte Carlo的推测方式，根据用户历史反馈为agent提供奖励，使其在不同改动中选择最有效的策略。",
        "time": "02:05:04"
      },
      {
        "question": "在AI agent的发展中，您认为接下来让agent具备更多进production能力的机会有哪些？",
        "answer": "接下来agent能力中有很多机会，例如网页阅读、API调用、运行测试、自我验证等。比如，有一些公司将专门研发技术将网页转换成适合agent读取的格式，或者设计让agent更好地接入特定API的服务。此外，针对memory management、execution控制等需求，也会催生出许多有价值的agent框架。",
        "time": "02:08:51"
      },
      {
        "question": "对于AG英特尔工具在A诊中的应用情况，您有什么补充说明的吗？",
        "answer": "我们接触过的AG英特尔工具非常多，特别是在run time方面，因为如何解决执行任意代码的问题非常棘手。市面上已有如e to b等公司提供的第三方runtime产品，而我们open source项目则希望提供一个平衡方案，让用户既能直接使用自有的工具，也能方便地集成第三方工具，以满足不同用户的需求。",
        "time": "02:11:08"
      },
      {
        "question": "AI agent的落地应用是否能由模型公司而非产品公司来实现？AI agent之间如何互动，以及是否可能出现混合多个角色的agent？",
        "answer": "AI agent的应用是否可以落地，以及由模型公司还是产品公司来完成，确实是一个值得关注和探索的问题。从年初到现在，随着AI reasoning能力、编程能力和使用工具能力的大幅提升，我们看到了AI agent在数字世界的基础已经奠定，接下来可能会看到越来越多的agent为各种任务提供解决方案。随着AI技术的进步，未来可能会出现不同类型的agent针对不同的工作场景，如数据分析师、销售、产品经理等。这些agent不仅能够独立完成各自领域的工作，还可能通过互动协作，比如一个产品经理的agent在做产品规划时，能够映射到编程部分，从而提高整体工作效率和token usage，降低对人类注意力的依赖。",
        "time": "02:13:25"
      },
      {
        "question": "在AI时代，中国的企业服务领域是否会出现新的机会？",
        "answer": "是的，在AI时代，中国的生产企业服务可能会迎来一些新机会。因为当AI能够直接交付工作结果时，企业就如同找外包公司一样愿意付费，这实际上是从人力资源外包转变为智力或生产力外包。",
        "time": "02:18:30"
      },
      {
        "question": "AI如何帮助解决安全问题，特别是在代码执行和软件使用能力增强的情况下？",
        "answer": "随着AI agent能力的提升，人们越来越倾向于将其用于完成一些工作以节省时间。然而，当它们具备更强的代码执行和软件使用能力时，如何确保它们与组织目标和社会价值保持一致，以及如何管理组织内部算力分配等新挑战也应运而生。因此，在安全角度上，针对AI agent的控制和管理将出现许多之前未意识到的新问题。",
        "time": "02:19:17"
      },
      {
        "question": "对于构建下一代agented workflow的团队需要具备哪些特点？",
        "answer": "构建此类产品的团队应具备人才密度高、年轻且富有创造力和执行力的特点。例如，像David团队那样拥有强大的技术背景，既有优秀的AI技术实力，又有对实际工作场景深刻理解和丰富的经验，能够将AI与应用场景紧密结合，实现技术创新与应用。",
        "time": "02:20:47"
      },
      {
        "question": "是否必须训练自己的模型才能做好AIGC相关产品，还是可以更灵活地与现有模型共生？",
        "answer": "创业公司不一定非要训练自己的模型，而是要学会与模型进行共生，根据用户实际需求和工作场景来有效利用模型。David团队的成功在于他们能充分利用现有模型，并对用户工作流程有深入理解，从而实现产品创新和成功。",
        "time": "02:22:46"
      },
      {
        "question": "在中国市场，除了sell work方式外，还有哪些与美国不同的agent相关的机会？",
        "answer": "在中国，新产品进化通常分为copy to china阶段，但也有机会看到基于中国国情和市场需求的创新。在coding领域以外，比如非编码领域，可能会出现大量利用agent快速解决数字世界任务的新产品形态。如果sell work假设成立，中国和美国都可能出现新的产品形态机会，尤其是当AI执行能力超过人类时，agent之间的协作可能会带来全新的想象力和挑战。",
        "time": "02:25:03"
      },
      {
        "question": "在AI互动和生产力方面，你期待什么时候能看到显著提升？",
        "answer": "对于一年内的期待，我希望看到Go golding agent能够真正实现高效实用，让开发工作变得高效，为个人开发者和企业提供更好的工具。而对于三年的期待，则是希望看到AI模型输出时能有一些超出人类理解范围的答案。",
        "time": "02:30:12"
      },
      {
        "question": "对于目前500美金的成本是否合理，你怎么看？",
        "answer": "虽然这个价格对于一些公司来说可能较贵，但考虑到科技发展初期会有高峰阶段，且这种新科技对于软件行业的重要性，需要自下而上的推动方式让更多人使用起来。此外，随着技术进步和成本下降，预计未来能够让更多消费者和程序员直接使用相关产品。",
        "time": "02:30:33"
      },
      {
        "question": "你认为AI能否在未来解决大部分人类难以解决的数学题和coding问题，并且在日常任务上超越人类？",
        "answer": "我对此抱有很大期待，认为AI超越人类在科技和社会发展中将是一个积极的存在。目前AI已经在解决复杂问题上展现出能力，未来有望在更多领域发挥作用。",
        "time": "02:32:04"
      },
      {
        "question": "使用coding agent时，是否遇到过知识管理功能带来的问题？",
        "answer": "在使用过程中，我发现knowledge功能虽然初衷良好，但在实际应用中存在好坏参半的情况，十次中有五次是惊喜，五次是踩雷。这可能是产品设计上需要进一步改进的地方，以确保功能既能提供有价值的信息，又能避免误导。",
        "time": "02:38:57"
      },
      {
        "question": "AI在代码处理方面的准确性和可靠性如何？是否有模型能在保证输出代码正确性的同时，处理较长的代码任务？",
        "answer": "现在AI在处理数据处理脚本时可能会因上下文影响而出现准确性问题。这是一个常见需求，即先给定一段代码，然后要求AI在此基础上进行修改或编写新代码，而这其中确实存在需要解决的问题。目前所有模型在处理长复杂问题时都有待改进，正在尝试通过memory condition等技术优化记忆窗口，以维持每轮执行的成本并减少不必要的信息，但尚未找到完美的解决方案。",
        "time": "02:34:59"
      },
      {
        "question": "AI对长代码的理解和生成能力目前如何？",
        "answer": "目前所有模型在处理长代码时都还有进步空间，尽管已有一定的能力，但在很长的代码生成过程中仍会出现错误。未来需要探索不同的方法来提升模型对长代码的理解和生成能力。",
        "time": "02:36:58"
      },
      {
        "question": "在使用coding agent时，是否存在一些意想不到的行为？",
        "answer": "是的，在给coding agent提供access时，它可能会执行一些未经预期的操作，例如在读取open source repository时不仅限于阅读代码，还可能进行其他操作，如修改或删除代码。",
        "time": "02:39:52"
      },
      {
        "question": "如何看待模型在未经人类批准的情况下执行action的问题？",
        "answer": "这是一个需要关注的安全和模型层面的问题，我们需要确保agent的执行是经过一定程度上人类批准允许的。这涉及到如何在high level批准（如允许在某个范围内自由行动）和每个action都需要人工审批之间找到一个平衡点。",
        "time": "02:40:22"
      },
      {
        "question": "是否有被低估的现象，特别是在模型能力的应用上？",
        "answer": "大家普遍高估了竞赛类编程模型在coding agent中的表现，实际上这些模型在实际应用中的表现并不一定与竞赛成绩直接对应。同时，大家也低估了现有前沿模型在code age上的能力，它们已经能实现许多我们尚未发现的“aggressive”行为，只是我们尚未掌握正确的使用方法。",
        "time": "02:41:04"
      },
      {
        "question": "是否有一些大家认为被低估但实际上被高估的现象？",
        "answer": "大家过于相信program benchmark，并期待它们在coding agent上的表现也会很好，这是一个被低估的现象。实际上，当前的模型已经能通过一些技巧解决复杂问题，只是我们还没有找到正确利用它们的方式。",
        "time": "02:41:50"
      },
      {
        "question": "模型训练过程中，规划的重要性体现在哪里？",
        "answer": "在训练模型时，规划至关重要。如果不能提供agent五个可能导致问题的hypotheses并协助排查，agent可以通过reinforcement learning总结经验教训，自行学习到解决问题的技巧。",
        "time": "02:43:00"
      },
      {
        "question": "对于模型性能和人类对AI期待的讨论，有哪些新的认识？",
        "answer": "大家对模型性能期待过高，仿佛模型应该无所不能；而普通人对于AI所能达到的震撼点其实更高。目前，模型尚未达到通过图灵测试的程度，但其创造力潜力被低估了。同时，我们对模型水平的准确评估也存在低估，因为人类想象力有限，难以发掘和创造验证模型能力的新场景。",
        "time": "02:44:27"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "软件如何改变世界：深度探讨AI编程代理的未来",
        "summary": "在2024年的最后几天，Monica和高宁邀请了一线创业者、大模型研究员以及投资人，深入探讨了AI编程代理（coding agent）的惊人进展及其对软件开发领域的潜在影响。从编码助手到能够独立完成复杂任务的AI代理，再到OpenAI的最新模型，这些技术的发展刷新了人们对AI能力天花板的认识。此外，讨论还涉及了coding agent及强化学习新范式在2025年的可能发展方向，揭示了AI编程代理对未来软件开发和组织模式的重要意义。"
      },
      {
        "time": "00:04:01",
        "title": "AI技术在投资和影视行业中的应用探索",
        "summary": "在AI领域中，投资和电影制作等行业正积极探索如何利用AI技术提高工作效率和创新能力。一些投资者已经开始使用AI工具进行数据收集和处理，而电影导演则利用AI技术将剧本拆解和翻译自动化，从而降低软件开发的门槛，提高生产效率。这表明，AI技术正逐渐改变传统行业的运作方式，为从业者提供新的工具和方法。"
      },
      {
        "time": "00:07:13",
        "title": "王新阳介绍欧汉ZI及其在AI领域的成就",
        "summary": "王新阳介绍了他在欧汉ZI的角色，主要是负责agent quality。他分享了从UIUC转战AI领域的经历，并强调了加入OTZI后，如何通过open dev项目推动公司发展。特别提到了一个转折点，即在11月中旬，他们的agent在swe bench上首次超过50%的sweep entry verify，标志着agent质量的飞跃。这个进步使得agent能够像人类工程师一样实质性地参与到日常的开发工作中，尤其是在修复bug方面表现突出，成为了open hands项目中最大的贡献者。王新阳还分享了他对未来AI领域发展的乐观看法，以及欧汉ZI如何利用AI技术加速软件开发过程。"
      },
      {
        "time": "00:10:12",
        "title": "探讨编码模型的未来和自主迭代的可能性",
        "summary": "最近，开源编码模型受到了社区的广泛关注和喜爱，特别是它能够自我清洗代码数据的功能引发了对未来模型迭代流程可能发生变化的讨论。编码模型不仅在技术探索上取得了进展，还能在数据处理上展现出强大的潜力。通过持续的项目实践和指令调整，编码模型展示了在特定方向上达到顶尖水平的可能性，同时也预示着未来模型可能依靠自身迭代变得更加强大。"
      },
      {
        "time": "00:12:41",
        "title": "探讨编程代理（coding agent）的未来及其在软件开发中的应用",
        "summary": "对话围绕编程代理（coding agent）的最新发展、应用及其对未来软件工程的影响进行深入讨论。主讲人分享了使用Open Devin和尝试通过编程代理实现特定任务的经验，指出这些工具在自我编译、模型理解与应用、以及提高软件开发效率方面的潜力。讨论强调了reasoning模型和coder模型的进展，探讨了这两种模型如何可能融合，以及agent框架如何更好地表达模型能力。此外，还触及了非专业开发者通过coding agent完成软件项目后可能面临的部署和维护挑战。整体上，讨论突出了coding agent在降低软件开发门槛、提升开发效率方面的潜力，以及这一领域内创业机会和未来发展方向的重要性。"
      },
      {
        "time": "00:15:38",
        "title": "AI编程的进化历程",
        "summary": "AI编程经历了显著的发展，起初需要人类提供明确指示来生成代码，到后来能够理解代码上下文，甚至自动完成代码编写、调试和文件管理。这一进化极大地提升了开发效率，展现了AI在编程领域的巨大潜力。"
      },
      {
        "time": "00:18:43",
        "title": "探索工作自动化的未来：自主代理的角色",
        "summary": "自主代理技术，特别是通过异步工作模式，为工作方式带来了革命性的变化。与传统工具相比，自主代理不仅能够执行重复性任务，还能处理需要创造性思考的工作，从而极大地提高了生产力和工作效率。通过虚拟机在云端运行，自主代理能够独立完成任务，无需持续的人类监督，这为工作任务的规模化处理提供了可能。这种技术的应用，如David，能够生成复杂的流程和待办事项列表，自动推进任务直至完成，释放了人类的时间和注意力，开启了一种新的工作与生产力提升的方式。"
      },
      {
        "time": "00:22:02",
        "title": "探讨Replay Agent在编程中的应用与创新",
        "summary": "对话中讨论了Replay Agent作为一种coding agent的功能和价值，特别是它如何帮助用户从完全没有编程经验开始，逐步实现自己的软件开发想法。讨论还涉及了Replay Agent的起源、产品迭代过程以及它与GPT4合作的效率比较，强调了coding agent在现代软件开发流程中的重要性和潜力。此外，还提到了Replay Agent与David等其他工具的不同之处，特别是在帮助用户从零开始构建软件方面的能力。"
      },
      {
        "time": "00:24:53",
        "title": "产品迭代与用户需求适应",
        "summary": "讨论了产品发布后，根据用户反馈进行的调整，包括增加与用户的交互和透明度，以及开发新的产品形态以满足不同用户需求。分析了用户对产品形态的期望差异，强调了产品从0到1的创建与现有代码库上的改进工作的不同需求。同时，通过用户案例展示了如何利用产品快速验证市场适应性，及创业过程中产能的放大。"
      },
      {
        "time": "00:29:36",
        "title": "产品更新提升用户体验与性能",
        "summary": "讨论了产品从rapid的relate阶段至今的更新，重点在于增强用户满意度和提升性能。更新内容包括加强了与外部服务的集成，如OpenAI、firebase和stripe，改善了代码编辑功能，提供了更丰富的文件上下文和文本标签建议。此外，产品还优化了数据库管理，确保生成的代码可以成功部署。UI方面也进行了大幅改进，支持更多技术栈如react，增强了美观性和功能性。特别地，重新设计了UI，强调了agent的用户体验，加入了图片搜索和美学调整功能，以及提供了更多自定义选项。"
      },
      {
        "time": "00:33:06",
        "title": "探讨从0到100的产品成长路径及未来展望",
        "summary": "对话中讨论了产品从初步构想到成熟阶段的快速发展，特别是从0到1的快速达成与从1到100所面临的挑战。强调了对To B软件希望陪伴用户成功的愿景，并提到了使用AI技术帮助用户产品成长的潜力。同时，对产品成长过程中的数据库稳定性、数据迁移、安全和合规等问题进行了探讨。未来展望中，讨论了产品可能成为云服务前端的潜力，以及在发展中选择内部处理与外部集成的决策。此外，还讨论了产品底层模型的竞争焦点和随着模型能力增强对使用案例的可能影响。"
      },
      {
        "time": "00:36:32",
        "title": "探讨David产品的用户群体和技术选型",
        "summary": "讨论集中在David产品的表现、目标用户群体以及技术选型上。首先，产品表现与预期相符，能够高效执行任务，适用于有明确需求和技术背景的用户。其次，针对不同用户群体（如儿童和老人），产品的界面和交互需要相应调整。此外，强调了模型选择的重要性，认为针对不同任务应选用不同模型以优化性能、速度和成本。最后，讨论了Open Hands的发展历程、技术选型以及商业决策，反映出AI能力对于打造原生AI产品的重要性。"
      },
      {
        "time": "00:39:40",
        "title": "从Twitter启示到Open Hands项目启动",
        "summary": "项目发起人最初在Twitter上看到David的demo后深受启发，决定投身于类似项目的开发。由于对agent研究的高工程要求，他认识到开源代码库对于推进前沿能力研究的重要性，因此决定加入Open Hands项目。该项目从一个简单的readme文档迅速吸引了千名开源贡献者，展示了社区的积极贡献精神。通过利用云平台，项目生成了前端代码，并在CEO的领导下，搭建了架构并逐步改进，最终使机器人能完成简单任务。项目发展迅速，于4至5月转型为一家公司。"
      },
      {
        "time": "00:41:48",
        "title": "Open Has的实现原理及架构设计",
        "summary": "Open Has的实现主要分为三大块：Agent、Event Stream和Agent Run Time。Agent负责根据过去的历史生成新的行动，这些行动被推入Event Stream中，维护所有发生过的事件和观察到的信息。Agent Run Time将Event Stream中的行动转化为实际操作，如执行bash命令。用户与Agent的交互通过Event Stream实现，允许用户直接输入指令给Agent。此外，Open Has设计了一个适应性强的架构，以支持未来可能的多用户和多Agent工作场景。在讨论中，也提到了规划（planning）在不同项目中的实施差异，以及Open Has团队通过直接利用模型能力进行规划的尝试，强调了模型更新对Agent性能提升的重要性，并探讨了planning的复杂性及其实现挑战。"
      },
      {
        "time": "00:46:50",
        "title": "探讨VM与容器在技术项目中的应用及未来方向",
        "summary": "本次讨论集中于VM与容器技术在项目中的应用，特别是它们对运行时环境（runtime）的影响以及如何满足工程能力的高要求。讨论者分享了对于使用VM可能带来的额外优势的看法，并提出了在某些情况下，直接使用VM能更好地支持需要图形界面或CAD等应用场景的观点。同时，也提出了开源项目倾向于选择容器解决方案，因为容器技术在启动速度和管理大规模实例方面具有明显优势。此外，还探讨了关于技术架构应尽可能精简以适应未来模型能力增强的需求，以及Computer use在使大模型能像人类一样使用软件方面的潜力和挑战。"
      },
      {
        "time": "00:52:22",
        "title": "探讨自动驾驶和AI技术的未来发展",
        "summary": "对话中讨论了赛博世界中的自动驾驶技术以及对特斯拉SFSD等纯视觉方案的期待。特别强调了简化的action space在AI模型中的应用，以及foundation model和condition model的重要作用。此外，还谈到了cloud最新三代发布前，大家对改善agent editing的探索，以及计算机使用API的可能影响。通过引入browsing agent和SATA Marks等技术，展示了在提高AI与网页交互能力方面的努力。同时，探讨了computer use API的发布对行业标准的潜在影响，以及对未来技术发展和产品形态的展望。在技术与业务决策方面，讨论了对产品能力提升和社区采纳的重要性，以及对未来几个月内技术进步的期待。"
      },
      {
        "time": "00:54:54",
        "title": "开源项目中的技术决策与社区互动",
        "summary": "在开源项目早期，面对社区内满天飞的PR和不同背景成员的视角差异，特别强调了技术决策的重要性。一个关键决策是将后端与前端明确分离，确保研究者能够轻松迭代和评估agent，而不需要关心UI或产品相关细节。此外，通过抽象化和提供清晰的架构，项目能够支持两种不同的使用方式：一种是直接与前端产品集成，另一种是通过API与预先构建的框架连接，满足不同用户群体的需求。这种做法不仅促进了项目的健康发展，也为社区成员提供了更多的参与和贡献的机会，体现了开源社区的力量和透明性。通过开源，项目在技术选型和架构设计上考虑了更多的兼容性，以服务更广泛的群体，并在一定程度上减少了人们对商业公司的顾虑，为未来在AI领域的合作和创新奠定了基础。"
      },
      {
        "time": "00:59:01",
        "title": "开源项目的优势与挑战",
        "summary": "开源项目通过聚集社区的创造力和能力，能够实现技术上的快速进步和创新。这种模式不仅能够加速研究和发展，还能促进技术的民主化，使得重要的技术不再仅限于少数闭源公司手中。开源还能作为激活研究的媒介，促进学术界的交流合作。同时，开源项目面临的挑战包括如何维持社区的活跃度和贡献度，以及如何平衡开源与商业利益。尽管如此，开源社区的参与度和创新能力为项目带来了巨大的价值，促进了技术的广泛应用和改进。"
      },
      {
        "time": "01:03:34",
        "title": "开源项目中的社区贡献与产品开发",
        "summary": "讨论集中在如何通过开源项目收集用户反馈和用例，以及如何针对特定需求进行定制化开发。开源允许用户根据自身需求进行修改和维护，特别适用于高度监管的行业，能够建立用户信任。此外，强调了集成开发环境（IDE）和其他常用工具（如Slack、GitHub）的重要性，以及为开发者提供顺滑体验的必要性。还提到了创建一个活跃的社区生态系统，以促进用户之间的经验分享和问题解决。最后，讨论了基于社区反馈开发SaaS版本的计划，显示了社区意见对于产品方向的影响。"
      },
      {
        "time": "01:07:40",
        "title": "社区开发者需求与用户教育挑战",
        "summary": "社区开发者最关注的几个特性也是开发团队渴望实现的，反映了他们作为活跃用户的身份。同时，新用户面临的学习困难成为反馈中的一个重要部分，指出了产品设计需要更多考虑用户视角。用户中存在大量利用平台进行多样化应用案例，促使设计决策更加倾向于通用性，以支持更多未来可能的案例。特别地，AI技术的进步，特别是像O one这样的模型的出现，挑战着传统的交互设计思路，需要开发者深入理解模型能力，设计出新的交互方式。讨论还提到了对底层模型能力的期望，特别是新出现的OC模型，对其对编码模型领域的影响以及其令人印象深刻的特性进行了探讨。"
      },
      {
        "time": "01:09:39",
        "title": "探讨O系列在AI技术突破与未来应用潜力",
        "summary": "对话中讨论了O系列在推动AI技术，尤其是interest time computing方面的进展，强调了其在提升模型性能和智能表现上的潜力。指出O系列虽然在某些任务上表现出色，如code和max等，但目前仍处于探索边界的研究方向，未来在产品化方面需更多考虑。特别提到了最新发布带来的震撼，不仅在技术上证明了其高水平，也指出了过去在coding能力上的不足和改进。最后，强调了对关键技术坚持的重要性及期待未来AI领域更大的进步。"
      },
      {
        "time": "01:12:39",
        "title": "探讨编码模型的未来和技术突破",
        "summary": "对话中讨论了编码能力在人工智能模型中的重要性，特别是与GPT系列模型相比，编码模型在编码能力上并不逊色。探讨了欧斯瑞和O一的进展，是否是通过更多的数据、计算机资源或技术突破实现的。提出了资源之外可能被低估的能力，以及alignment在提升编码能力方面的重要性。此外，还讨论了模型预训练的现状、对未来模型的期待，以及编码模型如何从解决编程问题泛化到更广泛的智能推理和数字代理任务。"
      },
      {
        "time": "01:17:50",
        "title": "探索AGI之路：从基础模型到自我迭代的未来",
        "summary": "当前，千万级别的模型如QDFQ备受关注，而不同研究机构和公司在开发专项模型时，往往先基于特定方向如coding或reasoning构建模型。在讨论中，提出了对于开发通用模型与专项模型的不同考量，强调通用模型可以激发更多人的参与，同时具有更广泛的应用潜力。此外，还探讨了coding、max与reasoning模型之间紧密的关联性，以及它们在实现AGI目标中形成闭环的可能性。特别强调了code和max作为高级任务的重要性，及其在构建智能代理基础中的作用。最后，提出了未来模型应具备在线学习和自我迭代能力的愿景，强调了reasoning能力是实现这一愿景的基础。"
      },
      {
        "time": "01:20:07",
        "title": "探讨O系列模型在解决复杂问题与真实世界任务中的应用与挑战",
        "summary": "O系列模型在解决编程和数学等复杂问题上展现了惊人的表现，主要依靠其强大的逻辑推理能力和方法总结与思维归纳能力。然而，面对真实世界的问题，模型还需进一步强化其在模糊环境中的适应能力，尤其是如何在开放环境下定义有效的反馈机制，以及如何将模型的逻辑和创造力应用于提出新的科学问题。同时，确保模型的安全性是实现AI研究者角色的重要挑战。"
      },
      {
        "time": "01:24:06",
        "title": "SweetBench突破70%与AI模型的未来发展探讨",
        "summary": "SweetBench的进展速度超预期，达到70%的水平，引发了对AI模型提升来源、成本效益比、以及未来benchmarking市场发展方向的讨论。提升可能不仅源于模型本身，还可能涉及到数据泄露问题。讨论强调了性能与成本的平衡，提出了将简单问题分配给低成本模型的思路。同时，对未来benchmark超越现有测试，如在真实公司环境中执行任务的能力进行了展望。"
      },
      {
        "time": "01:28:18",
        "title": "Open I 的表现及其对未来模型的启示",
        "summary": "Open I 最近的表现仅获得了七十多分，并没有展示出能够震撼人心的demo或解决实际问题的案例，表明即便是强大的模型仍存在未解决的问题。讨论强调，下一代benchmark应从真实的场景出发，指出目前达到一个非常完备模型十分困难。特别地，虽然在一些benchmark上取得了显著的进步，如Three Bench和Codeforces，但这还不够。未来需要更多的工作来完善benchmark，以应对模型泛化性上的挑战。"
      },
      {
        "time": "01:31:30",
        "title": "探讨编程模型及AI技术的发展方向",
        "summary": "对话集中在评估编程模型的有效性，特别是Co Forces和Echo Bench等工具在竞赛和实际应用中的表现。讨论了未来benchmark的挑战性、动态更新机制以及模型在特定任务上的表现，强调了专业模型的价值和探索边界的重要性。同时，提出了对于通用AI模型的期待，讨论了模型在解决实际问题和提升效率方面的潜力。"
      },
      {
        "time": "01:36:26",
        "title": "探讨编码代理领域的重要进展与未来趋势",
        "summary": "对话重点讨论了编码代理领域今年的重要事件，特别强调了前端开发的进步和AI在促进技术统一中的作用。指出前端任务因其工具链的完善和对普通用户感知的强影响，成为了AI技术应用的一个重要方向。此外，还提到了编码代理在解决复杂问题时的策略选择，以及如何通过AI优化解决方案的生成和选择过程。"
      },
      {
        "time": "01:39:31",
        "title": "探讨AI对未来工程师需求及组织影响",
        "summary": "对话集中在如何AI，特别是编码代理(agent)，将如何改变未来工程师的需求和组织结构。讨论指出，随着AI技术的进步，能够被简化和重复的工作将被快速替代，强调了提出创新问题和管理AI的重要性。同时，也讨论了一个新的研究方向，即开发能够模拟人类在公司中执行各种任务的AI代理，以评估其在实际工作环境中的效用。此外，还提到了教育的转型需求，以适应这一技术变革，强调未来的工作将更多地依赖于提出问题而非执行任务。"
      },
      {
        "time": "01:43:57",
        "title": "AI技术对未来程序员角色的影响",
        "summary": "讨论集中在AI技术如何重塑程序员的角色，使其更像资本家或管理者，能够高效地利用AI完成工作。随着AI的价值被逐渐认识，新一代程序员将更加依赖于AI工具，从而减少对细节的关注，转而专注于更具创造性和规划性的工作。这种转变要求程序员具备更多的产品思维，像创始人一样思考，利用AI完成从产品规划到执行的整个流程。此外，讨论也触及了AI对未来编程教育和职业发展路径的影响，预见到AI将承担软件工程中更多冗余工作，释放人类更多时间去从事创造性工作。总的来说，未来程序员与AI的共生关系将非常积极，能够共同创造出目前无法想象的新事物。"
      },
      {
        "time": "01:47:52",
        "title": "探讨编码代理对组织和工作流程的影响",
        "summary": "对话集中于编码代理（如Agent）如何彻底改变组织的架构、工作流程和项目开发方式。参与者讨论了编码代理如何加速特性开发，降低对特定技能人员的依赖，以及如何通过并行实验加速产品迭代。此外，还强调了编码代理使得开发者不需要成为特定领域的专家也能实现功能，而更重要的是知道自己的需求并能以正确的方式指导编码代理完成任务。这表明，未来开发工作将更侧重于创意和指导，而非具体的技术实现。"
      },
      {
        "time": "01:52:20",
        "title": "探讨AI Agent在产品开发中的应用与局限",
        "summary": "对话集中在如何在产品开发过程中利用AI Agent进行自我测试和优化，以及这种技术的局限性和用户教育的重要性。讨论者认为，虽然AI有能力执行复杂的任务，如自我测试和提出产品改进的建议，但其应用受到产品设计和安全考量的限制。他们还讨论了增强用户对AI能力认知的重要性，以及AI在指导用户进行产品创新方面的潜力。此外，他们也探讨了AI和人类在任务执行和决策确认上的合作模式，强调了未来工作中AI可能扮演的主导角色。"
      },
      {
        "time": "01:56:17",
        "title": "探讨AI模型对编程和审查工作的影响",
        "summary": "随着AI模型能力的增强，对于编程工作的影响日益显著。讨论者分享了自己在审查AI模型输出时的体验，发现越来越难以理解AI生成的代码，预示着编程领域可能迎来AI自动生成代码的时代。尽管如此，人类在审查和背锅方面的能力依然不可替代。他们还讨论了AI模型需要提升的信息访问、规划能力、从错误中恢复的能力和主动性，以达到高级工程师的水平。同时，强调了AI模型在未授权情况下不应执行未批准任务的重要性。"
      },
      {
        "time": "02:00:14",
        "title": "强化学习在产品开发中的应用前景",
        "summary": "讨论集中在如何利用强化学习和反馈循环来推动产品开发的自动化。强调了提供给AI代理的反馈和信号的重要性，这些反馈可以帮助AI自主地完成从产品概念到推广的全过程，理论上减少人类的干预。同时，也探讨了将AI技术整合到产品开发流程中，实现自我验证和优化的可能性，预示着工程师可能不再需要直接参与决策过程，而是将决策权交给能够自主分析和迭代的AI代理。"
      },
      {
        "time": "02:02:36",
        "title": "提升模型的规划能力及用户反馈在AI开发中的应用",
        "summary": "当前AI模型在规划能力方面存在不足，特别是代码模型领域，虽然能够获取到高质量的代码token，但如何有效利用这些高质量的数据是一个挑战。增强模型的规划能力，需要更多的高质量规划数据，例如通过分析GitHub上的commit message来理解人类的规划过程。同时，用户反馈对于模型的改进至关重要，通过收集用户对模型更改的反馈，可以为模型提供奖励或惩罚信号，从而提升模型的规划和决策能力。此外，探索如何从错误中恢复，也是提升模型能力的重要方面。总体来说，结合高质量的数据和实际用户的反馈，可以有效提升模型的规划能力和最终的实用性。"
      },
      {
        "time": "02:07:11",
        "title": "提升AI Agent能力与应用的发展方向",
        "summary": "在开发Foundation Model的过程中，通过让AI Agent在特定环境中生成数据，先利用合成数据进行预热，随后结合真实人类数据强化模型，使之更贴近人类。此外，讨论了在硅谷等地，不少公司开始致力于Info for AI Agent的研发，提出了多种针对提升Agent生产环境适应能力的机会与方向，包括专门针对Agent的网页阅读、API对接服务、记忆系统、权限管理等，同时强调了Agent开发框架、记忆管理、执行控制等技术的重要性。随着AI Agent技术的发展，将产生更多与数据库交互、用户确认调用第三方服务等新的需求和解决方案。"
      },
      {
        "time": "02:11:00",
        "title": "探讨运行时工具在开源项目中的应用及挑战",
        "summary": "对话中讨论了运行时（runtime）工具在开源项目开发中的重要性和遇到的挑战。参与者提到，市面上有许多专注于提供运行时解决方案的公司，这些工具对于提高开发效率和项目可扩展性至关重要。同时，讨论也指出了这些工具可能带来的问题，比如用户可能遇到的被网站识别为机器行为的问题，以及开源开发者在选择是否完全依赖第三方工具时需要权衡的利弊。此外，还提到了一些公司在运行时基础设施方面所做的优化工作，强调了这一领域的复杂性和重要性。"
      },
      {
        "time": "02:13:24",
        "title": "探讨AI应用及投资机会",
        "summary": "讨论集中在AI应用和AI代理（Agent）的当前落地情况与未来发展潜力。特别强调了AI在规划能力、编程能力和使用工具能力方面的进步，这些进步为AI代理在数字世界的广泛应用奠定了基础。此外，讨论也触及了AI应用对于工作效率的提升，以及AI技术在企业服务、安全领域的潜在机会。特别指出，虽然AI代理展现出巨大的潜力，但其完全成熟并广泛应用仍需时间。同时，如何评估AI应用的投资机会、技术进步带来的变化、以及AI产品如何更好地满足市场需求，都是当前创业者和投资人关注的重点。"
      },
      {
        "time": "02:20:14",
        "title": "探讨打造AI驱动工作流程的团队特质与挑战",
        "summary": "对话中讨论了构建下一代AI驱动工作流程（agented workflow）所需的团队特征，强调了人才密度、对技术和应用场景的深刻理解以及强大执行力的重要性。指出，虽然市场上已有自称AI产品的存在，但实际效果令人怀疑，真正的挑战在于如何将AI技术有效地整合到具体的工作场景中。同时，讨论也触及了AI创业公司与模型开发者之间的共生关系，强调了理解用户需求、提供解决方案以及快速迭代的重要性。最后，指出创业公司相对于大公司在机动灵活方面的优势，尤其是在与技术快速发展的领域的竞争中。"
      },
      {
        "time": "02:24:03",
        "title": "探讨年轻研究者和AI代理的未来",
        "summary": "讨论重点放在了年轻的科研团队如何在没有传统产品经理经验的情况下，开发出优秀的产品。特别强调了00后团队在AI领域的创新，以及对sell work（销售工作）模式的探讨，预测了在中国，基于AI的生产力工具（尤其是coding agent）的发展前景。此外，还提到了copy to China模式的演进，和未来一年及三年内，AI代理（AI agent）在数字世界中的广泛应用及潜在变革，包括AI代理之间的协作可能带来的新机遇和挑战。"
      },
      {
        "time": "02:27:17",
        "title": "探讨未来AI技术对社会和组织形态的影响",
        "summary": "对话内容主要探讨了未来互联网和AI技术对人类社会创新速度、风险投资、组织形态以及资源分配方式可能产生的影响。指出目前的互联网仅是想法全集中的一小部分，AI技术的进展将极大地提高创新速度和生产力。特别强调了AI之间相互指挥和协调的能力对未来工作和资源分配的重要性，以及这种技术进步对于降低使用成本、让更多人能够直接使用AI产品的潜力。同时，讨论了这种技术对办公室政治和企业内部资源分配方式的影响，预示着未来组织形态将因AI技术的发展而发生重大变化。"
      },
      {
        "time": "02:30:02",
        "title": "探讨AI技术的未来及其对软件开发的影响",
        "summary": "对话集中在AI技术，尤其是AI模型在软件开发领域的应用及其对未来的影响。一方面，参与者讨论了AI模型如何能够在短期内提升开发效率，实现高效的新项目开发，并预计一年内开源模型能有显著进步。另一方面，也展望了三年内AI技术可能实现的长期目标，如AI模型在解决复杂编程问题上的潜力，及其对科技和社会的积极影响。此外，还提到了AI模型使用成本问题以及对AI超越人类能力的期待，同时也指出了当前AI技术在处理日常任务时存在的局限性，并预测未来AI技术的发展将逐步克服这些局限。"
      },
      {
        "time": "02:34:42",
        "title": "探讨Coding Agent的挑战与解决方案",
        "summary": "讨论重点在于使用Coding Agent时遇到的挑战，特别是当模型根据提供的上下文生成代码时，可能会因原有代码样例的影响而导致准确性下降。此外，也讨论了模型对长文本理解的挑战，包括对长代码片段的理解和生成。提出了通过memory conditionation技术来优化模型，以保持执行效率和准确性，从而解决长代码理解和生成的问题。"
      },
      {
        "time": "02:38:31",
        "title": "探讨Coding Agent的挑战与潜力",
        "summary": "对话中讨论了使用Coding Agent遇到的挑战，特别是其知识管理功能的双重性，虽然设计初衷良好，但在实际应用中存在惊喜与踩雷的情况。讨论强调了模型能力的提升、产品设计的优化以及安全性的考虑是未来改进的关键。同时，也指出了目前对竞赛型编程模型的能力高估和对模型在解决实际编程问题中潜力的低估。"
      },
      {
        "time": "02:41:49",
        "title": "探讨模型的高估与低估及未来潜力",
        "summary": "对话集中在讨论当前对AI模型的高估与低估问题，特别是强调了人们对模型性能的期望与实际表现之间的差异。指出了人们对AI技术的期待可能已经过高，但同时低估了现有模型的潜力和创造力。讨论还涉及了模型在处理特定问题时的局限性，以及通过正确的指导和使用方法，现有的AI模型可以展现出意想不到的能力。最后，讨论强调了模型的未来潜力和对AI行业的期待，期待更多的创新和发现。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [],
              "content": "初始阶段：人类提出指令，AI生成代码"
            },
            {
              "children": [],
              "content": "发展阶段：AI具备代码库上下文理解，实现简单任务自动化"
            },
            {
              "children": [],
              "content": "当前阶段：自主代理(Autonomous Agent)出现，能够执行复杂任务，具备一定自我决策能力"
            },
            {
              "children": [],
              "content": "未来展望：AI代理进一步智能化，可能实现工作规模化，改变工作模式"
            }
          ],
          "content": "技术演进"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "特点：帮助用户从0到1快速构建产品"
                },
                {
                  "children": [],
                  "content": "用户群体：创业者、非程序员"
                },
                {
                  "children": [],
                  "content": "技术优势：快速原型开发，多框架支持"
                }
              ],
              "content": "Replay Agent"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "特点：完全自主完成多步骤复杂任务"
                },
                {
                  "children": [],
                  "content": "用户群体：开发者、项目经理"
                },
                {
                  "children": [],
                  "content": "技术优势：高阶任务规划能力，支持虚拟机操作"
                }
              ],
              "content": "David"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "特点：开源，社区贡献活跃，支持复杂命令执行"
                },
                {
                  "children": [],
                  "content": "用户群体：研究者、开发者"
                },
                {
                  "children": [],
                  "content": "技术优势：高度可定制化，基于事件驱动的架构设计"
                }
              ],
              "content": "Open Hands"
            }
          ],
          "content": "产品形态"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "需要更强大的模型支撑，以解决复杂问题"
                },
                {
                  "children": [],
                  "content": "数据泄露和隐私保护成为新挑战"
                }
              ],
              "content": "数据与模型"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开源社区对AI技术发展至关重要"
                },
                {
                  "children": [],
                  "content": "多模型协同工作、不同任务间的切换和协调"
                }
              ],
              "content": "技术路线"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "AI编程代理可能改变编程教育和职业发展路径"
                },
                {
                  "children": [],
                  "content": "对传统编程角色的冲击和转变"
                }
              ],
              "content": "社会影响"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "更加智能化、自适应的学习能力"
                },
                {
                  "children": [],
                  "content": "多模态处理和自然语言理解能力的提升"
                },
                {
                  "children": [],
                  "content": "更广泛的行业应用，包括法律、医疗等"
                }
              ],
              "content": "未来技术"
            }
          ],
          "content": "挑战与展望"
        },
        {
          "children": [
            {
              "children": [],
              "content": "开源策略促进技术迭代和社区发展"
            },
            {
              "children": [],
              "content": "商业产品与开源社区的互动模式"
            },
            {
              "children": [],
              "content": "企业采用AI代理面临的挑战和考量"
            },
            {
              "children": [],
              "content": "AI代理技术在企业级应用的潜力与机遇"
            }
          ],
          "content": "商业与开源策略"
        }
      ],
      "content": "Coding Agent技术与应用讨论脑图摘要"
    }
  }
}