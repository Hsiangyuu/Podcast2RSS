{
  "pid": "61cbaac48bb4cd867fcabe22",
  "eid": "63f64ee1eadc57eda118cbb8",
  "title": "EP 27. 对话 PingCAP CTO 黄东旭：中国开源走向世界，数据库与未来基础软件的脑洞",
  "task_id": "dexp9j6mbrgkq5ol",
  "transcription": [
    {
      "time": "00:00:03",
      "text": "欢迎来到onboard，真实的一线经验，走心的投资思考。我是Monica，我是高宁。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:09",
      "text": "我们一起聊聊软件如何改变世界。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:15",
      "text": "本期播客是由aon deo特约赞助播出。我们看到越来越多的IT SaaS智能制造企业都开始开拓全球市场。走向全球首要问题就是精准获取海外B端客户线索，而on due就是为企业提供全球商业信息的SaaS平台。他们平台上一亿多条联系人、企业及商业情报信息覆盖全球两百多个国家与地区，三千多种细分行业，并且持续更新，绝对是企业出海的必备神器。我们还为大家争取到了福利。Omber听众访问around deal dot com，在contest sales中备注omber ONBOARD omber即可领取七天免费试用。还不赶紧去试试，立即找到你的下一个海外客户。欢迎大家来到Amber，我是Monica。今天这一期众望所归请来了pink cap的联合创始人兼CTO at煌煌东旭。",
      "speaker": "发言人3"
    },
    {
      "time": "00:01:04",
      "text": "如果你对开源有所关注，一定知道开源分布式数据库太低B及其背后的公司ping cap。Ping cap可以说是中国商业化开源公司的先驱。2015年成立至今，IDB从零开始，在giu b上有超过3万的star超过800位来自世界各地的贡献者。除了包括众多一线互联网大厂在内的开源用户，PICAP还服务了二十多个国家三千多个客户。成立至今PKP的总融资达到3.7亿美金，估值也从零增长到30亿美金，绝对可以说是诞生于中国的开源基础软件佼佼者了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:01:41",
      "text": "作为联合创始人和CTO的黄东续，不仅是资深的基础软件工程师、架构师，更是狂热的开源爱好者以及开源软件作者。他对于开源数据库开发者工具的理解，常常能给人直击本质又开脑洞的启发。拼cap也可谓是中国基础软件公司走向世界的先行者。过去一年多的时间，东西几乎全身心付在硅谷。对于中美市场的异同，什么是给开发者用的数据库，什么是未来的开发范式，还有现代AI发展会对数据领域有怎样影响？这次掏心窝的分享，相信能给你很多启发。最后要提的是，生活中的东旭还是一名摇滚乐手，本期最后的彩蛋，你会听到他展示最新学习的乐器，干货满满，准备上车，大家enjoy啊。",
      "speaker": "发言人3"
    },
    {
      "time": "00:02:30",
      "text": "今天的这一期播客可谓是众望所归，我们请来了pink cap的联合创始人兼CTO黄东续，这次录制也是非常特别，因为今天是大年初四，我跟东旭坐在我们老家的一个露营地，吹着15度的暖风，聊一聊数据库和创业。而且这也是on board第一次做线下的录制，一次嘉宾访谈，欢迎东旭来到on board。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:55",
      "text": "大家好，很高兴能跟莫妮卡在一个这么特殊的下午，我在野外去录这个博客。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:03",
      "text": "对，我们坐在一个大帐篷前面是非常的特殊。可能在对于很多做技术的小伙伴或者做开源的小伙伴，可能这个东西的也可谓鼎鼎大名了。但是对于一些可能还不那么熟悉这个位同学，要给大家做一下这个自我介绍，给大家介绍一下KGB的一些大致的情况。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:19",
      "text": "好，对我我叫黄东旭，是ping cap的联合创始人兼CTO。然后ping cap其实是一个开源就分布式数据库台DB背后的公司。没有技术背景的人介绍一下什么是分布数据库。然后我们其实在做的软件就是相当于我们把这些计算机连接在一起以后，提供一个可以弹性伸缩水平扩展，几乎可以让你存储无限量数据的一个一套软件。所以你可能不知道我们，但是我能保证，如果你现在在中国有这种在使用手机，在有数字化的生活，你肯定或多或少再去使用我们的软件发生。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:58",
      "text": "对给大家介绍一下TDB发展的一些历程上几个关键的一些。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:03",
      "text": "首先TDB是一个完全开放源代码的软件。就是我相信其实对于一个基础软件来说，只有open source变成绝对的透明，大家才会对你这个东西有信任。同时能够去在上面不停地贡献自己的聪明才智。相当于集中整个社会的资源吧，或者说这些使用这个东西的用户的聪明才智，让这个东西变得更好的一种商业模式。所以我觉得第一个milestone就是pink cap成立的第一天，也是我们决定使用开源的模式构建KDB的第一天。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:41",
      "text": "第二个mail stone其实也是从产品的或者行业趋势的角度来看，我们其实选择了这个云的模式来去在云上提供这个数据存储的服务。因为为什么这么说呢？因为我觉得最近这20年整个IT行业，我觉得最重要的一个变化之一就是云原生的这种不管是商业模式还是软件开发模式，深刻的改变了我们去看待软件的方式。或者说在尤其to b领域，像SARS变得越来越流行。包括像这种infer软件的背后的公司，都在变成一个主流的一种软件交付模式。所以我觉得第二个milestone就是我们其实在尤其在海外都是在去使用这种云上的云服务来去作为数据库的交付形式。",
      "speaker": "发言人2"
    },
    {
      "time": "00:05:37",
      "text": "你这个大概是在哪一年？",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:39",
      "text": "我觉得是2020年，2020跟2021成立了大概五年。对对对，我觉得也是正好是我们认真开始去出海的这个时间。因为其实pin k cap的最早其实成立在在中国，但其实现在我认为应该是一个global company。对，其实现在我们在海外有很多业务，尤其是美国。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:05",
      "text": "我觉得第三个对我来说很重要的milestone是最近以ChatGPT为代表的这种。你不能说强人工智能它它离强人智能还远，但是我觉得他大概是一个很实用的，就是真正能够帮助到大家的一个这种大模型，或者说AI的能力。就是AI加上serverless，加上包括它的本身是一个这种混合负载型的h type的这种新形式的数据库。这几个东西融合在一起的可能性，我认为会是最近让我特别兴奋，他会改变我们接下来从这个数据库软件本身的形态，甚至可能是它的商业模式，甚至是扩展了更多的应用场景。我现在还没有一个非常清楚的答案，但是我确定它一定是一个很重要的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:07:00",
      "text": "就是像谢东旭在做开源社区，还有做公司从0到1的很多这个经历，其实都已经很多分享。这次在欧布的这个访谈上，其实我们会更多的聚焦到可能聚焦在就是从从1到10的这个过程。尤其是最近几年，整个市场都发生了各种的变化。我觉得在讨论这个过程中，其实可以让大家感受到很多创始人一些非常新鲜出炉的一些心得。所以也会让大家很有收获。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:27",
      "text": "还有一还有一个一个问题就是，要让这个东西来给大家做一下简单科数据库里面我们最粗浅的来其实分AP和TP两种可以带给大家。这个作为科普就是什么是这个ATP的一个区别，然后这个公司好像更多，那到底做一个TP的甲骨文能够称霸那么几十年，它的就是它的这个难点主要在哪？我相信这可以让大家更好的去理解我们后面谈的一些东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:54",
      "text": "挺好。茉莉刚才说的这个分类其实是一个一个一个普遍的一个分类。一个TP一个APTP的话它的全称叫transaction processing，它是叫交易或者说在线事务。其实然后AP的话是analytics，就是偏分析的这种，从你的数据里得到这个数据洞察这样的。从这个名字大家就能看得出，一个可能是更偏在线业务，另外一个比如AP这边可能他的面向的这个对象可能是数据分析师，或者说数据科学家，甚至一些像报表这样的让人能够更好的做出决策。",
      "speaker": "发言人2"
    },
    {
      "time": "00:08:39",
      "text": "TP的这个数据库我说一些不同的应用场景，大家可能更好感觉一点。比如说你现在去一个在线支付，或者说你现在用微信支付买一个什么东西，最后你完成了这笔交易，其实它是在TP的数据库里面去完成的。所以你不就是就相当于你去支付一笔东西，你不希望还等个半个小时才告诉你，这个支付成功了。所以第一个要求就是TP数据库要快。因为它是一个在线服务，所以越快其实这个延迟等待的时间越小越好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:11",
      "text": "第二就是你想象一下，中国可能有十几亿人口，可能微信这个支付，就是微信支付10亿人口以上都可能在用的这个东西。而且你并没有办法清楚的知道什么时间点有多少人在去使用这个支付。所以他这个TP还是要求去能够支撑这种不确定性，同时又很大量的并发访问，所以这个是一个。第二个可能他有这种高并发的要求。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:42",
      "text": "第3个TP的要求就是刚才也是拿那个微信支付作为例子。你不希望你支付一笔东西之后，那个钱，当然你肯定希望这个钱没有扣掉，所以是肯定的。但是你不希望他多多扣，你也不希望他这个有错误，对不对？",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:56",
      "text": "所以TP的数据还有个要求，就是对于数据的这种精确性、一致性和可靠性的要求极其的高。所以我们反过来去看AP，比如说数据的这个分析报表。当然可能有些场景对于这个一致性或者说正确性要求也很高。那可能你最后这个小数点10位之后有一个错误，其实你也不太在意是吧？或者说我我我运行一个报表可能需要等个一分钟、两分钟和等个三分钟、五分钟。其实对你来说，对于一个data entities来说也没有太大区别，对不对？所以我觉得像这种不同的应用场景，决定了这个数据库的技术在在后面是有两种分类。",
      "speaker": "发言人2"
    },
    {
      "time": "00:10:37",
      "text": "所以从刚才那个要求，你可以就看出为什么TP的数据库难做。就是它需要用到各种各样的技术来去保证这个数据的不丢失。然后高性能以及低延迟，其实这些都是很很硬的技术。而且另外一点，我是觉得在TB领域大家去换更换一个数据库的成本会更高。除非你有一个巨大的一个时代的变化。比如说我的数据就是在膨胀，真的原来oracle这个存储不了了，或者一台机器存不下了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:16",
      "text": "你可能才有一个机会说我能不能去做一个新的面向未来的一个TP的数据库。能够因为就像做心脏手术一样，就没有人会天天说，我换一个心脏支架来玩，是吧？所以TP更像是这种东西。AP的话就更怎么说呢？应用场景更丰富，同时大家去去更换一个AP的数据库的粘性其实没有TP这么高。因为反正这个数核心数据都在TP里面，最后大不了我再重新做一份数据，然后再去分析也行。所以他们两个使用的场景面向的这个用户的决定了他们两个是不太一样。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:11:56",
      "text": "所以我们就会看到，就是在感觉在AP的这个市场就颇有着百花齐放的这个感觉。而且一个公司它通常可能就t pick，可能基本上就是那一个，对吧？但是它的AP可能甚至不同的团队，或者不同的业务部门，或者是他可能用好几个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:12",
      "text": "东旭前段时间在这个CSN上发表了一篇文章。其实里边有好几个我觉得特别有意思的观点，都是关于数据库发展的现在与未来的一些观点。我们也会把这个文章放到这个show动词里边，大家也可以去看一看这一篇，这篇文章我觉得第一个特别有意思的观点就是，东西在里面提到就是说未来的数据库都会是h tap数据库。其实我们看到也的确看到这几年无论是这个大的公有云厂商，像AWS，google azure，还是说像这种新的像snowfall data bric公司。其实他们都相继推出了不同类型的h type架构的产品。所以这但是我觉得未来的数据库都会是h type数据库。我现在来看还是一个表格。",
      "speaker": "发言人1"
    },
    {
      "time": "00:12:53",
      "text": "的一个判断word是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:12:54",
      "text": "对对对，我觉得那东西可以给大家简单先介绍一下，什么是一个h type数据库，为什么在这个时间点我们看到了这个变化。对于pink cap来说，我们可能了解p cap的知道，就是一开始可能是受到了google spanner的启发。那h tap的这个概念在pink cup这又是什么时候提出的呢？就是可以跟大家分享一下。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:16",
      "text": "我跟这这个好问题，我跟大家说一个小故事。首先很有意思，就是pink cap的几个创始人。虽然我们都是工程师，但是没有任何一个人过去是有做这种正经数据库开发经验的对，就是相当于我们并不是做这种C口引擎，或者说并不是做这种传统的数据库，甚至我们也没有做过数据分析这样的工作。我们都是111一些做这个分布式系统或者说分布式存储的这个background。",
      "speaker": "发言人2"
    },
    {
      "time": "00:13:49",
      "text": "然后我们开始做数据库的初心其实很简单，我们只是想做一个scalable，就是能够弹性伸缩的OLTP database，去取代原来很主流的这种mysql，的这种分工分秒的方案。所以其实他一开始最早是一个TP的database。但是后来我们第一个版本做出来了以后，我们发现意识到了一个现实，就是即使你这个东西的理念非常先进，用户非常享用。但就像我刚才做的那个比喻一样，它就像一个心脏支架。对于这种TP系统来说就是做心脏手术这么复杂的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:26",
      "text": "用户一开始不会说把你就顶到线上来，去替换他的重要的交易系统。他一般会说，我在底下做一个在线的数据库，下面做一个同步的实时同步的一层。然后这一层我观察你因为上游跟下游的数可能做个备份，或者说做一个实时的这个呃主要还是备份，就是这个shadow traffic，就是这种上游的流量，下游的流量都打到一起，然后我看底下这个你是不是足够稳定。",
      "speaker": "发言人2"
    },
    {
      "time": "00:14:55",
      "text": "然后因为其实刚才我说过，TDB1开始是设计成一个O数据库，同时它又是一个支持SQL这种查询语言的这种同时也兼容mysql的，mysql是一个很流行的SQL数据库。我们后来发现有很多用户他用使用这种线上还是使用mysql，但是下面有个实时的backup是TDB。我们发现越来越多的用户在这个TDB的这个集群上面去进行一些复杂的偏分析的这种kerry。然后我当时就很纳闷，就说我作为一个分布式的OLTP数据库，我并不是设计来给你去查这种复杂的东西，然后这个东西你查起来还挺慢的是吧？因为本身如果他像我刚才说的一个面向TB设计的一个东西，他去他并不是为了这种分析的场景设计。",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:48",
      "text": "然后我的客户就告诉我说，同学你这就不懂了，你的这个数据库做分析很快，引号很快。其实我知道一点都不快，可能因为TB跟AP有时候它是能差1000倍，你知道吗？然后我说为什么我是一个TP数据库？然后那个那个客户就告诉我，你想我们原来的这个架构大概是什么样子的？我上游可能是一个生产的OLTP的数据库，oracle mysql什么的。我中间可能会通过像类似kafka或者说类似一些很复杂的数据链路，然后每天晚上把今天的数据倒腾到另外一个对a data house，hadoop或者说其他什么click house之类的这些偏AP的数据库上好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:29",
      "text": "首先这个同步的时间可能就并不是实时的，可能需要半天一天是吧？因为你没有办法，因为AP的数据库没有办法做到这种实时的mutation直接反映在AP数据库上。这AP数据库的一个通常的痛点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:16:44",
      "text": "然后尽管你在AP数据库上，我运行这些分析的query，可能一秒钟2秒钟就运行出来了。但是你算一下整个数据同步链路的时间，总体时长，加上背后的可能要涉及好几个团队，很多的开发的维护的代价。你就会发现虽然你在你这个query在TDB里边，你运行可能早期20分钟。但是你算上整体的n to end的时间，人家可能是12个小时加1秒，对吧？所以说就这么一对比，你就发现他就B这样能够更好的从在线的数据库的产生数据的位置，得到数据的insight的的时间是最短的。我总体的时间可能就是20分钟，因为同步的时间是实时同步的。上游的数据。",
      "speaker": "发言人2"
    },
    {
      "time": "00:17:33",
      "text": "所以当时我就非常受启发，就是觉得其实用户真正第一，他有很多query或者有很多业务场景，业务开发人员是并不知道我到底是应该算AP还是算TP。因为对于这种数据分析的实时性的要求是就更高、更快、更强，给我更快的得到结果。谁都喜欢是吧？就老板说我为什么今天只能看到昨天的这个报表，我就想看到现在的报表行不行？所以这个实时性的需求是大家一直要去往前去做的这是这是这是第一点。第二点就是对于这个业务开发来说，TP的这个永远是上游，就是数据产生的是在TP所以我觉得从TP这边去切入，你让TP去支持一个比较好的AP的能力，这样我觉得是更接近更fresh的对，就fresh data他他能够做的更快。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:31",
      "text": "第三点，用户其实就像我刚才说的，他很多业务也分不清到底这个叫TP还是叫AP。而且最后其实这些data insight还有一种用法，就是我直接把它变成一个在线的服务。比如现在很多SaaS公司，可能他不对不同的租户，他有这种个性化的实时分析。包括你去看你的这种，比如说信用卡账单，就在你APP里面一点，它会有一些这种你的数据的分析的报告。你说这背后到底是AP还是TP呢？如果他是一个AP的话，你对于一个用户来说，他要看到他自己的信用卡的这个交易分析。发现我只能看到昨天的那我今天花的这个钱，他一看这用户体验就不好了，是吧？如果没有的话，所以就是像这种很细微的这些新形态的这种业务，我觉得已经是没有办法去区分TPAP了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:20",
      "text": "所以h tap这个概念，我是觉得是从一个用户使用数据库的体验角度去去出发，就是怎么用一套系统去解决刚才我说的这些问题。这个背后如果有一个像h type这样的数据库来说，这样的问题就能解决的很好啊。所以我觉得H他并不是个技术词汇，它其实是一个描述用户体验以及用户去看待数据库的这种方式的一个分类。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:47",
      "text": "对我可以理解为其实在这个场景中，客户更多的需求其实还是来自于偏AP的需求。我们现在看到前面说像snowfall y这些AP的厂商，比如他推出了像instore这一些h time。那其实像。他也在里面加入了一些h type的它更大的需求。听起来是一我想要一个AP但是我对于h tap对我来说是一个更好的AP可以这么理解吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:10",
      "text": "我的理解刚好相反，我的理解是h tap的核心或者关键点在于TP，为什么呢？就是你仔细想一下，虽然你看到的是一张还是用刚才那个个人的信用卡账单的那个那个例子。你看到的虽然是一个你的实时报表，但是这个背后首先它是一个在线服务，对不对？对，这是一个有严格SLA要求的在线服务。同时它不能错是吧？同时他要你7乘24小时，你一点开它就会马上打开。听到吗？这些在线服务的特点其实都是TP的要求。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:49",
      "text": "所以我觉得从一个产品或者说一个技术的角度，反而我是会觉得这是一个当你这个系统要有一个一个service的一个作为一个service变成一个在线服务的时候，他对TP的这块的要求就会因为TP是零和一的这个要求。对我举个例子就是当然这不太好。你是觉得假设我有一个TP数据库，它有一个实时分析的能力让你更放心一点，还是说我本身是一个data warehouse，然后我我说我有一个这，对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:21:25",
      "text": "虽然场景最终应用是在一个分析型的场景，但是决定你能够把这个场景做好的这个核心的能力是在TP的这个。对，是的。如果说我最终用户需要的其实是从场景角度上来说，我想要的是你刚所说的实时。其实现在也有别的，比如说像streaming database一些流程数据库，用别的这种方式来达到这个实时的这种数据库的要求。这些在你看来它会是跟h type是一个相互贴的关系，还是说一个补充的不同场景下的一个选择。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:58",
      "text": "我觉得会是一个补充，但是这个补充不会太过于碎片化。就是我觉得过去十年二十年，这个数据库或者说数据技术这个领域，我特别不但纯个人观点就开始变得越来越碎片化，社会化的问题，就带来了很多数据孤岛。比如我就举个例子，作为一个应用开发人员，我永远其实站在应用开发者的角度去看这些东西。我不跟我其实因为本身我并不是一个很好的内核数据库内核开发人员。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:28",
      "text": "从应用开发者的角度来说，比如说还是像刚才那个那个那个数据报表这种就那个例子。如果我能够写一条CQL就搞定的事情，比如说我可能我有一些用户的这个profile的信息在一个relational或者说在一个OTP database里。我还有一些订单流水的数据在另外一个streaming database里面？那我相当于需要去去从两个或者多个不同的系统里拿出来，然后在我的application code里面在在各种去加工。其实这是很麻烦的。但如果它在一个系统里，我通过一条C口，我join a表跟B表，最后得到一个结果，可能一行代码就搞定了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:09",
      "text": "所以从一个用户的这个开发程序的简单性的角度来说，我是不喜欢说我底下数据库有N多套，然后在上面去。因为这带来背后带来的这个开发的效率减低，以及增加的运维成本是是很多的。所以为什么我是觉得过去我们有N多种数据库，但是在未来会慢慢的去去归，就是分久必合合合对合成几个大的品类，可能h tab会去统一一些东西。然后当然我相信有一些streaming，或者说有一些graph，或者说有一些nosql还会存在。但是不会说我做一个应用，我需要20种数据库.",
      "speaker": "发言人2"
    },
    {
      "time": "00:23:56",
      "text": "应该不至于有长尾的，这些会越来越小。",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:00",
      "text": "对，跟个人的一个判断。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:03",
      "text": "其实刚刚提到一个问题，就是为什么是现在？就是因为其实我们你刚刚提到了很多这个场景，银行报表这个查询，对吧？这个对实施这个需求，其实新的场景也存在很多年的。我们也看到了这些，在国外无论是人还是说各种各样数据库百花齐放很多年。那为什么我们看到这各大厂商都是最近好像两三年一两年才开始往这个方面去集中发力？怎么去理解这个时间节点？",
      "speaker": "发言人1"
    },
    {
      "time": "00:24:29",
      "text": "我觉得是这样的，就像你说的，我完全同意。就是这个需求其实永远也就那些需求吧？嗯，对，比如说我要买东西支付，给钱、找钱，这些都是永久的需求，而且用户体验好跟不好？越实时肯定越好，这些都是没有变化的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:49",
      "text": "以前的人要去追求这些东西的话，他会发现基础设施没有办法支撑。为什么？比如说我就举个简单的例子，在SSD就是这种高速的闪存出来之前，固态硬盘出来之前，机械磁盘？这些磁盘一次IO可能十毫秒就过去了。你很多时候其实你并没有办法去你的基础设施，没有办法去支撑这些好的体验。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:17",
      "text": "我觉得最近这几年第一个事情是硬件的这个进步是能够足以让这些新一代的应用的开发不至于做太多的work round。就以前当然你说想要做到这样好体验没问题，但是你需要这个应用开发者或者说做这个系统的人要非常厉害。就说我针对这个系统或者这个场景做无数的优化，最后得到一个好体验。但现在我作为一个大学刚毕业一年的大学毕业生，我只要用上太极币，我马上就可以拥有这些。可能十年前、20年前这些老师傅天天优化的系统得到的这种用户体验？就相当于基础设施硬件。我觉得这几年是有一个非线性的一个进步。",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:00",
      "text": "第二个我觉得很重要的点就是云，就是云是在把这些刚才我说的所有的复杂的进步，硬件上的进步屏蔽成一个个很简单的接口，能够去让开发者直接去使用上。就像也是跟刚才我说一个大学毕业生的例子有点像。比如说我现在用，我只需要每个月给20美金给AWS去，我就能够拥有一个T的S3的这个服务。但你想如果没有S三这样的这种或者说AWS不没普及的时候，我要去做一个对象存储。那我可能需要十年分布系统开发经验，我才能做出一个这样的东西。就这些其实会改变在上面去构建这个软件的思维方式和这个软件的表现形态。所以我觉得大概是为什么是现在回到刚才你那个问题，就是我觉得是一个一层一层从底到上的创新，最后引发了一些用户体，就是引发了一些从量变到质变。然后让用户能够以一个开发者能够一个更低的门槛去开发出这些好体验的应用，我觉得这也没什么复杂，就是一个这样的一个过程。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:16",
      "text": "其实我不知道我这个感觉对不对，其实你刚刚提到在pink cap在提出，或者说你们主打这个h type这个概念的这个时候，我感觉那个时候在美国其实反而这个概念并没有那么的流行，对吧？就是美国反而大家感觉是这两年我相信我感觉是如果三四年前你去跟美国的这些公司说，你要换个h type数据库。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:37",
      "text": "可能别人会觉得是什么东西是吧？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:39",
      "text": "为什么就这个是反而在你刚才所说的这些基础设施也好，云也好，它更完善的美国它反而这些数据公司更晚的好像做出了这么一个反应和转型。",
      "speaker": "发言人1"
    },
    {
      "time": "00:27:52",
      "text": "我觉得这样的就是因为美国的基础设施的厂商和这个理念太过于成熟了。怎么说？首先就是太卷了，就是各种细分领域可能都有一个很强的这个player在在里边。所以对于开发者来说，他已经习惯了。我手上有20块积木，我不管怎么样，反正我的能力就是把这些积木拼出来，我就能做出这样的应用。但反而在中国当时啥都缺什么东西都没有。但是业务的压力或者说大家对于体验的要体验的要求。因为说说难听点，中国很多很多to c的创新也是卷出来的，是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:36",
      "text": "对对对，在A公司提出了个好的东西，B公司我马上我一定要提要要搞一个用户点更好的。所以大家会对于这种新技术的拥抱会更加的迅速，我觉得这是OK的。而且有的时候大家一些包括h tap，我觉得放到今天都是一个很新的概念。",
      "speaker": "发言人2"
    },
    {
      "time": "00:28:53",
      "text": "因为大家过去没见过这样的东西，是吧？可能有有很多开发者固有的印象。因为他不知道，所以他觉得这个世界上解解这道方程可能就只有一种方法，或者这个东西只有一种解。所以我觉得更多的还是这个东西，需要一点时间让更多人知道这个世界上有这样的东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:12",
      "text": "我包括我在硅谷，其实跟很多很多朋友去聊，第一尤其是第一次见面的朋友，都会觉得too cool be too。你这个东西的为什么这个我现在还不知道是吧？就是有点这种感觉。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:23",
      "text": "看到在美国很多SARS可能他都是单点做的特别好的，SARS也是这个原因。可能大家觉得我已经像数据库这个领域，这里说可能我本身我数据库人才比较多，我的info人才比较多。我可能对我来说，我再加一个数据库，可能没有那么大的一个痛点，没有痛到让我觉得我要去migrate另外一个数据库，就是为了让我稍微快一些，或者稍微的简单一些。那可能在中国很多他其实未必需要去推倒重来。它可能本身就是一个从零开始的一个过程，可能我直接就是想找最简单的这个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:53",
      "text": "个是的是的是的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:55",
      "text": "我看一下我看到的可能虽然还比较早，但是比较主流的几种h type的架构是怎么样的那如果从一个用户的视角的话，那在这么多自动架构中我怎么去选择HH？",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:08",
      "text": "我觉得主流的这个从产品形态上分几种，一种是这种分开的，比如说像最近如果你在用AWS的话，你肯定会看到这个是对对，no ETL, 就是那个regift no ETL。但是ander的hood它还是说你的TB system跟AB system分开，只是会把这个数据同步的这个逻辑给屏蔽掉。包括像google，google发了一篇论文是叫叫f one lightning，放在VRDB上那篇论文。其实是上游的数据库，或者说spanner，或者说上游的这些TP的database，通过也是一套ETR的过程，然后提供了一个AP的一个side car，然后在上面做分析，就包括我觉得刚才像那个red shift的这个no ETL，它相当于也只是把这ETR的过程隐藏起来。这是一大类，就是这种一类。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:02",
      "text": "第二类的话是啊基于这种原生数据库，比如说像就刚才你提到的那个那个law DB，是一个就比如说上游我还是一个以TB为主的数据库，但是我同时底层存储引擎上能够去有一个对AP的，加速的一个层。但是像这种架构没有刚才那种分开的架构scare duty那么好。它可能仍然还是一个像，可能面向的几个T或者几十个T这样的这种中小型规模的场景，会有一个支持，但是它它本身scale不是太好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:31:40",
      "text": "第三种h type的流派就是像snowflake的unit store。Unit store它其实是一个或者说像data break的。我觉得其实delta有一点点有一点点这样的能力，但是其实没有snowflake的unit store这么长。直白就是可能是我本身有一个AP的data way house，我在AP的data house之上去构建一层这个online serving的一个layer，能够去帮用户去减少这种reverse ETL的复杂性，这也是一种思路，但是它其实是从一个数仓出发的一个东西，另外最后一种的话就是像台DB这种一体化的，就是一个分布式的TP system。然后同时内部会有一些节点，就相当于是提供这个AP的服务。但是在一个大的统一的查询接口背后，是一个纯纯云原生全天生的是一体化的一个东西。大概这四种这个是算是京东store跟我们有点点像。对我反正我觉得不同的应用这个流派有不同的应用场景，所以你也很难说如果我。",
      "speaker": "发言人2"
    },
    {
      "time": "00:32:56",
      "text": "是挑选的选型，对我应该怎么去挑。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:59",
      "text": "我觉得抓住一点。对我来说，我觉得选一个TP数据库就相当于如果你要去选一个h tap，基本上你按照TP的这个要求去选，就是哪一个数据库的这个TP能力最好，你就选哪一个。对，这个其实是因为因为你想AP有很多，如果比假设这个h type的这个system，它的AP能力有点不满足要求，对你其实永远还可以找到一个跟他来去配合去补充的一个东西。但是你想既然你都要用h type了，那你一定是有一个online service或者说对外service的一个需求。TP的这个service的需求，像我刚才说的要求是很高的。所以对我觉得这就是一个选型的逻辑。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:38",
      "text": "所以另外一个理解就是不看好snoopy的unit .",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:41",
      "text": "coral没有这么说，我有这么说，我也这么说，我很看好，我非常尊敬，是no flake。用型不一样，我觉得主要是用户群不一样。其实刚才我说了，you store针对的这个用户群，我个人理解是他发现他有很多用户在snowflake之上。再往后这个用户旅程往往后一步。比如说我的scientists分析完这些数据了，再往后的一个旅程其实是reverse ETL就是真正的是实时在线的。我觉得他可能相当于reverse ETL在上面提供一些数据服务，大概就。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:15",
      "text": "这个有意思。关注snowflake的这个同学可以关注一下，以后他们每一次endings report，看看看他们的这一块的业务进展是怎么样的。其实我们刚才也讲到，听起来你看各大厂都在跟进推出这方面的产品。那你觉得对于pink cap或者说像single store这样的，就相对还是比较早期的这个公司来说，那这个意味着什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:38",
      "text": "我觉得这个竞争和格局非常好。其实就是终于这些数据库厂商开始在回归一个点，这个点叫用户体验。你会发现h type其实是就相当于就像我刚才说的，它是让开发者更简单去构建他的这个应用。所以我觉得未来这个格局就其实很简单，就谁能够提供这个越简单越快的能够让用户去从beta到产生这个商业价值，去把这个链路变短的厂商，谁就会赢。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:14",
      "text": "对，那那我可以理解为，其实你刚才提到对用户来说，他要去更换一个TP其实是非常简单一个决定。我可以这样理解，就是可能h type其实是为一些厂商提供了在他在你完全替换它的TP之前的一个切入的一个路径，就是很有可能以前我没有办法完全替代你的oracle，但是现在我的新业务或者对我的新业务什么的，我可以再用h type。我同时测试了你的AP和TP的这个能力。那其实以后要可能替换被替换oracle可能就有了一个支点，会越来越容易。你们最终的目标还是替换oracle，可以这么理解吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:35:51",
      "text": "我最终目标不是想替换谁？我最终目标其实就是想还是刚才那个去构建一种新的大家去使用数据，或者更让大家更方便的去去使用数据。或者说我其实当然就是从老的新system migrate过来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:11",
      "text": "是一个很重要的一个话题。但是当你有一个新的品类的database的时候，一定会有属于这种新的品类的更新的应用场景出现。所以oracle诞生的年代是因为oracle那个年代，它的application就应用场景符合了他的这个产品的形态。然后反向oracle的能力越来越强，然后带动这些场景。我觉得h type一样，一定会有属于h type database的场景出现。对，就像我刚才说的很多东西其实都是属于h tap比较舒服的一些场景。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:36:43",
      "text": "就有点像当年这个MongoDB。虽然一开始大家诟病他各种不是最好的，绝对不是那个时代最好的DB。但是因为顺着这个移动联网这一些新的场景。",
      "speaker": "发言人1"
    },
    {
      "time": "00:36:53",
      "text": "它起来没错。其实它也是你想蒙DB的崛起，也是从这个应用开发者的体验入手。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:00",
      "text": "对，那我们光是就h type这个问题就聊了这么久了，太能聊了。刚才你其实不断的强调应用开发者应用这个角度。你那边你那篇文章里面提到一个很有意思的一个说法。就是你说我们看到这么些年开发者的其实应用它的开他开发应用还有开发工具理念等等都发生了很大的变化。但是其实数据库过去这可能十几年、几十年，它其实没有特别本质的变化仍然。SQL is still the king. 我好奇是你怎么看待就是这样的一个gap，这样的gap它现在看来它产生了哪一些影响？",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:38",
      "text": "为什么CQL非常重要？因为SQL是一个跟实现无关的东西，它就像英语一样。比如说我们这个世界上这么多不同的文化，不同的民族，但你出国旅游，你只要会说英语，基本上80%的国家我觉得都没有任何问题。它其实是一个共识，不是说SQL多好，而是因为它是共识。所有的程序员大学除了C语言以外，另外一个要学的东西可能就是这个SQL。就人人都会写SQL，这个是第一点。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:06",
      "text": "为什么SQL如此重要？而且目前来说SQL提供了去操作数据足够的灵活性，就是可以cover可能百分之八十九十。如果靠不了那百分之十二十的那至少还有有其他的这种data base能够去补充。所以我觉得第一点，它是一个defector standard，你没办法回避。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:27",
      "text": "当时蒙国DB我觉得诞生的那个年代，我非常崇拜蒙国DB它相当于自己造出了一个nosql或者说一个方言。但是我觉得MODB的这个故事很难再复制了，因为当时他的那个那个timing属于传统的SQOL的database，还就去应对那个年代的新的application，它它匹配不上能力匹配不上。对芒果DB第一它匹配上了这些能力，同时又一个更易用的一个interface去讨好开发者。我觉得你现在已经很难复制了。因为现在的C口的生态，以及现在的这些分布式的这些SQL的databases的能力，已经strong enough去去去匹配现在的这个application。所以大家又开始去去回归这个SQL。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:15",
      "text": "第二你会发现SQL的生态不仅仅在于数据库。比如说像最近两年我发现有很多很好玩的一些在SQL上的应用。你知道有一些有些公司开始用SQL来去。做机器的管理？就是里面你这个写SQL，这个很很好用，你可以用SQL来去，比如说DBT，DBT这个公司用SQL来去做这个数据的转化transformation对吧？然后数据分析，包括RTB这些都不用说了。所以最后你会发现SQL变成了一个沟通不同info软件的一个通用的一个language。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:52",
      "text": "所以就这点让我非常的兴奋。所以这个万物接口SQL是一个很很有意思的一个现象。所以我觉得这是一个一个变化，但是我觉得也是个趋势。以后可能我去设计一些系统的时候，我可能会优先去。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:11",
      "text": "因为对操作者去提供可能有两个东西，我觉得是跟SQO是很像的。一个是文件系统。文件系统其实是一个也是所有人都知道什么是文件系统。你可能文件系统背后底下是不同的其他的system，但是你一旦用POS x的这个文件系统API往外提供，你就可以用这些文件系统的交互方式去操作这些东西。SQL也是一样是吧？就是你可能底下是不同的东西，但是你通过这个SQL去屏蔽掉背后的这个细节。对，所以我觉得对这是一个我观察到一个很有意思的一个现象。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:44",
      "text": "所以你的意思是说就是我们看到的这个数据库本身，你仍然围绕SQL，它没有它的这个变化。但是就是因为SQL本身它的扩展能力仍然是围绕C口整个生态都可以满足应用应用开就开发者工具这一层的这种变化。而且这个变化可能在可见的一个叫中长期的中中短期的未来还会持续下去。",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:06",
      "text": "我觉得持续下去，而且就像刚才我说的，万物皆可C口。所以对于开你你仔细再再反过来想，其实对于开发者来说这是好事儿。因为他只需要学会随口，那其他这些东西，一些复杂的东西他就不用管了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:41:17",
      "text": "我在文章里面也是你这样强调一点，你说数据库软件的定义原理是什么？对于数据库来说，一个很本质的问题是开发者到底需要怎样的数据库。我好奇你觉得你的这个论断是一个被广为接受的吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:31",
      "text": "当然会，因为因为我我还是像刚才说的，我其实是一个非典型数据库开发者。我几乎所有的思考的出发点都是怎么去用它。但是很多数据库从业者，尤其是可能很有很strong的database开发背景的人会强调，我似乎要更高更快，然后我我要跑分。但是说实话我觉得真正站在应用开发者角度，我可能观察到99%的用户，你也没需要这么极端的性能的要求，是吧？所以而且这个东西又不是一个跑分的一个游戏，所以你怎么去思考在用户开发应用中的这种friction，就是他的非常沮丧的，或者说一些纠结的一些点，我是比较喜欢从这些点去出发。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:20",
      "text": "然后我发现用户花了很多时间再去维护不同的da platform，不同的系统有自己一套不同的运维逻辑。我还要部署运维安装不同的数据库。我的优化方式还不一样是吧？一个或者说我的开发软件的方式，一个nosql，一个SQL，你可能在各自的领域里面做的很好，但是你站在用户的这个角度去看，那全都是很糟糕的体验。所以回到你刚才那个那个问题，就是应用开发者到底需要什么样的数据库？我觉得还是我刚才的那个那个点就是好用的，简单的。你别让我学学新东西，你你也不让我太太操心，然后而且现在的开发者的开发软件的路径跟过去不一样了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:43:08",
      "text": "其实是尤其在云上，你会发现有各种各样的云弗，比如CICD，比如说这些就说CICD。你能不能快速的large起一个测试的集群，这个数据库就在那已经ready了。然后在上面你做完你的应用开发测试，最后再再缩回来是吧？在过去你可能说你一个多块镜像里还要我再去安装一个什么样的mysql whatever之类的。那如果我就举个现在这个例子，我作为一个数据库的service provider，我再往前走一步，我就说我现在有一个pure service的这个system，我浪费的时间可能就几秒钟。你就可以去直接融入到这个CICD的这个过程中，让你去直接的在在你的CI的环境里浪费起这个servers的tear。可能data已经already there，是吧？就像这些很细微的开发者的体验，其实是被过去这些数据库厂商忽略掉的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:06",
      "text": "所以怎么说呢？我其实就是那那句那段话强调的点，就是我们去看现在的软件开发者的一天，它都花时间在什么地方上。这些地方里面有哪些是一个database service，能够帮助它提升它的日常效率的。对这些地方可能就是你要去思考的。因为现在还没人做这些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:44:30",
      "text": "所以你觉得说是就像一个所谓的木桶原理一样。你觉得其实现在的这个所谓数据库的性能，它这个版其实已经很长了，已经可以满足绝大部分的绝大多数场景了。是的，就是说现在可能反而是这个开发者的体验成为一个核心能力。没错。你跟别人讨论的时候，会不会有一个数据库开发的硬核工程师架构师来跟你说现在这个数据库要提升它性能，还可以用某些方式实现一个质变，然后对你一个降维打击。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:00",
      "text": "我没有遇到过这样的质疑，因为我觉得大家可能心知肚明，或者说屁股决定脑袋。就有的时候你面向的这个客，或者说你相信什么样的世界，你就会看到什么样的世界。可能比如说我做出了一个全世界最快的数据库，我看到的客户就是那些最极端的场景，我就要搞定他们。但是我现在看到的是个更广泛的客户的群体，我选择了这条道路，我觉得两种不同的各种路线，只要存在就有它的这个道理，所以这没什么好争执。",
      "speaker": "发言人2"
    },
    {
      "time": "00:45:30",
      "text": "然后比如说你性能跑的巨快牛逼，但是我这个东西巨好用，那我也很牛逼。不是我觉得海外的公司现在在我看来就是在像我刚才说的那个点上，接受度都很高。就是慢慢的这种用户体验的关注，以及这种更广泛的应用场景，对这种研究，其实比比国内的这些创业者和开发者要深入很多足了。这个就现在用的house可以做。我觉得这是他通过他的这个优势打开了一个新的。就像在克里奥出来之前，有很多场景是大家做起来很别扭的，我配合redis时候配合一大堆东西，然后组合在一起，但现在clay house就能搞定。就刚跟跟刚才我对h type的这个推断是类似的，就是说一个新东西最后一定会原来有些做的很别扭的东西变成这个新东西的市场，这很正常。",
      "speaker": "发言人2"
    },
    {
      "time": "00:46:25",
      "text": "其实讲到这开发者体验，我注意到你在好几个场合里面都会提到visit这家公司。把它作为典范开发者对提高开发者体验的一个典范。你可以跟大家简单介绍一下维萨这公司他们是做什么的，为什么你会对他们这么感兴趣？他们的因为他们其实不是做数据库的。对，但是他们的一些产品设计或者理念怎样影响到了你对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:46",
      "text": "产品的一个思考。我cel首先我说一下一些background。我现在是一个你可以认为是一个这种在线网站或者应用托管的一个平台。它背后有一个开源项目叫next JS然后next JS你可以认为是一个现代化的前端开发框架。然后它依托于这个开源社区以及这个非常流行的项目，再往前一步去做这个应用的开发、测试、托管以及部署的一整套的服务。所以我觉得他他他想的很清楚，就是一个应用的一一个应用开发或者说的一个应用的一生是首先一个开发者我要写代码，我要去测试，我要去预览，我要去这个分支管理，我要去上线。甚至我到后来我上线了以后，我有不同的这个region或者说不同的这个地方的服务，我要去做这个边缘的分发，就CDN什么这种东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:47:55",
      "text": "过去如果你要去做这样一个东西的时候，你会发现你在写代码的时间是很少的。反而是去处理这些各种各样乱七八糟基础设施的要花的时间以及要付出的金钱是很多的。所以我sell它的视角就是转变到这个开发者他整体从开发应用到上线应用的这个流程里面有哪些不爽的地方，还有针对性的优化这些不爽的地方，能够让开发者真正专注于去编写他的这个应用的业务逻辑的代码。因为next JS这个东西就很适合去写写前端的这些东西，构建应用非常快。因为它也是基于react的一个一整套东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:48:33",
      "text": "所以这里面会提到有一个假设就是我经常说我们过去的这些info的开发者做出来的东西有一个问题就是对于一个应用开发者来说，application开发者来说，现在大势所趋就是前端开发。那前端开发人会越来越多。但是，你如果做一个应用，这个应用面向100个人开发，面向100万个人开发，在面向1亿个人开发，可能也同样是一个应用，你的本质没有差别。但是你知道info可能是千差万别的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:49:09",
      "text": "在过去这个就是一个特别大的痛点。比如说我面向一个一亿人开发的这个东西，他可能这个架构是非常复杂的。但是我只要他想去做到的事情，就是我尽可能去把这个体验的连连惯性拉长。就比如说我可能就像刚才说的，我面向100个人开发的这个system，这个架构，或者说这个代码是这么写。那我通过我sale这个平台，能够让这个开发的流程和体验一直延伸到可能你能够支撑100万或者说1000万的用户，这个价值就很高了。而且我sale他还有一点非常聪明的点，就是他虽然是他很清楚自己定位是一个这种托管，或者说我去帮用户去去就有点像A的bless的这样的这个平台，他的选择的合作伙伴。他是通过比如说数据库，里边有有TDB这个server list，包括有各种各样的东西通过他的marketplace整合进来。在他的这个流程里，这个体验里面，所以它催生出了一种我叫做full spec server的开发体验。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:16",
      "text": "就是你整条链路上你看不到基础设施。但是底下的从我cel开始到背后的这些info的供应商，像pink cap这样的，我在每一层都能够去提供能够横向扩展的这个体验？所以我觉得他他就很棒，相当于真正彻底的屏蔽掉了这个info对于application开发者的影响。AW都没做到这一点。我觉得比如说你在ad上开发一个应用，你还得去买服务器，还得再选instance，选region，然后选各种各样的服务，对吧？所以这是我很喜欢他的地方。",
      "speaker": "发言人2"
    },
    {
      "time": "00:50:49",
      "text": "这还挺神奇的。你想已经有这么多开发者，就是你你开发的感觉就默认我要用个AWS什么的。但是结果却让一个我需要一个第三方的一个111个公司，最后成了一个反而有点像集大成者的一个对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:03",
      "text": "是的位置。所以其实这里面涉及到一个哲学问题，你真的要做好因素。你其实可能你要关注的点不是因素，你要关注的点是更上面的东西。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:17",
      "text": "那你觉得这些都屏蔽掉以后，对于在它的生态里边的这种种的数据库，泰迪B是其中组。又又意味着就。",
      "speaker": "发言人1"
    },
    {
      "time": "00:51:26",
      "text": "意味着意味着我在这一个比如说数据库的这个圈子里面，或者说这一层里边，我能够给这些用户提供什么样的价值。其实我觉得还是一样，反正就是一个自由市场，大家都可以选。然后反正我就非常朴素，就是好多东西一定会脱颖而出。现在这个时代，尤其是是类似像我cel这种东西越来越普及了以后，怎么去定义好？对，就是简单用户用起来没有friction，就是便宜KSU够是吧？就是这些点你都我就举个特别简单例子，如果你在vista上提供一个server list的分库分表方案，跟提供一个server list的一个弹性的h type方案。从用户体验角度来说，我能干的事情更多，我更灵活，那我一定会比他们拥有更好的用户体验。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:16",
      "text": "再说一个简单的例子，同样的server less，我的一个启动时间可能是5秒钟。另外一个server LES的这个providers，它提供了这个service tier。他可能skill out的速度是这个五分钟，你这5秒钟就比他五分钟的要强，对吧？所以就反而。",
      "speaker": "发言人2"
    },
    {
      "time": "00:52:32",
      "text": "让用户其实更容易去对比了。因为你在这个技术上其他的方面已经相对来说比较统一的。我的对比你的时候就不用再去像以前数据库，我要考虑这么多的对这个因素。",
      "speaker": "发言人1"
    },
    {
      "time": "00:52:43",
      "text": "是的，因为开发者的门槛在变得越来越低。前端开发这个就是我觉得上手的这个难度会更更低一点。但过去的问题就是说你上手是容易，但你做大了就比较难。但现在我觉得就像我刚才说的，像我CL，包括像我们会把这个你随便写的一个应用，它能够支撑的用户量能推到一个很大的一个量。因为全站都已经service less化了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:10",
      "text": "所以我觉得未来就是让前端开发者越来越具备这个free stack的能力。其实这一套技术栈可能会引发我们对于所有的开发者工具一个重新新的一个角度的一个的一个思考。正好其实刚才我们在讲到excel的时候，你也提到好几次是这个service less serverless。最后最近的一篇文章里面我也看到，其实你对于所有的这个你说对于新创的所有数据库公司，如果说前两年你的门票是云原生的话，那么今年的门票就变成了so less没有service，基本上不了牌桌。这个是挺有这个挺有意思的一个论证。因为可能你是跟一些做数据库也好，就是作为info的人来说，他会觉得说我讲了那么久，雷声大雨点小，还是一些非边缘的就比较简单的一些应用。可以跟大家具体聊一聊，哪些场景中你觉得所有其实已经比较普及了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:01",
      "text": "我觉得我们把两件事情合在一起看。第一个是云原生，就是creative，是我觉得是第一个mail stone就是传统的这个info的软件。第一波会经历这个云上的infrared的改造。比如snowflake我觉得是一个很好的例子，甚至我觉得像包括aura什么cloud native database这些，就是我觉得是第一代的info软件在乘以cloud linker以后长出来的一些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:36",
      "text": "第二个阶段就还是我一直在强调的。如果你从用户的用户体验和用户使用这些东西的角度来看，还有哪些东西是可以被优化的。第一sizing，第二就是具体的这instance或deployment的细节。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:53",
      "text": "传统的这些class native软件还没有彻底屏蔽掉。比如说你用ara你you still need to about那个instance的type，或者说我的机器是什么样子。但是你试想一下，我作为一个应用开发者，我的应用还没上线，我怎么知道我这个东西有多少人用，或者说我怎么的在哪个region最好，然后数据量有多大。而且你想像这种东西，就是你一旦选好了，你就得给钱的，是不是在云上一切东西都是我那我能不能做到，我就不像打车一样是吧？这打车不是个好例子，他计费的力度能不能更细，就是我我我用多少你就收我多少钱，你也别让我关心太多的这个底下的一些infer的细节。就是你给我给我定好一个workload的一个单位，那我就按照这个单位去给你钱，然后我没有workload的时候你就不收我钱，对吧？",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:51",
      "text": "就纯灵活的这种机架。因为我发现大多数的这个应用，尤其是一些新的应用，它其实并没有这个。它可能有时候它火了，它就上去了，自动的skill。但是它没火的话，他希望一毛钱都不要收它。所以从用户角度来说，我会更喜欢用这种东西。因为我知道当然有些场景不太适合sol list。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:12",
      "text": "但是我觉得很多场景，尤其是新场景，对于这个solid它是一种更简单的交互模式。所以稍微总结一下，我觉得对于service第一个标准，它屏蔽掉所有的deployment细节，同时给出一个计价的unit，这个unit很细。第二个这个要点就是任何一个services system都能够sk EE to zero，这个是跟传统的最大的区别。Skill to zero就是能够在没有的时候不收钱。这个是一个server less跟传统的class native软件决定性的一个区别。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:45",
      "text": "第三个这个区别我觉得是你的这种胚就叫胚s go叫如果你从一个休眠期，或者说你从一个从0 costar的时间，这个时间要非常短，短到你可以去融合到你的这个应用的开发体验里边。就比如说你没流量，你不能说有一个用户过来访问了，你等了半个小时，你这个系统才wake up起来。你可以说这个连接过来以后，你等5秒钟，这个就正常了。对，就是这个code star的时间要小。我觉得这几点加起来就是一个定义新的这种，不管它是service less database或者server less application，几个标准。",
      "speaker": "发言人2"
    },
    {
      "time": "00:57:29",
      "text": "那其实我们看到虽然说比如说像AWS，其实它所有的主流的这个数据库，其实现在都有了service的服务，对吧？然后现在就包括像这像neo，这些都是新对对对service数据公司。但是的确这个也当代感觉还是好像还是在比较早期。就是要它能够变成一个主流的一个一一个方案，让所有这些核心的应用可能都会在上面跑。你觉得现在还缺哪些要死呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:56",
      "text": "我觉得缺时间，就是像我刚才说的，很多开发者甚至还不知道这个东西。因为你想刚才你说的这个东西，其实很多都是最近这一两年才出现的。包括他DB自己的这个server less的这个服务，也是刚刚才推出来。所以我觉得过去是说这些东西的底下的基础设施还不ready，或者说大家再去构建这种东西需要一些时间。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:20",
      "text": "现在相当于第一波server less化的info软件出现了。然后我觉得未来几年会有越来越多的这个人知道这个东西，使用这个东西去构建，利用这些东西来去构建应用。有更多成功的case以后，再再feedback回来让更多人知道。这个是一个新技术这种成熟度曲线？这个我觉得需要一些时间竞争角度。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:47",
      "text": "你觉得还要哪一些？你觉得可能需要一些突破的呢？",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:54",
      "text": "我们现在做出了第一版，然后大的这个突破，我觉得是目前来说，我觉得已经给出了一个答案了，就是没有太多的。大方向上的这个问题，但是会有很多很多细节问题，但这些细节问题就太技术了，今天就不一定展开。我在那个文章里面写写了一些这个技术上可能会出现的一些挑战，但是看起来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:18",
      "text": "那些都像是一些engineering.",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:22",
      "text": "的对多层面的一些改进。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:24",
      "text": "你觉得大的门槛其实已经迈过去了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:26",
      "text": "对我觉得是的。所以为什么我说server less是一个它不是一个技术名词，它是一个描述用户体验的一个名词。因为在SOS里面，你去构建soleless application的方式，或者说基础设施都是云原生的。这个时代就已经有的东西，那无非还是SV，还是容器，还是一堆这些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "00:59:44",
      "text": "对我注意到就是你在这个tg b这个def com，今年202去年202年的这个f com上面也提到了一个挺有意思的角度。就是除了刚才我们所说很实用的角度这个之外，service进一步的想象的空间，包括这个data sharing这些我觉得还挺开脑洞的，可以大家讲一讲。就是你觉得真正实现serverless以后，它进一步还能带来一个怎样的一个未来？",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:07",
      "text": "我觉得第一个其实是就the shy那个那个是这样的，就是当你的数据大家都在S3上，其实s three都是怎么说AWS或者说这几个大云厂商的，你可以认为SV就是新的硬盘或者新的磁盘。你想这个不同的用户，不同的租户上的数据其实都在一个大磁盘上。你数据之间的打通，其实这是是很简单的一个事情，对吧？所以我觉得会催生出一些数据交换的生态。其实snowy已经在做这个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:00:42",
      "text": "我刚想问就是你觉得这个跟snowfall y的这个对，因为也提出了好几年，你有什么不一样的？",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:47",
      "text": "有不一样的就是solo还是刚才我说的，我会强调serving的这一层，就是data交换。你可能就像一个good dox，我share给别人，大家可以看对吧？对于这个snowflake来说，如果它是一个纯的data warehouse的一个产品形态，它可能只是这点可能是他重重度优化的东西。但是我觉得如果是一个h type database server less化以后，再加上这种dataset之间的打通共享和隐私计算的技术，能够再往前走一步。直接对外提供在线的这个服务。",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:25",
      "text": "我举个例子，我现在我作为一个我手上有可能有一些公开的数据集。比如说我有中国今年高考学生的考分的数据集。同时我又有一个不同城市的就业的数据和区域的数据集。我现在我想提供一个服务，就叫高考填报志愿服务是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:01:48",
      "text": "过去其实你可能要从不同的地方收集这些数据集，然后再提供一个服务，然后再charge最终使用这个服务的人的钱。现在我其实很简单，我如果用上像TDB这样的这种h type database，同时底下这data set可能都在一个大集市上面。那我就直接我就写application code去连接不同的数据，我就能就很快的提供这个在线的服务。所以我觉得再往前走一步会变成API或者service来去驱动这些数据的交互。而不是说仅仅是这个数据集。我给你一个权限让你看一看。对，是的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:02:26",
      "text": "而是从所有公司的把你的这个对整个架构的这个层面，就不只是一个数据库选型的问题。对对对，而且整个架构设计的这个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:35",
      "text": "我是觉得就是我可能有点crazy。可能再往后的未来数据库选型这个事情就不是一个特别大的事情。就因为你想如果大家都是h tape的这种database，以下数据集也都是差不多打通的那其实开应用开发者的这个体验是很简单的。所以他选不选，其实这些可能90%的database厂商都能提供他想要的服务。你想如果当有那么一天了以后，其实用户会倾向于把更多的数据存进来。因为只有数据的这个交叉才能提提才能创造出更更大的价值，对不对？所以它就是一个又是一个大的飞轮。就是因为你在上面提供了很好的体验，以及有人在上面赚到了钱，一定会吸引更多的人，把更多的数据再弄进来，然后再提供这数据孤岛。",
      "speaker": "发言人2"
    },
    {
      "time": "01:03:23",
      "text": "我们刚刚讲到的这个现象，其实大家天下苦久矣。其实我最近看到不少是这个data info的工作，大家都想尝试做这些数据孤岛那那层。但是我感觉听你这么一说，我感觉如果说这个数据库这个格局本身它产生这样的变化以后，那是不是对内层的需要就变得有点伪命题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:44",
      "text": "或者这么说，我觉得serving就是如果如果你往那个方向思考的话，最后核心的是在于谁来去构建这个service。对，就是service其实是一个还是这样会回归到TP的这个需求里面，对吧？就是你你的这个unify这一层你能不能做有四个9或者五个9的SLV，你能不能高性能，你能不能强一致？其实又回到了这些地方。如果你是yet another data rapper，能够让你去做一些简单的不可靠的分析。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:24",
      "text": "那那人都能做对。对，如果你只是在上面做成rapper的话，那其实你的核心的这个boat neck其实是掌握在你下面rap的那些对东西里边。其实你不是就很难是由你来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:36",
      "text": "对变成核心竞争力。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:38",
      "text": "你在很多场合也提到过，就是什么是一个好的数据库跟什么是一个好的数据库服务，或者好的数据产品，其实是很不一样的我。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:47",
      "text": "觉得数据库跟数据库服务的关系就像一个车的车和一个车的发动机一样。你说一个车的发动机它是车吗？肯定不是车。比如说你不可能说我去个4S店买个车，然后那个厂商跟你说，我给你个发动机，你回去自己装去吧。",
      "speaker": "发言人2"
    },
    {
      "time": "01:05:04",
      "text": "我觉得现在我们去看待数据库，已经从一个内核或者说一个软件本身变成了一个m to end的一个用户用户体验追问的一个东西。我也举个简单例子，如果你去看数据库的话，就刚才说的核心的这些性能，这些指标很重要。但是如果你去看到一个数据库服务的话，那整个比如说我从数据的导入，从什么地方导进来，我怎么导出去备份恢复，包括CDC change data capture？包括这个调优，包括这个诊断，包括一些甚至界面。所有的东西其实都是这个体验的一部分，所以我觉得要求更高了。好。所以我觉得从用户的角度来说，他cover了更长的一个用户去使用数据库的历程，这是一个很大的必要。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:03",
      "text": "所以就不只是说把一个性能好的数据库做的更开发者体验，用户界面更友好的这个话题。而是其实把你的整个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:11",
      "text": "链条对拉长了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:12",
      "text": "这个其实就涉及到你到了另外一个，可能这个是相关的。就是你说到你知道说新的数据库公司，其实它是需要一个新的研发组织的。这个是不是就跟你刚才。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:23",
      "text": "所说的有有点像有点像。因为你想我们刚创业的时候是一个做数据库的公司。所以当时对于人才的这个要求，当然这跟阶段也有关。就是说我是不是有做数据库的这个存储，存储系统，分布式系统的这些硬核的经历。其实当时对我来说更重要的就像造发动机的这些工程师。但是你最后现在回头过来看，如果我要去做一个database service，fully major service on public cloud.",
      "speaker": "发言人2"
    },
    {
      "time": "01:06:51",
      "text": "你会发现你需要的人更多的是在去做这种微服务，或者说做各种各样的这个就是包括像刚才说的PM用户体验，就是各种各样的这些东西。你就会发现发动机那部分可能并不是你组织里面最大的团队了。你可能发现做外观的，做变速箱的，做其他部分的，这些可能会花的精力，人的时间会比做发动机的人更多。然后作为一个数据库的这个创业者，尤其是有技术背景特别强的技术创业者来说，通常会低估其他这些部分的的难度和时间，这就会造成很大的问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:37",
      "text": "你们的这个组织也发生了很多情况。就是我好奇就是像你刚才所提到的这个变化大概发生在什么样，什么时候？然后在这个组织的这个变革中遇到了哪一些挑战？",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:50",
      "text": "我觉得第一个挑战就是意识到我们其实在做一个数据库服务，而不是在做一个数据库。这个什么时候的事情？我觉得从虽然我们从day one开始就想做这个data base的服务。但是我觉得大概18年的时候，我犯了一个错误。就是原来我去思考说做一个data base service，就是把database的内核放在cobs上去封装一下，然后部署一下子就自然就云原生了。这个错误导致了我们在一开始做这个云服务的时候，非常的不顺畅，为什么呢？因为平台或者说可能那个团队跟数据库研发团队是完全分开的。在过去我们的这个架构里边，所以做平台的人其实并不太了解database，然后database的人也不太了解这个平台之后，其实两边在衔接的时候就很很别扭，所以因为这个问题来来回回调整了好几次。",
      "speaker": "发言人2"
    },
    {
      "time": "01:08:46",
      "text": "这个组织直到20应该是2022年的年初，我们终于下定决心，就是说整个研发的组织变成一个以云为中心的一个组织，就我们研发团队的的leader就不叫database的，叫IND team的leader就叫cloud，你就完全负责cloud。然后靠这次就是你的事儿，你再去去思考，就把整个这个事情去当做一个大的事情来去来去思考。所以这个转变导致了我们整个，其实这里面涉及到一个很有意思的话题，叫做康威定律。",
      "speaker": "发言人2"
    },
    {
      "time": "01:09:23",
      "text": "康威定律的意思就是你的比如说你是一个软件做软件的公司，你最后做出来的这个软件的系统这个架构会忠实的反映你的这个组织的架构，就很有意思对吧？所以其实你想做什么样的软件，你最后画出那个软件的架构图以后，你其实自然会得出你的这个公司的组织架构图。所以原来的问题就是因为我的内核的团队跟platform的团队完全是分开两个团队。到最后其实这个得出来的软件也是两套分开的东西，合不到一起。所以当你现在做一个整个大的一个重新规划，或者重新思考这个系统的时候，我完全按照一个这种多租户云原生的这种设计。你设计出来的东西你一看，我造一辆车，其实我的那个内核那部分是这个车中的一小部分而已。然后最后整个组织就围绕着这个重新设计了一遍，这个是去年一年，反正我在美国其实也是一边在开着飞机，一边在换轮子的这个感觉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:10:24",
      "text": "所以很多公司号称自己云原生，其实是所谓的伪云原生公司。是不是就是你刚才所说这个情况？",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:31",
      "text": "简单来说，你只要看一个很很很很很感性的一个标准。你号称是个云服务公司的话，你做云服务的人应该比做数据库的人要多的。如果你发现，可能80%人全都是这个硬核数据库工程师，那大概率可能这个公司还没有准备好变成一个connected的一个事情。而且这个转变的过程其实是还挺痛苦的，所以如果你一开始想清楚的话，这些问题都会很好吧。你你看你看我现在招了很多以前在很多大的互联网公司去做这种服在线服务的，做安全的，或者说做这个就是更像一个传统的互联网公司里面微服务架构的这种架构师，而并不是这个数据库内核的工程师。",
      "speaker": "发言人2"
    },
    {
      "time": "01:11:17",
      "text": "对，其实说到组织架构，我想从另外一个角度去讨论这个就是其实用户他在使用一个数据库方式不一样。其实也意味着用户他自己的这个info团队的组织架或者开发者的这个架构的这个团队的组织架构也会发生变化。而且你看到的在一线的又发生哪一些变化，这个又又是怎样影响到他们的一些决策流程和决策的方式。",
      "speaker": "发言人1"
    },
    {
      "time": "01:11:44",
      "text": "过去我们去看这个data的团队可能是偏在线服务那块是运维或者BBA，或者说这个应用开发者。可能有个separate的一个就分开的一个团队是做数据分析，或者说这个大数据，或者是数据仓库。这两个团队其实过去可能是分的很开的，中间通过一些ETR这些些pipeline去连接在一起。但是随着像h type或者说一些新形态的这种数据库出现，你会发现开始应用开发者的话语权在变得越来越高。因为毕竟它是更接离业务更近。然后TP的就相当于对TP这块这个service的这种，不管DBA，或者说对于这些偏OLTP这边的infer的人员提出了更高的要求。你不仅仅要对SLA负责，你还要对一些比如说业务的迭代速度去负责。所以我觉得第一个我能看到的趋势就是一些创新型的业务开始从TP开始去模糊这两个组织之间的界限。",
      "speaker": "发言人2"
    },
    {
      "time": "01:12:49",
      "text": "对，所以这个是所以说为什么会有一些中台或者这样的这种platform。对，platform但这platform又跟传统platform不太一样，它是可能更偏业务。因为它新一代的这种info像TDB这种，它本身的info的复杂性已经降了很多了。所以其实制约往前走的这个就是application developer的生产效率。所以我觉得一个会发生的事情就是AP跟TP两个团队之间，不管是说有个新的团队出来，去变成一个更更灵活的团队，或者是应用开发者这边的话语权会变得越来越高。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:25",
      "text": "但是最后得到的效果就是这个应用迭代速度会更快。因为以前的传统的组织架构，它从data到service到insight这个链条太长了。对，所以其实像刚才我说的这种组织的变革，其实跟上CEO或者CTO说是更好的。因为如果你从下面开始去说的话，大家会就想永远都想。",
      "speaker": "发言人2"
    },
    {
      "time": "01:13:52",
      "text": "维护自己。",
      "speaker": "发言人1"
    },
    {
      "time": "01:13:53",
      "text": "对，维护自己的地方，或者说这跟我有啥关系是吧？但是像go to market speed以及应变速度，这是CEO最最在乎的事情。尤其在这种这么卷的时代，同时经济环境也不好，大家都想去做一些让自己的产生价值更快的事情。所以我觉得像这个东西很简单，你只要抓住这个业务的视角就OK了。其实我觉得技术的视角我们少看一点，我们多看这个业务的视角是更好的。所以其实业务也技术也是为业务服务的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:29",
      "text": "所以这是为什么我这么强调application developer的生产体验。就是因为他们的体验好了，他们自然迭代速度快了。自然迭代速度快了，你就能够有更多的机会去尝试新东西，做新的业务，产生更好的价值。",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:43",
      "text": "其实pink cap很重要的一点就是开源这个东西发生。大家也注意到，其实泰迪冰箱已经是跨越了从0到1，我积累很多开发者，一个很活跃的这些hub社区的一个过程。而到了一个所谓的商业化公一个公司的这个角度。那你觉得在这个过程中，这个社区开源社区对于你们的作用，那你们对他的一个，方式有有怎么样的变化？",
      "speaker": "发言人1"
    },
    {
      "time": "01:15:06",
      "text": "我觉得先说变化，就是1到10最重要的变化就是公司要往后退，就是让这个社区能够尽可能的自己运转起来。这怎么说呢？就是我一直觉得社区运营这件事情是一个伪命题。就是说如果一个社区真的好，他其实不需要运营，他自己就能够运转起来。然后如果这个社区不行，或者说这个东西就是没什么用，然后你还花很多精力去运营它，就也很奇怪是吧？所以我觉得对我来说，1到11个最重要的标志或者说目标就是这个社区能不能够自己的运转起来，我觉得这是我现在就是相当于PK往后退，然后社区要往前走，这个是这两年我觉得。做社区的一个主线。",
      "speaker": "发言人2"
    },
    {
      "time": "01:15:59",
      "text": "另外我觉得开源社区对我现在这个阶段的意义，更多的是在于培养用户的一个这个怎么说呢？第一次the bill trust，可以看到确实这个东西有好多人在用，而且作为一个客户，这边他招聘什么相关的人才，其实这个随便一搜，有都有类似相关的经验。我觉得这一点是这个ecosystem很好的一个点。第二个点就是相当于有很多的这些feedback，就是你的早期的一些版本的一些这种。比如说一个新的东西出来以后，你其实可以很快的收到这个用户的feedback，这个也是一个意义。",
      "speaker": "发言人2"
    },
    {
      "time": "01:16:40",
      "text": "那那这个其实。",
      "speaker": "发言人1"
    },
    {
      "time": "01:16:42",
      "text": "一直都是，而且现在尤其是做到更大了。我发现从云上收集的这个cycle会更短。所以这为什么我觉得老实讲，现在我更多的精力可能是放在这个云服务这边。然后open source这边有点像是一个更大的入口，以及大家让社区在里边去去去用，然后创造属于他们的价值，就是这个社区用户的价值。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:07",
      "text": "对于pink cap这个主体来说，我可能像更像一个云上的数据库服务公司这样。所以open source在里面的角色是什么？Trust, trust is everything for一个database，或者说infrared公司。如果你lose了trust，你基本上就lose了everything。Open source是一个你构建你的潜在客户对你的trust的一个很重要的方式。就凭这一点我都是会觉得这个open source是pink cap的DNA或者是最重要的支柱之一。",
      "speaker": "发言人2"
    },
    {
      "time": "01:17:38",
      "text": "那我们现在其实看到很多数据库，它也未必是开源的。比如最典型又是说到snowman，但是当然取得很大商业上的成功。你怎么看待这个角色呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:17:45",
      "text": "我觉得条条大路通罗马，他很厉害。他通过一个很好用的用户体验，然后构建出来的生态，按了这个trust，这是它很厉害，像芒果DB，就像我刚才说的，SQL is the king, 但是他仍然去做做出了一套他自己的这个ecosystem，对，这个很厉害了。所以但我觉得最终的目的是一样的，就是entrust。反正对我来说你拼cap的这个background以及我们的DNA，通过open source来去赢得信任和表现我们本身的这个transparency，是我们构建这个ecosystem，然后去entrust的最重要的一个手段。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:18:27",
      "text": "其实你讲你把这个entrust放在第一位，让我想到其实一开始以大家原来觉得说几年前他想要开源。可能大家觉得他是不只是entrust，还是一个customer base或potential的customer base。我希望说是我的很多用户是从开源社区里面转化了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:42",
      "text": "但感觉这个链路其实并不并并不是这样。我觉得可能很多人想的太乐观了。就是open source的用户的profile跟enterprise或者说真正给你钱的用户的profile不一样的。你不能指望着说，我有一个巨大的一个user base，然后你躺着就赚钱了就很难。你想即使大的蒙哥DB这么大的盘子，在它上市的时候，其实你去看他的收入也是欧镑。对，也是一般的那后来反而是他在阿特拉斯这条路走通了以后，我觉得才开始慢慢的起来。所以对我来说，open source并不是一个商业模式。我反复在强调这个open south并不是商业模式，open source是一个一种软件开发模式。对，他他能帮助我们build trust.",
      "speaker": "发言人2"
    },
    {
      "time": "01:19:33",
      "text": "从TDB开始做open source到现在，其实整个开源也好，info也好感产生了很大的变化。就你觉得如果现在再来做一个开源的数据库，你觉得会跟CDB当时开始会有什么不一样的？",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:49",
      "text": "我觉得可能首先第一点，我肯定我我肯定选PG的协议。Top face这个在在美国，我觉得真是太太火爆了，尤其这几年。第二个我觉得可能会更早的去选择作为一个云服务，作为这个商业模式。剩下不一样的我可能会更早的出海。这个是比如说我们创业时候，你也知道八年前，那时候cloud也并不是主流，是刚刚起来，但是现在我觉得这个答案已经很明显。",
      "speaker": "发言人2"
    },
    {
      "time": "01:20:26",
      "text": "那你在这几年，其实国外的这些开源公司也雨后春笋出现不少。你也看有哪一些对你们还比较有启发的一些这种开源公司。",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:39",
      "text": "开源公司到要不就不一定限制住它是一个开源公司。当然英特尔公司有一些很好玩的，比如说DBPPT算一个。然后第二个是super base。我觉得这一类的公司都有个特点，就是他虽然是做info但是他都在从整个用户去使用数据库的全链路去思考这个问题。比如super base surface你我虽然是一个数据库公司，但是我很强的地方在于我提供给你了很多application的脚手架。我给你提供了很好的数据的比如说你要构建一个应用，你你你从这个example code一直到这个data base的托管，然后包括应用的图案全链路都给你做完了。而且他很清楚自己的定位，我就是做total typing。对，然后我并不是说要给你做一个服务一个亿的用户的这种vacation。比如说v two是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:37",
      "text": "V2也是我很喜欢的一个公司。就算它是个local的，这个可能跟database不太相关，但是他也很清楚自己的定位，就是我快速去构建在这个企业内部的dash boarding，就这么简单的一个逆取的一个点。但这市场也很大。所以我是觉得这些公司都有一个特别明确的几个特征。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:01",
      "text": "第一，想清楚自己面向的是开发者，就讨好的都是开发者的整体的day to day的experience。第二个点就是充分的依赖云的基础设施。你看刚才我说的所有公司其实都是构建在在云的基础设施上。第三就是很会利用PLG，就比如说我通过一些example code或者说一些病毒式传播的手段，能够让这个impact这个growth变得很快。所以大概就是这几个特征。这大半年我在美国比较喜欢的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:22:37",
      "text": "公司有还有哪一些？你看到的一些在国外的一些技术的趋势，你觉得让尤其是你就会跟国外国内现在这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:22:48",
      "text": "阶段比较不一样的不一样的点。我觉得最不一样的点就是其实在那边已经不用再讨论什么是云原生，什么是server list。就是大家已经非常默认这个东西就是新一代的开发范式了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:23:02",
      "text": "对，可能在国内你还是要想着很多A私有化部署，或者说一些可能技术之外的东西。而且最后在在国内你的如果做企业软件，你的客户可能不是你的用户。但是在在美国现在慢慢的在归位，就是你的用户，就是你的客户，这个点听起来有点什么，但是怎么理解呢？就是我如果是一个美国的，现在starla创业公司，我在做一个我可以把我的精力和资源全都投入在PLG和这个或者大多数，比如在早期投入再去去做开发者生态，纯开发者相关的事情。而且你做这样的这个决策以后，你能够得到的feedback是不少的。或者说你的回报就是你的增长其实很快的。因为本身开发者的话语权在变得，尤其在海外的公司里边，开发者的话语权预算都在正在正在提升，或者说产生这种影响的这个impact都会更大。在国内的话仍然还是一个尤其是做这种数据库或者说企业软件的市场，还是一个非常SLG的市场。还有自上而自上而下的会更多。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:19",
      "text": "你做好用户点是开发者用的少，对，但是他并不。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:23",
      "text": "能够直接的影响购买。是的，这个直接体现的就是你的人像。比如说在海外你做类似的商业模式，你的scalability，你的商业模式是不是很好。但在中国的话，你将来还需要有一个这种很重的cell cycle，你在里面去优化这个cell cycle会更困难一点。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:45",
      "text": "反正就是你们现在的很多客户，还是我们所谓这个native，就是有自自己技术能力比较强的一些这些公司。接下来如果往下一步去走，在这个群体之外，你会看到一些不一样的情况。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:00",
      "text": "好问题，其实我就从dignity的这个点去切入，是因为我们没得选，或者说在中国大多数这些做infant的这些背景创始人的背景很多都是做技术出身。为这些做技术出身的创始人之前的公司可能也都是这些digit native的，他们更更熟悉这个行业。你想对于像我们这样这本身是做开源，同时又有互联网公司技术背景的创始人到美国，你会发现你跟你最相似的这个user profile就是中国人，是吧？所以这里面有很多中国人。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:42",
      "text": "对对对，其实这也是一个双向选择的问题。所以这是比较reasonable的，你先得找到一些这个切入点，就build的一个base camp。我觉得选择digital tive没问题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:25:53",
      "text": "那就是这个行业就像互联网公司，或者是有一个问题，就是说他没法skill。比如说你在美美招一个sales，你会发现sales没法搞这些客户，因为这些客户太挑了。就是说我选你们是因为你们技术非常牛逼。你你找你CTO过来找你CTO过来。对对对，就这种感觉就是你跟他本身的对话已经是一个门槛非常高的事情。所以你再往往前去scale的时候，千万要避免进入到这么一个陷阱。就是说我以后在美国就只搞这样的这个客户了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:26",
      "text": "所以这个是就回到你刚才那个问题，下一步该怎么选？第一，我的客户从哪赚钱是吧？比如像你已有的这些客户，你去看往前看一步，他到底从哪赚钱是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:26:40",
      "text": "你就是相当于广度优先，这么便利一波，你大概知道美国这个生态什么样。第二就是build local team，一定要是local的这个sales team去听。他们就相当于我就是一个小销售，你就去跑你的客户来我来去听，我觉得还是得多跑一下。就是不能说因为现在很多我看到很多创业公司，尤其中国出海的有点这种，怎么说守株待兔，或者就在这个华人圈子里慢慢的往前拓展。我是觉得这样是不scale的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:15",
      "text": "你可以去说，我构建这是一圈我的这个base camp。对，但是你的目标并不是base camp，你的目标是更大的东西。而且甚至你越做越深以后，你发现其实美国的这个企业服务的也是有一个圈子，这个圈子也是一群人。这一群人就比如说我有几个客户他的选型，我原来以为没有任何的联系，最后都选了TDB。最后我才发现再往下一层，这底下这几个做决策的人就是一个小的club。对，但你不去做深，你其实你很难去看到这些东西。",
      "speaker": "发言人2"
    },
    {
      "time": "01:27:48",
      "text": "对那你有跟你们的这个销售去接触这种非对互联网高科技的钱，你感觉他们的这个需求会有什么不一样？",
      "speaker": "发言人1"
    },
    {
      "time": "01:28:00",
      "text": "首先第一点，对于软件的这个价值的认可是很高的，它是一个很广，同时单位的这个付费能力是一个很强的一。第二，他们很多的这些公司的技术没有我们想象的这么强。也不要对出乎我的意外，觉得因为我们过去都是看这些的native这些公司，这些都是最强的这个人。但在那那波其实是还行那一波，所以你仍然逃不掉。要去给他们，比如说就on boarding，然后找ISV，就中国这些服务体系你一样要在这边去build。只是他们更加的规范成熟，或者说包括像销售的这些体系。",
      "speaker": "发言人2"
    },
    {
      "time": "01:28:48",
      "text": "其实最后你会发现哎也也差不多。比如说你去做美国的一个银行，这个消费告诉我承担周期三年是吧？那一样的，你说在中国做一个大银行也是差不多这个时间。或者说就留一条这个建议，就是没有捷径，都一样。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:29:04",
      "text": "那你觉得在你们构建海外这个团队的这个过程中，对有什么经历过什么挑战？",
      "speaker": "发言人1"
    },
    {
      "time": "01:29:12",
      "text": "我就说一条经验，对，就是过去我们经常会想着是不是海外这个work life baLance什么这些更好一点，或者说一个中国人你去管这个local king，你去管起来是不是要什么。我觉得第一就是没有哪种文化是比另外一种文化更牛逼的。是就就过去我们经常会说西方更牛逼一点，或者东方更牛逼一点。我觉得首先没有，大家是一个很平等的，你加入这样的公司，咱们这个话说清楚目标就是这么个目标。我们现在做的所有事情，用的所有资源都是为了奔着这个目标去的。这个可能说我的有点卷了，这就是我我我对于美国的销售和包括跑客户，或者说一些动作，我的要求是很高的。或者说这些要求我觉得是很回归本质是很很OK的。比如说你一个销售不跑客户，你一年不跑个100个客户，那你怎么承担呢？尤其是对一个创业公司。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:13",
      "text": "所以最后我觉得就像刚才说的这些东西，如果创始人不是亲自在local去看这个问题，或者说亲自去感受，你可能是感受不到的。所以就是创始人其实是你把这个文化带过去的一个很重要的桥梁。所以归根结底就一句话，如果你真想好好做海外市场，你就得做，而不是说远程坐在中国的办公室里去做。",
      "speaker": "发言人2"
    },
    {
      "time": "01:30:36",
      "text": "刚才讲到这个非非高科技企业的这个角色，你认这个开发者仍然可以有这么大的话语权，就是要他们做出一个这么七位数、八位数的一个决策。你们在做一些产品的一些宣传，marketing的时候，你们需要在这个层面上做哪些？",
      "speaker": "发言人1"
    },
    {
      "time": "01:30:54",
      "text": "我觉得刚才说的是native，native是开发者主导权在在变强。对，但传统的圈子我个人认为仍然还是有传统自己的渠道。比如说garner，比如说各种分析机构，比如这些CIO的club，就也是很自下top down的模式。所以这也是一个挑战，就是说我们怎么把我们原来擅长的面向开发者的话语体系，变成一个enterprise的一个buyer的话语体系，我们正在经历这个过程。对，但你要说我现在有什么答案，我也没答案，没办法还在探索。",
      "speaker": "发言人2"
    },
    {
      "time": "01:31:32",
      "text": "对我节目中你邀请过不少做protea marketing的。我觉得这一个在国外为什么这个群体变得越来越对很好的，也是有这样的一个原因。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:41",
      "text": "就是我觉得我觉得海外有两种人才是我最我觉得国内见的最少的。一个是PM就产品的product manage，就是PM是中国要找一个好的inf PM很难。第二个就是刚才你说的不断marketing，就是怎么去把一个产品价值给说清楚，用什么样的手段，什么样的故事去说清楚，中国很少，因为中国的文化里面对于讲故事这件事情其实是就没没没没就没有感觉中国比较喜欢一些抽象的东西，但是美国就很具体，就是你这个东西到底跟那个有啥区别？你这个东西能帮到我什么？你的故事是什么样子的？",
      "speaker": "发言人2"
    },
    {
      "time": "01:32:21",
      "text": "美国市场聊了很多，但其实应该在美国市场之外的海外市场其实也有不少。探索可以分享财在哪些市场有一些不错的进展。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:31",
      "text": "我就说两个市场，因为海外或者说不仅是北美，但北美是最大最重要的。我说两个有意思的市场，一个是东南亚，东南亚里面的我举个例子，泰国，就是pink cap其实在在泰国现在就相当于进展也挺不错的，几个银行都已经开始使用太极地作为客户去使用。我现在看到整个东南亚其实把新加坡先抛开，新加坡是另外一个一个感觉的东西，就是比如像泰国，我觉得低人口增长很快，很年轻这个国家。第二就是它的数字化转型，现在正在需求很旺盛，因为人口在涨，同时你想象那个国家好像还有是差不多3%、30、40，这具体数字有点忘了，就很大比例的这个人口甚至都没有过银行卡。所以他其实有点像说当年中国对信用卡的这种感觉。所以像一些数字化转型，它它是跳了好几代，然后甚至inside是一样。我就举个简单例子，Y泰国的很多银行很核心的系统，其实都是在全面的拥抱cloud。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:43",
      "text": "这个即使在美国。",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:44",
      "text": "都很难想象，因为他没有经历过这种很传统的数据中心什么这些年代，直接就跳到了那个那个时候。而且本土因为缺乏这种IT的人才，这个直接就相当于他能用更新的技术，就有点像那种弯道超车这种感觉。然后第三，更有意思的是，中国的企业过去就有点像当年90年代中国对待外企的这样的感觉。就是IBM这个oracle厉害，这个在泰国现在也是一样。现在我回到泰国，人家觉得你们这个中国技术好厉害，就就有有有有一些技术输出。对，技术输出你不会像美国这样，人家会觉得我自己的东西最厉害，你们这个除非厉害十倍我才服你。但到泰国就是会就有点像这个科技输出的感觉。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:33",
      "text": "对，第四个而且这一点上你会发现在在泰国本土有很多的IS51，就是软件开发商，他的这个话语权在甲方那边是很强的。因为刚才我说了，甲方其实也没有自己的很强的IT的人才，所以重度依赖这些，所以这样你推进的速度是很快的。一旦搞定那个开发商，你其实这个辐射的面会更广。然后加上对云的拥抱，所以这个效率我觉得很高。",
      "speaker": "发言人2"
    },
    {
      "time": "01:34:59",
      "text": "最后一点最重要，对于软件的价值。即使是一个像泰国这样的国家，他对于软件的付费的意愿，付费的能力，我觉得是很好的那虽然总盘子没有这么大，但是其实就搞起来的所以说你会看到很多中国的一些珠海第一站选择了这个APEC，我觉得也是有道理的。因为时区文化，包括对技术的仰视，包括是很好的第一站，这是泰国市场。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:31",
      "text": "第二个我想分享特别有意思的市场，日本市场。日本市场的特点就是你得首先第一特点慢，就是日本人做事情真的非常的谨慎小心，我之前分享过一个故事，就是有的客户说十万火急，这个找过来说我要用你们的with。我现在有个特别着急的问题。要解决。然后最后做完一通测试，最后给我们的一个上线计划，说2024年上线。",
      "speaker": "发言人2"
    },
    {
      "time": "01:35:56",
      "text": "我说你不是这个十万火急吗？怎么是2024年呢？2024年还不十万火急吗？对，这叫这时间的概念都对对对，就很有意思。所以我现在看到日本市场的这个感觉就是我很多的这个客户在在上线，他有点像是一个吞吐特别大，但是latency延迟特别高的一个市场。所以这对不同的市场的这个策略是是是会有点不一样的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:21",
      "text": "而且我听下来感觉挺有意思。就是你看你们去美国市场的时候，其实你们需要先从从native这些客户开始。即使你知道这些客户可能不那么scalable，或者说他们最终付费的能力肯定是没有传统客户那么强。但是其实你在APEC的市场，东南亚的市场，你可以直接上来就是去找这些。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:39",
      "text": "最有付费的市场。是因为我就举个简单例子，你现在做银行系统，我在中国做了很多银行系统。我现在去做比如说泰国、印度尼西亚这些市场的时候，你会发现同样是一个银行系统，可能这边一个国家级的系统在中国可能就是一个省级级。",
      "speaker": "发言人2"
    },
    {
      "time": "01:36:57",
      "text": "对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:36:57",
      "text": "所以难度稍微低一点。而且cloud其实因为cloud的交付会更加交付效率会更高，所以我甚至不需要在本地必有的很强的交付团队。我可以直接去leverage我整个cloud的整体的服务体系，所以这个效率是很高的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:37:13",
      "text": "所以我可不可以这么理解，就是从一个公司整体的海外市场战略来看。虽然说我们都知道美国是那个高地对最肥沃的市场。但是如果说你的产品ready了，其实你可以用相对比较小的成本，在一些这种趋势性市场取得一些突破一些，最现实一些就是你有一些收入。",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:36",
      "text": "但是你这里面还有一个前提，就是你的branding的awareness，你需要通过美国市场来帮你构建，所以你也不能太早的。对对对，所以你应该是说你有一些国际的知名度，你得证明你是trust right。比如说为什么日本、泰国的客户信任我们？因为我在美国已经有一些更大更牛逼的企业，他trust了我。",
      "speaker": "发言人2"
    },
    {
      "time": "01:38:00",
      "text": "对对对，其实聊了很多海外市场，就不得不聊一下这个我们其实都有点一言难尽的。中国市场就是什么是一个适合中国市场的一个基础软件的这个产品呢？就是你你对于在中国市场做这个基础软件产品是怎么样的一个思考。说一开始h type的这个概念，这种模式能够在国内先起来，一部分原因也是因为国内你其实很多没有那是互联网公司就open .",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:28",
      "text": "source的user profile，跟在中国给你钱的user profile完全不一样。对对对，如果你填了线下，就是中国去做这个政企市场，你可能需要考虑更多的产品之外的东西。第二就是当然说到数据库，说点实际的对到数据库这个case里边，我觉得未来一年金融行业，尤其是银行的这种核心系统的替换，以及核心周边系统的这个数据库的替换，就是会有一个很快的增长。因为我是觉得现在在国内这些enterprise的database，尤其是OTP database，他的成熟度已经到达了一个台阶。另外客户那边的预期也调下来了。他原来是觉得我就是要一个oracle的copycat。大家现在发现这个新一代的东西好像并不是这样。然后慢慢的这些开发的这个教育也我觉得差不多了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:24",
      "text": "从金融行业有钱，所以这几个因素叠加在未来一半年到一年之内，会我觉得会而且案例会越来越多。你会发现这个像滚雪球一样变得越来越大。金融行业是最难突破的，突破了以后它会去影响其他的行业。",
      "speaker": "发言人2"
    },
    {
      "time": "01:39:41",
      "text": "所以感觉在中国，在国外市场，就是你有一些相对来说跟你的话语体系比较接近的客户，你搞定了，而且还能够有有。这在中国就现在必须得磕硬骨头。对你得先从硬骨头，这个是其实跟创业，我觉得这个是很大的一个挑战。一开始你就你的企业就得要有很综合。",
      "speaker": "发言人1"
    },
    {
      "time": "01:39:58",
      "text": "的这个人才。是的，这个就仅限于数据库这个市场。那你想中国全世界第二大经济体，总是有地方能活下去。",
      "speaker": "发言人2"
    },
    {
      "time": "01:40:07",
      "text": "成长至今也有八年七八年对吧？八年的这个时间就是你回想起来，跟当时你们三个人懵懂开始创业的这个开始。你觉得现在最这么八年的这个方案，你觉得有哪些是在你们预期之内的，哪一些其实在你们这个预期之外。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:25",
      "text": "我觉得云首先是我们预期之内的，但是我们的这个如果从头再来一遍，会更更努力的去去去，或者说更更彻底彻底的对。第二个预期之内的，我觉得open source带来的这个增长的引擎，我觉得是预期之内的。因为本身我们也比较信仰这个，同时也按照像剧本一样，这一步步的确实如我们所看到的，变成了一个有他自己的一个system，有很多人知道，同时创造很多社会价值。然后出海。",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:01",
      "text": "这个也是其实day one开始，从我们开始写第一行代码，用英文注释开始就是这也是个确定性的一个事情非确定性的事情。我是觉得第一整个全球化前早八年前我们去看全球化的时候，是一个更加一体的一个东西。但现在你会发现我们在合规上投入的精力和花的时间，其实是要多很多很多。同时这个又属于你最重要的事情之一了是吧？那你说我八年前刚创业的时候，我哪知道我天天要处理这么多合规，还有中美关系的这些问题，我觉得这但这个是一个大的时代背景，你也没办法是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:41:48",
      "text": "第二个我觉得出乎我的意料的就是。怎么说呢？团队和组织这个角度，其实刚才我说的康威定律，就原来我设想中这个软件最终的形态，跟现在TTB作为一个服云服务的这个形态，其实是很很不一样的。对，这个是一个一个超出认知的这个东西意料之外的。还有就是我们居然活了这么长时间，我觉得这也是意料之外的。当然不是说没有信心，就是你回头去看你会发现很多机缘瞧，所以我觉得创业真的是九死一生在预料之外。还有一点，就是这个软件这么难搞，这个也是一个意料之外的事情，要知道这么难搞就不搞了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:42:44",
      "text": "所以我觉得有时候我们对于投资人来说也是是的，也是我们报的最好的这个愿望，是真的是创业。你想八年整个行业，整个世界有有多大的的变化。你说就是你这样会想说，如果能的话，更早做这个云原生，更早的出海。你所说出海更多的是说这个商业化上出海，还是说你觉得从社区运营，就其他方面的这个出海。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:11",
      "text": "社区运营尤其是这个branding awareness，就你的品牌的构建，两手都要抓两手两手都要抓的，因为这是你的growth engine。",
      "speaker": "发言人2"
    },
    {
      "time": "01:43:21",
      "text": "对，现在就是有很多软件开发这种技术软件这些公司其实大家都说，我们day one就要选择这个，就说就想要做这个出海，就是你通常会给他们一些怎样的建议和提醒。",
      "speaker": "发言人1"
    },
    {
      "time": "01:43:35",
      "text": "就还刚才那个先来美国住半年再说，然后同时跳出中国人圈子，去看看更大的世界是什么样子。这是最最直接、最可操作、最实际的。然后你连完以后你就知道第一该不该做，第二该怎么做。因为每个这个公司情况都不一样，但是我觉得有一点是相通的，你不亲身经历，你是靠传达转达或者说看看博客。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:03",
      "text": "还有一种并不意味着他就好像更有付费意愿更强，这个就会更容易是这个。",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:07",
      "text": "海外客户的钱也不是刮大风来的，是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:10",
      "text": "过去八年，未来八年肯定就有哪些让你非常兴奋的一些机会，又有哪些你觉得可能是一些新的挑战？",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:18",
      "text": "我觉得回到你今天开始的第一个问题，关于那个头几个问题之一，就关于喵stone现在正在经历的第三个mail stone就是AI加上这个server less的h tap into base融合出来的这种新的产品形态。AI会是接下来这几年整个IT行业不亚于cloud，甚至可能比cloud产生了影响更深远的一个东西。其实本来我以前也并不是一个我一直有对AI有一个怀疑的态度，就是觉得这个东西不就是调调参数，然后写写论文的东西。直到最近我用上了ChatGPT了以后，我也觉得再也离不开它了。因为它的这个已经超出了一个demo的一个东西。比如说我现在写写点邮件，我就给他帮我去按照美国native speaker的语气帮我提供一个版本。",
      "speaker": "发言人2"
    },
    {
      "time": "01:45:13",
      "text": "或者我今年比如我再举个例子，我今年要去那个那个sister要去有个演讲，我直接跟蔡GV说，我今天要去做个演讲，你给我一些候选的题目，然后我不停的提问他挑挑了一个不错的，好给我写个summary。他其实已经有点像是我思维的自行车一样，这样的他能帮助我actually去做很多事情。而且这个事情你会发现帮我写写代码是吧？写代码我觉得他写代码写的比我好。比如我们做数据库的，它生成的SQL，比如说我告诉他我想要干嘛，其实你可以去用那个OS inside那个explorer，尤其可能也发给你过是吧？你直接写自然语言，它自动生成SQL跑数据，连这个图表全都都能都干上。",
      "speaker": "发言人2"
    },
    {
      "time": "01:45:58",
      "text": "欢迎大家去体验一下KDB的一个子产品。对，OSSS inside上面会有一个就是你可以用自然语言，然后去做github上的所有这些信息，给你非常惊艳的的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:10",
      "text": "有这个对背后其实就是server less star TV。所以我觉得AI或者说chat b的现在能力，它会去改变各行各业，尤其是比如说跟data相关的这些交互的方式。您这一个数据库公司的意义在于什么呢？C口会变成一个中间语言，因为自然语言是个不简单的东西。你看刚还是按照我刚才那个逻辑，就是自然语言比C口更简单，那未来一定这个东西的生命力更强。用户体验？就是我一直在强调用户体验，自然语言用户体验那比思考要强多了。我学都不用学，人人都会说，对吧？所以你会发现可能未来的data base都会有一个自然语言的interface，然后出来你要干什么事情，你不用说我写SQL写程序，你直接就写自然语言。他帮你code以及SQL都给你生成好了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:47:02",
      "text": "所以他会去有两方面的改变。第一是改变用户怎么去看待data。第一，如果有这样的东西了以后，你假设你是用户，反正我的第一反应是我会尽可能把数据全都丢进去，丢到一个h type这个位置，因为过去的问题就是我不能问对的问题。就问对的问题是一个需要很多经验的。比如说data ciencias，他知道我分析什么样的问题是怎么写这个C口是更好的对，但是现在AI可以告诉你，比如我经常会问AI我有这些数据，你能够能不能给我一些有趣的问题，你给我去通过这张表生成一些有趣的问题是吧？",
      "speaker": "发言人2"
    },
    {
      "time": "01:47:39",
      "text": "我现在是在征求他的意见。所以最后的这个形式会变成什么呢？就是我之前有一点是确定的数据越多，同时数据的产生的交叉关联越多，它产生的价值越高。这是我的一个假设。对，因为AI它有越多的信息，它就能够去去跟你玩出产生更多的价值的问题出来。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:06",
      "text": "同时第二个假设就是这个数据一定要放在一起。你不能说我一个这一部分数据在一个分布分表的数据库上，这一部分数据在在MongoDB上，那部分数据在Bakery上。因为AI现在目前来说还只能生成SQL或者说去操作数据，它需要有一个统一的语言对吧？SQL所以这就是为什么我觉得slowness SQL加上一个这种h tap的这种能力的数据库，再加上AI它这几个组合会变成一个非常powerful的组合，缺一不可。",
      "speaker": "发言人2"
    },
    {
      "time": "01:48:40",
      "text": "我跟你说这也挺有意思。原本我刚开始看到这个OSN在上面这个自然语言上面，我就想说，这个就是在数据库上加一个功能。那这样以后，所有的这个虚库，因为反正底层都是GPT，那再不就加一功能。好像这个并不能够成为一差异化的一个点。我觉得你刚才讲的最有意思的是，如果原来是原来由这个数据分析师来定义这个问题的话，那其实你在各个所谓的数据seal，其实无非就成了一个工程化要解决的一个问题。那现在变成了你要他去想，没错，AI去想的话，那其实就逼着反逼着大家去把所有数据集合在一起。这个痛点跟以前数据的这个痛点不在一起，这痛点就完全不一样了。",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:17",
      "text": "对啊，而且what's more你其实从用户的使用的旅程去考虑，提出问题和回答问题还不是终点。最终的点，你要数据产生价值，你一定要通过service来去产生价值。所以这就是为什么HTAP的T特别重要。",
      "speaker": "发言人2"
    },
    {
      "time": "01:49:34",
      "text": "其实我觉得你这背后其实有一个非常棒的一个假设，因为我们其实现在所有人都都还是在大家在玩这个process，大家其实都还在看说是谁能够问出更好的问题。我就有一个论调还说，那以后我们的新一代人才的下一代人才的核心能力，是不是就变成了说我是最会写prom的那那那个人其实你的这个你就更往前一步，假设就是说其实这根本就不重要，我以后就应该问题也是由AI来去来。为啥你想你认为他能够问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:04",
      "text": "给我们我们有一个charge出来，有一个说法叫promote engineering，就是你你的对话怎么去去去engineer。对，但是你去看这些，难道你会觉得另外一个AI去学习这个pro engineering的这个速度会比你一个人类学习这个速度要更慢吗？或者说未来蓬勃人群电影这件事情也可以让AI自己来做。所以很多时候大家再去思考这个问题的时候。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:28",
      "text": "那就叫人这个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:30",
      "text": "我们就不讨论了，不能继续说了。那我这个问题思考的这这这些天都在思考。然后有空去喝酒的时候说。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:40",
      "text": "因为最近我也很关注这个generate AI这一波，大家看到了很多一些有趣的应用，我觉得它其实应该会有一个更标准的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:50:50",
      "text": "这个我其实当时第一看到的感觉就是它就像一个蒸汽机一样，或者说蒸汽机的发明，或者自行车的发明这样的这种可能。",
      "speaker": "发言人2"
    },
    {
      "time": "01:50:59",
      "text": "我们现在看到所有所谓的AIGC这些应用，其实都远没有来对触及到它能够实现这个适合性。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:07",
      "text": "而且到最后其实AI结合这个行业以后，不远的未来我们会看到新的行业，新的这些这些行业新的职业。我们可能之前都没想到，就像蒸汽机发明之前，火车司机这个职业是不存在的，是对吧？或者说这个互联网发明之前，直播带货主播这些东西是不存在的。对，就是等着。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:32",
      "text": "对对对，可能以后你不需要花那么长的时间去成为一个优秀的数据库工程师。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:38",
      "text": "我现在已经我已我已经被他取代了，你知道吗？我现在不写代码，我说我先chat PT，我要写一个东西，你帮我想想怎么跟帮写一写了。",
      "speaker": "发言人2"
    },
    {
      "time": "01:51:46",
      "text": "对我觉得可能我们终于在一年或者两年之后来做一做一个回访的时候，我就相信那个时候对于这个AI我相信到时候会有一些非常让我们惊艳的一些进展。是的，我们聊了那么久，终于要进入到我们最后一个我非常喜欢的一个快问快答这个环节。第一个问题是我通常都会以这个问题来开始，对你影响很大的一本专业书籍书书籍和非专业的书籍。这个专业可以是技术或者商业都可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:17",
      "text": "影响很大的。先说非专业书籍，产品摩托车维修艺术，这个是我脑子里第一个因为我整天都在读这个东西，我很喜欢，真的很很符合我的这个什么。因为我觉得他他探讨了一些技术和哲学一些更底层的东西。因为我我从小的这个成长过程里边，我从很小开始学习计算机。我觉得我隐隐约约看到了一些代码，计算机技术之下更更底层的吸引我的这些很漂亮的东西。然后在过去我其实对我一直想寻找的是什么？然后产品模式维修艺术这本书，其实就是在讨论这个东西是什么。",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:04",
      "text": "你什么时候读过这本书？",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:06",
      "text": "我大概是我大学大四，大三大四开始，后来就一直在。所以我甚至它里面很多观点，我再去面试一些我最好的程序员的身上都会有类似的感觉。他们不再把技术和这个代码当做一个工作，而是去追求这背后的一些更更美的东西。这是一个一个好的程序员我认为的一个标志，所以非技术的影响最大的，或者说你看我现在这个这么奇怪的气质，就是很多时候是通过这种奇怪怪的书影响的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:53:43",
      "text": "然后专业书其实也有有点相关，我反正我也我给我的这个同事推荐的这个必读的专业书之一就是unix编程艺术。因为我我觉得我虽然是个创业者，或者说现在是一个所谓的企业家，但是我觉得我真正认可我自己的职业身份还是个程序员。这是我在这个世界的这个position。然后对unix编程艺术是我很喜欢的一本专业的书。好。",
      "speaker": "发言人2"
    },
    {
      "time": "01:54:16",
      "text": "第二个问题，我记得你提到说amazon的CTO winner verbs是你的偶像。是的，如果能跟这位偶像相处30分钟，你最想跟他聊什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:54:25",
      "text": "我想跟他聊的话题就是当他再去设计S3的时候，他的理念或者说这背后的一个哲学思考。就是他做产品或者做这种info系统，为什么他能把这系统设计这么漂亮？他在过去那个时间点看到了什么？我非常想知道他做出了这么多，在这么早的时间砍掉了这么多看起来花里胡哨的东西，留下了就那几个非常简洁的interface，他看到了什么？就是到他有没有可能说我在那个时候我就想到了现在一切的这些软件都是构建在这个S三这几个API之上，这是完备的。所以我觉得背后一定有很多哲学思考在背后。",
      "speaker": "发言人2"
    },
    {
      "time": "01:55:10",
      "text": "我觉得第一篇我就说论文，第一篇论文是snowflake的，我说技术人技术人那那那works肯定是是work肯定是一个。然后第二个技术人我叫ropy robot pack，为什么？第一他他是这个购物员之父，第二他是plan 9就p plan 9是贝尔担任贝尔实验室在unix之后的一个新的操作系统，那个操作系统设计也非常优雅。我也就我我设计很多系统，其实都从plan 9的设计里面学到很多。包括其实你想存算分离这种现在看上去非常fancy的东西。就plan 9是在90年代就已经都已经搞出来了，而且已经实体化了。对，就很厉害。",
      "speaker": "发言人2"
    },
    {
      "time": "01:55:55",
      "text": "对，最终都是希望了解到他们。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:58",
      "text": "这个背后的对对哲学。因为我觉得设计一个好系统，不是在于你的编程能力有多么强，而是在于你对这个世界的抽象和理解，能不能抽象到一个最简单的东西上面。这个跟哲学的这个功能是一样的，对吧？就是抛除掉这些复杂的东西，最后我们探寻根源的这个东西？对，做减法是最难的。是的对，是的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:56:20",
      "text": "你最你提到就是你最近开始学习了一个新的乐器，可以跟大家介绍一下这个乐器。我为什么开始学它？",
      "speaker": "发言人1"
    },
    {
      "time": "01:56:27",
      "text": "我最近在吹印度的一个笛子，它叫bans three班苏里。",
      "speaker": "发言人2"
    },
    {
      "time": "01:56:32",
      "text": "它听起来的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:56:34",
      "text": "这个音色大概就是一个没有笛膜的笛子。我因为我我平时也会去做一些冥想什么，特别喜欢在精神上放松的这个方式。我会发现吹笛子能够，因为笛子是一个很敏感的乐器，它能够让你的注意力和精神全都集中在你的呼吸上面，这样能让你很快的进入到那个状态。对，所以而且他的声音很好听，我非常喜欢他跟他他是跟肖有点像。",
      "speaker": "发言人2"
    },
    {
      "time": "01:57:02",
      "text": "对，音色很不一样。对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:20",
      "text": "好吧，很棒的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:57:23",
      "text": "好大家了解东西的人都知道，英东旭除了是一个程序员之外，还是一个喜欢玩音乐的人。是我就跟聊聊你最喜欢的音乐类型和对你影响最大的音乐。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:38",
      "text": "我我我音乐类型的话，摇滚乐我听了很多，我一直都在做摇滚乐，就是sonic youth我很喜欢。我每年的网易音乐上听的次数最多的乐队都是sonic use。罂粟青年是一个美国的一个现在已经解散的一个90年代很流行的一个摇滚乐队。最近这两年就开始喜欢一些印度古典音乐，就是因为你开始想想，对有关有关对对对对对，因为到最后你会发现一些我开始这些文化很根源的，这些会对背后的文化感兴趣，所以说印度古典音乐背后代表的很多印度的文化我非常着迷，所以就会非常喜欢。",
      "speaker": "发言人2"
    },
    {
      "time": "01:58:26",
      "text": "最后一个问题，如果能穿越过回到过去，遇到刚刚开始创业的你，你会对他说什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:34",
      "text": "你很幸运。对，就是我不会剧透太多，但是这个就是会就说这个不枉此行。对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:58:44",
      "text": "有我们这差不多3个小时的聊天，非常的非常尽兴。然后也希望大家能够不枉此行，我们都不负此行。",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:54",
      "text": "这两个多小时的访谈终于在落日的徐徐清风中结束了。跟东旭聊开发者生态总是这么收获爆棚又意犹未尽。之前在年度回顾中，莫妮卡也提到过，很多做技术产品的公司最近都在尝试走向国际市场。但是从东区的分享中，你应该可以体会到，以前我们觉得已经是非常国际相通的一些品类，比如数据库，其实在不同的市场也在逐渐走出非常不一样的路径。仰望星空，又要脚踏实地，不同市场当然都有自己的生存逻辑。但是也曾经在创业公司摸爬滚打过的莫妮卡，还是有些理想主义的抉择，做一些未来自己会骄傲的事情，毕竟未来无常，愿我们历尽千险还是少年，遍体鳞伤仍觉得不虚此行。说的太虚了。不管怎样，希望这次的数据库讨论能够给在做技术创业的你一些启发。如果你也想要做技术创业，也欢迎在公众号或者pocket的评论区中联系莫妮卡，非常期待跟你的交流。",
      "speaker": "发言人3"
    }
  ],
  "lab_info": {
    "summary": "本期播客深入探讨了技术创业中的关键议题，如数据库市场的发展趋势、跨文化市场拓展策略、以及产品开发与个人成长的平衡。强调了面对市场和技术变革时的适应性，特别关注了数据库行业从重技术向重用户体验的转变。讨论了技术产品如何适应不同市场环境，个人兴趣对创业者的意义，以及如何从过往经验中学习。此外，介绍了IT SaaS智能制造企业面对的全球市场拓展挑战，及\"On Due\"平台如何帮助获取海外客户线索。还深入分析了开源分布式数据库PineCAP的技术特点和未来趋势，强调了H-Type数据库对提升开发者体验和数据库性能的重要性。播客强调持续学习、适应变化和保持乐观态度对技术创业的重要性，鼓励创业者关注产品对社会和文化的贡献。",
    "qa_pairs": [
      {
        "question": "在数据库领域，TDB（可能是TiDB）发展过程中的几个关键里程碑是什么？",
        "answer": "第一个里程碑是ping cap决定使用开源模式构建KDB，从零开始开发分布式数据库。第二个里程碑是选择云模式提供数据存储服务，紧跟IT行业云原生趋势。第三个里程碑是ChatGPT为代表的人工智能技术与数据库技术融合的可能性，这可能改变数据库软件形态、商业模式以及扩展更多应用场景。",
        "time": "00:04:41"
      },
      {
        "question": "TP（事务处理）和AP（分析型）数据库的主要区别是什么？",
        "answer": "TP数据库主要用于在线业务场景，强调高并发、低延迟和数据精确性、一致性和可靠性，例如在线支付系统。而AP数据库面向数据分析师和科学家，对数据正确性要求相对较低，对处理大量并发访问和不确定性访问有较好支持，应用场景更为丰富。",
        "time": "00:09:56"
      },
      {
        "question": "为什么TP数据库相比AP数据库更难做？",
        "answer": "TP数据库需要保证高性能、低延迟以及数据不丢失，这些硬性技术挑战较大。另外，在更换数据库时，由于数据在TP数据库中至关重要，且更换成本高，因此对TP数据库的要求更为严苛。",
        "time": "00:10:37"
      },
      {
        "question": "HBase数据库何时开始崭露头角并成为发展趋势？",
        "answer": "在pink cap公司内部，虽然最初专注于TP数据库开发，但在后期意识到用户不会直接替换重要的交易系统时，开始考虑将数据库作为整体系统的一部分，并逐渐关注到HBase等数据库在企业级应用中的重要性，预示着未来的数据库可能会朝着HBase架构发展。",
        "time": "00:12:12"
      },
      {
        "question": "TDB1最初设计时是作为一个OLTP数据库，后来为什么会有用户在TDB1上进行复杂分析查询？",
        "answer": "很多用户虽然习惯使用mysql这样的传统SQL数据库，但在某些场景下，TDB1能够以实时的方式提供数据备份和分析，满足他们对数据实时洞察的需求。尽管TDB1在设计上并非专为复杂分析优化，但其快速响应和实时同步的优势让其在数据分析领域展现出高效性。",
        "time": "00:14:55"
      },
      {
        "question": "TP数据库和AP数据库在处理实时数据分析方面的差异是什么？HATAP与现有其他实时数据库（如streaming database）是怎样的关系？",
        "answer": "在传统的同步数据链路中，数据从TP数据库（OLTP）到AP数据库（如hadoop或click house）可能需要半天到一天的时间，而使用TDB1这样的实时数据库，用户可以显著缩短从在线数据库获取数据洞察的时间，实现更短的查询响应时间。HATAP不会过度碎片化，而是作为一个补充的角色存在。随着技术进步和云服务的发展，未来数据库市场可能会归整合几个大的品类，HATAP将统一某些方面，同时仍会有其他如streaming、graph和NoSQL等数据库类型的补充存在。",
        "time": "00:16:29"
      },
      {
        "question": "HATAP的核心点在于TP还是AP？",
        "answer": "HATAP的核心在于TP，因为它本质上是一个在线服务，需要满足严格的SLA要求，确保7x24小时的实时响应，这些特点与TP的要求紧密相关。",
        "time": "00:20:10"
      },
      {
        "question": "HATAP这个概念是如何产生的，它解决了哪些用户需求？",
        "answer": "HATAP概念从用户使用数据库体验的角度出发，旨在解决用户对实时数据分析的需求，通过整合TP和AP的特点，提供一个既能支持事务处理又能实现快速数据分析的统一解决方案。",
        "time": "00:19:20"
      },
      {
        "question": "为什么现在各大厂商才开始集中发力实时分析数据库领域？",
        "answer": "硬件基础设施的进步（如SSD闪存出现）使得新一代应用开发者能够更容易地实现良好的用户体验，无需过多底层优化。此外，云服务的发展屏蔽了复杂硬件细节，降低了开发者门槛，使得开发高性能应用变得更加容易，从而引发了用户需求的质变。",
        "time": "00:25:17"
      },
      {
        "question": "在美国，为什么很多SaaS产品在数据库领域可能只需要优化单点，而在国内则可能需要推倒重来？",
        "answer": "这是因为在美国，数据库人才较多且技术成熟，对于他们来说，增加或替换一个数据库可能不是特别大的痛点，而在国内，许多场景可能从零开始构建，因此对数据库的需求更为迫切。",
        "time": "00:29:23"
      },
      {
        "question": "对于用户视角下的H-Type架构选择，主要有哪些主流类型？",
        "answer": "主流的H-Type架构主要有四种类型：第一类是分开式架构，如AWS No ETL，将数据同步逻辑隐藏起来；第二类是基于原生数据库的架构，例如Law DB，其上游是TB为主的数据库，但底层存储引擎有对AP加速的层，适合中小型规模场景；第三类是Snowflake的Unit Store，从数据仓库出发构建在线服务层以减少reverse ETL复杂性；第四类是一体化分布式TP系统，如TiDB，提供统一查询接口背后是云原生全栈服务。",
        "time": "00:31:02"
      },
      {
        "question": "如何为用户选型合适的H-Type数据库？",
        "answer": "选择H-Type数据库的关键在于其TP（事务处理）能力，优先考虑TP表现最好的数据库。因为H-Type系统往往伴随着对外服务或在线服务的需求，所以保证TP服务能力至关重要。",
        "time": "00:32:59"
      },
      {
        "question": "Snowflake的Unit Store与其他H-Type数据库有何不同？",
        "answer": "Snowflake的Unit Store定位更偏向于提供数据分析服务，尤其针对那些在Snowflake之上进行数据科学分析后需要实时在线服务的用户群体。",
        "time": "00:33:41"
      },
      {
        "question": "各大厂纷纷跟进推出类似H-Type的产品对于早期公司意味着什么？",
        "answer": "这意味着市场回归到重视用户体验的本质，未来格局将简单高效地帮助用户从测试到产生商业价值的链路缩短，谁能提供这种简单快速的方式，谁就能在这个竞争中获胜。",
        "time": "00:34:38"
      },
      {
        "question": "如何看待当前数据库领域中SQL仍为核心地位的现象？",
        "answer": "SQL作为共识标准，易于学习和操作，被广泛应用于各种数据库和数据分析场景，其生态不仅局限于数据库本身，还扩展到了其他信息软件领域。随着分布式SQL数据库能力增强，以及诸如DBT等工具的应用，SQL将在可见的未来持续成为万物皆可SQL的通用语言。",
        "time": "00:39:15"
      },
      {
        "question": "H-Type数据库是否为替换现有数据库提供了新的切入点？",
        "answer": "是的，H-Type数据库为开发者在不完全替换原有数据库（如Oracle）的情况下提供了一个新的测试和切入路径，随着H-Type数据库的发展和完善，未来替换原有数据库可能会变得更加容易。",
        "time": "00:41:17"
      },
      {
        "question": "在云上开发中，数据库服务如何帮助提升软件开发者的日常效率？",
        "answer": "在云上，开发者可以利用CICD等工具快速创建测试集群，并在其中预装好所需数据库，从而大大节省了过去在环境搭建上的时间成本。例如，作为一个数据库服务提供商，现在只需几秒钟就能为CI过程提供准备好服务器和数据，这极大地提升了开发者体验。",
        "time": "00:43:08"
      },
      {
        "question": "当前数据库性能是否已经足够满足大多数场景需求，开发者体验的重要性体现在哪里？",
        "answer": "确实，当前数据库性能已经相当强大，可以适应绝大部分应用场景。然而，开发者体验正成为核心能力之一。开发者在日常工作中花费大量时间在基础设施配置上，而非专注于编写业务逻辑代码。因此，优化开发者体验，如通过便捷的托管平台、统一计费模型等，能更好地支持开发者专注于应用开发。",
        "time": "00:44:30"
      },
      {
        "question": "Visa这家公司如何提高开发者体验，以及它为何成为你心目中的典范？Serverless架构如何影响开发者体验，特别是对于数据库服务的影响？",
        "answer": "Visa通过提供一个基于开源项目Next JS的应用开发、测试、托管和部署平台，专注于提升开发者从创建代码到上线应用全流程的用户体验。他们致力于消除开发者在基础设施管理上的繁琐工作，让开发者能更专注于业务逻辑编写。Visa通过整合各类服务和合作伙伴（如数据库供应商），创造出一种全栈式服务，使得开发者无需关心底层基础设施细节，只需关注应用本身的发展和扩展。Serverless架构极大简化了开发者的工作流程，降低了上手难度，同时对于数据库服务提出了更高的要求。优秀的Serverless数据库服务应具备自动扩展、计费精细、按使用量付费等特点，能够在无负载时自动降低或关闭资源，同时提供细粒度的计量单位，确保开发者只需为实际使用的服务付费，从而大大提升了开发者在云原生环境下的开发效率和成本控制能力。",
        "time": "00:46:46"
      },
      {
        "question": "那么，对于server less数据库或者server less application，您认为还需要哪些方面的改进或突破？",
        "answer": "我觉得目前还缺少时间，很多开发者甚至还不知道这个概念。从数据库服务的发展历程来看，很多最新的server less服务和技术最近一两年才开始出现。底层基础设施的成熟度还不足，需要更多时间来构建和推广。",
        "time": "00:57:56"
      },
      {
        "question": "您觉得在构建server less应用时，哪些方面的突破是必要的？",
        "answer": "大的方向上没有太多问题，但会有很多细节问题，尤其是在工程层面的改进。我在之前的文章中写了一些可能的技术挑战，不过这些技术问题会逐步得到解决。",
        "time": "00:58:54"
      },
      {
        "question": "您是否认为server less已经迈过了主要的技术门槛？",
        "answer": "是的，我觉得已经迈过了主要的技术门槛。server less本质上是一个描述用户体验的名词，它的基础设施是基于云原生技术，如SV、容器等，这些都已经存在。",
        "time": "00:59:26"
      },
      {
        "question": "关于server less进一步的发展空间，比如数据共享方面，您有什么看法？",
        "answer": "当数据都在云服务商的大磁盘上（如S3），打通不同用户的数据变得非常简单，这将催生出数据交换的生态。与snowflake这类产品相比，server less化后的数据库不仅提供数据访问服务，还能实现dataset之间的互联互通及隐私计算，从而提供在线服务，如通过API或服务的形式驱动数据交互。",
        "time": "01:00:07"
      },
      {
        "question": "您认为随着数据库格局的变化，是否会对内层数据处理产生影响？",
        "answer": "数据处理的核心问题最终会回归到如何构建高质量的服务，即能否提供高可用性、高性能和强一致性等。如果只是作为另一个数据源，那它的核心竞争力可能会被削弱。而当数据集打通后，对数据库选型的选择将不再成为主要问题，因为大部分数据库厂商都能提供所需服务。",
        "time": "01:03:44"
      },
      {
        "question": "数据库与数据库服务之间的区别是什么？",
        "answer": "数据库与数据库服务的关系就像汽车与其发动机一样，数据库服务涵盖了数据导入、备份恢复、CDC（变更数据捕获）、调优、诊断以及用户界面等更长的用户体验流程，而不仅仅是性能好的数据库加上友好的开发者体验和用户界面。",
        "time": "01:04:38"
      },
      {
        "question": "如果一个云服务公司的数据库工程师数量远超云服务人员，这意味着什么？",
        "answer": "如果一个声称是云服务公司的团队中，数据库工程师占比高达80%，这可能表明该公司还未准备好转变为一个真正意义上的connected企业。这个转变过程会相当痛苦。",
        "time": "01:10:31"
      },
      {
        "question": "组织架构的变化如何反映出用户使用数据库方式的变化及其对团队的影响？",
        "answer": "随着新型数据库如h type等出现，应用开发者的话语权逐渐增强，因为他们更接近业务需求。这导致了数据团队和应用开发团队之间的界限模糊化，创新型业务开始推动这两个组织架构趋向融合，以提高应用迭代速度和应对市场变化的能力。",
        "time": "01:11:44"
      },
      {
        "question": "为什么会出现中台或类似的平台，并且它们与传统平台有何不同？",
        "answer": "新一代数据库技术简化了信息复杂性，使得application developer生产效率成为瓶颈。因此，出现了更灵活、业务导向的中台或平台，它们不再严格区分数据、服务和洞察团队，而是通过缩短从data到service到insight的链条来提升应用迭代速度。",
        "time": "01:12:49"
      },
      {
        "question": "开源社区对于公司商业化进程的作用是什么？",
        "answer": "在公司商业化过程中，开源社区的作用在于让社区尽可能自我运转起来，减少公司的运营负担。同时，开源有助于培养用户信任，吸引并快速收到用户反馈，从而构建健康发展的生态系统。对于Pink Cap这样的公司来说，开源是建立客户信任的重要方式，是其DNA和核心支柱之一。",
        "time": "01:14:43"
      },
      {
        "question": "如果现在再做一个开源数据库，与当初CDB启动时相比有哪些不同之处？",
        "answer": "现在做开源数据库可能会选择更热门的协议（如PostgreSQL协议），更早考虑作为云服务的商业模式，并可能更早出海。此外，开源数据库公司在定位上会更加明确，如提供全套应用开发脚手架和全链路支持，充分依赖云基础设施，并擅长利用PLG策略来快速扩大影响力。",
        "time": "01:19:49"
      },
      {
        "question": "对于开源数据库，开源是否是商业模式还是软件开发模式？国外开源公司在过去几年有哪些启发性的例子？",
        "answer": "开源既是一种软件开发模式，也是帮助建立信任的重要手段。尽管开源可以吸引用户基础，但开源用户的profile与付费用户不同，不能单纯依赖开源社区来盈利。开源对于企业而言是一种构建信任的有效方式，但商业模式并不完全依赖开源。启发性的开源公司包括DBPPT和Superbase等，它们关注开发者日常体验，充分利用云基础设施，擅长运用PLG策略，并将用户和客户视为一致。在美国市场，开源公司能够专注于开发者生态建设，市场反馈和回报较快。而在中国，由于企业软件购买决策通常自上而下，市场环境对开发者影响力的要求更高。",
        "time": "01:20:26"
      },
      {
        "question": "在选择客户的过程中，首先应该关注什么？",
        "answer": "首先需要找到切入点，建立一个base camp，并思考如何选择客户。例如，考虑选择像digital tive这样的公司，因为它们拥有很强的技术实力，能够吸引特定类型的客户。",
        "time": "01:25:42"
      },
      {
        "question": "对于难以规模化拓展的客户类型，有何建议？",
        "answer": "避免只针对特定类型的高难度客户进行规模扩张，例如只在美国处理非常挑剔的客户。应广泛了解美国生态，并构建本地化销售团队去接触和理解客户，而不是局限于华人圈子或等待机会。",
        "time": "01:25:53"
      },
      {
        "question": "在构建海外团队时，如何应对挑战？",
        "answer": "构建海外团队时，不应过分考虑文化差异或远程管理优势，而是要注重目标一致性，创始人需亲自参与并感受当地市场。同时，要关注海外不同行业和领域的传统渠道和决策模式，以适应不同市场的特点。",
        "time": "01:30:13"
      },
      {
        "question": "如何将面向开发者的话语体系转化为面向企业买家的话语体系？",
        "answer": "正在经历将面向开发者的话语体系转变为企业买家的话语体系的过程，但目前还没有现成答案，仍在探索中。",
        "time": "01:30:54"
      },
      {
        "question": "海外市场中有没有哪些市场有不错的进展？",
        "answer": "东南亚市场，尤其是泰国，是一个值得关注的领域。泰国正在经历数字化转型，对技术和软件付费意愿较强，且本土缺乏IT人才，这使得中国技术和产品具有较强的话语权和推进速度。",
        "time": "01:32:31"
      },
      {
        "question": "公司整体的海外市场战略应该如何制定？",
        "answer": "尽管美国市场最为成熟，但如果产品已经准备就绪，可以在一些趋势性市场如东南亚、日本等地取得突破，利用较低的成本获得收入。但前提是要通过美国市场建立品牌知名度和信任度。",
        "time": "01:37:13"
      },
      {
        "question": "中国市场对于基础软件产品有何特点？",
        "answer": "中国市场对于基础软件产品的需求独特，如h type模式在国内兴起，尤其是在金融行业，尤其是银行系统替换核心数据库方面，未来一年内将会有较快增长，因为国内企业对于新一代数据库的认知和接受度逐渐提高。",
        "time": "01:38:28"
      },
      {
        "question": "在中国市场，创业公司需要面临的挑战是什么？",
        "answer": "在中国市场，创业公司必须面对的挑战是先从硬骨头开始，即搞定相对话语体系接近的客户，并且在起步阶段就需要拥有一支综合型的人才队伍。",
        "time": "01:39:41"
      },
      {
        "question": "经过八年的创业历程，哪些预期是符合实际情况的，哪些是超出预期的？",
        "answer": "符合预期的是云服务的发展和open source带来的增长引擎。而超出预期的是全球化进程中合规工作量的增加、中美关系带来的影响，以及团队建设和组织形态的变化，比如软件最终形态与最初设想的不同，且公司能够存活至今也是一个惊喜。",
        "time": "01:40:25"
      },
      {
        "question": "对于想要出海的公司，有什么建议和提醒？",
        "answer": "建议先去美国实践半年，同时跳出中国人的圈子去了解更大的世界。通过亲身经历判断是否适合出海，以及如何具体操作。此外，社区运营和品牌建设两手都要抓，因为这是公司的growth engine。",
        "time": "01:43:35"
      },
      {
        "question": "未来八年有哪些让你兴奋的机会和新的挑战？",
        "answer": "AI与serverless融合带来的新产品形态是一个重大机会，AI将会对IT行业产生深远影响，类似cloud的影响。未来数据库将有自然语言接口，使得用户能以更直观的方式与数据交互，提高用户体验。",
        "time": "01:44:18"
      },
      {
        "question": "AI技术的发展如何改变各行各业，特别是与数据库相关的方式？",
        "answer": "AI会改变用户看待和处理数据的方式，让数据整合变得更为重要。AI可以协助用户发现有趣的问题，并生成SQL等操作代码，实现数据价值的最大化。HTAP（混合事务/分析处理）在这种背景下尤为重要，因为它能提供统一的数据处理和价值创造能力。",
        "time": "01:48:06"
      },
      {
        "question": "是否有专业或非专业的书籍对您影响很大？",
        "answer": "非专业书籍《产品模式维修艺术》影响很大，它探讨了技术和哲学的底层问题；专业书籍推荐《Unix编程艺术》，这本书对理解和设计优雅的系统有极大帮助。",
        "time": "01:52:17"
      },
      {
        "question": "如果能回到过去，对刚开始创业的自己说什么？",
        "answer": "会说“你很幸运”，并表达出不枉此行的感慨，强调了创业过程中的收获与成长。",
        "time": "01:58:34"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "软件如何改变世界：开源与出海经验分享",
        "summary": "本期播客中，特约赞助商on due提供的SaaS平台助力企业获取海外B端客户线索，覆盖全球两百多个国家与地区。作为主讲嘉宾，pink cap的联合创始人兼CTO分享了关于开源分布式数据库TiDB及其在全球范围内的应用和影响，深入探讨了开源、数据库技术、开发者工具以及AI对数据领域的未来影响。同时，讨论还涵盖了中美市场的异同和企业出海的经验。本期节目不仅提供技术见解，还展示了东旭作为摇滚乐手的另一面，为听众带来丰富的跨界体验。"
      },
      {
        "time": "00:02:55",
        "title": "黄东旭分享PingCAP与KDB开源数据库的发展历程",
        "summary": "黄东旭介绍了PingCAP公司及KDB开源分布式数据库的发展历程，强调了开源模式的重要性以及云模式的采纳。此外，他还讨论了AI技术对未来数据库软件形态和商业模式的潜在影响，并分享了从公司创立到扩展的宝贵经验。"
      },
      {
        "time": "00:07:27",
        "title": "TP和AP数据库的区别及应用",
        "summary": "数据库可以大致分为TP（事务处理）和AP（分析处理）两种。TP数据库主要处理在线交易或事务，如在线支付，强调快速响应、高并发处理能力和数据的精确性、一致性和可靠性。而AP数据库侧重于数据分析和报表制作，对于数据一致性和处理速度的要求相对较低。由于TP数据库关乎核心业务运行，替换成本高，因此市场上TP数据库更新换代不频繁。相比之下，AP数据库应用场景多样，更换数据库的粘性较低，市场呈现出百花齐放的状态。"
      },
      {
        "time": "00:12:12",
        "title": "数据库发展的现在与未来：HTAP的崛起",
        "summary": "近年来，随着公有云厂商和新兴数据库公司相继推出HTAP架构的产品，HTAP数据库成为数据库领域的一个重要趋势。HTAP数据库能够同时支持在线事务处理(OLTP)和在线分析处理(OLAP)，满足了用户对数据实时性和分析能力的高要求。一个初创团队，受Google Spanner启发，起初目标是创建一个可弹性伸缩的OLTP数据库，以取代传统的数据库解决方案。然而，他们在实践中发现，用户对于实时数据分析的需求日益增长，传统上将OLTP和OLAP分开处理的方式已不能满足这种需求。HTAP数据库的出现，正好满足了这种需求，让用户能够从在线数据库中直接获取数据洞察，极大地缩短了数据处理和分析的时间，提高了业务的灵活性和响应速度。"
      },
      {
        "time": "00:19:20",
        "title": "探讨HTAP数据库技术的发展与应用",
        "summary": "对话中讨论了HTAP（Hybrid Transactional/Analytical Processing）数据库技术，强调了其从用户体验出发，解决传统数据库技术面临的挑战。HTAP不仅是一个技术概念，而是一个围绕用户体验和看待数据库方式的分类。尽管市场上有多种数据库技术，如AP（分析处理）和TP（事务处理）数据库，但HTAP通过结合实时分析能力和在线服务的严格要求，提供了一个统一的解决方案。这减少了应用程序开发的复杂性和运维成本，同时也减少了数据孤岛的问题。展望未来，虽然多种数据库技术如流式数据库、图数据库、NoSQL等仍将继续存在，但HTAP有望统一和简化数据处理，减少对多种数据库的需求。"
      },
      {
        "time": "00:24:02",
        "title": "云计算和硬件进步推动数据库技术革新",
        "summary": "讨论集中在为什么近年来各大厂商开始集中发力于数据库技术革新，尤其是在云服务和硬件技术进步的背景下。指出硬件的进步，如SSD的出现，使得开发新一代应用变得更加可行，不再需要进行过多的 workaround。同时，云服务的发展将复杂的硬件进步简化为易于使用的接口，降低了开发者使用新技术的门槛，促进了软件开发和用户体验的革新。此外，还探讨了中美两国在数据库技术采纳和创新方面的差异，强调了中国市场由于业务压力和对体验的高要求，对新技术的拥抱更为迅速。"
      },
      {
        "time": "00:29:55",
        "title": "探讨HTAP数据库架构及其选型逻辑",
        "summary": "对话内容围绕HTAP（Hybrid Transactional/Analytical Processing）数据库架构的几种主流类型进行探讨，包括分开型架构、基于原生数据库的架构、unit store架构和一体化架构。从用户视角出发，讨论了在不同自动架构中如何选择合适的HTAP解决方案，强调了用户体验的重要性以及TP能力对于选型的决定性作用。同时，分析了snowflake的unit store在特定用户群中的应用前景，以及新兴公司面临的竞争格局和市场机遇。"
      },
      {
        "time": "00:35:51",
        "title": "SQL语言的持久影响力及数据库技术演进",
        "summary": "对话集中在SQL语言的持续重要性和数据库技术随时间的演进上。强调了尽管数据库技术在过去几十年中没有经历根本性变化，SQL仍作为开发者必备技能保持其核心地位。讨论还触及了新数据库类型（如H型数据库）的出现将伴随着新的应用场景，以及像MongoDB这样的数据库如何通过满足新时代应用的需求而崛起。此外，还探讨了SQL如何成为一个沟通不同信息软件的通用语言，预示着在设计未来系统时，可能会更优先考虑SQL的使用，以简化操作者的交互方式。整体上，这段对话展示了SQL在数据库领域不可动摇的地位以及其对未来技术发展方向的持续影响。"
      },
      {
        "time": "00:41:17",
        "title": "数据库开发者对现代数据库服务的需求与体验",
        "summary": "数据库软件的定义和原理是围绕开发者的需求展开的，强调了现代数据库服务需要考虑到应用开发者的实际需要，尤其是用户体验和简化运维的重要性。在讨论中指出，大部分用户并不需要极端的性能要求，而是更注重数据库的易用性和简化维护。此外，还提到了云服务对数据库服务的影响，如CICD流程中的快速部署和测试环境的搭建，强调了现代数据库服务提供者需要关注开发者的日常效率提升。最后，讨论了不同数据库路线的选择，认为存在不同的市场需求和应用场景，每种都有其存在的合理性。"
      },
      {
        "time": "00:46:24",
        "title": "提升开发者体验的平台与策略",
        "summary": "讨论集中在如何通过平台设计和理念来改善开发者体验。特别提到了一个依托于Next.js的平台，它不仅提供应用开发、测试、托管及部署等一整套服务，还着重优化了从应用开发到上线的整个流程，使得开发者能够更加专注于编写应用的业务逻辑代码。该平台通过整合数据库等第三方服务，以及提供无服务器的开发体验，简化了开发者处理基础设施的复杂度，从而提升了用户体验。此外，还强调了提供简单、无摩擦的服务对数据库供应商的重要性，以及前端开发趋势对平台策略的影响。"
      },
      {
        "time": "00:53:09",
        "title": "探讨云原生与Serverless技术对未来开发者的影响",
        "summary": "对话中强调了云原生技术在软件开发中的转型意义，特别是像Snowflake这样的云原生数据库代表着第一代信息软件在云技术推动下的进步。进一步，Serverless技术被视作对开发者工具和用户体验优化的重要一步，它通过隐藏部署细节、实现按使用量计费和能够无缝扩展至零，来满足应用开发者对灵活性和成本控制的需求。特别指出，对于新创数据库公司而言，Serverless已成为进入市场的必要条件。最后，讨论了Serverless技术对用户来说的优势，如计费单元的精细化、能够快速适应应用流量变化的能力，以及快速启动时间，这些都使得Serverless成为许多新场景下的首选技术方案。"
      },
      {
        "time": "00:57:28",
        "title": "Serverless技术的发展与挑战",
        "summary": "讨论集中在Serverless技术的当前发展状态及其面临的挑战上。虽然AWS等主流云服务提供商已经推出了数据库服务，如neo4j，但Serverless技术被认为仍处于早期阶段，需要时间成熟。开发者对这项技术的了解仍然有限，因为许多相关服务都是近一两年内推出的。讨论者认为，Serverless技术的基础架构正在成形，但需要更多时间、更多成功的案例和社区反馈，以促进其广泛采用。他们还提到，尽管已经跨过了技术上的大门槛，但仍有许多细节问题和技术挑战需要解决，这些挑战主要涉及工程层面的改进。总体上，Serverless被认为是一种提升用户体验的技术，代表了云原生应用的未来。"
      },
      {
        "time": "00:59:44",
        "title": "探讨Serverless技术对未来数据库和服务的影响",
        "summary": "对话集中在Serverless技术如何推动数据交换生态的形成，以及如何通过数据共享和隐私计算技术进一步拓展服务的想象空间。特别提到了将云存储（如AWS的S3）视作新型磁盘，使得数据间的联通变得更加简单，从而催生数据交换的生态。此外，还讨论了Snowflake与未来数据库的差异，强调了服务层（serving）的重要性，以及如何通过整合不同数据集快速提供在线服务的潜力。最后，探讨了这种数据库格局变化对未来数据库选型的影响，以及服务构建的核心竞争力。"
      },
      {
        "time": "01:04:37",
        "title": "数据库与数据库服务的差异化发展",
        "summary": "数据库与数据库服务之间的关系被比作汽车与其发动机，强调了两者虽密切相关但本质上是不同的。一个好的数据库不仅需要关注性能核心指标，还要注重整个用户使用历程，包括数据的导入导出、备份恢复、调优、诊断及界面设计等，形成了对用户体验的全面覆盖。对于新成立的数据库公司而言，需要建立一个研发组织来满足市场需求，这不仅要求有硬核的数据库开发背景，还需要具备微服务、用户体验设计等多方面的能力。创业者往往低估了除了数据库核心开发之外的其他部分的难度和时间投入，从而面临挑战。"
      },
      {
        "time": "01:07:37",
        "title": "组织变革与云原生转型的挑战与策略",
        "summary": "对话中讨论了组织在向云原生转型过程中遇到的挑战和采取的策略。起初，组织试图通过简单封装数据库内核实现云服务，但发现平台和数据库研发团队的分离导致实施不顺畅。经过调整，2022年初组织决定转向以云为中心的研发模式，重新定义团队架构，以应对康威定律的影响。同时，讨论也触及了开发者在数据库使用方式上的变化以及开源社区对企业的重要性。这一转型过程中，强调了理解业务视角的重要性，以及如何通过组织架构的变革促进产品迭代速度和业务价值的实现。"
      },
      {
        "time": "01:15:06",
        "title": "开源社区的自我运转与信任构建",
        "summary": "对话强调了开源社区自我运转的重要性及对信任构建的作用。提出一个理想的社区应该是能够自我维持的，而不需要过多的运营干预。进一步说明了开源不仅有助于建立用户对产品的信任，还是培养用户基础、收集反馈的有效途径。同时，区分了开源项目与商业成功之间的关系，认为开源更多是一种软件开发模式，而非直接的商业模式。"
      },
      {
        "time": "01:19:33",
        "title": "开源数据库的演进与启示",
        "summary": "开源数据库领域经历了显著变化，未来开发开源数据库将优先选择PG协议，更早地融入云服务模式，并注重国际化发展。近年来，国外开源公司如雨后春笋般涌现，其中DBPPT、SuperBase和V2等公司通过深刻理解开发者需求、依赖云基础设施和利用PLG（产品驱动增长）策略，实现了快速成长。这些公司共同的特征包括专注于提升开发者日常体验、构建于云基础设施之上和擅长利用PLG策略促进快速增长。"
      },
      {
        "time": "01:22:37",
        "title": "国外技术趋势与中国企业软件市场的差异",
        "summary": "国外已普遍接受云原生和Serverless作为新一代开发范式，而中国则更多讨论这些概念并倾向于私有化部署。在国外，企业软件的客户和用户通常是同一群体，初创公司能通过专注于PLG和开发者生态获得快速增长，开发者在决策中的影响力显著。相比之下，中国的企业软件市场仍以SLG为主，销售周期较长，且用户与客户的区分更为明显。对于中国技术背景的创始人来说，适应国外市场需要找到合适的切入点，并建立本地团队以深入了解市场需求，同时避免仅在华人圈子内发展。此外，非互联网高科技行业的软件价值认可度高，但需要提供相应的on boarding和ISV服务，说明无论国内外，成功没有捷径。"
      },
      {
        "time": "01:29:03",
        "title": "海外团队建设与文化融合挑战",
        "summary": "在构建海外团队的过程中，遇到的主要挑战包括文化差异的理解与适应，特别是对待工作生活平衡的看法和管理本地团队的策略。强调没有哪一种文化比另一种更优越，重要的是平等对待和明确共同目标。创始人亲自参与，是文化传递的重要桥梁。同时，对于非高科技企业，如何将面向开发者的沟通方式转变为面向企业买家的话语体系是一大挑战。此外，海外市场上，产品管理和营销人才的缺乏，以及如何有效讲述产品故事，是中国企业在国际化过程中需要克服的问题。"
      },
      {
        "time": "01:32:20",
        "title": "泰国和日本市场的发展特点与机遇",
        "summary": "对话中提及泰国市场在东南亚中的进展，强调了其快速的人口增长、年轻的人口结构、旺盛的数字化转型需求以及对新技术的快速接纳。泰国的银行系统正全面拥抱云计算，体现了该国在IT领域的发展跳跃和对技术输出的开放态度。此外，泰国市场对于软件的付费意愿和能力良好，为中国企业提供了进入APEC区域的有利条件。对比之下，日本市场以谨慎和慢速著称，呈现出吞吐量大但延迟高的特点，要求企业采取不同的市场策略来适应。"
      },
      {
        "time": "01:36:21",
        "title": "拓展海外市场与品牌信任建立策略",
        "summary": "讨论重点在于如何有效地进入和拓展海外市场，特别是对于技术产品公司而言。首先强调了虽然美国市场巨大且肥沃，但对于刚准备好的产品来说，选择成本较低、趋势性强的市场（如东南亚的泰国、印度尼西亚等）进行突破更为现实，这些地区的市场需求和对产品的要求可能相对较低，同时利用云服务可以提高交付效率，减少对本地强大交付团队的需求。此外，也提到了通过在美国市场建立品牌知名度和信任度，可以间接促进在其他国家市场的接受度，表明国际知名度和信任是进入新市场的关键。最后，触及了中国市场特有的挑战和机遇，特别是在基础软件产品方面，强调了在国内市场成功的重要性和特殊性。"
      },
      {
        "time": "01:38:28",
        "title": "金融行业数据库替换趋势与创业挑战",
        "summary": "在讨论中，首先强调了面向中国政企市场的特殊需求以及金融行业中数据库系统替换的快速增长趋势，特别是OTP数据库的成熟度提升和客户预期的调整。讨论还涵盖了创业过程中的挑战，如团队和组织构建、合规问题以及全球化策略。特别指出，云服务和开源技术的发展符合预期，而处理合规和国际关系成为了意料之外的难点。同时，讨论还提到了对品牌建设和社区运营的重视，以及对软件开发复杂性的认知。整体上，这段对话深入探讨了金融行业的技术更新、创业过程中的预期与现实差异，以及未来的发展方向。"
      },
      {
        "time": "01:43:21",
        "title": "软件开发公司出海建议与AI技术影响",
        "summary": "对于计划出海的软件开发公司，建议初期亲自体验目标市场，跳出舒适圈，直接了解市场需求。同时，AI技术，特别是ChatGPT的使用，展示了其在提升工作效率、优化用户体验方面的巨大潜力。AI不仅能够辅助完成日常任务，如写邮件和演讲稿，还能生成SQL查询，提升数据分析的效率和效果。未来，自然语言将成为数据库交互的主要方式，改变用户与数据的交互模式，强调了将数据集中管理的重要性。AI、Serverless技术与数据库的结合，将为IT行业带来深远的影响。"
      },
      {
        "time": "01:48:39",
        "title": "探讨人工智能对未来职业和教育的影响",
        "summary": "对话中讨论了OSN在自然语言处理方面的应用，并对其潜力进行了深入探讨。主要观点包括，原先由数据分析师定义问题的方式可能被AI取代，从而推动所有相关数据的整合。此外，强调了通过服务来实现数据价值的重要性，以及HTAP技术中的“T”（事务处理与分析处理）的重要性。进一步地，讨论转向了AI对未来职业的潜在影响，如改变程序员的工作方式，以及如何利用AI进行编程和问题解决。最后，提到了对个人影响深远的书籍，包括《产品摩托车维修艺术》和《Unix编程艺术》，这些书籍在技术和哲学层面上给予了深刻启示。整个对话揭示了AI技术的快速发展将如何重塑我们的工作方式和教育体系，以及个人对于技术深度理解的追求。"
      },
      {
        "time": "01:54:16",
        "title": "探讨技术哲学与个人成长",
        "summary": "本次对话深入探讨了Amazon CTO 在设计S3时的理念与哲学思考，及其如何通过减少复杂性来实现优雅的系统设计。同时，分享了个人在学习乐器和音乐偏好上的体验，以及这些体验如何影响了他的思维方式和创造力。最后，提出了对于刚创业的自己的建议，强调了在技术创业道路上，保持理想主义和对未来充满期待的重要性。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "开源作为建立信任的手段"
                },
                {
                  "children": [],
                  "content": "商业化过程中社区与公司的关系调整"
                },
                {
                  "children": [],
                  "content": "开源社区的自我运转与公司角色后退"
                }
              ],
              "content": "开源与商业化"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "HTAP数据库的兴起"
                },
                {
                  "children": [],
                  "content": "Serverless技术的影响"
                },
                {
                  "children": [],
                  "content": "数据库服务化的重要性"
                }
              ],
              "content": "数据库的未来"
            }
          ],
          "content": "技术与市场"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "作为通用语言的角色"
                },
                {
                  "children": [],
                  "content": "在不同数据库之间的桥梁作用"
                }
              ],
              "content": "SQL的重要性"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "开发者对数据库的需求变化"
                },
                {
                  "children": [],
                  "content": "云原生与Serverless对开发者体验的影响"
                }
              ],
              "content": "开发者体验"
            }
          ],
          "content": "产品与用户体验"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "对海外市场的适应与策略调整"
                },
                {
                  "children": [],
                  "content": "在不同市场的品牌构建与市场接纳度"
                }
              ],
              "content": "出海策略"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "服务型数据库的市场需求"
                },
                {
                  "children": [],
                  "content": "产品设计与用户体验的平衡"
                }
              ],
              "content": "服务与产品定位"
            }
          ],
          "content": "市场拓展"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "AI对数据库行业的影响"
                },
                {
                  "children": [],
                  "content": "自然语言处理在数据库查询中的潜力"
                }
              ],
              "content": "AI技术的应用"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "云原生数据库的发展"
                },
                {
                  "children": [],
                  "content": "Serverless技术的优势与挑战"
                }
              ],
              "content": "云原生与Serverless"
            }
          ],
          "content": "技术创新与挑战"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "对创业过程的反思"
                },
                {
                  "children": [],
                  "content": "面对挑战与不确定性的态度"
                }
              ],
              "content": "创业心态"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "学习新技术与思维的转变"
                },
                {
                  "children": [],
                  "content": "个人成长与技能提升的重要性"
                }
              ],
              "content": "学习与成长"
            }
          ],
          "content": "经验分享"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "HTAP与Serverless的融合"
                },
                {
                  "children": [],
                  "content": "AI技术在数据库领域的应用前景"
                }
              ],
              "content": "未来数据库的趋势"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "企业服务市场的变化"
                },
                {
                  "children": [],
                  "content": "技术发展对市场格局的影响"
                }
              ],
              "content": "市场与技术的演变"
            }
          ],
          "content": "行业展望"
        }
      ],
      "content": "对话脑图摘要"
    }
  }
}