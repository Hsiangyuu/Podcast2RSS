{
  "pid": "61cbaac48bb4cd867fcabe22",
  "eid": "66436819251bd96e6c4a1766",
  "title": "EP 53. AI Agent会取代程序员吗？硬核对话硅谷顶尖研究员与AI独角兽：软件开发的未来，Agent的技术本质",
  "task_id": "3vl8qg4jmwdlqpr2",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "亲爱的on board听众们，千呼万唤始出来，onboard终于要成立听友群了。今年我们有各种新动作，加入on board听友群，你不仅能结识到高质量的听友们，我们还会组织线下主题聚会，邀请部分听友实时旁听我们的播录制，直接跟嘉宾提问等有趣的互动。当然你也可以在第一时间看到节目更新。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:19",
      "text": "添加小助手微信onboard 666，是不是很好记？On board 666发送你的姓名、公司和职位，就可以获得进群链接了，期待你来。欢迎来到onboard，真实的一线经验，走心的投资思考。我是Monica.",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:37",
      "text": "我是高宁，我们一起聊聊软件如何改变世界。大家好，欢迎来到on board。今年除了OpenAI的sora惊起千层浪以外，同样引起AI从业者尤其工程师极大关注的想必就是仅通过一段演示视频就连续获得两轮融资，估值在半年内上升到20亿美金的AI agent公司cognition labs和其产品。David宣称世界上第一位AI软件工程师AI将如何重塑软件开发甚至工程师这个职业？David是否能代表agent应用开发的方向，以及看到目前agent产品还有多少提升空间？",
      "speaker": "发言人2"
    },
    {
      "time": "00:01:16",
      "text": "这一期我们邀请到三位在各自领域都极具代表性的嘉宾。有来自去年刚晋升独角兽的软件开发云平台rapidly的AI agent工程师，首个基于github的代码能力评估数据集sweet bench，也是首个开源AI software agent项目sweet agent的作者。还有刚官宣估值达到10亿美金的企业级AI编程辅助公司augment的AI研究员。在两个多小时的对话里，我们从工程师个体企业级需求以及学界研究等不同角度，深入最近出现的一系列编程辅助产品，到试图替代工程师的agent还有关于基础大模型的边界，最后聊到生成式AI对个人、职业和社会正产生的深远影响，更是让这期内容远远超出对技术和产品的探讨，希望也能对正在收听的你们有所启发。enjoy.",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:07",
      "text": "大家好，欢迎来到on board，我是Monica，我是高宁。对，今天我们又是很难得的在这个规补录的一期线下的Amber。而且这一期的这个话题，我想也是我觉得集合了这个AI界最近。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:22",
      "text": "最火的几个话方向。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:24",
      "text": "对对对，一开始我们觉得要讨论话题是AI coding。对，那个时候大家关我觉得在几个月之前，大家其实关注更多是像microsoft的copilot这种形态，这种auto complete的这种形态。但是如果关注这个领域的朋友应该也注意到，前几周对就是一个叫cognition an lab lunch了，一个叫David的一个coding的一个agent。我觉得一下子把大家对于未来到底LM或者AI能够如何改变我们整个软件开发的模式的又打开了新的想象空间。所以我们觉得正好今天我们就请到了，我觉得在这个领域应该是非常有发言权的几位嘉宾。他们所在的公司，我觉得正好可以代表就对于我们这个话题几个非常棒的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:14",
      "text": "每个阶段都非常有代表性的一个产品和技术。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:19",
      "text": "所以也是非常期待。好那几位speaker，刚才我们也喝了点小酒，我觉得这个气氛已经到位了。好好，欢迎来到翁博尔。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:31",
      "text": "请三位嘉宾先做一个简单的自我的介绍。同时的话根据我们以往的惯例，也有一个自己的fun fact，就是今年发现的最有意思的产品，要不就从我身边的舜宇开始。",
      "speaker": "发言人2"
    },
    {
      "time": "00:03:46",
      "text": "大家好，我叫姚顺宇，我是prince第五年的PHT，马上要毕业了，现在在旧金山的一家创业公司实习。我创业的公司叫sara，然后我推荐这个AI产品，我可以推荐我们自己的CR。CR boss我觉得确实比较少的。AI这里面真的能work的落地的产品之一，就是CRO现在在做customer service business agent。然后我们已经有很多客户真的可以落地，我觉得这个is very interesting。",
      "speaker": "发言人4"
    },
    {
      "time": "00:04:19",
      "text": "你觉得他最interesting的地方是什么？",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:22",
      "text": "就真的work，然后真的可以去ultimate一个叫对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:04:26",
      "text": "但如果大家还不知道sara这家公司的话，这家公司也可以说是我觉得去年忘记了最受关注的一家典型的大佬创业公司。这对是原来south force的CEO。就像是你刚才说的，其实这家公司它是专注在给这个也是主要是enterprise提供这个，主要是check for这样的可以以这个customer service为主。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:51",
      "text": "然后你今年发现最有意思的一个AI的产品。",
      "speaker": "发言人2"
    },
    {
      "time": "00:04:54",
      "text": "除了sera之外，我其实用的比较多的是个。",
      "speaker": "发言人4"
    },
    {
      "time": "00:04:58",
      "text": "我觉得我别说国内，哪怕我在很多我觉得不在我们整天讨论AI这个圈子之外的人，其实不是每个人都对proceeded都那么熟悉的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:10",
      "text": "就偶尔会用它代替谷歌搜索。如果想要搜一些比较知识性的问题。",
      "speaker": "发言人4"
    },
    {
      "time": "00:05:15",
      "text": "对，是我现在用的比例可能已经30%了。",
      "speaker": "发言人5"
    },
    {
      "time": "00:05:20",
      "text": "是的，我觉得现在除了一些fact，就是我要查比如说某个公司的网站什么的之后用google之外，我觉得只要我是带一个to mark的，我基本上都不用。没事，你可以顺便介绍一下你是如何进入这个AI研究的领域。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:37",
      "text": "就是本科的时候就开始走做一些科研，当时我做的是computer tion，后来觉得这个东西没有language的意思，然后就开始做language。然后造型的有。",
      "speaker": "发言人4"
    },
    {
      "time": "00:05:50",
      "text": "顺序的很，我觉得舜宇就非常谦虚。剩余的很多跟agent相关的工作，我觉得都是在整个领域里面都是非常有都是非常有标志性意的。一会我们也会让舜宇去给大家多做一些介绍。好，我们就下一位再OK。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:08",
      "text": "大家好，我叫赵宇哲，我现在在一家AI创业公司，一个food star AI for code的创业公司。然后我之前是在google researchers is flash google delands做levels the research。",
      "speaker": "发言人3"
    },
    {
      "time": "00:06:27",
      "text": "对，这家公司也是，我们今天集齐的都是各个的大佬创业公司，这家公司也是某大佬创业，然后某特别爱孵化这个大佬基金孵化的一个基金孵化的创业公司。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:45",
      "text": "对，也可以说说你是怎么进入到其实AI9JAI这个领域。",
      "speaker": "发言人2"
    },
    {
      "time": "00:06:49",
      "text": "然后我进入这个领域运气特别好，因为我PSD你做的比较理论，是比较理论的模型。对，那时候我很喜欢东西，然后我那个时候是against depending，我觉得deep in他work，但我不care，因为他他没有意义，他就他不能被解释对吧？他没有理论，没有意思。但是毕业的时候我那时候纠结的事情跟刚刚顺说的很像，就是我不想做delium，所以要找一个方向，那你就找vision或者language。然后我那时候我我我做过一些，现在我在PH的时候做过一些些vision的一些小的project。然后我觉得language比较有意思，因为language跟intelligence更加的接近吧？Vision是reception a perception，所以所以我就去找那个跟language是有关的工作。然后我运气特别好的是我那时候join的就是HE，五年前发明过的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:07:44",
      "text": "一个题。",
      "speaker": "发言人5"
    },
    {
      "time": "00:07:45",
      "text": "对，所以就从那个时候，就在那个是在这之前过来之后，NLP的resets有的变化。然后对我来说就是非常好的机会去去去学习一个整个ALP的一个事情。所以我那时候应该也做了很多retraining，就是现在的retraining post training的一些工作。然后后来去做了lambda这也是which非常，因为lambda是在geni的，对我来说lambda就是JNI的开箱鼻祖。对，在lda之前没有人会觉得说，我一个genre generative的language model，可以用来做一个超200证明的这件事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:28",
      "text": "然后在这之后我就做了一些research，包括我们我们做了第一个差不多是第一个instruction turing的researcher做spend the paper。对，然后再之后就也会去做一些跟公司有关的一些产品逻辑的事情。就是我在太多之前干的事情，besides我自己比较感兴趣的research方向出去了。因为我我会觉得retrial对于language more来说，是一个很重要的capability的。对我自己的research方向，我对rural augmentation augmented generation是非常感兴趣，也是我现在在新公司做的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:10",
      "text": "挺好。那你今年觉得最有意思一个AI产品。",
      "speaker": "发言人2"
    },
    {
      "time": "00:09:14",
      "text": "对我觉得AF库的这个产品特别好的地方就是我说创业来说特别好的是你每天都会用，所以我每天都用我们自己的公司的产品，自己是自己的公司，对，自己是自己游走，对，这个还蛮好玩的。如果是别的地方的产品的话，我自己会觉得视频生成挺有意思的。我跟大家玩，虽然我没有用它来干什么特别有意义的事情，但我觉得挺好的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:39",
      "text": "你用的最多的是哪个产品？",
      "speaker": "发言人5"
    },
    {
      "time": "00:09:41",
      "text": "哪个？我就稍微用一些，我看demo比较多，而且用的比较多的是我会用这个GPT4去去，但主要是生鲜图，然后对，日常用的最多。",
      "speaker": "发言人3"
    },
    {
      "time": "00:09:56",
      "text": "的是几个地方。好的，李贞。对，嗨大家好，我叫李珍。然后我现在在replay是一家创业公司，是一个B轮的一个创业公司。然后我们的产品我觉得可能很多中国的小伙伴是不知道的，它是一个online的IDE。当然它不光是一个ID，但是它start with a multiplayer online IDE。",
      "speaker": "发言人5"
    },
    {
      "time": "00:10:20",
      "text": "然后我们有两千多万的用户，大部分其实是初学程序的，或者说是不太会写代码的这些需要，比较没有那么专业的programmer。并且我就是我们的vision是我们要做next million software create，这怎么说呢？就是我们现在大家有很多程序员，在包括我们在座很多都是程序员，但是真正这个世界上会写程序的人只有我们计算3000万还是4000万，是人类的人口的极小的一部分。但actually我们经常说我有一个idea，但是缺一个程序员。你有idea的人是很多的，程序员是很少。但是我们的vision其实就是我们想让所有的人都成为一个software creation。就是你有一个idea，你就可以create software。",
      "speaker": "发言人5"
    },
    {
      "time": "00:11:14",
      "text": "这个vision在七年前就有，所以第一步实际上这个vision就是做一个匀ID，大家可以去去在。手机上在任何地方写代码，然后有一些辅助帮你下载的环境的东西。今天会有更多的包括AI的部分加进来之后，离这个vision会更近很多。对，这是我们公司。然后在到reply，我是去年六个月前到了replace。",
      "speaker": "发言人5"
    },
    {
      "time": "00:11:40",
      "text": "在这之前，我在我在国内本科毕业，我在北航上了本科毕业之后，我到google就直接去了google，然后在谷GLE工作了五年，goole google工作五年，主要在做推荐，就是推荐系统google news，然后我们叫discover，但其实也是news。然后那个时候是我其实就在一直在做AI但是推荐系统作为上一波AI的最赚钱的场景和产品，在我做了五年的过程中，我觉得基本上已经卷到头了。因为大家都在网上加各种各样的奇技淫巧，但其实真正的突破不是很多，但是嫁接自己引巧就能真的给你带来这项remedy。最大的还在卷，但是从我看来就没有那么大的意思。所以我们最后做feature engineering的时候，也有很多有feature engineering，然后有各种各样的这个模型里面加一些奇怪的结构，就是attention，然后transformer这些奇怪的方式，就是IT worse。但是就是有一些没有在已经卷到头的感觉，也后来我就出来了，我出来之后我又去tiktok做了一年推荐，然后我想看看他们在干什么以后得出结论。",
      "speaker": "发言人5"
    },
    {
      "time": "00:12:58",
      "text": "差不你不是已经觉得卷到，怎么又去了一个更卷的，先给我看一下头是什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:03",
      "text": "对，当时我觉得可能就是google，因为google没有那么快的，然后我觉得可能google做的方式不太对。或者我也想看一下中国的公司是怎么样的。因为我自己想创业。作为中国人你要创业遇到一个问题，会要回答一个问题，就是你想在美国创业还是在中国创业。所以我想给自己一年时间就回答我这个问题。比如说我的学挺挺好啊，然后待了一年之后我拿到了绿卡之后我就出来我就想说OK我将要创业，那我应该自己出来创业，就自己做才能去，然后就出来创业了，出来创业做了一年，我做了一个biotech for口pad做biotech就是给biotech的人做copy。",
      "speaker": "发言人5"
    },
    {
      "time": "00:13:49",
      "text": "那是哪一年？就是前年到去年9月份为止之前我们要做这个事儿，其实做的很早，我们做的时候GPT chat地还没有出来，5万，所以这个我可以，我有很多sorry可以share。但是faced也就是我们当时曾经有一个very big ambition，we want to be AF score for GPS, 然后当时我们就提出了GPT s这个概念。然后before chat VT出来之前，我们当时还在用WCE，就是GTC正1222。所以后来我做着做着我觉得说。头顶好像是一个更AI明显的更产生价值的一个。就是我们找了一圈固定的公司，然后觉得这也最符合我的需求，那我就回家了。",
      "speaker": "发言人5"
    },
    {
      "time": "00:14:41",
      "text": "所以你当时去其实record这家公司已经做了好几年了。所以你当时去的时候，他们在于什么阶段？",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:47",
      "text": "Regular在其实regulate在一个他做了六年还是七年已经，他在他的阶段是他有很好的product market，或者说他有大量的用户有有大量的用户非常喜欢这个产品，但是他需要某个孩子，他需要赚钱。",
      "speaker": "发言人5"
    },
    {
      "time": "00:15:10",
      "text": "然后我在加入。",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:12",
      "text": "的时候，正好是replace在把AI institute进来的一个早期。他刚从google挖了我的老板，你看他之前做，然后在google research google .",
      "speaker": "发言人5"
    },
    {
      "time": "00:15:26",
      "text": "APP做pom和其他coding more.",
      "speaker": "发言人3"
    },
    {
      "time": "00:15:29",
      "text": "他是专门做coding model，说白了之后他刚加了一些feature，ghost writer，然后做一些cocos对，非常早期的时候我加入了这个的，然后后面又做了一系列的提示。",
      "speaker": "发言人5"
    },
    {
      "time": "00:15:44",
      "text": "那你今年发现的最有意思的AI产品是哪个？",
      "speaker": "发言人2"
    },
    {
      "time": "00:15:49",
      "text": "我我我这样一个产品，因为我我个人的拍摄是我想我想要empower更多的人去build software。有一个产品，有一家公司叫做bill space，他是一个h sixteen c投的一家公司，它有更像一个学校，它是帮助更多的人教更多人怎么做starve，怎么做产品。他今年他之前一直在做学校，今年做了一个产品就叫good space。他这个产品是干嘛的呢？你可以在这个上面，如果你idea它是一个拆包，你可以跟他说我要做这个idea，他会帮你对接到可以帮到你的人。",
      "speaker": "发言人5"
    },
    {
      "time": "00:16:23",
      "text": "OK举个例子，是个真人，他either是告诉你，帮你生成代码，告诉帮你做，或者说帮你connect到一些正在做这件事情。OK比如说举个例子，比如说你是一个youtube，比如说我想要给我的视频生成更好的一个封面。然后你跟这个跟做配合，想要做视频生成一个好的封面，然后他会想一下，然后告诉你说这是我可以帮你找到10个正在做youtube视频负面生成的公司或者个人you could take，或者我可以帮你talk。我觉得这个是一个这个产品本质上是在把人和人connect起来。这个其实是一件很好的事情，是帮助你去完成你的目标。其实你并不是一定要自己会做所有的事情，你只要有人能帮你完成这件事情，两边都可以说。在他之前做critter也是做过critical社区，就是他超会在外上。现在是本质上它是一个star这是一个非常有意思的公司，我非常喜欢他的方法，是一个特别优秀的创业者，但是他又很喜欢教育别人，就是教育别人就很喜欢sherri他的know我其实我说我的我在他那里学到的创业的知识，可能比我自己做创业的六月缺都很多，所以他那花的时间可能加起来就几个星期这样。",
      "speaker": "发言人5"
    },
    {
      "time": "00:17:46",
      "text": "我觉得这个我我觉得build这个还挺有意思的。因为这个让我想到hey j其实黑卷他其实他们分享过他们早期的一个gross head，是怎么样呢？就是因为大家知道黑卷是段时间拿到了benchmark这个几个fa million，就是4000万美金的投资，是由华人做创业公司，现在发展的非常快。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:08",
      "text": "他们其实就是帮你自动生成一个类似于真人的一个avatar。然后他们最早期去做grow tech的时候，他们就是把它放到在美国有一个叫fier。Fier就是类似于一个这种free Lancer的平台。然后里面就有一个session，就是去就是你可以在里边去找人来给你做这种带人的视频，对吧？这个就是一个以前真人来做的，他们最后就会明码标价的。一般真人做几十美金1个小时或小100美金小时。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:38",
      "text": "然后他们就把他们的那个他们AI生成那个人。因为在这种情况下，他只需要一个看上去还不错的人就好，他也不在乎你是个名人或者怎么样的对，所以他们就把他们AI生成的那个视频就把它放上去，然后它标价就是好像是个位数，好像五美金还是多少。那你想这样的一个一下子打开，确实因为这个价格实在差差太多了。所以我觉得到以后可能真的当当我们有了这个有有了这个可能AI.",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:06",
      "text": "A技术和产品。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:07",
      "text": "对，真的是可以帮你and to and就完成的。一开始简单的，越来越复杂了。以后我们看到这个网站上，你也许也不需要知道哪些是AI哪一些。",
      "speaker": "发言人1"
    },
    {
      "time": "00:19:17",
      "text": "是真人帮你做的了。对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:19",
      "text": "其实其实我我我可以再补充一，就是我是通过build space才知道，对the face是它我我我刚才没有说的一点是，它其实是一个它它好像一个孵化器，它的slogan是six weeks to work on your dream。对，他会组定期的组织一些就是一个batch然后给你，他会召集你过来，然后六周的时间让你去work on your dream。你can be any dream。你可以去做一个software are。你可以做一个F你可以去画一个漫画，which is这就是我当时做的，你也可以去写一首歌，但是whatever six weeks你去做了一件事情，然后他不会教你怎么去写代码，但是他会教你怎么去把你的产品make other people care about，教你怎么去lunch。两次。后来他跟当时give space的founder，就是发他当时跟有一个session跟arja就是rap CEO2个人有一个凡尔赛产，这是我认识ARM家的那个地方，然后来我知道我在哪，然后现在我在这儿，一个小故事非常酷的对。",
      "speaker": "发言人5"
    },
    {
      "time": "00:20:25",
      "text": "很棒。既然刚才李珍讲到了这个rapper，而且我相信也rapper其实如果大家还不是很熟的话，其实这家成立五六年的公司，现在已经融资也超过了两个亿美金，对吧？超过两个亿美金。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:40",
      "text": "其实是个独角兽了。",
      "speaker": "发言人3"
    },
    {
      "time": "00:20:41",
      "text": "对，这个独角兽的确的AI的在这波AI的浪潮中，我觉得reply其实一直是在在至少在美国是在聚光灯之下。因为我觉得他们算是前行者，很早就是从二三年开始的，从去年很早就开始加入了很多这些AI的功能叠，那也非常的快。然后为这个我专门去看了rapidly他们的博这个博客上也分享了很多他们对于AI在这样的在未来的software development里边会有什么样影响。其实他我去年年终就有一篇博客就讲说AI will redefine every single report feature。他们也浪费了很多这AI需求，让我们发现是AI在在这种像ID开发工具里边，它的实现方式远不止是什么。Copilot李振，你可以给大家介绍一下burberry这些AI的产品都有哪些？然后它背后的一个主线的逻辑是怎么样的？",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:36",
      "text": "OK，我们的主线逻辑其实我刚才也说就很简单，我们想要我们想做两件事儿。第一件事儿是next billion software creator，让更多的人可以去create software。第二个是from idea to software fast，就是你有一个idea让你进入变成了一个能够帮你profit的一个软件。所以我们所有的产品是围绕这个，首先产品上来说，我们有我们首先是一个代码平台，你可以在云端去写代码。并且它是multiplayer，它multiplayer其实是很最开始我们有很多用户的原因，很大的原因。因为包括很多教务education的用户，就是老师想看着学生写代码，可以实时的看到学生在写什么。然后他们在这个debug每一步，你都可以在一个money player环境下会看到。所以这个给我们带来很多用户。",
      "speaker": "发言人5"
    },
    {
      "time": "00:22:32",
      "text": "然后我们第一个做的AI产品应该是code convention，就是not ghost the rider。我们方在你写代码的时候，它会出现一堆这个ghost right ghost text就是然后你可以去accept他的给你的股权。这个其实就是跟did up pilot和大量的股权产品是非常像的。是对这个是一个很直观的能够帮助你写代码的产品，就是帮你补全这个代码，也是现在可能最大家觉得最有用的产品之一。",
      "speaker": "发言人5"
    },
    {
      "time": "00:23:07",
      "text": "对于其他程序员来说，同时我们会有一个AI chat，chat也是一个很常见的产品。就是在我们的这个IDE的旁边，你的这个左边是代码，右边就是chat。然后你chat的时候，你可以问他说你可以做很多事，你可以说帮我生成一些代码，然后你可以把这个代码直接一键贴到你的ID里面，或者你可以从不同的地方吹着。比如这个地方某一个地方有一条红线，你有一个LSP的错误或者说是语法错误，那么上面会有bug说debug。然后你点了debug之后，它会在check里显示这个地方哪错了，然后告诉你怎么修，对，总体上chat，code competition。然后我们还有就是为了完成整个流程，就是从写代码开始，然后debug运行。",
      "speaker": "发言人5"
    },
    {
      "time": "00:24:05",
      "text": "我们会有一个我有很大的好处，就是我们把所有的环境都放在了云端。程序员大家都知道有一个问题，就是配环境很麻烦。Review其实从他身上也解决了这个问题。就是他会有一个在云端的环境里，会有一个standardized的set up的脚本来去把你的环境起来。这样就不存在说你本地这个比如python的defender这个问题这样的问题会少些。",
      "speaker": "发言人5"
    },
    {
      "time": "00:24:32",
      "text": "对然后到运行到最后还会有一步很重要的一步就是detriment。因为你做完了这个软件，你希望它成为一个真的网站里别人可以讨论。其实这套逻辑顺下来，你会发现我们其实做了一件事儿，就是把整个软件开发的周期里面的要做的事情集成在了一个平台里面。有点像一个OE one的一个发货。因为其实每一步你拆开来都会看到有别的公司在做，比如说对IDEVS code right，然后这个call completion和chat是get可怕的。然后deployment是这个aser或者POP或者别的deployment的这些公司。然后我们看到就是把这些东西放在了一起，那放在一起的好处，当然放在一起有好处有坏处，放在一起的坏处是我们一个公司要做别的好几家公司做的事情。那好处就是你可以把这个体验优化的非常的好。",
      "speaker": "发言人5"
    },
    {
      "time": "00:25:32",
      "text": "所以我我们我们目前为止发的很多的这个功能，包括ghost writer，包括chat，还有很重要就是我我们今年初的时候做了一个很大的改动，就是AI for four。就是我们之前的这个AM功能，是只有付费用户可以用，然后我们的AIPO是把这个功能开放给了所有人，什么意思呢？就是你现在上学之类的，你不需要有账号，你甚至不需要这个账号，你就可以获得这个code competition，也可以获得AI的chat。这个对我们来说其实是一个花钱的事情。因为我们在免费的把这些我们花的这这个token寄给了免费的用户。",
      "speaker": "发言人5"
    },
    {
      "time": "00:26:19",
      "text": "而且用户也现在不需要注册了，就可以去体验这些AI的功能了吗？",
      "speaker": "发言人2"
    },
    {
      "time": "00:26:23",
      "text": "对，我们是不需要注册，也可以有。但是这个是我们的vision，因为我们想要让更多的人能够用AI去create software，所以我们做了这样的一个工作。也这个也是我我我加入之后做的比较大的。第一，前几个大的工作之一就是把AI去给所有的人去用。对，这个其实也当然我们自己也解释，这个也引出了我们自己的一些后面的工作。就是我们训练的我们自己的可completion的模型，包括我们前两上个月发布的一个code repair的模型，而做这些工作的原因也是我们要support更多的人去用AI，这是为什么我们要train我们自己的模型的很重要的一个原因。因为我们要serve大量的request，不像说少量几千几万个用户，我们是有几百万的用户。所以它是对你的模型和大概有很多不一样的一个要求。",
      "speaker": "发言人5"
    },
    {
      "time": "00:27:20",
      "text": "我的理解是就是一个更小的模型，然后成本更低的方式来去以便让我们能服务大更大规模的一个用户。是对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:27:30",
      "text": "其实有两个出发点。第一个是就像你说的，我们的目标一定要是这个模型是小。因为它快它需要这个模型需要快，还需要便宜，还需要好。对，所以第二个原因是我们需要我们想要make yourself我们自己的数据，它是可以帮助我们把模型变得更好。",
      "speaker": "发言人5"
    },
    {
      "time": "00:27:52",
      "text": "对我看了一下report最近发布的那个1.5的那个code model，大概是3B的这样的一个一一个model。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:00",
      "text": "对，我们现在有3D的这个code competition的model，which is我们有open source，也不是open source，就是放在发明非常那里可以下载。对对对，然后你看做做。",
      "speaker": "发言人5"
    },
    {
      "time": "00:28:12",
      "text": "学术就非常关心这个开源的，非常关心什么是真正的开源。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:17",
      "text": "对对对，然后还有我们之前前段时间出现一个code repair的model，它不是suggest的一个code，不全，它是suggest一个death，就是帮助你fix error的一个model。这个model其实也是一个effort，是让我们我们出发点是我们想让agents用这个model去fix code里的。同时用户也可以去获得这个suggestion，of calling更大的模型。我们可以用更小更快的方式把这个模型suggestion给出来。这样我们可以扩大更多次，也可以更多的去给用户这样的回馈。",
      "speaker": "发言人5"
    },
    {
      "time": "00:28:58",
      "text": "你刚才讲到了，现在我们自有自己的一个specific的模型了。我们其实也看到了是说现在专门for coding的模型也非常的多，非常卷。对，非常的卷。然后不管是这个大模型的公司也好，还是很多start up像C这样他们也会有自己的厂商，云厂商都会有自己的coding model。就想请教一下各位，怎么看我们是否真的需要一个专门的专业的coding model。然后他的能力是否真的有可能去打败，或者是比现在的比较general的foundation model更好。",
      "speaker": "发言人2"
    },
    {
      "time": "00:29:35",
      "text": "一个就是说他在coding的这个任务上面，从单从效果来说，是不是能够击败最好的一个general的foundation model。另外一个就是我们现在之所以有那么多专门为了coding的存在model，这个主要是一个效率的考量，还是还有什么别的因素在里边？",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:53",
      "text": "好，对我我刚才其实也提到一些了，就是从我们的角度来说，我们的主要的考量是因为我要是是我们要power next and creator 45秒，考虑的给更多的是效率上的效率和成本，当然是quality上也会考虑，但是我们并不会说我们要出现最好的模型。这也为什么我们出现一个小的模型，就虽然是3D但是它我们evaluation是比cold lama seven d的performance要好的，对，但对于我们的来说，因为我们的用户定位是更多的这种citizen developer，所以我们会主要的考量是在于效率和成本上。怎么把我们免费给大家提供的这个power对我们自己的成本降低，然后making soft我们自己的data是这样的一个考虑。",
      "speaker": "发言人5"
    },
    {
      "time": "00:30:42",
      "text": "也是听的procs代表这个话题。就是说你比如说对比，那你大家如果是光靠公开的数据去抓的这种coding的数据，大概率它是没有企业里面自己的coding质量那么高的。因为很多开源的coding的质量就大幅度。对会不会有一个高GWGL的一个你一个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:00",
      "text": "我觉得这个问题很好。所以我们的promise是我们不会在，我们绝对这就是做enterprise。我觉得我可以看到这个就是在做interpreter，不是interface很大的区别。对，也是为什么你可以我不太好比这个。但是之前就是data engine这个领域？Da engine你说为什么我要用snowflake我不去用？",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:23",
      "text": "Azure或者GCP的一些服务，有一部分是trust的。其实就是说如果你是对企业的，企业对于这个东西非常激进，也不是所有钱是这样子。有些鞋可能无所谓，说特别小的或者是对，但是一般来说就是这样一定规模的话，大家对这个问题特别清楚，然后会对应security不对就会很不一样。",
      "speaker": "发言人3"
    },
    {
      "time": "00:31:45",
      "text": "那你说如果如果是这样的话，那是不是在这个领域它就不存在所谓的数据飞轮，就数据费用因为你能够用到，那既然客户自己也用不到，那谁就我理解各个model的数据其实没有什么优势。并对对对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:00",
      "text": "我的确并不觉得他们的数据会有那么差，但是我相信可能OK还可以买到一些license数据，因为可能会有一些license的数据。但get hub本身已经很丰富了。然后大家其实标准的做法就是把很多给当时的版本全部拿在一起，然后做devices，然后去在这个get out code上，这是最对popular。但在那上面也有trick，其实就是因为get上有lessons，也就是你到底要怎样，因为如果你因为你你当就是我在跟他们去科隆很多，但是不代表他是允许你吹你的，对吧？所以有些公司会愿意做，有些公司会不愿意做，就跟你consideration有关。如果你是seriously做要做一个enter Price服务的话，这是有利购风险的。所以你希望你可能你保证你的第一每一步都是对的。我确实你每一步都是最好用license的数据，因为eventually这个一定会like like fine，对吧？就比如说microsoft，他他他为了得到他会做的事情，就是他promise to get，他promise他的用户说，如果有你购的问题，他们可以帮你cover这个事情。但我觉得这是一个很重要的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:10",
      "text": "对，那就意味着其实如果说你hub也非常严格的遵守制的话，那就意味着他其实也不比别人更有数据上的优势。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:20",
      "text": "对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:21",
      "text": "除非他对那是拥有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:33:24",
      "text": "钱的对，其实他现在用的和他是用的那个open a的API，所以他有优势，他和OOKI之间的关系并没有那么透明，你并不知道他们是什么情况。对，但我并不觉得给up会的确提供这个服务，他们有一个服务是HE说如果你一个人就是愿意做饭清理，他们可以提供三清理服务，然后他们可以帮你做私有化部署。对，就会有这样子的一些。",
      "speaker": "发言人3"
    },
    {
      "time": "00:33:53",
      "text": "对所以最后企业的对，所以最后企业的需求就是说我的数据其实去年那个model只是benefit我自己用的那而不是你最后的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:01",
      "text": "这个方位是这会是一个对，最后是一个service。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:04",
      "text": "我还在对于还不是那么了解这个领域，我好奇如果说拿这个最强最最强大的这个general的function模型，不用去祭祀这样的，以及最近出现很多模型，他们的coding能力跟来拿来跟更专业的coding的模型相比。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:20",
      "text": "现在是怎么样样的关系，我觉得这是个很好的问题。就比如说为什么当时当初会有人专门做coding的模型，对吧？比如说当初其实不只有专门做口令模型，还有专门做数学证明的模型。",
      "speaker": "发言人3"
    },
    {
      "time": "00:34:32",
      "text": "有一部分就是我觉得多种多样的原因，有一部分原因是就是interest。因为code这个language它不是natural language，就比如说我们作为natural language研究的人，从来不研究code。那当时有t five这些模型出来的时候，学术界就会有专门的人去做。比如cot five他们会拿这个model做三天的各种模型，去做各种task。所以需求就是从学术界resets。就会有专门去做那个数学的这个数学的逻辑证明的这样的模块的这是一方面的原因。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:05",
      "text": "然后还有一方面原因就是code跟nature位置，这是cost的原因。因为他跟他说的位置有关系，但没有那么多。所以如果我了解有限，我只是想希望这出一个model对吧？然后我对code比较感兴趣，那你可能会选择我们专门出一个专门的code模型。一个比较好的例子就是deep sea国内那个公司的其实一个很好的客户模型，感觉很好。对，那你还开源的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:30",
      "text": "然后在code上你也可以做一些很有意思的training。比如说他们说会没有一个retrain，就fining metal这个training它大概的描述就是它不是上文附了一个下文，它是上下文和的一个总结。然后这个task特别适合做跟主权和主权对，但是这件事情我看有些pair大家在说这个fing metal那是你需要的就是你并不需要上从上到下从对，不需要从左到右，你可以这叫推荐。比如说dipsy就做这件事情，然后DPC还做了一些在code上更容易做的training，就包括report level的free training。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:12",
      "text": "意思是因为在大部分情况下不确定，就是你有很多个文本，对吧？那文本之间大家怎么吹呢？那对于native language来说，他们是是random的。就是我我不会把两个饭放在一起睡，对吧？因为他们没什么关系，也就是它是文本的，但是对客户来说，你就可以从整个扣base里面构造出一个顺序。因为范围和范围之间是有关系的，然后他可以用这个关系去串，我觉得这是个很好的一个方向。",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:42",
      "text": "但是DPC该做的这件事情，然后你可以用这个关系去构造一个非常长文本的数据。所以这对于长文本的春泥事件，他会把它突突步排序一下吗？对他就是做top排序，然后这个是在code上很容易做对吧？但是我觉得在national不是不可以，你可以用search去做这个去排这个文本。因为它也不是文本，完全没有关系的。但是code就容易比较清晰的，结构比较清。对，结构比较清，所以code上可以奉献它比较远。你可能是不是。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:10",
      "text": "偷看这些也不太一样。",
      "speaker": "发言人4"
    },
    {
      "time": "00:37:12",
      "text": "top还是可以的对，但的确是不一样的，因为尺度是不一样，就算你用Young strategy出来，top也不一样。对，但是之前的这个表现很好对吧？但是GPT four的code表能力是很强的，但大家对这件事情就是我你会只能王总你也会专门去放很多的budget去train这个code的能力。对，折扣的能力是需要很多更排sid的。对，然后最近最近刚出来拦马3，对吧？老王三代码能力也很强，所以并不好说。就是从能力上来说，你说general model和color model、code model是不是一定比general model强？不见得，但他一定。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:49",
      "text": "想就现在就现在看来，这些model的这个coding的能力相比是怎么样最强的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:37:56",
      "text": "还是对这个很强。然后lama和那个GPT GPT行业GPGP也没了，但是again它是跟tas有关的。GPT并不是一个天生做代码股权的对吧？你说我就是专门比代码股权的模型，那专门的代码股权模型是厉害的对吧？但是你说我去做天门一报，就是他那时候专门的一个task。这个task有点像，我做程序员的朋友知道就是decode对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:21",
      "text": "那种刷题的那个。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:22",
      "text": "对，就是它特别简单，它有点像你就有一个stand alone单独的任务，说我要实现这样一个算法，你把它写出来的那个就很强。",
      "speaker": "发言人3"
    },
    {
      "time": "00:38:33",
      "text": "因为我在想其实之前我们去年年初跟google这个pm的作者之一的雪之，其实当时我们就讨论过说他也提到在发现加了这个coding的这些数据。对，在这已经是一个共识。对，说这个事对已经是个共识了。那所以我就怀疑说如果说如果这些做fdic model的这些公司，他们目标是AGI的话，那他们肯定会花大价钱尽可能的把所有他们能够拿到的最高质量的这coding的对model.",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:06",
      "text": "数据加进去。是的，我完全同意就是从A加的角度，有人会这么说，对吧？有人会说我如果是一个很强制的，就写写能写代码就是来。因为如果你是一个好的程序员。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:18",
      "text": "你可以做到很多就是那个公司magic that号称的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:39:22",
      "text": "这个是有逻辑的对吧？这也是为什么大家会关心，比如说妈妈有的能力，然后大家会关心做奥数对吧？有有专门人去训练个模型做奥数，然后写代码都是他们这是有道理，他们认为这是那个reasoning非常强reasoning的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:39:38",
      "text": "他是跟reasoning最关系最紧密。如果你想要你觉大家觉得现在model的model night vision能力的话，对，那你应该给他更多的reason的数据。那现在大家都想到会很强，对，最好又多的reasoning的数据，那就是代码。",
      "speaker": "发言人5"
    },
    {
      "time": "00:39:54",
      "text": "而且是最好evaluate。因为它已经在对是一个很好的研究对象。",
      "speaker": "发言人4"
    },
    {
      "time": "00:40:00",
      "text": "知道有一家star lab，然后他现在就专门为这些LM的公司去给到他这个代码的数据。然后这些代码LM的公司会告诉他说我要这些代码，然后也需要专业的程序员去写，他就负责去招聘这些真正的程序员来写这些代码。的数据用于不同大模型公司的pre training code版的scale .",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:26",
      "text": "AI是付他们钱的。",
      "speaker": "发言人5"
    },
    {
      "time": "00:40:27",
      "text": "是买东数据的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:28",
      "text": "IOM公司是买的。对，比如我看很多代码的instruction，确定数据集有很多都是的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:40:34",
      "text": "他需要用专业的。就像你说的，就是给hub上数据，它显然已经是一个中庸的一个水平。他需要更专业的更好的代码质量的数据集了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:40:45",
      "text": "说白了我们进入了这个数据的深层，不要再产生高质量的数据，这个就成为一个高。我靠，你刚才其实那个宇哥讲了一个，我觉得可以follow up一下。因为你刚才提到就是说为了让他有更好的代码补全，其实有很多针对代码补全的一些训练方式。我后来这种训练方式能够用于这个foundation model的训练吗？",
      "speaker": "发言人1"
    },
    {
      "time": "00:41:09",
      "text": "对，其实是可以的。其实那个代码补全就是上文下文，就这个中间？是这个并不新，因为t five也是这么做的对，然后后我们那时候的走在播的时候，我们还做过一个research，叫这个dialog in painting。就是那个工作大概想做的事情就是我有我有我有一个对话，但我想构造出这个对话。如果你知道这个人上上去说了，下去说了什么，那你你想猜对方在这一句就是当前这句话说的什么？这个task并不行。",
      "speaker": "发言人3"
    },
    {
      "time": "00:41:41",
      "text": "对，task有很多种，但有一件事，比如说为什么这个task没有那么popular呢？其实是效果。因为因为抵扣的only model，它就在去年的时候你没在做抵扣的，你只是让他predict下一个token是什么，所以在这里有个东西叫cosme mask，就是你会希望我predict这个token的时候，用的是当前所有的token，对吧？如果你有这个关系的话，这个training的效率会特别高。但是如果你要做feeling a metal training，那你就想我predit当中这句话的时候，我是看到上句话和下句话的对，那我要回那个下句话的时候，这个dependency就变了。因为我下回到下句话的时候，这个task应该是depend on我现在这句话和那句话的后面一句。所以你之前做的那些运算不能被用来去训练model训练预测下来。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:37",
      "text": "你想用一和3来预测2，然后你要用2和3来预测33。对他这个很多东西没法view.",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:43",
      "text": "对他只是没法review。所以你会就是你付一样的运算量，这那你你的成。",
      "speaker": "发言人3"
    },
    {
      "time": "00:42:50",
      "text": "效率会效率低低。",
      "speaker": "发言人2"
    },
    {
      "time": "00:42:52",
      "text": "但是我在想，你想这个是不是特别像？但最近经常聊的就是AI能否帮帮我们去解决复杂数学问题，就做一些定表幂定理的一些证明。那些证明题不就是已知这个，然后一个结论已经证明中间，那这个是不是这个菜你可能。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:09",
      "text": "不能够用于有可能，但是你做reasoning的时候，你也可以prot model说，假设就是你不是一定要做这样的inference，去做这样的reason。",
      "speaker": "发言人3"
    },
    {
      "time": "00:43:18",
      "text": "不是一它的go和他那个下文并不是比较对。",
      "speaker": "发言人4"
    },
    {
      "time": "00:43:22",
      "text": "你可以把他的下文直接放到他的前面，告诉他这是下文，也是对，只会work。",
      "speaker": "发言人5"
    },
    {
      "time": "00:43:28",
      "text": "那我还有舜宇你怎么看？你觉得说刚才正好那个宇哲讲到，就是假设我们的这个很核心的这个reason的能力是来自于coding。对，那我正好那个magic def就前段时间很火的那一家一上来融合这个上亿美金公。号称我说我做好一个最最牛逼的头顶的这个model，我就是能够是通往AGI1个捷径。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:50",
      "text": "Coding数据是对于train from the model非常重要的，这个毫无疑问。但是只靠口令能不能实现一下这个对数量位置和program的位置还是有些不同的地方。然后就program它本质上是更结构化，然后有很多的这种structure你可以去average。然后自然语言其实是更noisy，或者说有更多的这种pragmatics，有更多其他不同的结构，所以说他可能是互补的。就是对于人来说，你想要去比如创业，你既要懂program为什么要懂得说点什么？就是我觉得但是我觉得有好的高质量口径数据，这个确实是一个good problem。",
      "speaker": "发言人4"
    },
    {
      "time": "00:44:33",
      "text": "那你们说eventually，你觉得那个最强的finish model的coding能力，应该是会强于专门的coding model。我觉得是的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:43",
      "text": "因为这也不是一个fair comparison，就是它这个financial它是大很多，而且它是在其他的其他数据上吹之后，它应该是整体的推理会变得越强。但是again这取决于你的applying是什么。我觉得对于像偷拍的时候应用，你可必然是需要一个小模型。",
      "speaker": "发言人4"
    },
    {
      "time": "00:45:02",
      "text": "对，我觉得先给你的嘴，如果我们讨论这个模型最强的那个模型的话，最强的模型一定是你把你的数据给他，所有的数据都会给他。对，所以我觉得不会有一个有最强的模型情况下，不会再出现一个模型，是我我用了更多的coding数据去训练。因为那些更多的供应数据，一个数据还是会到最最强最强那个模型里面。是的，yes.",
      "speaker": "发言人5"
    },
    {
      "time": "00:45:26",
      "text": "我们聊聊完了这个model本身，其实它回到这个record的这个产品，就是renew record其实选择一条刚才你说的，所以o one其实也是挺难的一条路径，就是你build完全build一个自己的ID。其实我们也看到很多像一些copilot的这种插件，可能用的是一个插件的这种形式。我好奇你们就是这你们这个rapid是怎么去思考这个产品形态，以及因为这不同的产品形态使得它的用户，还有一些你们在做AI产品设计上会有怎样的影响。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:58",
      "text": "对这个其实我我一开始也不太懂，我觉得很多人可能也看不懂replace这个产品它的逻辑到底是什么。因为它看起来就是一个ID，它本质上我们做o in one的一个像我刚刚说的第一个好处，第一个好处是它可以把你的上手成本变低，就是你不需要去worry about。比如说如果你要去下一个BS code，然后你要去装这个replay插件，然后你要去学会怎么用either去deffand store上，这个其实是一个很大的玩。然后我们相当于说把这件事儿都以一个发展的形式给你了。我一键可以突破，一键可以报一件，可以三大的环境。这是第一个好处。这也是我们在2022年之前吸引用户的很大的原因。",
      "speaker": "发言人5"
    },
    {
      "time": "00:46:42",
      "text": "但我们在我考虑加入目标课的时候，我考虑的是说，如果说假设AGI来了，假设我现在有个巨强的一些，那他需要什么？就是说我现在有一个大的非常强，但是你你你要需要，如果他你想让他去做替代，我们现在所有software development这个过程的话，它需要各种各样的工具，就是手和脚。这些手和脚就是他需要写代码的一个地方。他需要能execute这个代码，他需要能测试，然后他需要能deploy，然后去验证自己deploy的结果，看到自己做出来网站是什么样，然后再回馈进行一个look，最后把这个东西上线。上线之后开始甚至接入一些支付功能，然后成为一个真正的产品，然后还可以再迭代。这些东西他们如果AGI来了，现在他有吗？他可以去去用吗？有，但是他都在本地，所以一问出来，他们会成为一个在云端的API去给BGI去使用。",
      "speaker": "发言人5"
    },
    {
      "time": "00:47:46",
      "text": "如果你这么思考的话，其实real friend就是制作了一个给AGI去写代码，或者说是制作产品的一个3d box。只是他现在的用户是人，但是在我看来他其实应该是一理想的给AGI用的一个sandbox，他可以在这个上面去做whatever they want。我们先其实有一个经典的问题是，如果OpenAI做出一个超强的more，它会起来是互联网。那么我我我对这个问题的思考是不会。因为他们需要做跟我们一样的事。他们需要做一个云平台，去让这个AGI去能够去写代码，去运行这些代码，去debug，去compare，去去加入LSP。然后把各种各样的error，然后不同的language，不同language丢给这个模型。他需要经历我们roman之前走过的整个的一条路。如果你的公司的产品之前几年做的一条路能够快速的被取代，那你确实公司没有什么价值，对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "00:48:52",
      "text": "所以我是我是这么思考，它其实是一个3 box，就是给AGI使用的一个理想。你们现在有个API吗？还是我们都是那一个API，就是每一步包括你去获取编译代码，有三十多种language编译这个代码，然后获得这个LSD的结果，然后去去deploy运行测试，每一步其实都是一个API。然后我们在对vision的时候就可以去用一些。",
      "speaker": "发言人5"
    },
    {
      "time": "00:49:19",
      "text": "因为你提到如果以后AI它可以用用你们这个做一个图，那它是可以有这个API去兼容，还是就。",
      "speaker": "发言人4"
    },
    {
      "time": "00:49:28",
      "text": "还有另外是对是用用就是他可以去，其实就是to考虑就是给他放松说你是一个非常对你有这些图可以用，你可以去报，你可以。",
      "speaker": "发言人5"
    },
    {
      "time": "00:49:40",
      "text": "function code是可以把API寄给他。",
      "speaker": "发言人4"
    },
    {
      "time": "00:49:43",
      "text": "对，也我现在也是这么做的。",
      "speaker": "发言人5"
    },
    {
      "time": "00:49:45",
      "text": "应该是用这个号还是用这个了。但其实我就想说我不知道以后会不会大家的决策的层面会往上走一层。比如说我现在决策我要订外卖，我是要想我是在ruby eat上面还是在多大事上。但以后可能就是我只想订外卖，其实是由我这个模型来决定它到底我要是在哪个平台上订。那会不会以后其实对deval来说，他要决策的其实并不是我用rap还是这个VSQ。我要觉得我只是说我要我要写这个，然后最后由由AI来去帮我决定到底我要在哪个平台上去实现。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:21",
      "text": "你觉得前面说的很对，就是这个取决于用户是什么样的人。如果你是一个编程小白，那你可能确实需要很high level的一个抽象。说我想要我我你他说我想要做一个你帮我做一个东西。如果这个演唱会有票的话，给我发个短信，对吧？我只能一个小白可能会这么描述。但是像宇哥刚才说的，如果是一个专业程序员，一个F1赛车手，他可能就是想会描述成我要build一个IOS的APP，它需要能有接入stripe，它需要有这个功能，那个功能他可能就不一样。",
      "speaker": "发言人5"
    },
    {
      "time": "00:50:55",
      "text": "需要如果比较清晰的知道要什么的时候，那就需要一个specific的和一个function。这样的话正好就说到了，其实宇哲刚才讲到的就是rapidly，其实是跟all in one的。For一个小白，那就是citizen developer。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:12",
      "text": "像宇哲这边其实做的在的现在在的一家初创公司，更多的就是我的理解是一个插件的形态。但是专门就是为这些企业里面的专业的编程工作者去服务的。也想请宇哲再讲一讲，你们当时的一个做这个产品的理念，以及跟不管是口拍了giu b口拍了这样的产品的一个不一样的地方，和这里面的一些难点在哪里。",
      "speaker": "发言人2"
    },
    {
      "time": "00:51:39",
      "text": "对，我觉得挺好的，以及我们之后可以直接聊，three best很好。因为就这个公司的value proposition是我们希望我们的产品是等你的cobs的。也就是说它design是做一个你已经有一个自带的cover性能存在的一个场景。然后那个场景和现在主流的那些bench work的区别，大概你可以认为是因为所有人都会有工作的，不一定是做程序。就类似于现在公开的大家run那些coding bench work bench，可能更多的像是面试题，或者更多的像比面试题还弱一点的这种尝试题。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:22",
      "text": "就是在学校里学，然后考试去考，然后它是一个similar的问题。然后你在现实中工工作中，随便你怎么工作，你会有一个巨大的平台，对吧？如果你做考造型，你会面对的是整个公司的一个发展所有的东西。然后如果你是任何一个公司的程序员，你会面对的是这个口这公司的一个巨大的口碑。然后事实上一个from fact就是好像世界上拥有最大code的公司不是太子公司，是银行对吧这样对所以在那种情况下，那问题就是我们他们需要怎么样的一个产品去去帮助他们工作，这里有两个，首先最重要一点就是我们这个产品必须懂你的整个coase。所以rural contest或者人contest对于这个应用是非常重要的，以及因为这个copies那就不会出现在你的这个face out的训练语料中，对吧？所以你看不见就没有办法work。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:21",
      "text": "然后第二件事情就是这个产品feature是什么？就是他还得接入这个人的工作流。所以我们会考虑的更多的不是说对小白来说，因为他没有工作流，所以可以简单说你怎么。没走开对吧？对，但是对于一个establish的professional来说，他会为自己的工作日。那在这个有工作人的情况下，你的feature是什么？",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:43",
      "text": "这也是为什么代码股权是一个很好的非常popular的产品。因为它对于工做流的改变是最小的对对吧？你可以用，然后你也可以exam，就非常简单。",
      "speaker": "发言人3"
    },
    {
      "time": "00:53:53",
      "text": "然后非常也不是很大的。",
      "speaker": "发言人5"
    },
    {
      "time": "00:53:56",
      "text": "现在不是很多。对所以开发这个产品就会有这样一些思考的。但对对但对我们的公司来说，最重要就是我们我们需要在一个巨大的cobs里面是一个。",
      "speaker": "发言人3"
    },
    {
      "time": "00:54:08",
      "text": "我好奇reply你们那么多，这个AI的的确现在被大家接受程度最高最popular的是哪一个？",
      "speaker": "发言人1"
    },
    {
      "time": "00:54:17",
      "text": "我们用的最多的显然是更confusion，是自动的补缺。但是其实最有我们最近非常growth非常快的一个feature是deployment。就是能够把这个产你的网站或者任何你的project正式上线这个东西，它grow的非常快，而且能够modernize的很好，因为大家愿意为这个付费。然后我们最近在这个上面也在加很多AI的feature，就是你development。比如说deployment挂了，那我们会有一个AI debug的一个这样的一些需求。所以最最用的最多的自然是我觉得对于所有的hold来说都是code confusion和chat的功能。对，但是我们就是在各个角落，我们整个平台各个角落都有AI就是这样的对，所以不是一个。",
      "speaker": "发言人5"
    },
    {
      "time": "00:55:14",
      "text": "单不是一个一个单一的需求。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:17",
      "text": "对，他们其实都是在背后就是同一套系统，就是你都可以相互之间有contact。",
      "speaker": "发言人5"
    },
    {
      "time": "00:55:26",
      "text": "我好奇一下，刚才其实宇哲讲到就是要在满足企业级的这个需求，你需要更懂他的这个cook。那可以跟大家解释一下，就是如何让如何build一个这个人更懂得企业自身需求的一个solution。",
      "speaker": "发言人1"
    },
    {
      "time": "00:55:43",
      "text": "这个过程怎么样？其实这都是也是很多做企业级AI的公司都要需要的。手机就是个true itor。对，就是red，但是rag和rag就是rag不是一个。对，rag是意思就是很复杂。对，你可以运用很多种方法做rag。Rag本身也有很多种变化。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:08",
      "text": "然后不同的任务会需要不同的，这个其实很好理解，就是retrial是要做到的功能，就是说在对于一个一些私有的数据。如果你希望这个foundation model能在这个数据基础上为contact的情况下去做一些任务。那你你唯一能做的事情就是在不做了tuning的情况下，你唯一能做的事情就是把相关的信息放在模型的context里面。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:56:39",
      "text": "然后retro要做到的是功能，是说我对于不同的task，就是你可能会需要看不同的context，尤其是当你context特别多的时候，吧？一般来说个人的context可能更少，但企业会有很大的context。包括比如说企业有自己的cobs，企业有自己的数据，他有自己的文本，对吧？在这种情况下你不会你没有办法把整个content，就所有的内容全部放在language about contents里面。那在这种情况下你就需要挑一些相关的对，然后那个技术就是所有的驱动，那这边所有的变化就是说你在什么时候走的驱动，你有去过什么东西，你做这四个区，你做一次还是做做多次，然后你用什么东西去做rural。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:21",
      "text": "因为rural本身你也可以你可以用relational data base，你可以用向量。最近matter data base s很火，对吧？在UIP很火的，你可以用各种data base，但去去去做做这就你觉得。",
      "speaker": "发言人3"
    },
    {
      "time": "00:57:34",
      "text": "其实rag这个事情，虽然大家整天讲rag这个词，但是其实这里边的并没有一个很统一。没有就as protists没有的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:57:44",
      "text": "就针对不同的场景，其实需要现在有些传统公司，他们想要做general solution。就包括我之前是做做有趣的研究，然后有研究方向就是说我这个模型做什么人去都行，对吧？我觉得现在的阶段就是对于自然语言的问答，就问答这个任务的retrial，市面上的模型做的都挺好的，但不是所有他是都是问答问题，对，所以那也不是一个万能的人群。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:13",
      "text": "那你觉得在，你现在的做code相关的这样的一个场景，尤其放在企业场景里面。对你现在做reg最大的挑战或跟之前真的最不一样的地方在哪里？对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:58:27",
      "text": "技术上其实没有，但是我觉得比较有意思的挑战是evaluation。就是我觉得这也不是code唯一的，我觉得所有全公司它的valuation是很难，也就是rap这个技术。",
      "speaker": "发言人3"
    },
    {
      "time": "00:58:39",
      "text": "所有公司不只是初创。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:42",
      "text": "然后rap更难的地方。",
      "speaker": "发言人5"
    },
    {
      "time": "00:58:43",
      "text": "是rap本身很难被value，因为它不是终端的对吧？虽然你说我做代码股权，我去看这个代码好不好，我更容易。对，但如果代码不好，你说我到底应该去review ve哪个document，来让那个代码是多了一个号多了一。所以macri vo的本身的那个valuation更难做，所以这也就是学术性的value的valuation很难做这件事，甚至标注都很难，标注也很难。对，因为你不知道你该看什么，你不知道你就是我。",
      "speaker": "发言人3"
    },
    {
      "time": "00:59:14",
      "text": "个是说这有一个1000个文件的code base。然后我这有个问题，请问我应该嗯哪哪两个文件是最相关的？这个你找一个人来标注，他可能是他也标注出来的，它不像是其他的数据标注。这边还有一个大学生可能是能标注的，这个very hard。对。",
      "speaker": "发言人5"
    },
    {
      "time": "00:59:35",
      "text": "那你会用down stream .",
      "speaker": "发言人4"
    },
    {
      "time": "00:59:36",
      "text": "the success做100个点，这是一个push，对你要到时候去反过来进去。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:59:43",
      "text": "我因为我我最近也去，比如前两周刚去这个goole nest的，就是goole call，这个可能上面写可能就有很多企业的这些用户。然后发现虽然大家都在讲我们那这个对，就用这个reg的solution。因为每个企业肯定都要用就给自己的solution。但是大家一讲到这个准确率，就你一听就知道不是一个可以在这种生产环境去depend一个准确率。很多大家其实提到都是一些百分之七八十，我好奇到底说这个提高准确率的这个难点在哪？",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:15",
      "text": "对，甚至是这个准确率本身它正好可？这就是valuation的问题。对，所以因为top k.",
      "speaker": "发言人3"
    },
    {
      "time": "01:00:23",
      "text": "对，第一个准、第二个准或者前十个准，它都是它其实有点像呼search的一个问题。",
      "speaker": "发言人5"
    },
    {
      "time": "01:00:28",
      "text": "对对对，google测试就是个最经典的最最全世界最大的HOVPS。",
      "speaker": "发言人3"
    },
    {
      "time": "01:00:35",
      "text": "对，那如果我们要达到一个假设，企业要99%的准确率的，他才觉得能够在生产环境里面去使用的话，那我们中间这个gap到底在哪？但是可能中间还有一个问题，就是说我怎么去衡量，我怎么知道这个是99%、95、99的那我先问第一个问题，就是现在的gap到底在哪？就离一个我们很reliable.",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:57",
      "text": "的这样的一个人，其实我会反过觉得，如果你针对一个任务gap就不一定的他不一定的他的gap在于它不通用。我我我觉得这样解释一下，就是现在foundation model比以前的NLP solution最强调的是它通用性，对吧？人家说还要做什么它是都行，rache val不是一个做什么racheal val都行的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:22",
      "text": "错，没有一个gender.",
      "speaker": "发言人4"
    },
    {
      "time": "01:01:24",
      "text": "但没有个regio。虽然这是一个这是一个research的方向，但是反过来，relief的定义也很模糊。因为你不同，他是你可以review这个，就它不是一个我define这件事情，所以因为它它也不好，我要define它也不是一个这么强通用性的东西，所以它的gap就会导致，我可能在这还可以，然后你换一个任务感觉都不行了，对吧？所以对我那天。",
      "speaker": "发言人3"
    },
    {
      "time": "01:01:51",
      "text": "还去一个development的make up。然后里面就那个马腾宇他们在watch，专门做他们专门做ebel ding，like就是一就是整个rag的面中的一个环节。然后我看了一下，他们最近其实在做就是针对各个场景，针对什么法律场景，就是专门要做一个embedding model的场景。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:13",
      "text": "有专门的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:02:14",
      "text": "比如。",
      "speaker": "发言人3"
    },
    {
      "time": "01:02:14",
      "text": "voyage，然后还有很多有很多公司也做这个。对，但是你只要你一个ebel能够在你这么多的candidate的情况下帮你钓鱼，钓出来那几个最好的candidate，其实是一件非常难的事情。你他不是说这个evidence好不好的问题，而是说这件事儿你稍后对他的expectation也过高了。",
      "speaker": "发言人5"
    },
    {
      "time": "01:02:40",
      "text": "如果我们用推荐系统来类比的话，推荐系统其实也是一般人多也是如果你说听top的话，我们也是说你using明白，然后我们用户的body to retry。最接近的一些视频白领对吧？它其实是类似的，但是他是在他的模型其实一直在被训练。因为我有大量的用户点了这个视频或者没点这个视频的这样的一个关联性。所以它的关联是被用户行为佐证的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:03:08",
      "text": "这个其实在google上也是比较类似google的right，也是基于用户点击去去形成的一个系统。但是reg就是我们常用的rag的方式，其实不是这样，它是基于文本的含义的。它是一个不是基于你的用户说我在客户它不是一个闭环，对它是一个闭环。它是基于你文本含义去build的一个event。",
      "speaker": "发言人5"
    },
    {
      "time": "01:03:30",
      "text": "然后它是有个training task，它的train在用在一个arbi的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:03:35",
      "text": "当时对这两个task是不一致。",
      "speaker": "发言人5"
    },
    {
      "time": "01:03:37",
      "text": "就会想回到你说那个产品本身的话，那现在既然还是没有那么多这种best practice出现的情况下的话，那给到这个企业客户现在给到的一个产品或者落地的时候，是不是也是根据一个任务去交付给客户，给到企业客户。那这会是一个很非标准的一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:04:00",
      "text": "扣的很好的地方。因为我相信如果你是做法律，是法律有可能是有可能反正就得看到。但是扣的好处是不同企业的tom是一样的，所以我如果能在他不同task可能会需要不同的real。对，但是如果我这个task能做的好，那你写加了，他也写加了。你们虽然写的java不一样，对吧？你们可能用不同的library，你们可能用不同的design，但是你写的都是java.",
      "speaker": "发言人3"
    },
    {
      "time": "01:04:30",
      "text": "所以这是可以transfer的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:04:32",
      "text": "OK但是如果你是做一个，比如说什么谷歌到或者说不过倒也有可能因为原话是可以transform。但如果你做一些就不太理解写specific的一些数据，那你会更会需要针对性的，我想这是一个HGCPU，就是google cloud提供的服务，他们还是会对大客户这样子去给他们承包的一些什么的。对，你总是可以得到。对，但扣的话我觉得好很多。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:00",
      "text": "相对通用很多。那所有你不通用的是哪一部分呢？",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:02",
      "text": "就是你每天不通用的是我比如说我自然语言的区别，我拿过来能不能直接用，那大概率是不能用的对吧？然后比如说我做代码组全都是驱动，用来去做我别的代码问题，是不是效果那么好？可能好可能不好。对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:19",
      "text": "这我的意思是你给不同客户去。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:22",
      "text": "不同客户我们会给一样的。这也是这也是为什么我觉得这个就是我我思考过这个问题。比如说就是enterprise公司，因为generation主要就是怎么说呢？就是enterprise AI也不是这一波之前就起的对吧？在不够之前花了很大的力气做所谓auto。对，他们当时要做奥特苗要做到的事情是说，就是所有公司他们就想the democrat模型money对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:05:50",
      "text": "然后当时模型的最难的是什么呢？最难的是圈一部分。他说我out mail我自动帮你控制model对吧？你只要有数据就好了，那他为什么是不行呢？就是发现这个思路是没有那么没有那么general。但我觉得code本身就像刚刚说的，它通信也很好。所以虽然不同task你可能会专门去engineer一个solution出来，但这个solution是可以被，又下去的快件对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:06:18",
      "text": "因为代码这件事儿其实大家做法不一样，但都是在写代码，对吧？大概率都是在写一样的language，都是在同样类似的环境下面。它不像是说google想当时想要target的场景，说我你要做一个看说胡相城，对对对，就是要学习，相对来说会更他这个程序员的世界相对来说是比较同意很同意。",
      "speaker": "发言人5"
    },
    {
      "time": "01:06:43",
      "text": "想同意大家都在google上就retried一下对吧？",
      "speaker": "发言人4"
    },
    {
      "time": "01:06:46",
      "text": "这样但是我说的，比如说每个公司内部他自己，但是我觉得这可能是对于一些大公司来说，因为他自己总有一些legacy的一些东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:55",
      "text": "所以这个就是我的review技术是一样的。我说的内容，然后我们靠内容的不一样，然后把它放在context里面。",
      "speaker": "发言人3"
    },
    {
      "time": "01:07:03",
      "text": "然后就可以有不同的结果。那正好讲到这个rag，就在这一直有有一直有这样的一个讨论，就是解决reg是靠一个更好的rag.",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:12",
      "text": "还是一个更好的更强。",
      "speaker": "发言人5"
    },
    {
      "time": "01:07:13",
      "text": "的一个。",
      "speaker": "发言人2"
    },
    {
      "time": "01:07:14",
      "text": "context window。因为我们现在看到比较艰难的这个ten million的context window，maybe就是还可以更长。你觉得这个会未来会是怎样的走向？",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:25",
      "text": "对我我是这么看这个问题，就是我觉得如果你说long contest will replace red，长期没比短期绝对不可能。因为我们测过，所有人都可以测这个事情，就是你一面的一个抗context process，它需要多少时间？现在所有model在long context来都不需要一个人就特别长是有的时候他需要十秒几十秒的时间，对他特别慢，对吧。然后反过来，如果当我有这个model的时候，我可以把它is still成一个rag的solution。这个是我一定能做到的。虽然它没有那么容易，但是虽然globe也就是说当我有个很强的狼卡猜测moto的时候，我可以圈出一个非常强的red solution。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:08",
      "text": "你可以把这个和那个东西学学掉。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:10",
      "text": "对嗯对，因为这里的principle是说，就是我做所有的任务，虽然我现在网上能看。比如说100万的token，我在做任何一件事情的时候，我可能并不需要。这是100个token，我可能不是全部都需要的对。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:24",
      "text": "大概率只只有一小部分。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:25",
      "text": "对，大概只有一小部分。第二件事情是如果这个model 100万的model，他读这个100万的token他很强。那他大概就知道这100万token里面到底哪些部分是有用的，所以这件事情就能被成一个red solution。对，所以这是我觉得他们的关系。但是如果我有这个red solution.",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:46",
      "text": "我一定一块，对，而且有我觉得长期，就算是长期，有的部分也是没有办法被同分类似取代。我举个例子，比如说你在写程序的时候，可能要参考一个document。比如说你要写党派，那当派document有非常多的版本。那你始终是要去找到那个正确的版本的document，把它fee的进去。你不可能把所有的帮拍document全部的进去。所以这是一个开头和我一个mix of search和retrieve的问题。它可以来自于你的底层的代码库，也可以来自于外部的web size。但是你始终是需要从外界获取信息的。你不可能说我把全世界所有的document全部扔进去，你始终是需要有一个选择的过程。那这个选择的过程其实就是没它就是软，它一定是会有，只是它的程度的问题。",
      "speaker": "发言人5"
    },
    {
      "time": "01:09:38",
      "text": "对，那其实刚才正好那个雨泽讲到了evaluation，这个事情是一个非常的对我觉得应该在听到最多的一个一一个难题的event，尤其是在这个coding的上面，我觉得也是也还是一个没有不共识的东西。其实正好正好就是讲到在做的这个工作，就最近前段时间推出这个sleep bench。其实现在我会觉得很多这些做做coding的节目都在用，可以正好舜宇可以跟大家简单介绍一下three bench，以及你之前在做的跟这些客户端还有agent相关的一些工作。",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:16",
      "text": "所以swedish其实motivation很简单，就是我们现在现有的这些coding是不太行。",
      "speaker": "发言人4"
    },
    {
      "time": "01:10:26",
      "text": "为什么？这正好就是蛇大仙。对，在哪？",
      "speaker": "发言人1"
    },
    {
      "time": "01:10:31",
      "text": "首先我们解释一下什么是不太行。首先一个好的奔驰码应该是什么样的对吧？一个好的奔驰work我觉得有几个特征。第一它要reising practical，就你不能做一个top的。然后第二它需要chAllenge ing，它不能太简单了。第三，它需要easy to evaluate，它需要有一个很好的evaluation function。",
      "speaker": "发言人4"
    },
    {
      "time": "01:10:51",
      "text": "现在大多数的NLP本身其实这三个都不记得。比如说他会做一些套，有一些veal，或者比如说一些那种question，是一些那种形态的question，大部分这个被数码线都非常容易。比如说因为以往是现在最常用的透明版，数码线已经被刷到95%以上。然后evaluation这个事情，目前来看就是比较好evaluate它包括比如multiple choice QA，比如说coding。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:25",
      "text": "但大部分对于agent task来说，UR优先其实非常难的。比如说我要做一个web agent，那我最后获得了一个web取价税，那我想要判断这个web加税是好还是不好呢？这很难判断。所以就是这些模型认识，我们想要构建一个既practical又chAllenging，又能够一得186的1个奔驰one。",
      "speaker": "发言人4"
    },
    {
      "time": "01:11:48",
      "text": "当然我觉得还有一些其他的特征是一个好的奔驰的一个特征。就比如说一些manu的特征，比如说你想要有一种stable的data的collection，如果你标数据，一个数据要标一天，那那你然后你还需要有一个方法去确保你的数据不会被training set的污染。因为现在MMLU这样的数据集很快就会被搭各种各样的model去over fit。",
      "speaker": "发言人4"
    },
    {
      "time": "01:12:17",
      "text": "然后我们就发现就give up这个pull request艺术其实是一个符合所有特征的一个事情。为什么？第一就是随时这个事情。它的它森林库很简单，就是一个railway get v以及整个get poster。所以它是一个非常长的一个，它可能有50万行文代码。它的OPPO其实很简单，就是一个酷request，我能够去骚扰这个艺术。",
      "speaker": "发言人4"
    },
    {
      "time": "01:12:44",
      "text": "然后我的evacuation也非常简单，就是一般来说大家做github的时候会request里面会有一些united。你只要把这个游戏test也下载下来了，就可以去做一般的流程。这个它其实它非常的particle，它是就是人类真的去要sop的这个sort job，它非常chAllenging，就是我们试过最好的rap可能也就3%左右X他非常easy to evan，因为人花了很长时间去写这个unit test。然后stability也是有很好的特征，就我们并不要去造这些task，我们只需要去从网上下这些task的工。",
      "speaker": "发言人4"
    },
    {
      "time": "01:13:22",
      "text": "最后就是说data pollution的问题，其实我们有测过，其实不同年份它的这个成功率差不多的。但是假设发生了污染，我们可以去随时下一些最新的艺术去把这个不要再去补充。所以就黑到的checks，我们当时是非常开心的。对，然后做完思维的是我们一开始去做完思维的，想要去解决这个问题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:13:48",
      "text": "正好给大家解释一下，是就是思维agent事情。因为我觉得思维agent正好我想前面我们聊到了这个coding很多相关的这些功能。AI在在功能。前段虽然前段时间一个叫David的这个横空出世。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:04",
      "text": "产品flash demo.",
      "speaker": "发言人2"
    },
    {
      "time": "01:14:06",
      "text": "对这个面试对我这一下的确给大家打开了想象空间。那就是用agent怎么可以解决更更复杂的这而且甚至说可以更全链路的问题，不只是帮我写更好的代码而已。所以我觉得正好这个摄影可以介绍一下这个思维agent，然后它是什么？然后它背后设计是怎么样的对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:14:26",
      "text": "其实思维agent的想法很难，我们的很明显我们在思维base的时候，我们发现用一种sequence方式去做这个事情是不太有可能的。因为你的task input有几十万行代码，然后有一个艺术，然后我想要见证一个output，就对于人来说这也是不可能做的。你然后我们去用rap发言，也只能去做3% 4%左右的。即使你真的用rap选出来了，就真的去需要去add的这个范围，他还是会遇到很多chAllenge。因为对于人来说，这个software是个fundamentally interactive的事情。其实我告诉你这一行代码有错了，或者这一块代码有错，然后这个艺术是长这样的。很多时候人要去不停的试，或者去decompose这个task，或者去做各种各样的inter action才去解决这个它。所以说funder特这是一个需要的事情。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:25",
      "text": "然后switch其实是一个我觉得算是一个swe奔驰这个task上的一个baseline agent。我们的设计就是说我们用了一个基本的react nation的一个思路，就是说我reasoning和acting去去扫描这个事情，是一个这种linea of gress。但是主要的long review的部分是在于我的action space是怎么设计的。",
      "speaker": "发言人4"
    },
    {
      "time": "01:15:54",
      "text": "比如说一开始我们最最可以想到最简单的一个去做这个事情的方法，就是说我让一个A人在bash terminal里面去做这个事情，就比如说我可以去看一个方案，我可以去navigate的这个folder，我可以去added file，然后可以去run这些程序，然后可以看到这个execution result。那就发现就有很多各种各样的问题。就比如说最大的我们发现最大一个问题，其实edit是一个很大的问题，因为edit是一个没有feedback g的事情。比如说你跑一个程序的，他会给你一个execution result。然后基于这个result，agent可以去reason就说那我这个做对了还是做错了，我应该下一步怎么做？",
      "speaker": "发言人4"
    },
    {
      "time": "01:16:32",
      "text": "假设我去ID的一个范围，好像是没有feedback。有的时候AJ他做错他也不知道，或者说他很多的时候会出现一些C加CA或者diction error。所以就是很明显bash terminal并不是一个最适合去做这个task可能环境。所以我们就提出了这个idea叫做agent computer interface。",
      "speaker": "发言人4"
    },
    {
      "time": "01:16:55",
      "text": "ACI其实想法就是说我们人去做engine的这些界面，比如说visual study code，或者wave，或者IMAX，这些interface其实都是human computer face。就是我们花了很多时间去设计这个interface怎么做。然后这些工具其实对我们解决这套是非常重要。但是这些工具可能并不是对于agent来说解决的这个top最适合的工具。就比如说我刚刚说的ID这个问题。",
      "speaker": "发言人4"
    },
    {
      "time": "01:17:23",
      "text": "所以就像是人不断打磨这个软件，去打磨这个HCR1样。可能我们也可以用类似的方法去打磨这个agent computer interface，去打磨这个asier。所以传统上来说，就大家会fix这个environment，然后我们去让这个agent基于这个固定的environment变得越来越好。就是说我有个tour game，我就固定这个environment，让我让这个agent在上面越来越好。其实three agent是一个反过来的思路，我们其实fix一个比较简单的agent，就是一个react agent。但我们想要去让这个environment来fit这个agent越来越好。当然最后你的agent和environ会有一些高design，但是总体是一个如何去设计interface，让这个agent去做最好的事情。",
      "speaker": "发言人4"
    },
    {
      "time": "01:18:13",
      "text": "你可以跟大家描述一下，就是这样的一个agent，它可以实现的一个体验，它可以完成一个任务是怎么样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:18:20",
      "text": "的对我们现在其实上线的一个online demo，就是说你可以去copy任何一个github的艺术的link。然后你可以考进去，然后你点一个按钮，它就会试图去帮你产生一个push quest，然后去能够解决这个艺术。",
      "speaker": "发言人4"
    },
    {
      "time": "01:18:37",
      "text": "对这个如果大家感兴趣的话，相信这个在youtube以及可能也有人搬运到了B站上，都会有这个swe agent的这个demo。我觉得大家去看了以后，应该会觉得非常impressive。所以正好跟刚才这个顺序讲到这个three bench，就很多这种read base的solution，其实都是个位数的一个准确率。然后我们看到就前段时间David和包括这个四维A卷都是超过了10%的这个准确率有一个很大的一个提升。还有大的提升主要来源于什么地方？然后同样就是你们的这个foundation model.",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:13",
      "text": "用的是GD4是对我们three agent用的是GPT four。其实我发现一个比较意思的实验结果，就是说如果在reg的setup下面，好像就现在好像cloud opens，其实是已经perform的。GPT说1.0可能一个3%点几，一个20%.",
      "speaker": "发言人4"
    },
    {
      "time": "01:19:30",
      "text": "本身也是很强。",
      "speaker": "发言人3"
    },
    {
      "time": "01:19:31",
      "text": "对，但是在agent的这个事情上面，GBT four还是比其他model要强很多，就比cloud比其他的要强多。对，可能就cloud它是对于一些长文本和red，它可能特殊就针对性的optimist GPT four，可能对于agent还是专门去ultimate。你觉得这个three .",
      "speaker": "发言人4"
    },
    {
      "time": "01:19:49",
      "text": "agent能够比这以前real solution在free bench上面有这么大的一个提升，主要是来源于什么？",
      "speaker": "发言人1"
    },
    {
      "time": "01:19:56",
      "text": "我觉得就是有好几个原因，我觉得可能最根本的原因就是说你可以去execute你的结果，你可以去写一个unit test，然后你可以去跑，然后你跑失败了，你可以去再接着尝试去改。就这个一五的这个feedback look是非常重要的对，如果我只给你一次机会写一个这个push quest，然后立刻提交了，你都没有机会去跑，那你就很难确保它是正确的对，但是SQ这个是一个关键。",
      "speaker": "发言人4"
    },
    {
      "time": "01:20:27",
      "text": "因为这个跟前段时间大家其实随着这个agent概念起来，其实那一套这些agent的这个框架的什么auto GPT，然后什么就配置这一套，这个是一个概念吗？还是这里面有什么不一样的地方？",
      "speaker": "发言人1"
    },
    {
      "time": "01:20:42",
      "text": "我觉得不一样的地方就是说就你刚刚提到的auto GPT和BBIGI这些，他可能就是想把这个agent本身变得非常复杂，对吧？就是用各种各样的prompting的方法加planning reflection各种各样的prompting的技巧。但它的environment是一个做的事情，他想做一个尖端的agent，但是效果不是特别好。",
      "speaker": "发言人4"
    },
    {
      "time": "01:21:04",
      "text": "那是因为更复杂，就是因为他想要做太卷了，他想要做一个general .",
      "speaker": "发言人1"
    },
    {
      "time": "01:21:08",
      "text": "purpose agent，然后他想要在一个general propose environment，他想要加各种各样的prompting tp但是这个事情并不是workout特别好，因为你想做的事情太简单了，我觉得。所以他philosophy就是说，假设你知道你想做什么task，那我就可以针对性的把我的这个图，把我这一个去optimize，然后去让一个相对简单的agent提升performance。",
      "speaker": "发言人4"
    },
    {
      "time": "01:21:33",
      "text": "你怎么看跟David之间的差别，和现在大家的正确率上也稍微也有一些差异。这里面的主要的不一样的地方，在你看过来是主要在体现在哪些方面？",
      "speaker": "发言人2"
    },
    {
      "time": "01:21:47",
      "text": "对我觉得有几个不同。第一点就David是一个产品，我们是一个research project。然后我们的research project go就是去soft sweet ch但是David做一个产品，它的目的有些人只是去噪随便。但是要想要去automates各种各样的软件环境下的一些task，可能催眠只是他们去做evaluation的一个数字。",
      "speaker": "发言人4"
    },
    {
      "time": "01:22:13",
      "text": "然后第二点就是说因为他们的他们是想做一个这种更尖端的产品，所以他们的路径是说我有一个非常general的environment，就是web broader，然后best terminal，然后editor，然后我去在agent上面去加个非常复杂的process和这个frame。他们加什么太阳镜或者reflection或者但因为我们就想要去造一个task，所以我们是可以去把这个interface去打磨到就是对这个agent的去扫这个task非常好用。当然我觉得特殊猜测就是说我们的这些ACI design其实会对于各种各样这样的coding task其实也是会有帮助的。但是为技术路线就是说我们是用这个interface去optimize interface for the real simple asia。他们是ultimates agent on like a standards environment。",
      "speaker": "发言人4"
    },
    {
      "time": "01:23:10",
      "text": "对那我发现在。",
      "speaker": "发言人5"
    },
    {
      "time": "01:23:12",
      "text": "就是在构建这个过程，比如说现在你说你们就是你们CV agent是为了这个sweet bench来去打造，那现在10% 12点多的这个准确率，我好奇就是你怎么看待这个准确率，你觉得要接下来你觉得到底虽然说我们刚才说也不知道百分之多少的准确率是好在你心目中百分之多少准确率是一个希望达到目标，中间的这个gap可能在哪？",
      "speaker": "发言人1"
    },
    {
      "time": "01:23:36",
      "text": "我觉得其实我觉得现在大家都还是悲伤的水平。所以对于A正来说，就是我知道就是我有一个朋友，他说他们创业公司你可能有20个。我觉得我我我对GPT four，可能我觉得GPT four应该能刷到30。就加上因为思维agent它仅仅是一个非常简单的agent，加上加上初步打磨过的interface，然后思维然后David是一个比较复杂的agent在一个center environment。但如果你把interface design和这个agent design结合在一起，我觉得即使GPT four应该暂时是有。",
      "speaker": "发言人4"
    },
    {
      "time": "01:24:18",
      "text": "就是在戴文下面也是用的GPT four吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:24",
      "text": "不知道。",
      "speaker": "发言人4"
    },
    {
      "time": "01:24:25",
      "text": "但是没有公开数据。",
      "speaker": "发言人1"
    },
    {
      "time": "01:24:27",
      "text": "GP4 turbo发布的时候，应该官方发了一个推推推特，然后艾特了David。所以应该是demo应该是提早，应该是承认了说更早的size到for turbo的接口。",
      "speaker": "发言人2"
    },
    {
      "time": "01:24:39",
      "text": "那那是你的意思是说在因为现在很多人在有很多人在讨论这个agent为什么好像有点声大雨点小没有落地的时候，很多人都会过于纠结，说这个flier model的这个能力本身不行，recently能力不行。但是按照你的说法，其实在防区某种信仰能力下，你们其实如果说只是看CH的话，其实还有很大的提升空间。",
      "speaker": "发言人1"
    },
    {
      "time": "01:25:02",
      "text": "不光是产品化，其实跟做research是一个完全不同的事情。我们可以在这个可以在sw上做的看起来还不错。但是你如果想把这个做成一个用户能够用的产品，其实是你你需要更多在产品上的思考。因为用户A就是A类的，跟别的AI的产品里有一个很大的有一些有很多区别。第一就是它是一个intel的一个过程，所以它很慢，就是你需要耐心的去去等他。那这这种这样的产品其实是大家是没有见过的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:25:40",
      "text": "我我们今天在我们今天有讨论过这个事情。就是如果我们比较说跟之前的软件API比的话，我们说这个靠一个LM相当于是我们以前软件的一个步骤，一个API考。那现在的agent可能更像是把这些API组织组合成了一个F或者一个m to m的软件。但是我们从来没有过一个软件说你要用它一下，他要过十分钟给你一个反馈。",
      "speaker": "发言人5"
    },
    {
      "time": "01:26:12",
      "text": "那怎么把这样的一个产品去deliver到用户手上，然后他还要跟用户交互。因为他你它它还有一个特点就是它不稳定。它它不能以90%甚至80%，甚至70%的概率给你一个好的结果。那这样的软件其实这些大家我们之前讨论软件的稳定性，我们都说99%点几个9。但是你当牛逼的时候，他就不是九的问题，你甚至看不到一个九。那那你面对这样的一个软件，怎么样让用户能跟他好的交互，然后还能让他deliver value，其实是它是一个需要很复杂的设计的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:26:50",
      "text": "前面提到其实顺宇其实一直在在这个agent这个领域做了很多的工作。从最早能从react开始，所以正好舜宇可以给我们介绍一下。因为A卷的这个我觉得每个人心里都有不同的这个A卷。对，因为你你是怎么什么时候开始对于agent这个话题的这个研究所，这中间有哪几个你觉得比较重要的研究。",
      "speaker": "发言人1"
    },
    {
      "time": "01:27:14",
      "text": "对我我其实是我觉得我比较幸运，就是我PHD19年开始，我其实做第一个项目就是agent。当时我做第一个项目是在一个text adventure game里面去做agent。当然这个事情非常小众，因为大家做action，就大家就认为是做21211，就基本上是video game或者robots，然后去做这种language base的environment agent人其实非常少。我当时觉得这个很有意思的，因为这个感觉似乎更接近reasoning，更接近这个intel的。我觉得life is more like a text，more than a video game.",
      "speaker": "发言人4"
    },
    {
      "time": "01:27:53",
      "text": "对，因为你要做的decision其实很多是open end，对吧？就是比如说我今天晚上去做什么这个事情，action space是opening，对，并没有一个上下左右这样一个键盘去给你指引，对吧？你可以去买张机票去另一个城市，或者你可以去看一个电视剧，你有无穷多的选择。我觉得language更接近这个追星本质。",
      "speaker": "发言人4"
    },
    {
      "time": "01:28:17",
      "text": "然后我觉得做完text m我就发现这个问题，就是说action space是一个tax environment，和这种传统的environ的一个本质区别，就是它的action space是并不是标的方。然后我觉得这个action for的思考就need to react。我觉得react本质的这个核心就是说思考也是X的一部分。",
      "speaker": "发言人4"
    },
    {
      "time": "01:28:51",
      "text": "为什么传统的一阵子的它不如人？因为我觉得人他有一个神奇的爱情叫做思考。但是传统的AG它并没有这样一个动作。然后思考是一个很很神奇的action。因为思考是没有feedback，就是你脑子里面想任何事情，你是没有办法获得外部世界的一个反馈的。所以传统来说这个事情是学不了的。但是老师两个model给我们一个players，可以让我们去把reasoning或者thinking作为这种languages的一个个action。",
      "speaker": "发言人4"
    },
    {
      "time": "01:29:28",
      "text": "然后我觉得进一步思考就到trail south。我觉得我大概就意识到agent这个事情本质其实是有两部分，一个是action space，一个是decision making。就本质上来说，什么是agent？Agent就是说我有一堆action，然后我要选哪一个action去做。第一部分就是action space，第二部分叫decision making。然后action就我刚刚说的，就是说你去选择什么样的to去internet，你去选去怎么去制造自己的interface，怎么去设计自己的这种internal reason，这些都是x space一部分。第二部分就是我怎么去选择用哪一个action。然后传统上来说，这个事情就很简单，就是大家就是generate next token，然后去把这个动作给产生出来。",
      "speaker": "发言人4"
    },
    {
      "time": "01:30:16",
      "text": "我觉得推销放本质的想法就是说dc是可以通过这种planning去做的。就是我我不仅是直接去产生一个动作，我可以去产生一堆动作，我可以去衡量更好，或者说我可以去在脑子里面想象哪一个动作会导致什么结果。就像下棋一样，比如我做了什么，对手会做什么，你可以通过这种reasoning加plan去做这些。然后考拉拉就是我们做了一个最新的conceptual film叫county for。本质上也就是说agent其实就是action的加DCN加上它的memory。",
      "speaker": "发言人4"
    },
    {
      "time": "01:30:58",
      "text": "所以你的工作就是逐渐从这个思考，然后到这个taking actions，还有的一个演讲。这些都是在其实都我我觉得其实现在大部分的A醇工作，其实都是在你不直接去改变这个foundation model的情况下，通过主要是通过prom的一些方式来去来实现。",
      "speaker": "发言人1"
    },
    {
      "time": "01:31:19",
      "text": "非常明显。对，其实我觉得这个事情是一个房子门口有问题的事情。因为它它没有形成一个闭环，它是一个open loop。",
      "speaker": "发言人4"
    },
    {
      "time": "01:31:29",
      "text": "我可以举一个例子，就比如说我现在我们用A的方式，就很像deep learning初期我们用GPU的方式，为什么呢？当年GPU也不是为了DP原理设计的，它是为了游戏设计的。然后大家发现这个东西他可以去吹这个alex，他可以趁这些小牛然后接下来发生的事情是GPU和这个地方，它发生了一个扣一报的关系，就是就GPU产生了更好的deep method。但这些更好的，比如transformer这样method，它intern它会使这个GPU的设计发生变化。我觉得就是language model就很像一个GPU对吧？",
      "speaker": "发言人4"
    },
    {
      "time": "01:32:12",
      "text": "当年我们产生去做它它只是一个text generator。但大家去用它去试做各种各样的事情，发现他们做这个做那个这些事情都是surprising。所以我觉得下一步就是说我们应该把这个model和vision去进行扣design。如果我们一直用这个游戏的GPU，那我们现在可能这些transformers这些东西也不会去诞生。所以我就下一步就是说我们怎么去把这些agent的experience和数据去反过来去吹猫。我觉得这是一个房子的问题。然后我们有一个工作叫firer，就是翻译red fire。然后在说这个事情就是说到底做了自己。",
      "speaker": "发言人4"
    },
    {
      "time": "01:32:51",
      "text": "做了react，然后再做一个研究去缓解他。",
      "speaker": "发言人1"
    },
    {
      "time": "01:32:54",
      "text": "对，因为我我一直在等别人去做，但发现没有人去做这个事情，我们我们就自己做了一个人生。",
      "speaker": "发言人4"
    },
    {
      "time": "01:33:01",
      "text": "接下来就有一个挺有意思的问题。因为前段时就是前段时间在提到这个agent这个话题更加重视的手机，有些公司也做了像什么in bill，包括像adapt对吧？Adapt对我们专门做一个model specifically for agent，对我们很重视的就是他这个reasoning的能力。那你觉得这个是一个这个是伪命题，或者以后会出现一个专门针对agent的LM吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:33:26",
      "text": "还是说我觉得agent是一个非常宽泛的概念，就很多事情都是agent，就是取决于你想要做什么样的agent对吧？对，就是我觉得如果你想要做一个那种general purpose的digital region，那你可能我觉得可能我不在做这个事情，还是不是，还是最基础的模型是吧？对，如果你想要做一个比如vertical to main的一个agent，那你可能也不需要培训，你可能放一个对。",
      "speaker": "发言人4"
    },
    {
      "time": "01:33:55",
      "text": "听出来你觉得应该是个伪命题。",
      "speaker": "发言人2"
    },
    {
      "time": "01:33:59",
      "text": "结婚那应该是伪命题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:34:01",
      "text": "这个其实是我我当时创业的时候的出发点，就是有个generation的帮你去做了各种各样的事情。我当时做了一个类似CPR的事情，是接我们让一个LM他们接了各种各样的API应用，应用APP google character，然后gmail，然后订机票，然后订外卖这些。然后你写任何东西帮你create出一个worker。但是实际上喷雾这个东西，它kind of是一个伪命题，因为它很难真的产生价值。因为你你你虽然说看起来不像我们帮你关注很多这个事情，但是第一它不是那么的稳定，第二他的这个你要是真的想让他去去帮你做很复杂的事情的话，他不是光靠API来解决。他需要就中间这些agent take的这些flow，然后等你你要解决问题越宽泛就越难让它好用。",
      "speaker": "发言人5"
    },
    {
      "time": "01:35:03",
      "text": "它更多的需要去录入。",
      "speaker": "发言人4"
    },
    {
      "time": "01:35:04",
      "text": "去做interact。是的，对，但是我这是我觉得就是coding agent好的一个点。因为coding agent它产生了一个可以自己验证的一个行动路线，它是可以有闭环的。对，它是可以有闭环的行动路线。你知道这个agent通过这么一系列的操作，可能十步二十步它完成了这样的一件事情，它就会生成一个positive的一个训练数据。这个其实也是我们never head觉得我们可以去做更多research的一个点。因为我们有所有的用户在我们的整个平台上的行动路径。你从你进来之后，你开始写第一行代码，然后你碰到bug的时候，你怎么去，你做了什么事情把这个bug fix了，然后你做了哪些操作。",
      "speaker": "发言人5"
    },
    {
      "time": "01:35:46",
      "text": "一路上把这些逻辑是怎么是什么样的定义。",
      "speaker": "发言人4"
    },
    {
      "time": "01:35:49",
      "text": "它是像基本上是一个OT two，就是你的你的edit的一个记录，你在这是OT school，OT就是OOT为它是一个一种格式，它是editor的一个一个格式。就是你你比如说你在editor go dog的时候，你有多人editor的时候，你要去解决他的这个editor冲突。对，NOT是为了它是一种格式来解决这个冲突问题，所以本质上你可以认为它就是一系列的修改操作。比如说就用户在光标第五行第三个第三列，然后加了一个单词level，一个refutations。对对对，一个level的一个用户的一个记录。就像你在google上可以回退的对这个编辑对，然后我们这个比比google相当相对更还要更多的一些行为，就是你包括你运行包括了你运行这个shell，然后你写写代码，然后这个debug.",
      "speaker": "发言人5"
    },
    {
      "time": "01:36:51",
      "text": "就是这个数据感觉非常有才情，就是你们又开始尝试去用这个东西。对，我们我们其实就是那个VS code.",
      "speaker": "发言人4"
    },
    {
      "time": "01:36:57",
      "text": "你也可以盘。",
      "speaker": "发言人3"
    },
    {
      "time": "01:36:58",
      "text": "对，有有对，所以这个数据是我就是回到刚才我说的，我觉得这个事儿是make sense。因为coding的这个数据你是可以验证它它对的。就是你在VSK上拿下来的数据，或者在refer上拿下来的数据。你可以知道当前的state说这个项目是编译成功的，这个项目是通过测试的那它就会成为一个它不光是一个测数据，它是一个路径，就是一个trajectory去达到了这个成功的状态。它其实可以如果你思考如何帮助LY获得更强的推理能力的话，这个是一个方其中之一的方式就是你告诉他通过什么样的人类是通过什么样的一条路径去。",
      "speaker": "发言人5"
    },
    {
      "time": "01:37:42",
      "text": "让他就有点像探索。这是他他早在做事情对吧？",
      "speaker": "发言人1"
    },
    {
      "time": "01:37:46",
      "text": "对我们有些初步结果我还是在考虑。",
      "speaker": "发言人4"
    },
    {
      "time": "01:37:50",
      "text": "我们真的怎么说呢？没，我们还在在在做一些初步的图。因为这个数据怎么用，我们还在查出有非常沃斯的legal，还是一个是legal，一个是我们内部训练模型的时候，你怎么去快速用它这个数据，怎么去process to。对对对，因为这个对象其实大数量非非非常大的。因为你有每一个step都是有一个stage。",
      "speaker": "发言人5"
    },
    {
      "time": "01:38:16",
      "text": "我听说现在有一些人是用这个就是GPT four对吧？他用GPT four来产生的这种就刚才你说这种action就是action的这种model来去来去做这个事。",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:28",
      "text": "又是distribution。",
      "speaker": "发言人5"
    },
    {
      "time": "01:38:29",
      "text": "这个跟H没关系。",
      "speaker": "发言人4"
    },
    {
      "time": "01:38:30",
      "text": "大家都是这样的对，跟A9没关系。其实这个是不是很很。",
      "speaker": "发言人5"
    },
    {
      "time": "01:38:35",
      "text": "违违反违反。",
      "speaker": "发言人4"
    },
    {
      "time": "01:38:36",
      "text": "我可能我记得我看那个rapper其实有一个产品，就是这个core execution agent AI agent.",
      "speaker": "发言人1"
    },
    {
      "time": "01:38:43",
      "text": "是不是就是做这个其实这个很我现在在软件在做agent，其中我在specific day rather做agent。我们的当当你说的这个agent，其实在是更早的时候我们发布了一个。他其实有点像code interpret，你给他一个任务，他会在一个环境下帮你运行。完了。比如说你说我要分析一下这个CSE，然后更像David。对，他其实没有那么那没有那么多线。它就是一个有一些preview的环境的一个一个一个preview dependency的一个环境，然后它会生成一些代码帮你运行的。它没有那个react了，那些对更control一些，它是更更specific limited school。然后我们现在在做A枕，比如或者我具体我在做A诊，我们想帮用户and to m尤其是小白用户，也因为用户越小白，像刚刚才说的用户越小白，他其实越需要一点。因为他完全不知道怎么写代码，对你你不能说OK我写到这一步，我现在代码挂了，你要现在请你来接手，把我废，他做不到这个事情，所以我这个时候就更需要你控制好这个agent，他能给你生成能跑的东西或者能用的东西。",
      "speaker": "发言人5"
    },
    {
      "time": "01:40:03",
      "text": "如果是因为他，因为他用户本身也不太清楚是吧。",
      "speaker": "发言人4"
    },
    {
      "time": "01:40:07",
      "text": "觉得很很对，就是用户还不如H就是用户可能甚至都不知道我，对，而且他甚至都不知道python是什么。所以这个时候其实也挺有意思的。如果在面对这种情况，那该怎么办？我们也有很多想法，比如说你可以没有功能叫邦体，就是你可以悬赏说我这有个bug.",
      "speaker": "发言人5"
    },
    {
      "time": "01:40:25",
      "text": "这不就是deal states吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:27",
      "text": "对对对，其实是很像，为什么他们我们的CEO跟63的CEO2个关系很好？因为他们用户群是一批，我们有个bug，然后我可以悬赏说，就是谁来解决这个bug？这个人来解决这个bug的可以是一个人类，他也可以是另一个agent。比如three agent给我可以解决这个bug，所以认为应该获得这个钱。",
      "speaker": "发言人5"
    },
    {
      "time": "01:40:47",
      "text": "对舜宇找到了赚钱的方式。",
      "speaker": "发言人1"
    },
    {
      "time": "01:40:51",
      "text": "找到了应用场景了。",
      "speaker": "发言人5"
    },
    {
      "time": "01:40:53",
      "text": "其实我觉得这个跟其实我我不知道大家有没有这个感觉。其实刚刚摄影讲到为什么说一个好我的一个研究这课题跟一个产品之间的这个差异就是在这里对吧？产品你哪怕是同样的说要有human的look，但是其实我是要考虑我in loop的这个human是怎么样的human。对，他是到底是一个我觉得可能像宇哲他们的客户，你肯定是默认他们其实肯定是有一定的coding的这个能力的。跟rapper你要面对很多小小白的客户。那这个时候你给他做human的loop的这个UIUS的设计，其实是会挺不一样的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:41:29",
      "text": "本质上来说就是research，除非你是做HCI research，你其实是叫minimize human factor。对，但是product本质上就是all about huf。",
      "speaker": "发言人4"
    },
    {
      "time": "01:41:38",
      "text": "你知道我前两天跟那个open David open dev就是一个open source的David的这个project的人聊过。然后我也看了他们的那个架构，他们其实很大一个不一样，就是我觉得因为可能他们的这个团队都是都还在企业里就是做做产品。所以他们把这个human loop这个interaction就就加在就加在里面。这个的确是跟这个research的方法不一样的地方。既然我们讲了那么多David，我们反反复复的讲这个dev我这个好奇就是大家当时刚看到David这个demo的时候，我还带了这个第一反应是什么？对让你们印象最深刻的是什么？根据我们现在有限的公开的信息，你觉得还有哪些你自己特别想要再了解的？那从recent我看到第一。",
      "speaker": "发言人1"
    },
    {
      "time": "01:42:26",
      "text": "反应是what someone release before I do，就是我我因为我当时我就是我觉得他们我在做exactly，就是我也在做类似的东西，所以我觉得他们比我发的更早，这是我第一反应。",
      "speaker": "发言人5"
    },
    {
      "time": "01:42:42",
      "text": "对，因为他要创建你的反应。",
      "speaker": "发言人4"
    },
    {
      "time": "01:42:47",
      "text": "欢迎。因为我们有一些我们有更多的info的问题要解决。我们面对的是100万个用户，所以没有办法release一个叫。但我觉得其实我还挺impressive的。",
      "speaker": "发言人5"
    },
    {
      "time": "01:42:58",
      "text": "我我我cover两点，第一点是我我比较impressive他们的那个web browsing。他们可以让这个agent去去look at web，然后去browse那个web，去获得更多的信息。这个actually是非常好的一件一个信息补充。",
      "speaker": "发言人5"
    },
    {
      "time": "01:43:13",
      "text": "因为agent其实它最重要的两件事情，我觉得一个是获得信息的能力。你去web上获得信息，然后或者通过rap获得信息的能力，这个是LL没有，就是普通的一个模型没有。第二个就是自己validate的能力，which is就是execute的protest。这个单位也是有啊，但是他们website做的是非常好的。这个也是我觉得我之前没有见过外brother来做对，非常也非常难做。其实对，尤其是你要是interacted，library不光是算是一个网页，你还要在这个网页里面进行一个Brown，这个是很很他们做的很大的。对。然后第二个点就是我觉得他们我我他们没有他们的第一版本，其实并不能跟用户去修改他们的代码，就是你不能。你只能看着他在那生活，你不能去跟他去合作。",
      "speaker": "发言人5"
    },
    {
      "time": "01:44:04",
      "text": "但我记得他中间有可以让人去干涉去聊这个聊天。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:11",
      "text": "或者是对你完全通过聊天控制他。你对聊天当时。",
      "speaker": "发言人5"
    },
    {
      "time": "01:44:14",
      "text": "去控制他的。",
      "speaker": "发言人2"
    },
    {
      "time": "01:44:15",
      "text": "并你没法控制他的那个。",
      "speaker": "发言人4"
    },
    {
      "time": "01:44:16",
      "text": "对你没有控制code enter的一个权限。这个我其实觉得挺也挺surprise.",
      "speaker": "发言人5"
    },
    {
      "time": "01:44:22",
      "text": "因为更像个demo.",
      "speaker": "发言人4"
    },
    {
      "time": "01:44:23",
      "text": "不像个产品。我觉得可能是他们就是这maybe is a design decision to limit the sort。对对，但是我当时去对我我我觉得这点也是挺挺让我觉得挺惊讶的。但我觉得正确的形式其实是应该是都有，但是这其实对他们来说应该也不难做，所以但没必要。",
      "speaker": "发言人5"
    },
    {
      "time": "01:44:49",
      "text": "你觉得对大家还有什么？既然跟你想要做的很像你觉得有什么你还想进一步了解的吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:44:55",
      "text": "我觉得我挺好奇他们准备该怎么把它作为一个产品去去落地，就是给谁用，或者是to c还是to b对，to c还是to b就是这样的问题。因为这个其实也是我们经常在思考的一个问题。就看起来这个agent他能做所有的事情，但实际上最后你要就是你你作为你作为一个产品或者做一个research是一回事。但是你真的你作为一家公司，你想把你产品卖出去，那你要找到product market market market food。",
      "speaker": "发言人5"
    },
    {
      "time": "01:45:27",
      "text": "是啊这个其实是最最重要的问题。那他卖给谁呢？这个就回到了我们之前说的问题是卖给这个coding小白，还是卖给这个enterprise的这些coder。那他怎么包装这些东西？这个其实我还挺好奇。",
      "speaker": "发言人5"
    },
    {
      "time": "01:45:43",
      "text": "他们是因为你刚才说到了，如果他不让工程师去介入到太多的编辑ID这个环节的话，那听起来他现在这个感觉是卖给其实就没有编程能力的人。如果有编程能力的人的话，他肯定想卖给产品经理。也有可能对对对我聊天或者是有的用户了，那就是看起来是这个样子对吧？对对对。",
      "speaker": "发言人2"
    },
    {
      "time": "01:46:07",
      "text": "当然我觉得他们可能也是因为比较早期，所以没有去太多focus在别的部分，focus在一月份，这个也没sense。",
      "speaker": "发言人5"
    },
    {
      "time": "01:46:15",
      "text": "对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:16",
      "text": "你的是多少？对，我我觉得我最最喜欢的部分是你告诉了我有失败的存在，我特别。",
      "speaker": "发言人3"
    },
    {
      "time": "01:46:26",
      "text": "喜欢吃这个剩余。",
      "speaker": "发言人4"
    },
    {
      "time": "01:46:27",
      "text": "这个echo的可以。",
      "speaker": "发言人1"
    },
    {
      "time": "01:46:30",
      "text": "但剩余的功课我也一直follow，说实话就是需要放心。大家应该都都看过。因为对，就是我在离开谷歌之前，我其实很喜欢costing一些东西。包括我们之前做plan的很早的时候开始做counting，我就pointing很好。但是后来就是当agent本身，怎么说呢？就是对agent这个work来说，我之前一直是希望的。因为我觉得就是跟long time其实很贵，对吧？大家在说了HN然后你可以看这个讨论那个，然后后来也没有什么特别神奇的东西出来。",
      "speaker": "发言人3"
    },
    {
      "time": "01:47:00",
      "text": "然后我觉得davin是一个在这方面比较成功的，但是我仍然是schedule。因为我从一开始我觉得他就是个demo，然后包括最后来有人在推特上就说，那当然是一个demo了，对吧？就是我觉得那个推特也挺废话。对他可以说了，因为有些人可能youtube video是吧？不是，就是对，一样应该是一个debug那个是的，然后说这个东西其实怎么这么情况，但就这个我觉得是显然的。但是他说其实他直接服务产品，对对，大家绝对不能把这个东西当成一个，这不是一个sop的问题对吧？这不是sop的问题。然后我有个demo告诉你，这是有可能的，我觉得这个阶段这是没问题。",
      "speaker": "发言人3"
    },
    {
      "time": "01:47:40",
      "text": "对，1万54万人，对产品化是一个大问题。我觉得产品化如果这是真的是一个，其实我会这么觉得，如果他真的在所有情况下是work的，那产品化可能也没那么难。我觉得a agent这个work中，他这目前有一次出来对吧？所以伴随严重。你要告诉你现在我们到不了，就问这个task。那你反过来想，这个task其实是一个在我们看来co location后面一个level的task，就是issue到PR对吧？然后你就应该要写PR，然后包括PR之后会有很好玩的task。比如说怎么做review，然后review用那个model来做的，然后你可以suggest edit，然后这个你可以去扫描一下口碑。如果我能把PR做好，我甚至我我甚至有可能就可以去做整个一个project，这是architect该干的事情是吧？也就是说我要build一个function。",
      "speaker": "发言人3"
    },
    {
      "time": "01:48:37",
      "text": "当然我说的是在企业里面的，你会有很大的。比如说我现在就要开发一个什么样的feature，说那那这个feature可以被decompose成各种PR对吧？所以这是一个很好很重要的一步，这也是为什么我特别喜欢sw venture task。然后这是不是一个好的solution？我觉得adventure它一定会很好的，我觉得这是个特别好research topic，这是我的感觉。然后创业公司，我是我这个就是一个question。如果这个公司不以以盈利和产品为直接目标，那很好，对吧？我们也一开始做的这这个如果你是以一个product为目标，那是research的risk有点高。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:23",
      "text": "我觉得其实这个有点像当年adapt，对，有点像作为一个非常fascine的demo。然后他一开始是以用research life，对还是去但最后这去要现在去转到interprets产品，可能有一定概率待会也会往那个方向转。",
      "speaker": "发言人4"
    },
    {
      "time": "01:49:41",
      "text": "这是他的risk。对，这是一个很rist方。",
      "speaker": "发言人3"
    },
    {
      "time": "01:49:44",
      "text": "你觉得这里边的research的gap主要是在foundation model层面吗？还有还是有什么别的research的东西需要解决？",
      "speaker": "发言人1"
    },
    {
      "time": "01:49:53",
      "text": "我认为如果你把这个作为一个research的奔驰码想要刷网GPT4，在GP four情况下，你是能做到一个比较decent的X但是就像刚刚他们讲说，就是你作为一个产品，你一个distent accuracy可能不一定能work，对吧？你可能需要比如说。",
      "speaker": "发言人4"
    },
    {
      "time": "01:50:14",
      "text": "9或者其实很对，就是你从产品导入的时候，我就写了一个PR对吧？那你说我有百分之二三十而已，假设我们刷到了50%，然后你说我写了一个PR50%的时候，它是好的百分之。但这里有个问题，就是H就是这个evaluation的一个问题，就是我过这个unit test也不代表我完全对对吧？就是unit test的coverage是没有关系。所以假设这是perfect的那你会问下一个问题，就是如果你真的在企业环境中，如果他50%的时候他不好，那谁来改它呢？对吧？他自己改，如果他自己能改好，那他就不是50%，那就100%。如果他有50%，那他上不了的问题，那谁来接受，对吧？那个程序员说你让我看看他写的单，是不是我自己写一遍。",
      "speaker": "发言人3"
    },
    {
      "time": "01:50:57",
      "text": "是不是还更快捷了。这个不是所有做code build manager，对面临也是同样的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:51:04",
      "text": "就是因为code view的问题。对，那你觉得就真的因为test能够实现perfect evaluation.",
      "speaker": "发言人4"
    },
    {
      "time": "01:51:11",
      "text": "我们我们内部试过的他没那么好，但得很很顶喷上这个u test的质量的。因为或者这个rapper质量有可能给hub上有很多your test的，很多人也不写的test，然后test有时候也没有那么好。对，然后你pass the test也不代表你这个扣的是对的。对你扣的，有时候扣的错了一点点，他pass不了，但是扣的也没那么差，你的test没那么好。但是我觉得这个。",
      "speaker": "发言人3"
    },
    {
      "time": "01:51:39",
      "text": "V就是。",
      "speaker": "发言人5"
    },
    {
      "time": "01:51:40",
      "text": "PR的原则特色稍微好一点。因为你会动好几个部分，然后你有好几个原则太色去cover它可能会好一点，但也不是所有PR的原则。",
      "speaker": "发言人3"
    },
    {
      "time": "01:51:50",
      "text": "好，对，所以我们当时做这个分析的时候，其实就选了比较高质量一点的。然后大部分。",
      "speaker": "发言人4"
    },
    {
      "time": "01:51:56",
      "text": "其实对没选，所以对这也是以往很重要的部分，对吧？如果你随便选一个，那大概这个edition没那好。我们干过这种事情，然后怎么样那么在在。",
      "speaker": "发言人3"
    },
    {
      "time": "01:52:07",
      "text": "理想情况下，假设你有一个非常高质量的本事，玩一个非常高质量的evaluation，那其实即使是10%的随便HSC，你其实也是可以work。因为你可以试100次，然后你只要把inset过到那个PR。",
      "speaker": "发言人4"
    },
    {
      "time": "01:52:22",
      "text": "或者说如果是另外一种，有没有可能说因为刚才我们讨论是说给你的task，你完成的这个准确率是百分之多少。那如果说我们限定一些，比如因为我们把它当成一个junior的engineer，你也不会把一些很难的这个task给junior engineer。那假设我们限定一些junior engineer的活，好保证说他在那些专业的活里面，他能够超过80%、90%的这个概率去去完成。",
      "speaker": "发言人1"
    },
    {
      "time": "01:52:49",
      "text": "可以去设计。那这个就是变成你产品设计的时候，你是要control你user expected对吧？你要怎么样把这个东西怎么定义？对，不要不要丢弃我这个东西，我这个东西你给我就很难，他说写不出来对吧？但是你这个很好的问题，因为有些PR大，有些PR小，对吧？然后简单的PR感觉好像不是很好。",
      "speaker": "发言人3"
    },
    {
      "time": "01:53:06",
      "text": "那在你推产品的时候，你可能会希望说我们最好是把角色的在线定的比较好。因为如果他在线不对，他一开始都会在发现他说。这个不行，那个不行，到底怎么行对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "01:53:17",
      "text": "好，就有点像我们招，就好像你招程序员，你也给你招的时候，你也是招不同level的人。你去布置任务的时候，你也会去想，给宇哲布置任务跟是不一样，对吧？跟刚毕业的这个是这个人布置任务就是不一样。可能当我在想说，是不是当有一天我们把可能把这个age设置，或者说当我们的mindset已经把这个agent也当一个人去看的时候，也是就是我们会给他的sine task的方式就不一样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:53:46",
      "text": "对，其实就是这个事情是正在发生的。很多小的task，比如说写测试retest或者说reactor，或者说一些小的debug，就这一些他们是就是像你刚才说的，我们如果你看所有的这软件开发的步骤里面，那些能拿来给junior要做的事情。比如你就去写一些u test，去support这个test，或者你就把这个retail real me一下做一些小的refectory，这些task其实有很多创业公司在就专门针对这些task做产品，比如sweep点deb然后还有很多这些其实不管怎么样，越当你的这个需求定义的越明确，你这个需求的成功率越高。是啊，但是你的需求越abstract，你越需要interactive的步骤和越人去介入这个中间的。所以你可能更多的就是说所以我我们我或者我们对于这个agent的思路就是它是一个你的合作伙伴，就是你不是说你交给他一个tag他去做，但是他是跟你collaborate在这个code base里面，在这个report里面。然后你说我要做一个这个，他会开始去到background去运行，然后运行到一部分，他觉得说OK我我我觉得有些问题我要问你，他会给你一个回答。然后你会收到一个motivation，说你的一整期来遇到了一个问题，那你要去告诉他该怎么统计。",
      "speaker": "发言人5"
    },
    {
      "time": "01:55:13",
      "text": "那就意味着他那那又回过头来又谁是用户，就意味这个用户不能太小白。也就就好像甲方跟乙方一样，就是通常甲方爸爸真的什么都不懂，就是你这些东西是没有办法，比如说我因为你要是他给我这么一个，我说那我也不懂，你问我我问谁去对。",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:30",
      "text": "他他可能就是这个是不同的level。他不会他可能这样的话就不会问你一些技术上的问题，他会问你需求上的问题。比如说你要做website，他会问你说你这个website要不要no。所以咱们你要这个你觉得这个好不好看，要不要改一改，right这些问题其实是其实对于小白来说也是make sense，但是他需要问这些问题，才能让它最后生成的东西是符合你的期待的那。",
      "speaker": "发言人5"
    },
    {
      "time": "01:55:53",
      "text": "其实这个agent就远不止是一个coding的age.",
      "speaker": "发言人1"
    },
    {
      "time": "01:55:58",
      "text": "就描述比较更高。这个对对对，还得会跟人交流。对。",
      "speaker": "发言人5"
    },
    {
      "time": "01:56:02",
      "text": "这还是个乙方那我觉得这个真的适合那个business face呀呀，对吧。",
      "speaker": "发言人1"
    },
    {
      "time": "01:56:07",
      "text": "就是你在如果他真的很好，他真的很适合很好的contractor.",
      "speaker": "发言人3"
    },
    {
      "time": "01:56:12",
      "text": "然后就把你干掉。对，然后我他告诉他，也许我们前面还有一个帮你去evaluate，说这个是不是我这上面的agent能够解决的。如果不是我帮你root到，甚至还可以帮你自动分配，就是一些任务分配给这个human。",
      "speaker": "发言人1"
    },
    {
      "time": "01:56:25",
      "text": "对，maybe we can imagine a world, 就是你可以有很多去去hire，对吧？你觉得sweet bench是一个你可以hire的，Steven是一个你可以hire，你可以看到他们解决了什么样的task，对吧？他们之前的record就像live day一样，吧？就是你可以去让他们来解决这个问。",
      "speaker": "发言人5"
    },
    {
      "time": "01:56:41",
      "text": "Money around truth, 最终160钱看你能赚多少钱。",
      "speaker": "发言人4"
    },
    {
      "time": "01:56:45",
      "text": "内在讲到100为什么？其实我注意到这个顺序，你们最近也有一篇新的paper是olympic programme。好像针对的是更更复杂的一些数学问题，我可以跟大家介绍这个是什么。然后我好奇他跟three balch的这个其实有什么关系，你觉得会未来会有什么样的观点呢？因为听起来好像都是解决一个很复杂的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:57:10",
      "text": "对它我觉得其实它是coding这个问题。两个不同的frontier，它是两个direction的team，就是奔驰它本质上是说它用到的这些augment其实没有那么复杂。就传统的这些rap里面它更多的是log context，然后noise a context的处理。但是user problem其实正好相反，它的problem其实很短，它的这个扣的线很短，可能就是十行二十行。更多的是那种grounded reasoning，还有creative reasoning和reason agrium c reasoning。所以说一个是就是考验你对长和复杂context的处理，另一个可能就是你对这种situation的grounding的理解和algorithm。我觉得这两个somehow.",
      "speaker": "发言人4"
    },
    {
      "time": "01:58:01",
      "text": "所以解你觉得说解决好数学问题跟你们。",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:05",
      "text": "这种额外。",
      "speaker": "发言人4"
    },
    {
      "time": "01:58:06",
      "text": "的问题ONPL对对，这种oriented的这个问题。",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:11",
      "text": "跟解决这个gib.",
      "speaker": "发言人4"
    },
    {
      "time": "01:58:13",
      "text": "对这个中间是有什么关系吗？",
      "speaker": "发言人1"
    },
    {
      "time": "01:58:15",
      "text": "你觉得我觉得解决这些奥林匹亚programme的问题可能更接近测试base model reasoning的问题。就比如说他这个问题，我给你举个例子，它就比如说有十个人，有N个人他站在一列，然后我想要去做这个操作那个操作，请问有多少种方案？他是需要你对这个问题的有一个想象，想象的例子就是他你要想象就是说比如在这个空间里面有有这样一个排列，然后你要去理解这个组合的意义，你要把这些concept去做这个word morning和simulation这个事情其实是传统的soft engineering不太需要soft engine，可能更多是用pt regulation。就我去so stack overflow，我去copy的时候。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:03",
      "text": "我不需要轻重中的松，你那个稍微高级点还是需要有点创造力。那就受到了相对来说这不是一种。",
      "speaker": "发言人1"
    },
    {
      "time": "01:59:14",
      "text": "我觉得这种那样的问题，很多时候你就你只要砸时间你总是能解决。但是像OI的问题有了很多，砸了太多时间点解决不了。",
      "speaker": "发言人5"
    },
    {
      "time": "01:59:22",
      "text": "我就比如说我很多时候，比如说我去debug一个问题，我可能我去搜其他东西，我说我甚至不需要去reason，我只要去做一些rum，是很多对，更多的就是靠太的是很多reason你需要去处理这种刚才很多。",
      "speaker": "发言人4"
    },
    {
      "time": "01:59:36",
      "text": "所以你觉得这两方面的能力跟最后foundation model的能力也是一个促进和一个互补的关系。",
      "speaker": "发言人2"
    },
    {
      "time": "01:59:44",
      "text": "我觉得in something这两个似乎是两个非常重要的auo dimension，就是使得这个推广的理解，推广你通过CGI1个很重要的两个环节。对，我觉得这个就你deal with a lot of knowledge，you deal with a lot of context, you deal with a lot这些noise的situation。但是它的核心的reasoning可能并没有那么难。一个是就是这世界上有几千万的program，但是真的去做这种，你看program做的好的人没有那么多。但是那个事情我觉得更多的是说我的这种word model simulation以及这种organic reasoning。这个可能我觉得是两个黄色肉的番茄。",
      "speaker": "发言人4"
    },
    {
      "time": "02:00:31",
      "text": "其实我到这里我就想就是我想好奇一下，就是对于这个condition model或者LM的能力的这个边界的一个理解。因为其实像剩余的这个gender work中，从包括以前这个trim stores就是我感觉它是一个根本还是在prompt层面的一个改进。我们就可以发现这个效果上有很大的一个区别。所以我好奇说当代的讨论说现在LM的这个能力的不足的时候，到底有多少是他自己能力不足？他有多少是我们不知道怎么去释放他的这个能力的问题。我会在你的工作中有你对这个的感受是怎么样。",
      "speaker": "发言人1"
    },
    {
      "time": "02:01:09",
      "text": "对我觉得我我我我不觉得很多东西是prom研究。我觉得我可能更多认为模型有两部分，一部分是你怎么去训练它，一部分是你怎么使用它。就是prom。我们所谓prompt，其实本质上就是怎么去使用这个模型。然后他的这个能力的边界就是取决于，第一他他你是怎么训练的，第二部分是怎么使用他。",
      "speaker": "发言人4"
    },
    {
      "time": "02:01:37",
      "text": "然后我觉得刚刚我举的那个GPU和DP里的，我觉得其实它应该形成一个闭环。就我们怎么去使用这个模型，应该反过来去影响我们怎么去训练这个模型。因为假设我们使用它的方法和它训练的这些数据并不一致的话，他最后他他是没有办法去释放他的这个能力的。或者说我们现在释放的这些能力其实都是所谓emerging。但是我觉得可能我们现在就是去使用他的这些方法，可以去给我们一些insight，就是怎么去更好的improve这些新的网络。",
      "speaker": "发言人4"
    },
    {
      "time": "02:02:15",
      "text": "因为我觉得其实我觉得当当大家在讨论这个LN本身是否有一些limitation的时候，其实经常提到的一点也是说觉得这种predictions token的方式像是一种快思考，对吧？是像我们的科学研究，还有一些更深的一些创造，大家觉得其实是一个system to thinking，就是这种慢思考。但是我记得应该是你的一篇，就你的pay里面提到，就是说你觉得用这种prompt其实就可以实现这种system to thinking。我所以我当时看到我就好奇，是不是说明其实模型它本身是有慢思考的能力，只是我们还不知道怎么去用。那是否就意味着如果说真的有这个慢思考能力，是不是意味着说他其实的确可以已经可以帮我们去解决一些可能，比如说复杂。他的这个科学发现，就这些我们原来认为pretty nice token解决不了的东西。我也在想说是不是我们使用它的方式，是贫穷限制了我们自己对LI边界的一个想法。",
      "speaker": "发言人1"
    },
    {
      "time": "02:03:12",
      "text": "你说的应该是去掉到的这个paper.",
      "speaker": "发言人4"
    },
    {
      "time": "02:03:15",
      "text": "应该是那一片。对。",
      "speaker": "发言人1"
    },
    {
      "time": "02:03:16",
      "text": "其实那个paper的核心思想是说，假设你把next prediction看作为是一个快速的这种system one的过程，那我们想要去实怎么去实现system to这种慢思考，对吧？就是对于人来说，其实system to它是一个control over system，它其实是一个control over is over system。就是你知道什么时候去stop你的这个flow，然后你去switch to something else。它更多的是一个对system one的一个control，它并不是独立于system one存在的一个事情。其实所以反映到出要造它本质上就是说我并不是去和system one近的话，是我用推测是这样一个control augment去control这个system。他并不是去替代system，而他只是去impose control over system，所以这是第一点。",
      "speaker": "发言人4"
    },
    {
      "time": "02:04:15",
      "text": "第二点就是说我们其实当时试过一些更难的task。比如说去做这种only PL programing，或者去做C或者我们认为是比较像AGI的task，对吧？然后现在模型还是没有办法去做到这一点，我觉得很大一个原因就是它的self evaluation能力还是不够强。比如说我让你去写三个code，他很难判断哪一个扣得更好。因为这并不是她春天所去训练的事情。所以这就是为什么我觉得我们去经典的retest learning对我们怎么去使用这个model。其实是反过来会告诉我们这个mod在哪些能力上是有不足，我们应该去针对性。",
      "speaker": "发言人4"
    },
    {
      "time": "02:05:01",
      "text": "所以根据我们现在使用的model的方式，你觉得接下来你应该往哪个方向去improve呢？",
      "speaker": "发言人1"
    },
    {
      "time": "02:05:08",
      "text": "这是个我觉得这一些就很好抽象的问题，就是你你肯定会去拿着类似。因为他前面说的一点就是说这其实是搜索问题，这个在RL里面就是这个问题，对吧？你有个解空间，然后现在不要给一条路径，这条路径有可能b to解，不能有可能不能给出解对吧？然后你可能会用不同的，你不是说我就故意的给一条LT，对吧？这很蠢。所以你去sample这个空间，然后你去决定意义到底怎么样去做。",
      "speaker": "发言人3"
    },
    {
      "time": "02:05:41",
      "text": "那如果你要improve，你要么improve自己的search。你说这是这就是所谓大家在做agency prompting的时候干的事情。说我这个网络就这样是吧？然后那我搜索的时候更聪明一点，就青岛要做的事我就做一条这个事。然后后面有些paper叫self consistency，他说我就sumo好几个数，然后和sample在一起，而且会不会更好，然后发现会更好对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "02:06:06",
      "text": "去打造会说我用一个更复杂的搜索方法去做，然后你第二个要聊的info就是把这个sampling在model本身变强，你知道吗？这个就是所谓language变强。那你变强的方法，IL是一个很难去的东西，但是那个东西我觉得很好的地方就是如果你知道哪个指标变好，你总是可以把它回去的。这就是你期待的那个什么fight，所以大家都应该干这件事情，但这件事情也没那么容易，因为那个data不在不存在，对吧？你要去把那个data给找出来，但这也是已经发生的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "02:06:43",
      "text": "现在有挺多人easier用之前language model去filter，去sect to training data，或者生成data training，这是在发生的事情。所以这是一个方向，就是你会用level to model产生的数据也好，feedback也好，我认为你会用它的feed back去回去去做做去做那个数据。能走多远不知道，这个是就关于agent还有另外一个最近大家讨论比较。",
      "speaker": "发言人3"
    },
    {
      "time": "02:07:13",
      "text": "多的就是这个multi I agent的这个system。我好奇，我看这个rappid其实有一个multiplayer的这个AI chat。你觉得这个是你的mute，你可以跟大家简单介绍一下这个feature是什么。然后对这个是我们所谓的multi agent system。",
      "speaker": "发言人1"
    },
    {
      "time": "02:07:32",
      "text": "对，这个其实是我会说它是multing agent system的一个前置工作，这个是我我们当时我做这个工作的原因是，首先我们原来的AI chat是就是你只能一个人跟在一个人后面去查。那么Molly player chat就是你可以好多个人同时share同一个chat wino，你可以看到别人在chat。它相当于就是一个一个一个一个有点像一个信息的一个收发系统，有点像医院。你可以看到每个人的一个消息他在streaming，然后他有有不同的session。",
      "speaker": "发言人5"
    },
    {
      "time": "02:08:07",
      "text": "就是说这个agent可以跟多个人去互动吗？",
      "speaker": "发言人1"
    },
    {
      "time": "02:08:10",
      "text": "Right now IT is它只是给用户用的一个multiplayer chat，multiplayer是指multi用户yeah，但是我为什么说它是个agent的前置工作呢？是因为我们做这个工作的原因是我们意识到说，如果你需要有agent，甚至不止一个agent在后台给你工作的话，你需要有一个情报接收系统去看到他在干什么。然后你看到他在干什么，你需要看到他multi player就是multiplying，就是你在这个接口里面。同时A人也在welcome的时候，你要看看他们在做什么，然后你还要看支持他可以在后台去做。你比如把笔记本电脑合上了，你的agent还在工作，然后你打开电脑时候你还要看到它依然在工作。所以这个时候需要做一个无所谓，我们的chat其实就是一个UI去看去look at what agent is working。所以在这是一个一个前置工作。做这个工作的我们的前提的思考就是我们做的agent就是需要跟人去进行互动。那这个互动的部分就是这个chat里边，你可以去跟他以对话的形式互动，你也可以以button的形式互动。",
      "speaker": "发言人5"
    },
    {
      "time": "02:09:18",
      "text": "像我说就是agent如果有问题的话可以问你说，for example他会问你说我这个东西做好了，我要不要去decoy，他因为deploy是一个花钱的事情，他不能就直接就去去devote对吧，所以他会你这个时候就需要跟用户互动，用户需要去确认说我是不是要做这个做那就是像这样的东西是不是是在产品上有很多的要做的思考。什么时候应该问用户，然后什么时候该给用户发的问题，什么时候让agent在后台去去工作，然后以什么样的形式让用户看到agent在在在在工作。因为IT这个state很复杂，它的observation还有很多东西，那你也许不想看到那么多复杂的东西，也许只想他他在工作对吧？就是7乘24小时的在给你打工。对，是，所以我们是做的这个，这相当于前置工作。然后我们现在浪费了之后，下一步就是把一点去一次就进来。但这就是这个过程，像我刚才说的，就比较的需要更多产品上的一些思考，这也是我们现在active 5正在做的事情。",
      "speaker": "发言人5"
    },
    {
      "time": "02:10:20",
      "text": "所以是在这个chat的里面，下一步的时候会在这个用户与沟通的过程当中，就会可能就不只是看到其他的用户了。而是说这里面会有multiple的agent，可能来给你进行一些实时的反馈，这样以便你一步一步的完成你想完成的整个task。",
      "speaker": "发言人2"
    },
    {
      "time": "02:10:38",
      "text": "对，就是现在他现在也是有AI的反馈的，就是你的chat我的chat是AI chat。就是你说你的每每一句话它会有都可以都会有AI去来给你feedback OK只是说agent就是in terms of它可以进行motor step的，然后更复杂的task。相对于说只是generate一些code，他可以做比如说general的whole project这样的更复杂的task。但是在在设定里面就是说我们对我们来说，用户和agent都是我们的第一公民。",
      "speaker": "发言人5"
    },
    {
      "time": "02:11:07",
      "text": "对对对。",
      "speaker": "发言人4"
    },
    {
      "time": "02:11:08",
      "text": "我觉得这个是一个很重要的一个理念。",
      "speaker": "发言人1"
    },
    {
      "time": "02:11:11",
      "text": "就是multi agent的一个基础。",
      "speaker": "发言人2"
    },
    {
      "time": "02:11:12",
      "text": "那我发现你你们怎就是你你们怎么看这个，你们会怎么定义一个multi agent system？为什么我们会需要一个multi agent？",
      "speaker": "发言人1"
    },
    {
      "time": "02:11:22",
      "text": "我觉得本质上是一个in first time skating的逻辑，就是说最终我们希望的是什么？最终我们希望的是说我们在first time用更多的computer，我能够pretty获得更好的效果。然后scale up the number of asian is one way to skill up interest。但我觉得现在可能base agent还不够强我觉得当一个base agent到一个decent thread hold的时候，可能这个mlt agent它的skin会真的开始起作用。举几个例子，如果大家都非常菜的一个项目，可能人越多越来越乱越乱就三个臭皮，这样他就会越来越越来越失败了。但是一旦我达到一个certain，那可能这个越多人越多，它会效果更好。",
      "speaker": "发言人4"
    },
    {
      "time": "02:12:17",
      "text": "对。",
      "speaker": "发言人5"
    },
    {
      "time": "02:12:18",
      "text": "就是我大家都很聪明，我可能两个人会比一个人效率快的了，然后可能三个人又快又再快1.5倍。",
      "speaker": "发言人4"
    },
    {
      "time": "02:12:25",
      "text": "我觉得more agent这其实有有好有有两种不同的定义。第一种是我有好几个agent在做同一件事儿。第二个是我们有不同。",
      "speaker": "发言人5"
    },
    {
      "time": "02:12:34",
      "text": "的职能的人。对对对。",
      "speaker": "发言人3"
    },
    {
      "time": "02:12:36",
      "text": "比如说之前有一个工作叫meta GPT，他会一个词说你要build一个suffer，你需要一个engineer，需要一个PM对，然后你需要了解，你需要一个reviewer，你需要一个一个公司。它的定义就是你有一个公司里有CEO，有PM，有programmer，有reviewer。然后他每一个其实就是有不同的Price。它就是一个对。",
      "speaker": "发言人5"
    },
    {
      "time": "02:13:00",
      "text": "就是基于一个访问不同的prom。",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:02",
      "text": "我觉得这更像是一个multi prom meter，并不像一个multi a对，这个可能是跟multipronged关这个问题。",
      "speaker": "发言人4"
    },
    {
      "time": "02:13:09",
      "text": "因为如果你用的都是GPT，四个不同的system prompt，它们是一个方一个一带一卷是一个多就是人工分类的一些。",
      "speaker": "发言人3"
    },
    {
      "time": "02:13:17",
      "text": "对，而且你刚才说就是刚才它其实是一个步骤。那假设比方说戴文，他已经可以自己或者是three agent，他已经自己可以完成从code然后到unit testing，就整个反然后再回来可能自己在review。那他一个agent不就可以解决，为什么他需要不同的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:13:35",
      "text": "这个就是我我理解我理解就是说我简单的case其实就是不同的problem。那我们大家都知道，就是你给他不同的process，它的performance模型的performance是不一样的。就是你告你，你跟他说，你是一个school south engineer，他甚至能扣的，就是比你告诉他说你是一个普通人要好。所以就是即使模型是一样的，你prompted differently，包括chain sad或者就不同的不同的话，会让他成为一个不一样的一个从这个交互的perspective，他给你的结果是quality是不一样。所以即使是模拟是一样，它也会被consider different。",
      "speaker": "发言人5"
    },
    {
      "time": "02:14:20",
      "text": "或者是说到未来，当你又考虑到一些成本和一些效果的性价比的这一个因素的时候，那你一个变成一个各个小的A背后可能背后的不一定都是GPT4模型，而是specific里面的这个。比如说你说代码补全的模型也好，然后testing的模型也好，那这个时候可能就更make sense。大家都各司其职，就真的是他就是一个替代某一个职能部门的人的这样的一个agents。",
      "speaker": "发言人2"
    },
    {
      "time": "02:14:46",
      "text": "对，其实大家关心的只是说谁能把这个工作做完。对，是，至于你是是你是这个女权。",
      "speaker": "发言人5"
    },
    {
      "time": "02:14:55",
      "text": "的选手对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "02:14:57",
      "text": "对，你是jf丁来帮我写这个代码，还是说你是一个new grass帮我写这个代码，你只要能写好，我其实不是很care，我甚至更希望一个new grass帮我写代码，不然我还欠欠这的一个人情。",
      "speaker": "发言人5"
    },
    {
      "time": "02:15:07",
      "text": "所以这里overall你感觉设计这样一个multi agent的系统，现在能看到的一个挑战。最主要的挑战是在。",
      "speaker": "发言人2"
    },
    {
      "time": "02:15:16",
      "text": "放在。",
      "speaker": "发言人1"
    },
    {
      "time": "02:15:16",
      "text": "模式能力层面上，就像舜宇刚才说的，还是其实落到场景里面，考虑到到底是具体做什么。然后我。",
      "speaker": "发言人2"
    },
    {
      "time": "02:15:25",
      "text": "觉得其实取决于你的你站位，你是在从哪个方向去想这个问题。如果你是更接近产品的，像我可能更接近产品那边，我会想的更多的是我们现在模型的很大的课表被其实没有被deliver到用户手上。这个其实并不是说你的模型一定要更强才行，因为现在的模型已经很强。",
      "speaker": "发言人5"
    },
    {
      "time": "02:15:49",
      "text": "把PPT做，我为我为什么就是来red，就是因为我之前在做star lab的时候，我发现当我发现我在我自己hair的前端的工程师给我的代码没有GPT4给我的好的时候，我意识到这个事情产生的价值会非常的大。但是事实上这个价值还没有被deliver到真正的大部分人手上。所以我会分两两部分看这个问题。",
      "speaker": "发言人5"
    },
    {
      "time": "02:16:16",
      "text": "第一是现有的能力在这里，比如给他一个分数60分，那现在真正能享受到60分的人有多少呢？几乎没有，大部分的人可能享受到30分、20分，或者甚至有的人是零分。我做产品的人或者需要我们像我做的工作，就是把这个60分的能力，能不能让更多的人享受到这个60分钟。如果从research的角度的话，当然我们应该把这个60分提升到80分甚至100分。那你提升到你这边，提升到下面这个平均的20分和量能到40分。所以我觉得就是属于你做的工作的角度不同。你关注的点一个是push的frontier，一个是让人。",
      "speaker": "发言人5"
    },
    {
      "time": "02:16:53",
      "text": "help people。对我觉得这个解释很好，然后他也很难联系。孙宇刚刚说的就是造纸机会用进去。对，做产品的人就是我希望我们把这个产品用完，然后那造这些人会看着就OK他们很关注大家怎么用，你怎么用会很影响大家会觉得这个茅台怎么去。",
      "speaker": "发言人3"
    },
    {
      "time": "02:17:14",
      "text": "对。",
      "speaker": "发言人5"
    },
    {
      "time": "02:17:14",
      "text": "我觉得大家都这么，而且一定是个我觉得肯定是个research fed，就AG的。我觉得都是一个research face，就research方向了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:17:25",
      "text": "但是我们在我们刚才聊了很多我觉得细节就技术的细节还有产品很多都聊了。我们最后可以就我觉得可以畅想一下，就是畅想一下我们到底因为again我又要控制一下这个reply，贵司真的太会写blog了，好吧？这个非常多，我觉得这个真的，这个AI可能是，但是还写不了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:17:46",
      "text": "之前写paper就写多了。",
      "speaker": "发言人5"
    },
    {
      "time": "02:17:48",
      "text": "对，就是贵司的这个block里面提到AI is redefining the whole of development life cycle。那到底怎么去redefine？就显然你是这个东西并没有去really find它，对吧？对，那大家觉得说，比如说以后到底整个我们的整个life cycle，它会拥有AI有哪一些大的变化，可能一年或者三年或者大的变。",
      "speaker": "发言人1"
    },
    {
      "time": "02:18:15",
      "text": "我觉得其实首先AI really find like apple其实很好理解。因为现在的software engineer的整个包括工具也好，life style也好，全是为人类设计。我们都是考虑OK你现在电脑前面有一个人，你需要写代码，那你需要什么样的？但是如果你从AI去考虑，现在你有一个AI了，那你设计的角度可能会完全不一样。比如说gate，gate它有十几年的历史了，从来没有怎么进化过，对吧？那那git对人来说是没有，对于他来说真的没对人。没事，我对对你对人很这都是很危险。对，所以就是很好理解。就是说如果说你考虑这个世界的第一生产代码，生产的人是AI的话，那你会怎么重新设计？这是一个例子，或者你怎么重新设计这个甚至programme language对吧？",
      "speaker": "发言人5"
    },
    {
      "time": "02:19:11",
      "text": "你觉得有什么东西是需要重新设计吗？",
      "speaker": "发言人4"
    },
    {
      "time": "02:19:13",
      "text": "我觉得很多公司都做。",
      "speaker": "发言人3"
    },
    {
      "time": "02:19:15",
      "text": "也不是说很多东西需要重新ID对吧？IDE肯定是需要重新，就是你不太，但是也还好，我其实想了一下这个问题，我并不觉得有什么东西是fundamentally需要重新设计，如果有的话我会立刻开始做这件事情，但是我现在还没有想到。",
      "speaker": "发言人5"
    },
    {
      "time": "02:19:33",
      "text": "但是这是一个很好的但是很难的问题。",
      "speaker": "发言人3"
    },
    {
      "time": "02:19:35",
      "text": "但很难的问题。对，如果能想到这问题的答案的话。",
      "speaker": "发言人5"
    },
    {
      "time": "02:19:38",
      "text": "很多东西大部分人从来可能是一亏的。可能对三和C可能没有什么本质区别，你只要有足够调查数据都要求。",
      "speaker": "发言人4"
    },
    {
      "time": "02:19:45",
      "text": "对，但有些东西是一定不会消失的，就是跟现实世界，我觉得是首先第一个很重要就是跟现实世界交互。比如说软件公司里面很大一部分事情叫做AB test做测试。这个其实是一个刚刚我说的validation的部分。你模型你不管你再强，你你你都需要去validate你的这个答案是不是？",
      "speaker": "发言人5"
    },
    {
      "time": "02:20:09",
      "text": "对，比如说你现在有一个电商网站，然后你去做了一个页面上的改革。他这个改动到底对你这个网站的realme是正向还是负向？你其实你模型再强你也不知道，除非你去跑实验。所以我觉得像这部分是一定不会被取代，甚至是需要被重新设计。就是怎么样让模型更好的去考试，也也许也许不需重新设计，但他一定会继续他的。对，这我知道。",
      "speaker": "发言人5"
    },
    {
      "time": "02:20:32",
      "text": "我觉得这个问题其实就蛮好的，他很难就是这样。他说如果你真的知道你就应该去做，我觉得一定会不一样。然后怎么说呢？我我我还是挺喜欢把这个东西类比成那个自动驾驶的对吧？然后大家会有不同的pose，有人上来我就做L4对吧？那要做L4的人就会想的事情就是我这个车要不要方向盘呢？当然不要，方向盘的没有方向。车造成什么样对吧？对，当时就当时很多人在在思考这个对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "02:21:01",
      "text": "很valid，但他有rist，就是这很好预测吗？这不好预测，然后这应用的时间然后接着你还有一条路径，就是说反正一定会不一样，我也不知道怎么不一样，那就先把office已经做了。然后我觉得有个push，是你从user里面去，你看他们在用错的时候发生了很多变化，所以它需要时间。那你说硬要预测，我觉得我我我很难说这个angry stack有什么不一样。但是我觉得对program language来说，这是一个很大的感觉。",
      "speaker": "发言人3"
    },
    {
      "time": "02:21:34",
      "text": "语言上可能就会因为。",
      "speaker": "发言人2"
    },
    {
      "time": "02:21:35",
      "text": "program language的演变，从什么CC加加他一直要做到的事情就是为了让program language更容易。对对对对，然后你从那个角度来说，to让program mature变得更更简单了。因为你可以直接从拿出来录制的可执行的东西，吧。那他对于如果你从这个角度来说，他对于写code有什么？那我觉得很明显的办法以前你说我只是一个C加加的，不不不，我不嫌太大。那以后我有这种事情对吧？就是这个所谓经验或者经验在copilot或者可怕的本身，他就是一个全能的是高德的人。",
      "speaker": "发言人3"
    },
    {
      "time": "02:22:14",
      "text": "那当当他是这件事情发生的时候，它会影响些什么呢？因为这件事情已经发生了，它是影响的事情，就是大家会对那些language domain的一些错误。比如比如proto就是一个这样的东西，对吧？就proto会为了让那个data的传输在所有的逻辑里面都能传，他做了这个offer。那那那好吧，我觉得pro是一个好的例子。",
      "speaker": "发言人3"
    },
    {
      "time": "02:22:42",
      "text": "如果以后你真的就是一个language全面的language number的人，对吧？那我们会不会有那些library，它就是能随意的调用各种来源的feature。然后那些东西就是那个或者这种东西是被一个是的一个知识写出来的。魅力，反正就这件事情其实对你来说很烦的。是的，就比如说我开发了一个东西，然后发现rust更好，然后重新写的rust很烦的对，那以后可能这件事情就没那么烦了。因为而且这是这个倒是一个很多的use case，就是大家想把一个project在另外一个来过去的操作写掉，然后这个事情很值得GPT做优先性没那么难，因为exactly的东西就是translation，对吧？Translation并不是一个难。",
      "speaker": "发言人3"
    },
    {
      "time": "02:23:30",
      "text": "这个跟本质大语言的那个多语言也是一个道理。",
      "speaker": "发言人2"
    },
    {
      "time": "02:23:34",
      "text": "对，是一个道理，所以他没有那么难。然后model干的很好，这种事情一定会发生了，然后这意味着什么？我也不知道意味着什么，对，但是他他也会发生很大的变化。但还有一个prediction，我觉得有的是我觉得max billions，它一定会发生的。就是这个东西一定会让门槛变低，会让它变高，然后它一定会发生，我觉得是件很好的事情，我觉得很棒。对，如果你你会有人会说他会replace程序，他不会replace，他会让所有人变成程序，然后让好的程序。",
      "speaker": "发言人3"
    },
    {
      "time": "02:24:07",
      "text": "变成更好的程序。",
      "speaker": "发言人5"
    },
    {
      "time": "02:24:08",
      "text": "对，所以这就很棒。然后。",
      "speaker": "发言人3"
    },
    {
      "time": "02:24:10",
      "text": "顺顺。",
      "speaker": "发言人5"
    },
    {
      "time": "02:24:11",
      "text": "带过来。",
      "speaker": "发言人2"
    },
    {
      "time": "02:24:15",
      "text": "我觉得如果你假设AGI会实现的话，那他就会做任何交。然后surfer这边是其中一个角，这个就感觉是一个一般的case对吧？然后我觉得super dew可能比较独特的一点是它作为一个job，它是一个相对有比较高feed back数据的一个事情。所以说他可能学习起来会有一些更多机会。比如说让你去学怎么去为人处世，这个事情你得要真的和人去打交道，那这个事情必败，或者非常非常的微妙，非常非常非常微妙对吧？就是这个相对来说是一个比较不要地方task，所以这个可能对于AI来说是一个好优势。",
      "speaker": "发言人4"
    },
    {
      "time": "02:25:02",
      "text": "然后我觉得我可以讲的更康复一点。比如说思维位置上，我觉得有什么事可以直接做的，你觉得可能task concern是一个非常重要的事情。就可能你需要一个agent去take off，就unit test，一个agent take off the kid body，去做一些这种high level的conversation。然后我觉得往往南海我们需要人去探索。We can give you more most bunder limitation，就是我们能让这个做就好了。但另一方面，当然我们需要不分开这样的人去make the baseball。对，但是我觉得two people是。",
      "speaker": "发言人4"
    },
    {
      "time": "02:25:44",
      "text": "我看春宇最近这也有一个研究，是说social impact of language agent。我好奇你们怎么看这个languages对于这个社会和工作的一个大的影响的？这个可能是更广的话题，我们可以随意bring动一下。",
      "speaker": "发言人1"
    },
    {
      "time": "02:26:00",
      "text": "对我我觉得那个包里面有很多点，我就讲其中一点，就是说我写了一个金字塔，就是说什么样的教育会最先被replace。然后经常第一层是robustness，第二层叫做collaboration或者communication，第三层叫做exploration，就是说我觉得可能第一部分被取代的工作是这种receptive，但是你需要reliability或者boss的，比如说customer service。对，还有这个他所运用的很难，但是你需要让他去follow这个入，或者比如说去报税，或者让你去可能甚至做一些legal的事情。我觉得这个对那个那个公司很成功，那个公他们也很成功是吧？对，然后就有case.",
      "speaker": "发言人4"
    },
    {
      "time": "02:26:44",
      "text": "他要有所干的事情。",
      "speaker": "发言人3"
    },
    {
      "time": "02:26:47",
      "text": "对，但这一部分就是说你可能就是可以用cobs，然后这个procedure去control这些事情，你不太需要去和人打交道，你也不需要需要去做很open这个事情。然后第二部分就是collaboration，就是说我要去学会不仅是怎么和电脑去打交道，我还要去学会怎么和人打交道。很少聊到和电脑电话是很不一样的。电脑会给你一个well defind成为he back。但是人是一个非常tRicky的案例，就是你需要去学会怎么去拍matis，怎么去和人合作。然后你需要学会很多新的东西。然后我可能我觉得最难的是怎么去做这些open exploration task。比如说去做scientific discovery，或者去证明立马才行。",
      "speaker": "发言人4"
    },
    {
      "time": "02:27:28",
      "text": "对，那既然二位你们觉得我有点surprise，你就这三层太快。感觉很多东西都在第二层，但是我问什么？",
      "speaker": "发言人3"
    },
    {
      "time": "02:27:40",
      "text": "就是说你觉得这个A因为刚才提到的是舜宇的那篇文章讲的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:27:44",
      "text": "我觉得大部分可能你还是需要三个结合起来。但是就是对。",
      "speaker": "发言人4"
    },
    {
      "time": "02:27:49",
      "text": "你觉得这个搜就是搜就是let's.",
      "speaker": "发言人1"
    },
    {
      "time": "02:27:52",
      "text": "搜索我有点worry。喂喂我自己是一个controlling短期对于有些有些人失业的一些问题，我觉得这个事情不是这样。就长期来说对人类社会来说是合适的，但对个人来说这个是挺不好的事情。因为我也是每次都会发生，对吧，就是有些有有一部分人叫，总体叫我不觉得会少会多。",
      "speaker": "发言人3"
    },
    {
      "time": "02:28:20",
      "text": "当然可能actually说所有人都不用工作了，机器人都在工作。Robotics最近也很火，对吧？我觉得robotics也是一个很好的方向。这里真的你还要工作吗？难道这个有无限工作可以放在吗？小windows在短期内就一定会有人失去job，然后失去job那那帮人就是一些不稳定因素，对吧？所以我觉得每个工业革命什么都发生了，然后这也是没有问题，我觉得没那么好。对。",
      "speaker": "发言人3"
    },
    {
      "time": "02:28:47",
      "text": "你觉得会让还会让一部分该这么说。",
      "speaker": "发言人2"
    },
    {
      "time": "02:28:50",
      "text": "我觉得我自己已经是个受害者，我受害的工作就虽然我是做这个的时候从bird开始做对吧？我看这个东西，然后对我可以讲这个故事很有意思。因为leda做完以后我超级喜欢的，我觉得这个很很牛逼的工作，然后我们就做一个说丘陵什么的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:29:04",
      "text": "那时候我记得很清楚，就是为什么兰不能人去做character。因为Daniel他就很喜欢他他他是一个语言学习者，他喜欢聊天，他喜欢拆包，他不在乎batture，所以character不会去做AGI。因为包括norm和Daniel他们都不在乎唰的，他们其实没那么想要HI，就他们想要check about，能整挺好的，google不给他们做，让他们去做这个挺好的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:29:31",
      "text": "然后那时候我们就做做research，发发配合都挺好的对吧？然后那时候会探索一下google的。其实我觉得对我自己的影响，我那时候没有觉得google太小心什么的，因为他也有一些自己的理由。但现在party就完全变了，我说我是受害者，是因为tg b出来之后，整个世界都变了，对吧？就好好做的学员做不了好好的researcher，大家就是做production这件事情，其实没有那么好，因为我觉得还是有很多很有意思的research。但现在就整个research的风气就变成了我们只有拿着两根鸡毛都可以去study。",
      "speaker": "发言人3"
    },
    {
      "time": "02:30:06",
      "text": "可我的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:30:08",
      "text": "对，就是因为说实话这个还会更多的是来自于一个东西吧？然后我不是说来自于不是好的research，还是人是好的research，但是在这之前真的有很多很有意思的research。从这角度来说，我是我是受害者，但是反过来就是你去extracted一下，你就会发现他一直会影响。比如说我们直接做预测值的人，然后它会影响很多很多job，然后才会带来巨大的social impact。",
      "speaker": "发言人3"
    },
    {
      "time": "02:30:38",
      "text": "不是我希望他发生，因为它就是一个很好的technology。但是你发生以后怎么办呢？对吧？因为我我我说我是受害者，一方面是因为我就觉得这个叫就是怎么说我觉得对，因为这个这个index有点sick。它sick的部分是它很被capital。我本来觉得这是一个很好的job，就是大家比如说google做的东西是为了更好的一个产品，对吧？但我发现后来不是因为它是被capital绝伦的，就是当chat d出来之后，不是OI在推这个feel的前景是整个是必须的对对，华尔街是资本在VC已经推不动了。",
      "speaker": "发言人3"
    },
    {
      "time": "02:31:17",
      "text": "VC已经推不动了厂商了。",
      "speaker": "发言人2"
    },
    {
      "time": "02:31:19",
      "text": "现在只能掏，反正就是资本在做的，我是然后oh my god，这个太亏，股东是吧？对，就这个太奎子了。然后这件事情就当他们推这个东西的时候，他们看到的是所有的opportunity，我就OK他们，他们根本不在乎。",
      "speaker": "发言人3"
    },
    {
      "time": "02:31:34",
      "text": "就是有点像刚才孙宇说的，就是那GP这个GPU跟这个GPU跟AI的相互推进，不也是因为这个AI当时attest最多的对游戏性attract最多的money，然后变成AI就是do whatever you check the most money，然后就推动了这个GPU的走向。",
      "speaker": "发言人1"
    },
    {
      "time": "02:31:52",
      "text": "所以这件事情只要一开始就绝对停不下来，关键是他停不下来，就是对他不会停下来，然后大家一定会去问，开不过就是了，对吧？不过现在砸多少钱去吹他的卷不羊毛就是后面的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:32:04",
      "text": "后面的利益是就是你可以创造的价值太大，也有种价值就是它可以取代的价值太大。",
      "speaker": "发言人5"
    },
    {
      "time": "02:32:09",
      "text": "对它它的想象空间很大，所以大家愿意砸钱。那反过来你去看不过最近就是从google culture来说，它是肉眼可见的下降，对吧？就research下降，然后他参与人，他顶着很多压力。然后我觉得这个你说难听点，你说这个公司不能跟toxic都是从过跑出来的人，所以这些说实话都是送水的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:32:32",
      "text": "我觉得这个是beyond大家讲了很多搜索品牌说来来去去就是那些什么就裁员，什么什么就来去。我觉得你刚才讲那个其实更更骚车，或者更我觉得更更细的一些，我觉得很没有被对我觉得我觉得没有被充分讨论的一些东西是吧？",
      "speaker": "发言人1"
    },
    {
      "time": "02:32:49",
      "text": "我们包括这个m two也是说，对，因为我很有意思，我们在我们的sales push的时候就会发现，其实你对于你的user也是一个pressure。这个pressure就是所有人现在都觉得，我要是用这个图，我要学会怎么用这个图，对吧？然后也会有自媒体在那边贩卖焦虑，说你不会你就落伍了。对对对，这些都在发生，都要学生知道这个氛围是对。所以大部分人其实并不那么喜欢学习，对吧？也喜欢学习up to date，然后catch up新东西的人是少的。是的，所以就会产生你的焦虑。",
      "speaker": "发言人3"
    },
    {
      "time": "02:33:24",
      "text": "对，我好奇你刚刚说那些你觉得本来很有意思可以继续的research，比如有哪一些你希望能继续，没有能继续的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:33:34",
      "text": "我比如我比较喜欢那个社区的。好吧，deep出来以后已经没有了research，就是肉眼可见。比如说mine那些theory就present，还有一个神经或者他们做了一些，这个已经不错。",
      "speaker": "发言人3"
    },
    {
      "time": "02:33:52",
      "text": "已经不搜索，银盘已经出来了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:33:56",
      "text": "其实我本身就在吹牛盘玩。",
      "speaker": "发言人4"
    },
    {
      "time": "02:34:00",
      "text": "然后那个什么对，就是好几个statistics都不在做statistics的一些理论。因为我自己以前做很多machine theory，我觉得machine theory很漂亮很有意思。然后他的l ism其实更挺聪明的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:34:14",
      "text": "他们他你做的是毕业生吗？没事。",
      "speaker": "发言人4"
    },
    {
      "time": "02:34:17",
      "text": "我很喜欢graphic o models一些东西，graphical models很酷，对吧？就是我会被这些东西吸引。但是你可以看看到做那些东西的很多researcher.",
      "speaker": "发言人3"
    },
    {
      "time": "02:34:26",
      "text": "他们不做那些东西的research。",
      "speaker": "发言人4"
    },
    {
      "time": "02:34:30",
      "text": "这是一个例子？这对于赛事来说，我觉我我觉得很适合的说这绝对不是好事。因为一定有没做完的return是可以做的。但是对也许LOM可以把这个。",
      "speaker": "发言人3"
    },
    {
      "time": "02:34:45",
      "text": "research继续做下去。",
      "speaker": "发言人5"
    },
    {
      "time": "02:34:47",
      "text": "oh my god, 这也挺好。对，就是我我觉得需要一些改革CD的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:34:55",
      "text": "但其实我前段时间不是去我不是去了几趟东岸吗？我觉得在在硅谷我们觉得非常就非常被overwhelmed。我觉得在东岸其实还是挺diverse的是吧？对我觉得对，比如说我在纽约，然后我前段时间跑了一圈U这个NYU然后包括像MIT harvard，他们在那边的很多AI的讨论，你会发现很少有像这边可以AI可以讨论一整天，但那边的AI总会跟着一些什么biotech，health care。所以我我我前两天在那MIT，我们在就我主持了一个panel，除了真格的那个合伙人之外，然后另外三位都是harvard的professor。然后这三位分别是研究，一个是研究的AI in healthcare，然后一个研究battery material，就电池的材料，然后另外一位是真的是研究theory的。所以我突然觉得非常的呆味，所以我觉得希望好多保留这些。",
      "speaker": "发言人1"
    },
    {
      "time": "02:35:54",
      "text": "都是一些用AI做朋友的，也不是，最近小9000年是一对对。对，但最近是一个好看点，包括我有看到的朋友他是做chair science，然后他们这个model是predict。",
      "speaker": "发言人3"
    },
    {
      "time": "02:36:07",
      "text": "但是我理解你说其实有一些可能更有研究的这种原数学原理的美的东西。就是大家我的。",
      "speaker": "发言人1"
    },
    {
      "time": "02:36:14",
      "text": "主要是模型人的研究需求。但是如果你跨用模型去研究那个对象，我觉得这个是这个时候。",
      "speaker": "发言人3"
    },
    {
      "time": "02:36:22",
      "text": "我想我想cover.",
      "speaker": "发言人1"
    },
    {
      "time": "02:36:23",
      "text": "一下就biotech这个点。因为我之前我自己创业的时候，其实就是做AI做biot，这个其实是我觉得还比较好的一件事情。因为AISS正在发生的事情是AI真的正在非常大程度的加速biotech and healthcare。研究一下我们之前的产品，我和王总现在还在继续做，就是给bell tech这些早期的公司的研究员去帮他们生成一些代码，帮他们生成insights，去做下一步研究要做什么的这样的一个分析。这个其实是很有用的，就是你你如果思考一下，他们的研究周期是都是非常长的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:37:02",
      "text": "一般来比如我有我有一个朋友，他是在做定向杀死衰老细胞，或者换句话说在研究长生不老药，然后他们就是在用VI去predict它的下一步的蛋白质结构，应该用什么样的结构最可能去发现这个好的药，对，成为好的这个药。对它其实是一个用AI predict的过程。然后你人是这个实验是一定要人做，或者也许你有机器人可以做，但现在是人做。但是你人做完实验之后再给AI feedback，然后再去做下一步predict，这个过程其实is actually happening。然后你也并不需要说你的AGI能够帮你直接设计出一个长生不老药。他正在帮助GPT4，正在帮助这些标准researcher去知道他们的下一步应该做什么。其实这是一个很好的一个一一个方向，并且这是我觉得在AI带来social impacts的里面少数几个比较好吃。也许也许很快也许很快我就能把人类的。",
      "speaker": "发言人5"
    },
    {
      "time": "02:38:09",
      "text": "寿命再叫延长。",
      "speaker": "发言人2"
    },
    {
      "time": "02:38:10",
      "text": "是吧？150岁或者120岁，你要甚至200岁.",
      "speaker": "发言人5"
    },
    {
      "time": "02:38:15",
      "text": "这搜索。",
      "speaker": "发言人2"
    },
    {
      "time": "02:38:16",
      "text": "硬盘是最大的对，这这是这是原来可能发生的，并且我觉得在没有AI的情况下，这个速度一定是对有很慢的，可能会更慢。对，所以这个是其实是我我觉得比较好的一个方面，它可以AI可以帮助我们解决一些我们一直想解决的问题，长生然后癌症等等等等是吧？呃，这听起来很玄幻，但是我觉得这就是我我其实是在我做star的过程中见了很多这种药厂的，然后biotype的公司。这其实是他们每天都在思考的问题，不会让人类活得更久。然后其实我我觉得苹果have挺好的好。",
      "speaker": "发言人5"
    },
    {
      "time": "02:38:56",
      "text": "我们从这个coding到展望未来，再到social impact，我觉得有个非常好的一个收尾。然后最后的环节就到我们这个惯例的快问快答的环节。那我们准备了我们准备三个问题。对，三个问题给到大家。",
      "speaker": "发言人2"
    },
    {
      "time": "02:39:12",
      "text": "对，大家就用在这个半分钟一分钟。",
      "speaker": "发言人1"
    },
    {
      "time": "02:39:15",
      "text": "直接出现在脑子里的这个回答就是你们的回答。好，要不我先开始先从顺。今年在自己工作或者研究生的一个小目标是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "02:39:26",
      "text": "把现在的这个项目给rapp，然后开启新的片段。",
      "speaker": "发言人4"
    },
    {
      "time": "02:39:31",
      "text": "开启新的篇章，我们就期待等你的新的篇章。",
      "speaker": "发言人2"
    },
    {
      "time": "02:39:35",
      "text": "我觉得我的目标就是我要让足够多的人通过我的agent能够创造不会编程的人能够创造他们的软件，并且能够通过它赚钱。这个中国人赚钱的闭环就是intel。因为我自己是一个创业者，所以我知道只有你把你的idea变成一个能给你带来好的东西的时候，那个时刻你才能感受到你的也是有价值的。你可以做一个toy，然后没有人care。但是我觉得大部分人都是需要他的idea，或者他的产品是有人care，对我们有闭环的。所以我的目标是我能够在这上要足够多的人创造他们自己的产品。Without known holiday, 对，好好，哲宇。",
      "speaker": "发言人5"
    },
    {
      "time": "02:40:20",
      "text": "就是我希望我能保持现在对工作的热情。我觉得这件事情对我是很重要的，就是我没有热情我是不会想工作的。所以我也觉得现在有这样的效果还挺不错的。",
      "speaker": "发言人3"
    },
    {
      "time": "02:40:31",
      "text": "现在你drive就是让你保持热情。",
      "speaker": "发言人1"
    },
    {
      "time": "02:40:34",
      "text": "的是什么是什么？个团队，我很喜欢我们的团队，然后我觉得我们的go是非常对。就从今今今年的long term的话，我觉得我会希望能看到，就跟这个团队一起看到这个technique对于消费者因为到底能带来什么帮助，这个我还挺期待的。因为我觉得如果这件事情不行，那AGI也没什么事。",
      "speaker": "发言人3"
    },
    {
      "time": "02:41:00",
      "text": "HI一定要让sof engineering变得对。",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:04",
      "text": "因为这是一个最最可以预见的结果。",
      "speaker": "发言人3"
    },
    {
      "time": "02:41:08",
      "text": "那我问一个下一个问题，就稍微轻松一些，大家在研究AI以及工作之余最喜欢做什么？",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:18",
      "text": "我打篮球和看书，最近在看什么书？最近在看李菲菲的自传，我就写的非常好。",
      "speaker": "发言人4"
    },
    {
      "time": "02:41:25",
      "text": "你这还是跟AI相关。",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:28",
      "text": "那你这边没了。",
      "speaker": "发言人5"
    },
    {
      "time": "02:41:30",
      "text": "对我比较喜欢速度的有速度的sports。对我说我有滑雪racing什么的，racing是赛赛车赛车。对。",
      "speaker": "发言人3"
    },
    {
      "time": "02:41:39",
      "text": "赛车酷要我会。",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:41",
      "text": "我比较喜欢跳街舞。",
      "speaker": "发言人5"
    },
    {
      "time": "02:41:45",
      "text": "对，哎既然我们这个。",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:47",
      "text": "你们要不有。",
      "speaker": "发言人5"
    },
    {
      "time": "02:41:48",
      "text": "rap有有rap有街舞吗？还有赛车，还有赛车，赛车干美术，我们再不用太过了。",
      "speaker": "发言人1"
    },
    {
      "time": "02:41:56",
      "text": "好的，这最后就是一些一个一个期待，未来的一年不是三年，在AI领域中最期待的事情是什么？",
      "speaker": "发言人2"
    },
    {
      "time": "02:42:06",
      "text": "我觉得未来一年最期待的是general purpose computer ation要三年是。",
      "speaker": "发言人4"
    },
    {
      "time": "02:42:12",
      "text": "一家这么激进非常。",
      "speaker": "发言人1"
    },
    {
      "time": "02:42:13",
      "text": "aggressive。这笔。",
      "speaker": "发言人2"
    },
    {
      "time": "02:42:15",
      "text": "哇哦。",
      "speaker": "发言人1"
    },
    {
      "time": "02:42:16",
      "text": "酷晕了，我一年期待的是我想知道这PT5是怎么样子的。因为它今年会release.",
      "speaker": "发言人3"
    },
    {
      "time": "02:42:22",
      "text": "这个可能要不了一年。这不是几个月吗？",
      "speaker": "发言人1"
    },
    {
      "time": "02:42:25",
      "text": "也今年一年。",
      "speaker": "发言人2"
    },
    {
      "time": "02:42:26",
      "text": "一年就不需要吃了。对。",
      "speaker": "发言人4"
    },
    {
      "time": "02:42:29",
      "text": "但我想我想知道它有多强。",
      "speaker": "发言人1"
    },
    {
      "time": "02:42:32",
      "text": "因为我觉得是SK三年期待的事情。",
      "speaker": "发言人4"
    },
    {
      "time": "02:42:36",
      "text": "其实我很感兴趣，那个vision pro和AGI，我觉得纯taxi AGI对吧？就是我不认不好。",
      "speaker": "发言人3"
    },
    {
      "time": "02:42:47",
      "text": "纯tax就不是兼容就不算理解了。",
      "speaker": "发言人4"
    },
    {
      "time": "02:42:51",
      "text": "节目对moti马达一定会很强，然后multi mode最强的展现形态，我觉得是应该跟。",
      "speaker": "发言人3"
    },
    {
      "time": "02:42:58",
      "text": "媒体朋友。我但对于A区都是三年。",
      "speaker": "发言人1"
    },
    {
      "time": "02:43:02",
      "text": "来我我我一年内我其实就是比较好奇说我们在coding上到底能不能达到一个闭环。就是让完全我们不需要回扣的能能让大家去创造自己的软件，或者说能不能完成这个闭环。当然这个很大程度也是依赖于看GPT5的有多多强的能力。然后我觉得三年内我比较期待发生的是delta k或者health care上的进展。因为我觉得他他的发展速度应该会比很多人想象中要快很多快。也许我们在三年内能看到很多很长生不老，很不可思议的。也当然我非常希望我朋友的那个公司能实现上升不了，这样我也能对吧？就是世界成人不老，我觉得是一个巨大诉说，一开始觉得是不一样的一个facebook就是你的羊肉。",
      "speaker": "发言人5"
    },
    {
      "time": "02:43:59",
      "text": "我们最后的最后，为了让大家知道我们的研究AI的researcher都是多才多艺的。要到这个摄影圣宇是清华说唱社的创始人。",
      "speaker": "发言人1"
    },
    {
      "time": "02:44:14",
      "text": "的方的好，方的对对。",
      "speaker": "发言人5"
    },
    {
      "time": "02:44:17",
      "text": "在这个AI对音乐也即将被AI颠覆，此刻要不你给大家rap 1段.",
      "speaker": "发言人1"
    },
    {
      "time": "02:44:24",
      "text": "真真退休了，真退休了。",
      "speaker": "发言人4"
    },
    {
      "time": "02:44:26",
      "text": "那等你的录音。",
      "speaker": "发言人5"
    },
    {
      "time": "02:44:27",
      "text": "都都录音。",
      "speaker": "发言人1"
    },
    {
      "time": "02:44:28",
      "text": "我我我可以，我可以把我之前歌找我记得录音。",
      "speaker": "发言人4"
    },
    {
      "time": "02:44:33",
      "text": "好的，谢谢。",
      "speaker": "发言人1"
    },
    {
      "time": "02:44:34",
      "text": "今天大家的时间我们。",
      "speaker": "发言人2"
    },
    {
      "time": "02:44:37",
      "text": "晚上差不多11点.",
      "speaker": "发言人1"
    },
    {
      "time": "02:44:40",
      "text": "将近3个小时。然后我们也非常期待大家一年之后有机会再来跟我们一起聊一聊，看看这一年的期待有没有实现。好的，这期就到这里。",
      "speaker": "发言人2"
    },
    {
      "time": "02:44:52",
      "text": "感谢几位这么长时间的交流开始。",
      "speaker": "发言人1"
    },
    {
      "time": "02:44:55",
      "text": "谢谢，拜拜。以上便是本期节目目的全部内容，欢迎在评论区留下你的思考与听友们互动。喜欢on board的话也可以点击打赏，请我们喝一杯咖啡。如果你用apple podcast收听，也请给我们一个五星好评，这对我们非常重要。最后的最后是舜宇给我们挑选的一段rap，欢迎来到宇宙中心。",
      "speaker": "发言人2"
    },
    {
      "time": "02:45:23",
      "text": "AG了。",
      "speaker": "发言人4"
    },
    {
      "time": "02:45:29",
      "text": "Canada to east .",
      "speaker": "发言人3"
    },
    {
      "time": "02:45:32",
      "text": "canada. Thousand six.",
      "speaker": "发言人4"
    },
    {
      "time": "02:45:42",
      "text": "说唱降临已经带领我们周围常有大别山。全部都在卖我的狗从来不掺杂香精。你说长江里已经带的足够带进暗黄，周围找不到悲伤。而那些heater全部都在卖命陷入陷阱，flow从来都不含。相信我全都看得清，摆着虚伪的声音和你想的这般奇，我即将要被你不听不听，血跳即将要太紧。尽管算尽古人算命，还要假装去淡定打碎了你的龟壳，错开你吹嘘的规格，我只选我自己。",
      "speaker": "发言人5"
    },
    {
      "time": "02:46:24",
      "text": "说唱歌手的规则真的都在，我就要我进了这个圈子，就要承担最终的后果。你的身侧反面会被我穿的刁钻一段连压在了两双管子的电压。你绝对没想到你以前很可怕，是我没有拆穿，心里只有忌惮。现在被我害怕，一直等到你想到。",
      "speaker": "发言人5"
    }
  ],
  "lab_info": {
    "summary": "在这次讨论中，参与者探讨了人工智能（AI）在产品开发、教育、未来技术及社会影响等多方面的应用与影响。AI在产品中的角色被提及，包括增强用户互动和提升工作效率。在教育领域，AI的潜力被看作是革新学习过程和方法的关键。生物科技和健康医疗中AI的应用展现巨大潜力，如加速药物研发。讨论也涉及了AI对工作性质和职业可能带来的改变，尽管对技术解决长期社会问题持乐观态度，但也认识到随之而来的挑战。未来AI的发展，包括新一代模型的期待以及对艺术、体育等传统行业的潜在影响，都引发了积极的期待与谨慎的思考。此外，播客还介绍了听友群的成立，旨在为听众提供与嘉宾互动和获取最新信息的平台。整体上，这次讨论聚焦于AI的广泛影响，展示了其在提高效率、解决复杂问题和推动社会进步方面的巨大潜力。",
    "qa_pairs": [
      {
        "question": "大家好，我们今天要讨论的话题是什么？那么David创立的cognition lab以及其AI agent是否代表了AI在编程领域的发展方向，以及目前的产品还有多少提升空间？",
        "answer": "今天我们主要讨论的是AI coding，特别是最近引起广泛关注的cognition lab推出的AI agent，它在短时间内获得两轮融资并达到20亿美金估值，引发了业界对于AI如何重塑软件开发甚至工程师这个职业的热烈讨论。这一话题我们将通过三位在各自领域极具代表性的嘉宾进行深入探讨，他们将从工程师个体、企业级需求以及学界研究等不同角度分享看法。",
        "time": "00:00:37"
      },
      {
        "question": "请三位嘉宾先做一个简单的自我介绍，并分享一下今年发现的最有意思的AI产品。",
        "answer": "姚顺宇是prince第五年的PHT即将毕业，在旧金山实习，他推荐的产品是他们公司SARA的CRO，这是一个在customer service业务中真正落地且有效工作的AI产品。赵宇哲在一家AI创业公司工作，之前在Google做research，他提到的最有意思的产品是chat GPT。李珍在replay公司，他介绍的是面向初学者和非专业程序员的在线IDE平台，该平台愿景是让所有人都能创建软件。",
        "time": "00:03:46"
      },
      {
        "question": "姚顺宇，你如何进入AI研究领域的？",
        "answer": "我在本科时开始做科研，最初研究computer vision，后来转向自然语言处理领域。",
        "time": "00:05:37"
      },
      {
        "question": "赵宇哲，你是如何进入到AI领域的？",
        "answer": "我运气特别好，因为我的背景比较偏向理论模型。在纠结是否继续做deep learning时，我选择了语言模型方向，并很幸运地加入了一个做自然语言处理（NLP）的研究团队，从而有机会学习整个AI领域的内容。",
        "time": "00:06:49"
      },
      {
        "question": "李珍，你今年觉得最有意思的一个AI产品是什么？",
        "answer": "我觉得最有趣的是AF库的产品，它非常好用，作为创业者每天都离不开它。另外，视频生成也是一个挺有意思的产品，虽然我自己没用它做特别有意义的事情，但觉得很有趣。",
        "time": "00:09:14"
      },
      {
        "question": "你今年发现的最有意思的AI产品是哪个？",
        "answer": "我最喜欢的是一款名为Bill Space的产品，它是一个由h16c投资的公司开发的平台。这个平台的目标是赋能更多人去构建软件。用户可以在上面提出自己的项目idea，比如视频封面生成，Bill Space会帮你对接到能够完成这个任务的人或团队，并提供相关的资源和连接。",
        "time": "00:15:49"
      },
      {
        "question": "Bill Space除了对接人才外，还有哪些独特之处？",
        "answer": "Bill Space不仅是一个人才对接平台，它更像是一个孵化器，提倡“six weeks to work on your dream”，会定期组织一批人进行为期六周的项目孵化，帮助他们实现各种梦想，无论是开发软件、漫画还是音乐等。同时，它还教授参与者如何让自己的产品引起他人关注并成功发布。",
        "time": "00:19:19"
      },
      {
        "question": "Rapier这家独角兽公司在AI浪潮中扮演了什么角色？",
        "answer": "Rapier作为一家独角兽公司，在AI浪潮中扮演了先行者的角色，很早就开始将AI功能集成到他们的产品中。他们的主线逻辑是让更多人能够创建软件，并且从想法到软件实现的流程中提供快速解决方案。其中，他们的AI产品包括代码补全工具（code convention, not ghost the rider）、AI聊天机器人，以及集成云端环境的一系列开发工具，旨在优化整个软件开发周期中的各个环节。",
        "time": "00:20:41"
      },
      {
        "question": "AI for all功能是什么时候开放给所有用户的？",
        "answer": "AI for all功能是在今年初开放给所有用户的，这意味着现在任何人都可以直接使用Rapier的AI功能，无需注册账号或付费，以促进更多人利用AI技术去创建软件。为了支持大规模用户需求，Rapier还专门训练了自己的AI模型，并开源了部分模型，以便为用户提供更快、更便宜且高效的AI辅助编程体验。",
        "time": "00:25:32"
      },
      {
        "question": "在coding任务上，最好的general foundation model是否能够击败所有模型？",
        "answer": "我们目前拥有的专门针对coding的模型，主要从效率和成本角度考虑，而不是追求单一最好的模型。例如，我们开发的小型3D模型在evaluation上表现优于cold lama seven d，且更符合citizen developer的需求。",
        "time": "00:29:53"
      },
      {
        "question": "是否由于企业内部编码质量高于公开数据，所以在数据方面存在差距？是否存在数据飞轮效应，因为企业数据对于模型而言并无优势？",
        "answer": "这个问题很好。我们的承诺是做enterprise级服务，注重数据安全和信任。虽然开源数据可能不如企业内部数据高质量，但通过获取和整合license数据，可以提供可靠的服务。确实存在这样的问题，如果严格遵守规则，企业数据的优势可能并不明显。不过，有些公司会购买额外的license数据以增强模型性能，而像Hub等平台已拥有丰富的数据集，通过特定训练方式也能达到较好的效果。",
        "time": "00:32:00"
      },
      {
        "question": "是否所有强大通用函数模型和专业coding模型之间存在显著差异？",
        "answer": "多种原因促使了专门的coding模型出现，包括学术界的研究兴趣和特定任务的需求。专业coding模型在某些方面可能优于通用模型，尤其是在处理结构清晰、有逻辑关联的代码数据时，但通用模型通过训练也能实现一定的代码补全能力。",
        "time": "00:34:04"
      },
      {
        "question": "针对代码补全的训练方式能否应用于基础模型的训练中？",
        "answer": "可以将针对代码补全的训练方式应用于基础模型训练中，尽管在依赖性变化上存在挑战，但在对话式和依赖前文后文的场景下，可以尝试使用类似dialog in painting的研究方法来提高训练效率。",
        "time": "00:40:45"
      },
      {
        "question": "AI是否有可能帮助解决复杂数学问题，比如定理证明？",
        "answer": "AI有可能在做reasoning时使用prot model进行推理，但直接应用到定理证明可能有限，因为数学定理证明需要深入理解和结构化思考，这与自然语言处理有所不同。",
        "time": "00:42:52"
      },
      {
        "question": "对于最强模型的coding能力，您怎么看？",
        "answer": "我认为最强模型的coding能力会强于专门的coding model，因为最强模型拥有大量数据训练，整体推理能力更强。不过，具体效果取决于应用场景。",
        "time": "00:44:33"
      },
      {
        "question": "您如何看待记录产品的形态，特别是renew record这类产品的定位？rapid产品形态的选择及其对用户和AI产品设计的影响是什么？",
        "answer": "renew record的目标是降低用户上手成本，通过提供一个集成化的解决方案，让用户一键完成一系列复杂操作，例如安装、配置和使用开发工具等。它旨在为用户提供一个易于使用的环境，同时也为AGI未来可能的需求做好准备。rapid产品形态选择了易于上手和扩展的特性，它以API形式提供各种开发功能，如编译代码、测试、部署等，这使得用户能够快速构建产品，并为AGI提供一个理想的实验和开发平台。对于专业程序员而言，他们可能需要更具体和精细的工具来满足其工作需求。",
        "time": "00:45:58"
      },
      {
        "question": "如果AGI到来，它需要什么来替代人类在软件开发过程中的工作？",
        "answer": "AGI需要类似rapid这样的云平台，能够执行、调试、部署代码，并进行迭代开发，甚至包括支付功能接入等，以实现从原型到真正产品的全过程。",
        "time": "00:46:42"
      },
      {
        "question": "rapid的产品设计是否考虑了企业级需求，如何更懂企业自身需求？",
        "answer": "设计rapid时，我们注重理解企业级代码库的特点和工作流程，确保产品能适应大型企业环境下的开发需求，如自定义工作流程集成、对私有数据的应用等，并通过不断优化AI功能（如自动补全、部署、debug等）来满足不同用户群体的需求。",
        "time": "00:55:26"
      },
      {
        "question": "现在对于自然语言问答任务的retrieval，市面上的模型表现如何？",
        "answer": "目前市面上的模型在自然语言问答任务上有较好的表现，但并非所有模型都适用于所有场景，因此并不是一个万能解决方案。",
        "time": "00:57:44"
      },
      {
        "question": "在企业场景中，你认为reg技术最大的挑战是什么？在做code相关的场景时，reg技术与之前相比最大的不同点在哪里？",
        "answer": "技术上没有太大的挑战，但比较有意思的挑战是evaluation，尤其是在code相关的场景中，评价代码好坏以及找到最相关的文件进行review的难度较大。不同之处主要在于evaluation的难度，尤其是在企业环境中，如何衡量代码好坏并确定相关性十分困难。",
        "time": "00:58:27"
      },
      {
        "question": "对于提高准确率以达到生产环境使用的99%准确率这一目标，难点在哪里？",
        "answer": "难点在于准确率本身的评估问题，以及如何定义和量化“最相关”的文件，这涉及到闭环的构建和用户行为的关联性等复杂因素。",
        "time": "01:00:15"
      },
      {
        "question": "reg技术的通用性与foundation model相比有何不同？",
        "answer": "reg技术强调针对特定任务的通用性较低，因为它在不同任务间可能不适用或效果不佳，而foundation model更强调跨任务的通用性。",
        "time": "01:00:57"
      },
      {
        "question": "针对企业客户交付产品或落地时，是否需要针对每个具体任务进行定制化？",
        "answer": "在某些情况下，比如法律领域，可能会需要针对不同任务定制不同的解决方案。尽管如此，在许多情况下，基于基础编程语言和环境的共性，解决方案可以有一定的转移性或适应性。",
        "time": "01:03:37"
      },
      {
        "question": "对于长文本处理，未来的趋势是解决reg问题靠更好的rag还是更强大的模型？",
        "answer": "长期来看，解决reg问题不太可能完全依赖更强大的模型，而是通过结合模型的能力与retrieve机制，构建更强的red解决方案。尽管强大模型能处理更长文本，但依然需要有效的retrieve策略来筛选出真正有用的信息。",
        "time": "01:07:25"
      },
      {
        "question": "在做coding方面，为什么现有的编码方式被认为不够好？",
        "answer": "现在大多数的NLP模型在编码方面存在不足，表现为它们设计的编码任务往往过于简单或者容易被overfit。一个好的编码任务应该具有实践性、有挑战性，并且易于评估。",
        "time": "01:10:51"
      },
      {
        "question": "好的编码任务应该具备哪些特点？",
        "answer": "好的编码任务应该具备三个特点：首先，具有实践性，不能仅做理论上的顶级研究；其次，具有挑战性，不能太简单；最后，需要易于评价，拥有一个良好的evaluation function。",
        "time": "01:10:31"
      },
      {
        "question": "目前的评估方法存在哪些问题？",
        "answer": "当前大部分评估方法如multiple choice QA、coding等对于agent task来说难以有效评估好坏，例如在判断web agent的表现好坏时很难做出准确评价。",
        "time": "01:11:25"
      },
      {
        "question": "Sleep Bench项目的初衷是什么？",
        "answer": "Sleep Bench项目的目的是构建一个既practical又chAllenging，同时易于评估的编码任务，解决当前编码任务中存在的问题，并确保数据稳定性，防止训练集对数据的污染。",
        "time": "01:11:48"
      },
      {
        "question": "思维agent的设计思路是什么？",
        "answer": "思维agent的设计基于对原有编码任务的反思，发现用单一sequence方式无法有效处理大规模代码的检查与修改。设计中采用reactive nation思路，重点在于设计灵活的动作空间（action space），让agent能够逐步探索和解决复杂问题。",
        "time": "01:15:25"
      },
      {
        "question": "思维agent与传统agent或auto GPT的主要区别在哪里？",
        "answer": "思维agent的主要区别在于其关注点和设计方法。传统agent如auto GPT试图构建一个通用且复杂的agent，而思维agent则专注于针对具体任务进行优化，通过打磨agent computer interface来适应特定任务需求，从而实现更好的性能。",
        "time": "01:17:23"
      },
      {
        "question": "Three Agent在解决Sweet Bench任务时相比以往解决方案有何提升？",
        "answer": "Three Agent通过执行结果反馈、编写unit test及多次尝试改写代码的方式，实现了对任务的精细化处理，这在很大程度上提高了解决编码任务的准确率，相较于其他方法有显著提升。",
        "time": "01:18:37"
      },
      {
        "question": "对于目前10%至12%的准确率，您认为接下来的目标和差距在哪里？",
        "answer": "目前认为大家对模型的能力估计偏低，预计GPT-4在经过适当优化后能刷到30%左右的准确率。随着技术和接口设计的进一步改进，预期最终可以达到更高的准确率，但仍需不断探索和完善。",
        "time": "01:23:12"
      },
      {
        "question": "在agent技术的应用中，为什么人们认为flier model的能力不足，但实际上它在防区某种信仰能力下还有很大的提升空间？",
        "answer": "这是因为从产品化的角度看，尽管在软件层面可以实现不错的展示效果，但将AI agent转化为用户能使用的实际产品时，需要更多关于产品设计的思考。例如，用户对于AI agent的期望反馈速度与当前以LM为基础的API相比存在较大差异，往往需要更长的时间来获得结果，这种特性在传统软件中较为罕见。",
        "time": "01:25:02"
      },
      {
        "question": "如何设计并交付这样一个不稳定且反应较慢的软件产品给用户，并确保他们能良好地交互并从中获益？",
        "answer": "这是一个复杂的设计挑战，因为它要求我们在保证软件质量的同时，还需考虑到用户的使用体验。例如，软件可能无法以高概率给出满意的结果，因此如何设计一套让用户愿意与其交互并有效利用其价值的系统是关键。",
        "time": "01:26:12"
      },
      {
        "question": "您从何时开始关注agent领域的研究，期间有哪些重要的研究进展？",
        "answer": "我在博士生时期就开始从事agent领域的研究，最早做的项目是一个基于文本冒险游戏的agent。后来意识到action space（行动空间）的本质区别在于其开放性和非标的特性，这促使我去思考反应（react）也是思考（reasoning）的一部分，并进一步认识到agent的核心包括action space和decision making两部分。",
        "time": "01:29:28"
      },
      {
        "question": "是否会出现专门针对agent优化的LM模型？针对agent的训练是否会产生新的、专门针对agent优化的模型？",
        "answer": "我的看法是，agent是一个较为宽泛的概念，不同的应用场景会催生出不同的agent需求。如果要开发一个通用目的的digital agent，可能不需要专门针对agent优化的LM模型；但如果要构建特定领域的垂直型agent，则可能需要专门设计和训练针对该领域的模型。这是一个伪命题。尽管有些公司重视agent中reasoning能力的提升，但目前看来，很难创造出一个真正能产生广泛价值且高度稳定的agent模型，因为实现闭环、可验证的行动路径并应用于复杂场景仍然面临挑战。",
        "time": "01:33:26"
      },
      {
        "question": "在软件中做的agent具体是做什么的？对于David项目，你最感兴趣的部分是什么？",
        "answer": "这个agent更早的时候我们发布的一个，它类似于code interpret，用户给它一个任务，它会在特定环境下运行。比如分析CSE，与David的版本相比，它没有那么多复杂性，而是一个具有preview依赖性的环境，会生成可运行的代码。现在我们正在做的A枕（或A诊），主要是为了帮助小白用户，他们可能完全不懂代码，当出现错误时，他们需要一个能控制好整个过程并能生成可用结果的agent。我最感兴趣的部分是他们展示了agent能够执行有失败存在的任务，并且在某些情况下，agent的成功并不能保证产品化过程会容易。尽管agent在某些场景下表现出成功，但在企业环境中应用时，可能需要面对更多的挑战和风险。",
        "time": "01:38:43"
      },
      {
        "question": "面对不熟悉编程的用户，如何处理bug或问题？",
        "answer": "我们考虑了“邦体”功能，即悬赏解决bug，这其实类似于deal states。用户可以悬赏解决某个bug，解决者既可以是人类也可以是另一个agent，以此来获得报酬。",
        "time": "01:40:27"
      },
      {
        "question": "你们的产品与研究课题之间的差异主要体现在哪些方面？",
        "answer": "差异主要在于产品需要考虑用户界面（UI/UX）的设计，尤其是针对小白用户时，与有coding能力的用户所需的产品设计会有所不同。本质上，研究更多是minimize human factor，而产品则是all about human factor。",
        "time": "01:40:53"
      },
      {
        "question": "大家初看David demo时的第一反应是什么？还有哪些自己特别想要了解的地方？",
        "answer": "第一反应是他们的发布比我们早，印象深刻的是他们让agent浏览web获取信息的能力，这是普通模型不具备的。此外，尽管他们的第一版本不能让用户修改代码，只能观察其运行，但通过聊天可以控制其行为，这一点很有趣。对于进一步了解，大家好奇他们如何将此作为一个产品去落地，包括目标用户群体（to c还是to b）以及如何包装产品。",
        "time": "01:43:13"
      },
      {
        "question": "在软件开发中，对于PR（Pull Request）的大小和质量，你们是如何看待和处理的？",
        "answer": "我们设计产品时会控制用户期望，确保给出的任务适合初级工程师，并且有较高的完成概率。比如一些简单的测试、debug等小任务可以分配给初级工程师，而更复杂的大任务则需要明确需求定义，可能需要更多交互和人工介入。对于agent（智能体）而言，它更像是合作伙伴，不仅负责执行任务，还会与人协作，在code base中共同工作，提供反馈和建议。",
        "time": "01:53:17"
      },
      {
        "question": "这种情况下，用户（即甲方）是否需要具备一定的专业知识？",
        "answer": "用户（甲方）不一定要非常专业，他们可以提出需求层面的问题，例如网站设计是否符合要求、页面效果是否需要改动等。这样他们才能得到最终符合期待的结果。",
        "time": "01:55:30"
      },
      {
        "question": "agent除了基本的coding能力外，还需要具备哪些能力？",
        "answer": "agent远不止是一个编码工具，它还应具备与人交流的能力，能够理解并解决用户的需求问题。",
        "time": "01:55:53"
      },
      {
        "question": "解决复杂数学问题的能力与解决程序设计问题的能力之间有何联系？",
        "answer": "解决奥林匹亚programme这类复杂数学问题可能更接近于基于模型推理的问题，需要对问题有一个深入的理解和想象，而程序设计问题可能更多涉及长复杂上下文处理和情境理解。这两者可能是互补关系，促进对模型能力的理解和提升。",
        "time": "01:58:15"
      },
      {
        "question": "是否可以想象一个世界，在这个世界中可以像雇佣人类开发者那样雇佣各种AI来解决不同的问题？",
        "answer": "是的，未来可能出现这样的场景，用户可以根据任务需求选择不同AI来解决特定问题，这些AI的过往表现记录就像真实的人类开发者一样，可供用户参考。",
        "time": "01:59:14"
      },
      {
        "question": "当前讨论中关于LM（Language Model）能力边界的问题，是否更多是因为模型自身能力不足，还是我们对如何释放其能力的认知不够？",
        "answer": "我认为LM能力的边界更多是由训练方式和使用方式决定的。prompt的设计本质上是模型使用的策略，通过调整训练方法和使用方式，可以在很大程度上影响模型的能力边界，并揭示出模型可能存在的慢思考能力。",
        "time": "02:01:09"
      },
      {
        "question": "根据我们现在使用模型的方式，接下来应该往哪个方向去改进？",
        "answer": "接下来的改进方向可能涉及到增强模型的自我评价能力，使其能够更好地判断和选择最优解，从而应对更复杂的任务，例如高级编程或AGI相关的任务。",
        "time": "02:04:15"
      },
      {
        "question": "在改进模型性能方面，你们提出了哪些具体方法？",
        "answer": "我们提到了两种方法。首先，通过改进search机制使网络在搜索时更加智能，比如使用更复杂的搜索算法。其次，是提升模型本身的sampling能力，即语言能力的增强。虽然IL（内部语言模型）是一个挑战，但好处在于如果你知道哪个指标在变好，就可以将其作为反馈机制的一部分。此外，目前有很多人利用之前训练过的语言模型去filter、sect训练数据，甚至生成新的训练数据，这是一个值得关注的发展方向。",
        "time": "02:06:43"
      },
      {
        "question": "能否简单介绍一下multi I agent系统的特点？",
        "answer": "multi I agent系统是一种前置工作，它类似于一个多用户共享的聊天界面，用户可以看到其他人的消息流，并与多个agent进行互动。我们的目标是构建一个情报接收系统，以便观察并理解各个agent在后台的工作情况，确保它们能与用户实时互动，如确认部署决策等。这个系统不仅让用户看到其他用户，未来还可能看到多个agent为其提供实时反馈，以协助完成整个任务。",
        "time": "02:08:10"
      },
      {
        "question": "对于multi agent system的定义以及为何需要它，你们怎么看？",
        "answer": "multi agent system本质上是为了利用更多的计算资源获得更好的效果，通过增加agent的数量来提升整体性能。当base agent足够强大时，mult agent的优势会更加明显。在不同场景下，multi agent可以有不同的职能分配，例如meta GPT中的不同角色，或者针对特定任务如代码生成、测试等使用专门的模型。设计multi agent系统面临的挑战主要在于如何将现有能力有效地传递给更多的人，让更多的人享受到这些能力带来的价值，同时也要关注前沿技术的研究和探索。",
        "time": "02:14:20"
      },
      {
        "question": "AI如何重新定义软件开发周期？",
        "answer": "AI将从设计的角度彻底改变软件开发周期。目前许多工具和实践是为人类开发者而设计的，但AI的出现要求我们重新审视和设计开发流程，例如版本控制系统git，它对AI而言可能并不理想。未来，从AI的角度出发设计软件开发工具和程序语言将是必要的变革。",
        "time": "02:18:15"
      },
      {
        "question": "针对当前的讨论，是否存在某些任务是AI技术无法替代，甚至需要人类进行重新设计的？",
        "answer": "是的，有些任务如与现实世界交互的部分，比如软件公司的AB test验证机制，这部分工作是一定会被持续进行的，并且可能需要人类去思考如何更好地设计和优化模型以适应这些场景。",
        "time": "02:19:45"
      },
      {
        "question": "在软件公司中，AB test（A/B测试）的作用是什么，是否会被取代？",
        "answer": "AB test在软件公司中主要用于验证模型答案的真实性，例如电商网站在进行页面改革后，需要通过实验来判断改动对真实业务的影响是正向还是负向。这部分工作是一定会被继续进行的，因为它无法被算法完全取代，需要实际的用户反馈和实验数据。",
        "time": "02:20:09"
      },
      {
        "question": "对于未来程序语言的发展趋势，尤其是全面集成各种功能的可能性？语言模型的发展如何影响社会和工作领域，以及教育体系？",
        "answer": "未来程序语言可能会变得更简单易用，比如通过像Copilot这样的工具，让用户能够更方便地调用各种来源的特性，减少重复工作。然而，这也意味着门槛可能会提高，但也有可能降低，让所有人都能编写出更好的程序。语言模型的发展可能导致部分教育领域被取代，例如第一层级的robustness（可靠性），第二层级的合作与沟通（collaboration），第三层级的探索（exploration）。具体来说，一些基于规则的任务可能会最先被取代，而需要与人打交道、具备人际交往能力的工作则较为难替代。长期来看，社会会适应这种变化，但短期内确实会对个人就业产生一定冲击。",
        "time": "02:23:34"
      },
      {
        "question": "在销售过程中，用户是否感受到来自学习新技术的压力？",
        "answer": "是的，在销售过程中，用户确实感受到了来自学习新技术的压力。这种压力不仅来源于社会普遍认为应该跟上潮流的心理，还有自媒体贩卖的焦虑情绪，导致大部分人在面对新事物时并不喜欢主动去学习和更新知识。",
        "time": "02:32:49"
      },
      {
        "question": "您是否有一些原本觉得很有意思、希望继续研究但未能进行的research项目？",
        "answer": "我特别喜欢的一个领域是社区方面的研究，但随着deep learning的发展，这类研究已经相对减少。此外，一些关于machine learning theory、graphical models等方面的研究也让我着迷，然而我发现很多做这些方向的研究者并不再专注于这些领域。",
        "time": "02:33:34"
      },
      {
        "question": "AI领域中，哪些结合其他领域的研究您觉得很有前景？",
        "answer": "AI与生物技术、医疗保健行业的结合是一个非常有前景的方向。例如，AI正在极大地加速生物技术和医疗研究，帮助研究员生成代码、预测实验结果，并指导他们下一步的研究方向。这不仅有助于缩短研究周期，还可能在未来几年内实现重大突破，比如延长人类寿命或攻克癌症等难题。",
        "time": "02:36:23"
      },
      {
        "question": "对于未来一年和三年内AI领域中最期待的事情是什么？",
        "answer": "未来一年内，最期待的是看到PT5模型的表现及其对编程领域的影响力；而三年期待的是通用目的计算机（AGI）的发展，尤其是其在自动驾驶、医疗保健（如delta k项目）等领域的进展，以及AI对音乐、艺术等领域的颠覆性影响。",
        "time": "02:41:56"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "探讨AI如何重塑软件开发与工程师角色",
        "summary": "本期节目深入讨论了AI，特别是AI代理如何影响软件开发领域和工程师的职业生涯。节目邀请了三位在各自领域具有代表性的嘉宾，包括来自独角兽级软件开发云平台的AI代理工程师、开源AI软件代理项目的作者，以及企业级AI编程辅助公司的AI研究员。讨论内容涵盖了最近的编程辅助产品、替代工程师的AI代理、基础大模型的边界，以及生成式AI对个人、职业和社会的深远影响。通过这次对话，我们希望能给听众带来对技术和产品之外的更多启发。"
      },
      {
        "time": "00:02:06",
        "title": "探讨AI对未来软件开发模式的影响",
        "summary": "本次讨论集中在AI，特别是AI编码辅助工具如何革新软件开发领域。讨论起始于几个月前，当时社区对Microsoft的Copilot等自动完成形态工具的关注较多。随着CogniLab推出的David编码代理的发布，引发了对AI在未来软件开发中潜在角色的新一轮思考。讨论中，特别提到了几位在该领域有发言权的嘉宾及其所在公司，这些公司代表了AI技术在软件开发中不同阶段的应用。此外，还探讨了具体的AI产品，如一家名为Sara的创业公司开发的产品CR Boss，该产品在客户服务业务代理方面实现了实际应用，展示了AI技术在实际工作中的可行性与影响。"
      },
      {
        "time": "00:06:08",
        "title": "赵宇哲分享在AI领域的探索与创新",
        "summary": "赵宇哲在一家专注于food star AI的创业公司工作，之前在Google从事研究工作。他对深度学习的实用性持怀疑态度，但对语言处理和AI的创造性应用感兴趣，特别是生成式AI模型和对话系统。他提到，最令他感兴趣的是能够日常使用自己公司产品的想法，同时也对视频生成技术保持关注。赵宇哲强调，实验性和创造性是他在AI研究方向中追求的核心。"
      },
      {
        "time": "00:09:56",
        "title": "李珍分享在Replay的工作和职业经历",
        "summary": "李珍介绍了自己目前在B轮融资的创业公司Replay的工作，该公司主要提供一个线上IDE，特别适合初学者。她提到公司的愿景是让每个人都能成为软件创造者，即便他们并非专业程序员。李珍还分享了自己从北京航空航天大学本科毕业后，在Google工作五年，主要负责推荐系统，之后转到TikTok工作一年的经历。她也谈到了自己对创业的思考，以及如何从Google和TikTok的经验中寻找创业方向。最后，她提到加入Replay的动机，是看到该公司在AI和软件开发模型方面的潜力。"
      },
      {
        "time": "00:15:42",
        "title": "Bill Space和Good Space：连接想法与实践的桥梁",
        "summary": "Bill Space是一家由H16C投资的公司，最初以学校形式存在，专注于教育人们如何启动和产品开发。今年，他们推出了Good Space，一个平台，旨在帮助有想法的人连接到能够帮助他们实现这些想法的人。该平台通过对接有需求的用户与可以提供帮助的个人或公司，从而实现资源的有效匹配。此外，Bill Space也举办孵化器活动，以六周的时间帮助人们实现梦想，不仅限于软件开发，也包括漫画创作、歌曲写作等。通过这些举措，Bill Space在创业教育和社区建设方面发挥了重要作用。"
      },
      {
        "time": "00:20:25",
        "title": "独角兽公司引领AI在软件开发领域的创新",
        "summary": "一家成立五六年的独角兽公司，融资超过两亿美金，专注于通过AI技术革新软件开发流程。公司提供云端代码平台，支持多人协作，特别受教育用户欢迎。其AI产品包括代码补全工具和AI聊天机器人，帮助开发者高效编写和调试代码。此外，公司还解决了开发环境配置的难题，提供云端标准化环境设置，极大地简化了开发流程。"
      },
      {
        "time": "00:24:31",
        "title": "软件开发平台集成与AI技术应用",
        "summary": "在软件开发领域，将整个开发周期的各种功能集成到一个平台中，可以极大地优化用户体验，尽管这也意味着一个公司需要承担起其他公司所做的事情。通过引入AI技术，如自动代码补全和AI辅助聊天，可以显著提高开发效率。特别地，将原本付费的AI功能免费开放给所有用户，即使是未注册的用户也能享受到代码补全和AI聊天服务，体现了公司希望让更多人能够利用AI创造软件的愿景。此外，为了支持大量用户需求，公司训练了自己的代码补全模型和代码修复模型，致力于通过更小、更快、更经济的方式服务更多的用户。"
      },
      {
        "time": "00:28:58",
        "title": "探讨专业Coding模型的必要性与优势",
        "summary": "对话集中于是否需要专门的Coding模型，以及这些模型相对于通用基础模型的优势。讨论指出，虽然市场上存在众多为Coding设计的模型，但这些模型的出现主要是出于效率和成本的考量，特别是在满足特定用户群体如citizen developer的需求时。对于企业用户而言，数据的安全性和质量成为选择特定模型的重要因素。此外，专业Coding模型的存在反映了学术界和行业对代码生成和理解的特殊兴趣，以及在特定任务上对性能优化的需求。最后，讨论强调了开源数据的质量和许可问题，以及企业对于模型数据隐私和安全的关注。"
      },
      {
        "time": "00:36:12",
        "title": "探讨编程模型在人工智能发展中的重要性",
        "summary": "对话集中讨论了编程能力在人工智能模型，特别是大型语言模型（LLM）中的重要性和应用。参与者讨论了如何利用编程数据提升模型性能，以及这些模型在处理复杂任务，如代码生成和算法解决中的潜力。此外，还提到了一些具体的模型，如GPT-4和Lama，及其在编程相关任务上的表现。特别强调了高质量编程数据对于模型预训练的重要性，以及如何通过专业的程序员生成这些数据。整体上，讨论强调了编程能力对于实现AGI（通用人工智能）目标的必要性，并认为在未来，模型的编程能力将是评价其智能水平的关键指标之一。"
      },
      {
        "time": "00:40:45",
        "title": "探讨代码补全与AI模型训练方法",
        "summary": "讨论重点在于如何利用特定训练方式提升代码补全功能，并分析这些方式是否适用于基础模型的训练。讨论中提及，代码补全任务不仅依赖于上下文信息，还涉及到预测中间句子的内容，这与直接预测下一个token有所不同，导致训练效率低下。此外，还讨论了将AI应用于解决复杂数学问题的潜力，以及coding数据在模型训练中的重要性。最后，就最强模型是否应该依赖更多coding数据进行训练，以及如何有效利用这些数据进行了深入讨论。"
      },
      {
        "time": "00:45:26",
        "title": "探讨AGI对未来软件开发的影响及产品设计",
        "summary": "对话集中在如何将AI，特别是AGI（通用人工智能），集成到软件开发流程中，以及这种集成对未来产品形态和设计的影响。一方面，讨论了降低上手成本、提供一站式解决方案的优势，以及现有工具和插件对于非专业用户的重要性。另一方面，探索了AGI技术进步可能带来的变革，如AGI在云端API的帮助下完成开发、测试、部署等任务，以及这如何改变开发工具和平台的设计。此外，还讨论了未来用户与AI协作的模式，以及不同技术水平用户对工具和平台的不同需求。最后，提出了对于未来决策过程可能由AI主导的设想，以及这将如何影响开发者和非技术用户的选择。"
      },
      {
        "time": "00:51:11",
        "title": "初创公司开发服务于专业编程工作者的插件",
        "summary": "一家初创公司专注于为企业的专业编程工作者提供插件形态的产品，旨在通过深入理解工作流程和代码基础，提高工作效率。产品设计理念围绕实现最小化工作流的改变，注重代码补全、部署以及AI辅助等功能，特别是部署功能的增长速度显著。此外，还强调了产品需深入理解用户代码和工作场景，以及通过AI技术在各种平台功能上的集成和应用，以满足专业人士的高级需求。"
      },
      {
        "time": "00:55:24",
        "title": "企业级AI需求满足与RAG技术挑战",
        "summary": "在满足企业级需求时，了解企业的特定需求是关键。企业通常拥有大量的专有数据、文本和特定的业务场景，使得通用的AI模型难以直接适用。为了应对这一挑战，RAG（Retrieval-Augmented Generation）技术被用来提升模型的表现，通过从企业特有的大量语料库中检索相关信息，为模型提供额外的上下文信息，从而提高其在特定任务上的性能。然而，这一过程面临的主要挑战是如何有效地评价RAG技术的效果，特别是在代码理解和生成方面，因为对于哪些文档与特定问题最相关，往往难以直接做出判断。此外，对于企业级应用而言，模型的评估和验证变得更加复杂，因为需要考虑到企业数据的专有性和多样性。"
      },
      {
        "time": "00:59:42",
        "title": "提升企业级应用中的准确率挑战",
        "summary": "在讨论中，参与者指出了在企业级应用中，特别是针对Google Nest和Google Call等服务，准确率的提升是一个重大挑战。尽管许多解决方案声称具有一定的准确率，但实际应用中，这些准确率往往无法满足生产环境的需求，特别是在追求99%准确率的高标准下。讨论强调了现有技术与理想准确率之间的差距，并探讨了通用模型与特定任务模型之间的差异。特别提到了针对特定场景（如法律场景）定制的嵌入模型的重要性，以及企业客户对定制化解决方案的需求。此外，还讨论了模型训练的数据来源问题，指出基于用户行为的数据相较于文本含义数据可能更为有效。最终，强调了即使在不同任务和数据集下，通过针对性优化，模型性能仍有可能得到提升。"
      },
      {
        "time": "01:04:59",
        "title": "探讨AI模型在企业应用中的通用性和特殊需求",
        "summary": "对话中讨论了AI模型在不同企业应用中的通用性及其面临的挑战。提到企业AI不仅仅是应用当前的AI浪潮，还涉及到如何使模型适应特定需求的挑战，如代码编写和文档检索等任务。指出尽管AI模型在处理大量数据上有潜力，但在实际应用中需要针对具体任务进行定制化，且长期和短期模型各有优势，需要根据实际情况选择。同时，强调了即使有强大的模型，也需要从外界获取信息，凸显了搜索和检索的重要性。"
      },
      {
        "time": "01:09:37",
        "title": "探讨编码挑战及SleepBench的引入",
        "summary": "讨论重点在于编码评价的难点和SleepBench的推出，旨在解决现有编码实践中的不足。SleepBench针对的是现有的编码评测方法存在的问题，如不实用、挑战性不足、难以评价等。它通过实际的GitHub Pull Request任务来测试编码能力，这些任务挑战性高、易于评价、数据稳定且可防止数据集污染。通过SleepBench，可以更有效地评估编码质量，为编码评价提供了一种新的、实用的方法。"
      },
      {
        "time": "01:13:48",
        "title": "思维Agent在软件开发中的应用与挑战",
        "summary": "讨论集中于一种新型思维Agent在软件开发任务中的应用，特别是如何处理复杂问题和全链路解决方案。提出了一种基于Agent的计算机接口（ACI），以改善Agent执行任务的效率和准确性。指出传统方法在处理大型代码库时的局限性，并通过实际案例展示了思维Agent能够通过反复执行和测试来显著提高解决方案的准确率。此外，讨论了使用GPT-4作为基础模型的Agent在代码修复任务上比其他模型有显著优势，强调了反馈循环在提升Agent性能中的重要性。"
      },
      {
        "time": "01:20:27",
        "title": "探讨Agent框架及应用：从Auto GPT到特定任务优化",
        "summary": "随着Agent概念的兴起，讨论集中在Auto GPT和BBIGI等框架上，旨在将Agent复杂化以应对各种任务。然而，这种通用型Agent在实践中的效果并不理想，因为其过于复杂，导致在一般环境下的性能不佳。讨论中，提出了与David相比的不同之处，强调了产品和研究项目之间的差异。特别指出，研究项目侧重于针对特定任务的Agent优化，而非追求一个通用的解决方案。同时，强调了在构建Agent时，接口设计与Agent设计的结合对于提升性能至关重要。此外，讨论还触及了关于如何使这种新型Agent与用户有效交互，以及如何在不稳定的结果下提供价值的挑战。最后，提到了舜宇在Agent领域的工作，从React开始，暗示了对Agent研究的持续关注和贡献。"
      },
      {
        "time": "01:27:14",
        "title": "探索文本冒险游戏中的Agent开发",
        "summary": "从2019年开始，发言者在文本冒险游戏中开发Agent，这在当时是一个较为小众的领域。他觉得与视频游戏或机器人相比，基于语言的环境Agent更接近推理和智力的本质。他指出，生活更像是一个文本，决策往往是开放式的。此外，他强调了思考在行动选择中的重要性，并提出传统的Agent开发缺乏对思考的模拟。通过在概念和实践中的深入，他意识到Agent的本质在于行动空间和决策制定，提出了将推理、行动和记忆相结合的模型。最后，他讨论了关于是否需要为Agent专门设计语言模型的问题，认为目前大多数工作是在不改变基础模型的情况下，通过推广方法来实现，并强调了未来应将Agent的体验反馈到模型设计中，推动技术进步。"
      },
      {
        "time": "01:35:03",
        "title": "探讨编码代理及用户交互对提升编程能力的影响",
        "summary": "对话中讨论了编码代理（coding agent）的优点，特别是它能够产生可自我验证的行动路线，形成闭环。这种能力使得编码代理能通过一系列操作完成任务，并生成正面的训练数据。讨论还涉及了如何利用用户在平台上的行动路径进行更多研究，以及如何通过编辑记录（OT格式）解决冲突问题。此外，探讨了如何帮助编程新手通过控制编码代理来生成可用代码，以及如何利用悬赏机制激励社区解决bug。最后，讨论了产品设计中human loop的重要性及其在研究与实际应用中的不同考虑。"
      },
      {
        "time": "01:42:26",
        "title": "对竞争产品的分析与评价",
        "summary": "讨论者首先表达了对于竞争对手发布产品早于自己的惊讶反应，并对其进行了细致的分析。他赞扬了该产品能够允许代理浏览网页以获取更多信息的功能，认为这是非常有益的信息补充，尤其对于提升代理的信息获取能力和自我验证能力至关重要。此外，他还指出该产品在与用户交互方面存在的限制，比如不能让用户修改代码或通过聊天完全控制代理，表达了对这种设计决策的惊讶。尽管如此，他认为正确的方式应该是两者兼备，并推测这可能是为了限制某种功能的使用范围所作出的设计决定。"
      },
      {
        "time": "01:44:46",
        "title": "探讨人工智能产品的市场定位与产品化挑战",
        "summary": "对话集中于人工智能产品，尤其是Agent类产品的市场定位、目标用户群以及产品化过程中遇到的挑战。讨论者对产品是面向编码新手还是有经验的开发者，以及如何将这种技术转化为实用的产品并成功推向市场表示了好奇。同时，他们也关注于产品如何从一个成功的demo转变为实际可用的产品，强调了进行实际应用时面临的风险和挑战。此外，还提到了对某些特定功能，如PR审查和项目构建的期待，以及如何通过模型建议编辑和扫描口碑来改进这些功能。讨论还触及了创业公司不以盈利和产品为直接目标的风险，以及将研究成果转化成产品的可能性。"
      },
      {
        "time": "01:49:44",
        "title": "探讨代码自动生成与评价的挑战",
        "summary": "对话集中在代码自动生成、评价及其在实际应用中的挑战。讨论指出，尽管基础模型在生成代码方面取得了一定进展，但仍然存在准确率和质量评价的问题。特别是在将这些技术产品化时，需要解决如何提高代码生成的准确性和如何有效评价生成代码质量的难题。此外，还讨论了代码自动生成技术在企业环境中的应用潜力，包括对不同难度任务的处理和与人类开发者的协作模式。对话强调了对任务难度、质量评价标准和人机协作模式的深入理解和设计的重要性。"
      },
      {
        "time": "01:56:45",
        "title": "探讨模型在解决复杂问题中的应用与局限",
        "summary": "对话集中在两个不同的问题解决领域：一个是处理复杂数学问题的奥林匹克项目，另一个是解决现实世界问题的模型。讨论重点在于这两种问题解决方式的区别，特别是在处理长而复杂的情境、短而具体的挑战、以及基于grounded和creative reasoning的问题时的差异。此外，还探讨了这些能力与基础模型能力之间的相互作用，及其在理解和应用中的局限性。特别提到了对于语言模型（LM）能力边界的理解，以及如何通过改进提示来更好地释放这些模型的能力，这表明了对于当前LM不足的认识可能存在误解，实际可能是未能有效利用其潜能的问题。"
      },
      {
        "time": "02:01:09",
        "title": "探讨模型训练与使用的相互影响及未来发展方向",
        "summary": "对话集中在模型的训练和使用方法上，强调了如何使用模型以及模型的训练方法对于发挥其能力的重要性。提出模型的使用应形成闭环，使用方法对训练模型产生影响，以便更好地释放模型的潜力。讨论了通过不同的使用策略，可以获得对模型改进的启示，特别提到了利用prompt来实现更复杂的思考过程的可能性。同时，指出了当前模型在自我评估能力上的不足，以及未来改进的方向，包括提升搜索策略的智能性和增强模型本身的预测能力。"
      },
      {
        "time": "02:07:13",
        "title": "多智能体系统及其在AI聊天中的应用",
        "summary": "讨论集中在多智能体系统（Multi-Agent System, MAS）的概念、在AI聊天中的应用及其对提升用户体验的重要性。在AI聊天中引入多用户互动功能被视为开发MAS的前置工作，强调了能够让用户看到后台多智能体工作的界面设计重要性。此外，还探讨了将不同职能的智能体（如项目经理、工程师等）集成到系统中以执行复杂任务的想法，以及如何通过精细化的任务分配提高系统的整体效能。最后，指出设计MAS时面临的挑战，特别是在确保各智能体高效协作、资源分配及提升整体系统性能方面。"
      },
      {
        "time": "02:15:16",
        "title": "探讨AI模型的实际应用与未来发展",
        "summary": "对话中讨论了AI模型在实际应用中的挑战，强调了将现有模型的能力充分传递给用户的重要性。一方面，需要将模型的潜力转化为用户可实际体验的价值，让更多人享受到模型的全能力；另一方面，从研究的角度看，应不断提升模型的能力。同时，强调了产品设计和研究方向的紧密联系，以及对AI技术未来发展的展望。"
      },
      {
        "time": "02:17:48",
        "title": "AI对软件开发生命周期的重塑",
        "summary": "讨论集中在AI如何重新定义软件开发的整个生命周期。观点包括AI将从根本上改变开发工具、编程语言及IDE的设计，强调虽然目前尚未明确需要哪些根本性的重新设计，但AI的发展促使人们重新考虑从AI的角度出发进行软件开发。特别提到了Git等工具的可能演化，以及编程语言如C++的未来演变。同时，讨论还触及了AI在提高开发效率、降低编程门槛、促进编程普及等方面的作用。最后，触及了AI在解决社会问题、提升软件社会影响力方面的潜力，以及AI技术在特定任务上的优势。"
      },
      {
        "time": "02:25:59",
        "title": "探讨人工智能对未来工作和社会的影响",
        "summary": "讨论集中在人工智能（AI）技术如何逐步影响和取代某些类型的工作，以及这对个人和社会可能带来的长远影响。首先，讨论了一个金字塔模型，预测教育领域中最易被AI技术取代的部分，强调了robustness（稳健性）、collaboration/communication（协作/沟通）和exploration（探索）的重要性。指出，最初可能被AI取代的工作是那些需要接收信息但同时要求高度可靠性的岗位，如客户服务和一些法律工作。随后，讨论转向了AI技术如何改变了研究和开发的性质，特别是在“生成式AI”领域的进展如何影响了传统研究方法和工业。特别提到了个人在这一变革中的体验，强调了AI技术带来的巨大社会影响及其对未来就业市场的潜在影响。最后，讨论了社会对AI技术的接受度和学习新技能的压力，以及这种技术变革如何在不知不觉中影响了人们的生活和工作方式。"
      },
      {
        "time": "02:33:24",
        "title": "AI技术在生物技术和医疗健康领域的应用及影响",
        "summary": "对话中讨论了AI技术在生物技术和医疗健康领域的创新应用，特别是如何通过AI加速药物研发和延长人类寿命的潜力。此外，也探讨了AI对研究工作流程的改善，如通过预测模型帮助研究人员确定下一步的研究方向。对话还触及了AI在不同领域的研究和应用情况，包括社区研究、机器理论和图形模型等，同时指出了在硅谷和东岸对AI讨论的不同焦点，强调了AI与生物技术、医疗保健结合的未来前景。"
      },
      {
        "time": "02:39:12",
        "title": "AI领域研究者分享目标与期待",
        "summary": "在本次对话中，研究者们分享了他们在AI领域的个人目标，包括希望通过自己的项目帮助非编程人士创造并销售软件，以及维持对工作的热情和对团队的爱。他们还讨论了个人兴趣，如篮球、阅读、滑雪和街舞等，以及对AI未来发展，特别是通用计算机应用、AGI和医疗保健进展的期待。此外，还特别提到了对未来技术如GPT5的期待和对音乐产业可能被AI颠覆的展望。最后，通过一段说唱展现了研究者们多才多艺的一面。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "提高开发效率"
                    },
                    {
                      "children": [],
                      "content": "减少编码错误"
                    }
                  ],
                  "content": "特点"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "IDE插件"
                    },
                    {
                      "children": [],
                      "content": "云端开发环境"
                    }
                  ],
                  "content": "应用场景"
                }
              ],
              "content": "代码补全"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "提供代码建议"
                    },
                    {
                      "children": [],
                      "content": "自动完成常见任务"
                    }
                  ],
                  "content": "特点"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "企业级开发"
                    },
                    {
                      "children": [],
                      "content": "初学者教育"
                    }
                  ],
                  "content": "应用场景"
                }
              ],
              "content": "AI编程辅助"
            }
          ],
          "content": "代码补全与AI编程辅助"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "执行特定任务的程序"
                    }
                  ],
                  "content": "定义"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "代码生成"
                    },
                    {
                      "children": [],
                      "content": "代码审查"
                    }
                  ],
                  "content": "功能"
                }
              ],
              "content": "AI代理(agent)"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "多个AI代理协同工作"
                    }
                  ],
                  "content": "定义"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "复杂项目管理"
                    },
                    {
                      "children": [],
                      "content": "分工合作开发"
                    }
                  ],
                  "content": "应用场景"
                }
              ],
              "content": "多代理系统"
            }
          ],
          "content": "AI在软件开发中的角色"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "高质量训练数据的获取"
                    }
                  ],
                  "content": "数据质量"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "适应不同场景和任务"
                    }
                  ],
                  "content": "模型泛化"
                }
              ],
              "content": "挑战"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "更智能的代码生成"
                },
                {
                  "children": [],
                  "content": "无缝集成开发流程"
                }
              ],
              "content": "未来展望"
            }
          ],
          "content": "AI编程辅助的挑战与未来"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "高质量、定制化需求"
                    }
                  ],
                  "content": "企业级需求"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "开源模型的限制与潜力"
                    }
                  ],
                  "content": "开源与社区"
                }
              ],
              "content": "多元视角"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "content": "互补而非替代"
                    }
                  ],
                  "content": "人类与AI的协作"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "content": "新兴技能的培养"
                    }
                  ],
                  "content": "教育与培训"
                }
              ],
              "content": "AI编程的未来"
            }
          ],
          "content": "对话中的观点与想法"
        }
      ],
      "content": "对话脑图摘要"
    }
  }
}