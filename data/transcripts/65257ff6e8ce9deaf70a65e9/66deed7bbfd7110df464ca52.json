{
  "pid": "65257ff6e8ce9deaf70a65e9",
  "eid": "66deed7bbfd7110df464ca52",
  "title": "【限免】自从用了Cursor，程序员再也不怕失业了？｜AI创投内参会",
  "task_id": "yg7k9wo5g8grnxwd",
  "transcription": [
    {
      "time": "00:00:00",
      "text": "我并不觉得curse r是因为他做出什么很新的智能能力，程序员的核心的目的是为了背锅。就是你核心目的是说你这个东西出问题的时候，确实有人能修修不了就滚蛋，能修就留下来。如果你想要干掉程序员，这就代表就是程序员很多的问号。你得有你怎么样用你的语言描述清楚你想要的那个具体的软件。我觉得很多老板会认为这是很简单的事情，但其实语言的使用成本是很高的。你想的东西和你写出来的东西是不一样的。如果你有办法用语言把这个问题描述的很清楚的话，你会发现你使用的语言惊人的跟编程很接近。",
      "speaker": "发言人1"
    },
    {
      "time": "00:00:38",
      "text": "如果你想用好科技这样的一个东西，首先你要是一个好的教练，你要知道说你要什么怎么做错了怎么改。对AI的使用门槛是非常高的，因为它是一个input跟output一个过程。如果你要output的质量好的话，你的input的质量要更好才行。",
      "speaker": "发言人2"
    },
    {
      "time": "00:00:56",
      "text": "一定是从背锅最少场景的和角色上。比如说大家都讲到背锅最少的场景上，背锅最少就是MVP。你做的一坨屎不要紧，你说写写烂了不要紧，丢了就是对他写到了不要紧。对你没人管，你只需要管你给图示人演示的那个，或者你给你的种子用户衍生那台电脑上，不要报警。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:17",
      "text": "我并不觉得curse r是因为他做出什么很新的智能能力。它现在这么火，它的这个hip 1部分是来自于特定的用户使用案例，可以让它看起来非常的牛逼。比如说可能大家都看过什么八岁小女孩。然后第二个点是跟测试团队没关的，是因为cloud 3.5的代码能力是显著提升的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:01:37",
      "text": "有很多创业者他会找轻的东西，还有很多创业者会去找特别重的，就难而正确的事情，我觉得这是不对的。这事情要辩证统一。AI是解决的那个轻的部分，就是像cursor这个东西，可能就会让我觉得用自然语言我就能够很轻松的写出代码，这是轻的一面。但是他做得好的那一面是他把重的事情也做了，就他把编辑器给做了，就他重构了这个编辑器，重构了编写代码的工具。加上一个AI的体验，然后让你觉得他有未来。甚至我觉得未来做AI最有可能成功的还是那些原本就在线下有非常强的根基，非常强的这种地面能力的公司，加AI它的成功概率会更高。",
      "speaker": "发言人2"
    },
    {
      "time": "00:02:22",
      "text": "真正的native的产品，真正的巨大的机会，它的市场是涨出来的。不可能说你在你闯进了一个很大的市场，然后是我能靠AI重新做完任何一次都不会移动互联网PC都不会见。对，真正的市场一定在新的技术上面长出来的。所以一定是已经在做成熟市场的那些人，快速的加上AI build出一个很有害很多人愿意试的东西。因为大家都愿意试ai就是这一波跟之前我觉得最不一样的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:02:55",
      "text": "还是要去照例介绍一下gas。因为像我们的新朋友，gas虽然是我们很早期的家，但是新朋友可能对你不太了解。上次我们介绍的时候，当时还在中科大读博士是吧？那会儿对，然后奇迹论坛那会儿你正好也是第二次入选项目。对后还有包括腾讯的一些项目什么的。所以这一快一年过去了，你有没有什么新的要跟我们分享的，要补充介绍的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:03:18",
      "text": "过去一年其主动分享的话就是我去了一个新的创业公司，然后那个创业公司整体比较低调。但是他的主要的新闻就是他融了特别多的钱，叫慕言智语，然后是在北京的一个公司。对我这段时间主要在做的一般都是像这种微调模型这一块的东西关注的比较多。然后还有就是这种A卷或者RAG的这样的一些平台的构建，然后看的也比较多。对，这个主要是从我们自己的产品内部其实需要的一些方向。",
      "speaker": "发言人1"
    },
    {
      "time": "00:03:50",
      "text": "咱们就是直接开聊。首先你肯定是我们这几个里面最熟悉这个产品的对吧？第二来讲的话，你专门为他也写了文章，然后来分析他们。所以我其实今天代表完全不懂的人问两个问题。第一就是作为一个程序员来讲，或者作为一个真正的资深的使用者来讲，你觉得你对他的依赖度是轻度、中度、重度，还是硬度差不多。就是说你可以先从这个角度给我们一个概念。然后第二来讲的话，你觉得他是不是AI工具的一个方向，或者在编程方向，就是AI使用的一个方向，就是我我想知道你这两方面的一个看法。",
      "speaker": "发言人3"
    },
    {
      "time": "00:04:23",
      "text": "对，那首先第一个问题的话就实话实说，就是我对他使用是轻度。对，因为我对于我自己需要做的事情上面的话，我其实比较熟练的。所以很多时候AI的那个网络速度还不一定我脑袋的速度快。所以所以第一个点就是轻度使用，这是实话实说。对，然后其实我觉得刚刚修哥讲那个观点，我觉得我非常认可。",
      "speaker": "发言人1"
    },
    {
      "time": "00:04:48",
      "text": "就是curse r他现在最近热度这么高，其实这个项目已经做了快一年多了。然后这个团队自己本身可能都已经做了两三年，也配备过。我并不觉得curse r是因为他好像说比如说做出什么很新的智能能力。我觉得我的我的认知就是说他现在这么火，他的这个hip 1部分是来自于特定的用户使用案例，可以让他看起来非常的牛逼。比如说可能大家都看过什么八岁小女孩，对，是对对对，每个人都基本都应该看过了。对，这有个hib。然后第二个点是跟科学团队没关的，是因为cloud 3.5 unit这个的代码能力，它虽然比如说没有直接在benchmark上面可能是说更能干掉谁。但是cloud 3.5的代码能力是上Sunny的这个版本是显著提升的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:05:39",
      "text": "所以其实就如果比如说你去国外，就是平时会逛ready的或者hiker news的话，你会发现有些人他不用curse，他选择用的是cloud的那个VSQ插件。就是VS code也是一个写代码的地方，然后开放的一个环境。对，然后cloud也有个自己的插件叫cloud点def也是说用cloud类似于实现像github copy er这样的一个效果。很多人是说上上写不出来的东西，我用cloud def可以写出来。然后有些人说你不要用cursor，你使用cloud点that。所以cursor的能力，我自己认为实话实说也是来自于基模的提升。所以并不是说说curse OK这个团队真的多厉害，做出了一个只有他能写出来的东西，然后别的写不出来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:25",
      "text": "就curse它本质上体验的一个提升，其实来自于的是API能力的提升，就是那些新的模型的提升。第一相当于对修哥讲的这件事情的一个认同。对，就是没有必要去神化current或者神话这个产品。然后第二个点的话，我觉得我的答案也是肯定的，就是cursor或者说这样的产品一定是AF就变成了下一步。",
      "speaker": "发言人1"
    },
    {
      "time": "00:06:51",
      "text": "具体来讲的话，我不是说curse现在正在正正在走在正确的路上，而是curse背后的理念是对的。因为其实科技他们的创始人二三年接受过采访，然后大家都很不解说。现在市面上那么多开源的代码浏览器，VSQ基本就是已经dominate，就是呃主导了程序员的这样的一个每天的使用的软件。为什么你要重新做一个IDE？为什么你不做一个插件？其实他们团队的看法也很明确，就是这里有个比较有意思的事情就是可以先插入一下。然后其实也导致了为什么我认为curse r这种一定要做一个自己的编辑器，然后在编辑器上做这种功能修改是必要的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:07:37",
      "text": "所以这里有个小小趣闻，首先一个背景知识是github VS code和微软是一家。对，他们都是微软。对。刚刚老师讲的他很爱用github的那个可拍的，然后他也提了说在口拍里面他觉得非常有厉害的一个场景就是ghost tax。你在写，比如说这方面给贤哥同步一下，那个到底是什么意思？就比如说我写代码，我可能我一个代码，我这个功能是一个函数，对吧？这个函数可能有十行代码。然后ghost test就是说你打完这个函数的名字之后，它会在底下的十行里面给你显示出来一个很淡的代码。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:15",
      "text": "告诉你们这是copilot图补全的，你只需要点一下tab，它就会把这个代码实际编到这个里面来。对，明白，像ghost的颜色灰灰的对对对对，这个是一个功能。对，然后你知道一个很搞笑的一个点是说VS code是不支持这个功能，就是在copilot出来之前，所以他们是copilot。Github copilot这个功能是几乎同时上线，就是VSO的核心团队是为了copilot个产品开发了这个显示。",
      "speaker": "发言人1"
    },
    {
      "time": "00:08:44",
      "text": "功能而让道了。对。",
      "speaker": "发言人3"
    },
    {
      "time": "00:08:45",
      "text": "是的，是联动起来了。那个的点如果did have在没有被微软收购之前的话，他需要花很长时间才会让VSO团队重视这件事情，或者说为他们做这个产品体验。但因为他们现在三个是一家的，所以其实curse我的走的一个正确路上，就是说他借鉴了一个他借鉴了比较开放的一个编辑器的生态，但是他还是决定自己做一个IDE。",
      "speaker": "发言人1"
    },
    {
      "time": "00:09:12",
      "text": "他不是说简单的说我在做一个插件。对，因为其实就像是我今天看小苏写的帖子有讲到，就是写代码其实一个非常看重程序员就非常看重程序员体验的一个地方。如果你有哪里稍微有一点不好，可能就是说你写代码因为一写就写几个小时，各种不好堆积起来，他会很快让你放弃你这个产品。如果你没有办法完全掌控你这个编辑器的这样的一个平台的可控权的话，你是没办法你这个体验一直做的很好。因为你会一直受制于你的那个平台，比如说VS co对，所以我就磕sr干了一个很对的事情，就是说他确实做了一个比较难的事情，就是OK我确实要做一个新的编辑的平台。我知道这会让我的转化率下降，这会让很多人不愿意从VSQ迁移过来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:01",
      "text": "但是没办法，我觉得这个方向是对的。就是最后胜出的产品一定不是一个插件。因为就是我觉得AI辅助编程这件事情，它在很多个地方都有很细节的体验优化。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:13",
      "text": "比如说我用cursor，其实我可能会是零度用户，就是我根本不会用。Curse只有一个功能把我留下来了，就是他支持你在对话的时候直接把你的那个代码merge回去。就是你在跟一个AI聊天的时候，他会告诉你说OK你这段代码要这么改，它会显示一个代码框。他那个功能就是说他支持你把他的这段代码直接merge回去。而且他这个merge不是完全替代，他会用一种很程序员的方式就是git merge。他会去检查他写的这段代码和你原本的代码之间的差异是哪里。他会告诉你说这一行没差，这一行有差，你要不要选择merge这一行，这个就是一个很有很有know how的一个事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:55",
      "text": "这个非常好啊。",
      "speaker": "发言人4"
    },
    {
      "time": "00:10:57",
      "text": "对对对，我就是因为这一个功能会留下来。",
      "speaker": "发言人1"
    },
    {
      "time": "00:10:59",
      "text": "我马上也要为被这个功能留下了。我现在原来还找不到留下我的功能，因为我我写代码写的少，但是你说的这个功能在k tub那边就做的不好。因为它它是新建议的那块代码，之后它是整个代码块给你硬塞回去，或者是说给你在原来的代码块重新开一个新的。那他会有很多dup k的很多重复的代码，但他最后得变成自己墨迹了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:11:21",
      "text": "自己墨迹这个事情就工作了，就加倍了。对他有对，因为他他本身AI生成，他相当于是有很多人的代码风格在里面。你如果给我重新写一段新的，我要去和原来那一段的时候，这个显然是要费劲的。特别是我的像我这种半半成品的AI产品经理写的，我基本上大多都是AI写的代码。那他这个合成的时候是我自己人工去merge或者debug的时候，其实我还是蛮费劲的。这个是我确实现在用get up的时候是一个痛点。",
      "speaker": "发言人4"
    },
    {
      "time": "00:11:54",
      "text": "我如果碰到说刚才gas讲的那种情况，有一个很重要的功能必须得。他这个chat的这块部分，他告诉我一个新的写法，然后我发现他这个真的是很好。我就只我最好我一般都是重写了，我就把所有东西从自己人工重写了。它因为它没有自动merge的这种，就刚才gas用的那个词，那个是程序员很知道的merge这个词。",
      "speaker": "发言人4"
    },
    {
      "time": "00:12:16",
      "text": "Merge就是你不是简单的那个copy pace，一定是根据你原来的代码里面风格也好，或者你原来设定的很多变量环境，上下文的一些东西做出合适的取舍去写进去的。这个是一个非常程序员的好的一个事情，就是我原来我现在在用k top的时候，最花时间的之一应该也是这个方面。对我刚好补充一下。",
      "speaker": "发言人4"
    },
    {
      "time": "00:12:39",
      "text": "对对对，然后正好修哥之前也提到，他很好奇Chris的核心用户。其实我也好奇，然后我觉得AI辅助编程会有一个点，就是我认为坚持用curse的人肯定会比坚持用copa的人要少。目前这个阶段一定的，因为扣拍了，就像你说第一个它收费便宜，这第一个点。第二点是说github copilot依托一个非常大的平台，是对，因为它叫github copal。然后你只要上github，它就会告诉你说开个口快了。所以anyway他的增长手段远远好于可以上天天在拉新。第三个点是github的github一个github pilot。个很轻的产品，这其实有优势也有劣势。如果你想像percent那样，整个流程都包在自己的产品里面，你就会面临一个问题，就是AI辅助编程都有一个问题，就是阶段性的问题，就是厉害的用不上，简单的牛不一定做的很好，这会有一个问题就是对，但是目前也会有这样的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:13:43",
      "text": "对，就是我其实觉得他核心用户目前来讲的话，其实我之前在我的帖子里我分享过，他现在特别适合用于编程教育。它的编程教育或者说类似create的产品在编程教育上面有很很深很深的发掘空间，我一直是这么认为的对，但是anyway我觉得现在来讲，科是目前最合适的试图写新的东西的人。他是他他在他要写的东西上面是个编程新手。",
      "speaker": "发言人1"
    },
    {
      "time": "00:14:10",
      "text": "这样子的话用curse非常好。我觉得curse他这个产品目前设计的核心的流程特别好的一个就是说它特别适合用来操作一个project，这个是give up copal完全没有考虑到的事情，或者说有意不为之的课程。特别适合说你整个project都交给他，你一直去描述这描述那他可以做到多文件的对，刚刚小朱也讲过，就是composer这种多文件的创造，多文件的修改。对，就特别适合小白，或者说完全想起一个新项目的人。但是这个体验我觉得他确实做的会比吉特号可拍的要好非常多。但是你要说他是不是，比如说他的目标用户是所有开发者，那我自己的体验不是那样。对，就是我自己的体验是不会那样。我之所以说我是他的轻度用户的一个核心原因，就是因为在我没有想学东西的时候，我不会打开它。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:04",
      "text": "对，就是一个样，我我我还是会用口拍的对，因为其实就是我那个时候我不需要那么重的一个东西，我既不需要chat对我也不需要什么git merge那些的，其实就是若有若无的提示我一下就够了。对，所以说他就有好有坏。好处就是说他可以把整个project的流程都控制在他的平台上。他自己因为他是一个完整的平台，他做的很清楚。快速它是一个很重的东西。如果你要做一个很重的东西的话，我你的那个场景必须要看切的非常好才行，不然的话大家都不愿意用这种东西了。对，每个人都有迁移成本。对，是的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:15:41",
      "text": "真真不错。Guess刚才我问的这两个问题，你都已经给出了非常明确答案。一个就是说作为你一个长期编程的从业者来讲，你是他的一个轻度用户对吧？刚才我们讨论了一下他的核心用户有可能是什么。第二你就说的他是一个未来，他的思路是正确的。他现在完全是在一个正确路上做出什么东西。我相信其实资本市场已经给了答案，对吧？既然他现在能拿到这么多钱，并且被广泛讨论，他一定是做对了一些东西，而这个东西是大家期待的对吧？AI出来这么久了，已经不是一个乱竽充数的东西就能拿到这么多钱的那对下一个问题你们会觉得像这种新式的AI辅助型的编程，会替换掉或者是要替代掉很多现有的工程，就是编程人员的或者工程师的或者coding人员的工作岗位吗？会让这个工作岗位大幅削减吗？",
      "speaker": "发言人3"
    },
    {
      "time": "00:16:28",
      "text": "我个人觉得除非还有下一次的这种模型能力的涌现，大概率不会。因为其实我跟很多很多哥们儿交流过这个问题。我本质上我我我一直跟他们讲的一个是说大家总觉得程序员是在程序员的一个核心的目的是为了写新的东西。但其实如果你仔细想想，就是公司的架构或者商业运作架构的话，程序员的核心的目的是为了背锅。就是你核心目的是说你这个东西出问题的时候，确实有人能修修不了就滚蛋，能修就留下来。就是开发一个东西是很容易的，修一个东西是长久的需求，真的不容易。就剩下一个点，就是如果你想让他取代人的话，就是代表老板的能有办法用AI正确的修一个玩意儿。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:17",
      "text": "然后在这个case上面就相当于是说一个安全性的问题。在这个case上面是你需要做到非常好的效果才行。其实薛哥刚刚讲的一个事情就有也是软件里的真理。大意就是说这软件是个多次迭代的东西，它不是一个一次写完就像现在AI那样，不是说你扒一下告诉我我要做什么，写个文件就出来，然后就永远是对的。对，这是第一个点，就是他需要多次迭代AI在修bug上的这种安全性的问题，或者by case上面你需要做到非常好，我们才能够开始谈取代人的问题。对，这是第一个点。然后我觉得这个能力还是有问题的，还是比较差。",
      "speaker": "发言人1"
    },
    {
      "time": "00:17:55",
      "text": "因为如果你需要取代人的话，就代表原本那些指挥程序的人，他都有能力去定位问题，然后去指导问题。这个对于老板的教育是非常高的。我个人认为就是我可能也会的话，可能就是当然我还是很小白的。如果你的产品需要教老板用什么东西的话，很有问题，就是大概率老板懒得鸟你我。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:21",
      "text": "觉得恰恰AI是一个使用门槛很高的东西，就看起来使用门槛很低。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:27",
      "text": "对我就要讲的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:18:28",
      "text": "我就你你明白我，你明白我意思就是什么意思？就是如果你想用好curse这样的一个东西，首先你要是一个好的教练，就是你不是说只是一个执行层面，你要知道说你要什么怎么做错了怎么改。首先你在现实生活中，你是能够教别人去做这件事情，这个就是一个很高的一个要求。第二个要求更高，就是你要知道你要什么。",
      "speaker": "发言人2"
    },
    {
      "time": "00:18:53",
      "text": "这个其实蛮难的，所以会一上来对着这个AI编码的这个科学，然后就说我要做个什么的应用。没有这样的人我觉得很少非常少，这是非常少的人一上来就知道自己要什么，怎么做做给谁用。我觉得如果有这样的人，他已经去创业了，他不会在那边用课程，然后再来慢慢自己在写代码。对，所以我觉得这个是两个我觉得用AI门槛非常高的一个事情。那也就造成一个结果，就刚才gas也讲到，贤哥也讲到，这东西高不成低不就。就是到很资深的像glass老修这样的人，他可能就不太会就是高频的用。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:35",
      "text": "他会深度用。",
      "speaker": "发言人4"
    },
    {
      "time": "00:19:36",
      "text": "对到很低频的小白，他连代码是什么他都不知道，他想去写一写的时候，他发现这个环境不会部署，对吧？这个不会弄，那个不会弄一堆的问题。我不是代码写完就行了吗？为什么还有这么多的要调试的工作，他就卡住了，对吧？是的，所以这个就是变成它会变成一个高不成低不就的问题。我觉得这个就是AI最核心的一个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:19:59",
      "text": "其实AI的使用门槛是非常高的，因为它是一个input跟output一个过程。如果你要output的质量好的话，你的input的质量要更好才行。所以我觉得这是最核心的一个问题。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:11",
      "text": "对，这样就太高。我快速的插一句但我个人的看点就是说我没有那么就是那么我个人觉得前端程序是遭受冲击最为强烈，我甚至觉得今年今就是今年前端程序员遭受的冲击会严重很多。对，因为其实核心的原因还是跟苏哥刚刚提到一个点，就是前端程序员干的事情是老板最容易描述清楚了。对嗯对对嗯对，所以就是先。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:45",
      "text": "写死没关系。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:47",
      "text": "先有而且有一个。",
      "speaker": "发言人1"
    },
    {
      "time": "00:20:48",
      "text": "网站我先能卖货。",
      "speaker": "发言人2"
    },
    {
      "time": "00:20:50",
      "text": "而且第二个点也是我刚刚提到前端，它天然就是一个更能承受bug，更能承受业务安全事故的地方。如果你的一个比如说按钮，当然很资深的前端或者说很厉害的前端，前端权限是非常厉害。我无疑就是我根本没有这种方这方面的意思，就是我不是说什么写JS或怎么样，真的，但anyway就是从这个行业average需求来讲的话，它确实更能承受安全的事故。",
      "speaker": "发言人1"
    },
    {
      "time": "00:21:21",
      "text": "对，因为他无论如何只是一些UI上的渲染的问题。你这个button如果某个时候变得巨大或者变得巨小，就是可能是你那一天那几天的转化率会下降，或者说那几天的这种complain会增加。它不会有很严重的事故。你如果有某个数据库什么的写出bug了，那是很恐怖的事情。对所以我觉我我个人的看法，我是觉得说他不是说完全冲击不了程序员，就是他一定会冲击average的程序员。Average程序员里面冲击最严重就是前端程序员。我自己的话包括我接下来创业计划里面，我就不会，我前期核心团队里面根本不会找前端程序员，这是一个很很真实的事实。对，因为就是我觉得用过AI工具的人都会意识到。",
      "speaker": "发言人1"
    },
    {
      "time": "00:22:07",
      "text": "其实你跨行业来看，比如说制造业用AI就更多的它也是只能在用来做打样，来做这种快速的生成一些样品模板这样子的一些东西。那可能在比如说互联网行业用AI可能更适合像gas。刚才讲的可能其实更适合做一些MVP或者做一些这种demo的一些东西。你先把它做出来，然后去验证一下，然后反正是要重做的。我们都知道是要重做的，所以我先用AI快速做个MVP或者做个demo，可能是更就风险更低的一件事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:22:43",
      "text": "对，可能再具体一点，就是在做MVP跟demo的时候，我已经不要前端程序员了。这个是我们其实最近一年已经是这样了。就是我自己从产品经理的角度，我就把这个东西做了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:22:54",
      "text": "对，以前经常讲的叫full stack engineer，也就是全栈工程师里面其实很多人在在没有AI之前，这个还是挺费劲的那这个全栈确实是挺学的，整个经验各方面一般都是确实比较资深的。但现在可能full stack相对就容易一点，就是我确实跟大家像刚才讲的，前端有很多东西已经可以由AI来做。比如说我记得前两天应该是群里面有个小伙伴在问，说他们在探索那个不知道怎么知道人家有痛点，但是不知道具体怎么去解决的solution方案，不知道怎么搞。当时其实建议他们要去做一个demo或者MVP，我当时会建议的就是已经像github上就有很多这样子开源的一些AI辅助的这种框架。比如说有一个叫screen shot to code，就是只要你截图，他就可以帮你用AI去生成这个前端。那这个只要截图就能生成前端，是不是已经够快的。就相当于你看到一个对标，你只要说这个对标图截下来，他帮你把前端给你写差不多了，剩下你只要把后端写好就可以做demo了，就这么快。这样子的话其实已经是很颠覆的一个事情。",
      "speaker": "发言人4"
    },
    {
      "time": "00:24:00",
      "text": "可以这么看，就是我们抽象一点看你把未来AI跟整个科技行业看作一条食物链。站在这个食物链最顶端的一定是像gas这样的专家。他知道整个链条里面的工序从前到后就应该要怎么做。然后每个工种里面你对他的要求是什么，然后你需要他完成什么样的事情。",
      "speaker": "发言人2"
    },
    {
      "time": "00:24:22",
      "text": "首先站在最顶端的一定是这样的人，那AI会解决的是里面的具体的一个工序。比如说刚才讲的前端，或比如说刚才讲的一些UI上面的一些东西，但是这个工序本身是可以被替代的。但这条食物链还是这条食物链，就是这条供应链还是这条供应链，它没有变。那里面的know how也没有变，只是说他往前迭代的速度是这里面比如说原本有十个工序，可能今年有两个工序被ai取代了，明年有两个工序被AI取代。最后这些变AI变成造物工具的工具，然后把整个链条可能跑个百分之七八十能够AI化了。所以最理想的结果我是这样。但是站在食物链顶端的那个知道自己要什么的，知道每个工序每个工种怎么衔接的这个老师傅。对这个是其实是最难最难是是最稀缺的是最稀缺的对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:25:14",
      "text": "这块其实跟盖娜gas讲的就是其实软件是个工程化的东西，它对那个经验实践经验是非常这才是最关键的部分。也就是你再多的这个理论框架和其他东西都对，没有实践都不行。尤其是到现在AI时代的变化特别快，其实我我是会发现我现在有个痛点。Get CUP的code的，有的时候最新的一些东西它是没有的。比如说OpenAI最新的那个model的一些东西怎么组，怎么debug，他完全不知道。最后我还是得自己出来google去。",
      "speaker": "发言人4"
    },
    {
      "time": "00:25:44",
      "text": "over flag去找。对这个curse的这方面的就是他自己完全做自己平台的一个优势也出来了。科室有个专门的功能叫艾特dogs。你可以给他一个网址，自己给他去加那个外挂知识库了，对吧？对对对，给他有个网址，他可以加进去。当然我没试用过，我没试用。Anyway他是在这方向有努力的对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:26:06",
      "text": "其实这一块还是回答写哥刚才的问题，会不会真的是导致一些工程师的替代。那我会觉得说不会我我我觉得说不会一下替代，但是就是跟小苏刚才讲的有一些步骤开始替代。比如说那个程序员中间，我们其实还有一个痛点就是啥？就是写那个单元测试，什么unit test，这个东西其实挺重要的，对于那个代码的质量非常的重要，但是真的没有几个程序员愿意写。但是现在这块应该就是你通过AI辅助它，其实可以帮你至少省不少时间。应该是这样的，有这样的产品，有这样的产品。对对对，有这样的产品。然后包括还有就是后面要去做测试，再延伸出来，刚才这是程序员写的单元测试。",
      "speaker": "发言人4"
    },
    {
      "time": "00:26:47",
      "text": "程序员之外还有专门的测试工程师，那个soft engineer in test或者是说就是quality assurance engineer，就是测试工程师或者测试开发工程师。他们其实有非常大量的测试用例要做。这些东西其实现在就是你有代码之后，他去相应的帮你生成测试用例。这些东西也可以节省大量的空间。这就是我相关的行业内的同事们或者一些朋友们，就是这一块已经节省大量他的时间了。到最后他当然没有说直接节省人，一下子就替代人，但是它可以节省人力。也就是说我一个原来一个人看几个项目，现在看个两倍三倍的项目我就做得到了。这是我也是一个效率的提升，只是人到人的替代一定是像刚才gas小说都讲到了，它实际上是一个工程化。然后对经验，对这个包括你要去要到替代级别，他这个其实实际上还有很长的路要走。",
      "speaker": "发言人4"
    },
    {
      "time": "00:27:45",
      "text": "对我觉得这就是说在这个逐步替代上面的话，这个是肯定的。而且其实还是我的我的那个意思还是那样，一定是从背锅最少的场景，或者说慢慢的延伸上去。就比如说我觉得有一些一定是玩票的项目，就是之前很火的什么chat大夫或者啥的，用AI，用什么A卷做架构师一定是玩票的项目。因为架构师是最背锅的对，不可能违背行业规律，不可能先从最背锅的行业开始做，一定是从背锅最少最最轻的和角色上。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:20",
      "text": "比如说大家都讲到背锅最少的场景上，背后最少就MVP。你做了一口屎不要紧，你把你说你写写烂了不要紧，丢了就赚不掉。就是对他写报了不要紧。对，没人管那些报了的前观点，不要管你只需要管你给投资人演示的那个，或者跟你的种子用户演示的，在电脑上不要报就行。所以那种背锅最好的场景肯定是专门有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:28:44",
      "text": "我觉得我也很相信有人可以把那种比如说特定MVP的这样的一些这样的一些AI的产品做的很好。包括其实在AI出来之前就有这些类似的产品。像比如说国外有像有那种类似像sheep faster，ship fast，就他就卖你一个模板，这个模板里面就是什么落地页，用户登录全都有你肯定不可能。比如说你这个产品做大了，你一直用他的模板，但你用他的对，那个独立淘宝的一年AR能卖到三四千，3至10万美金。就last time check，上次我查这个数字的时候是这样，他们肯定有一定是从背锅越来越少的场景，或者具体的角色慢慢往上演化。",
      "speaker": "发言人1"
    },
    {
      "time": "00:29:24",
      "text": "对对对，就是这第一个点，其实我刚我回忆一下。我第二个点就是谢谢苏哥的那个让我回忆一下关于大家对于语言之间这个工具的使用门槛，很多人会错误地低估。尤其是在软件行业里面，它还是请我们一直在聊一个事情，它不是一个一次就结束的玩意儿，他一定是个动态的，一直在变化的。你针对的是一个使用流程构建的软件，你不是针对的是一个某种静态的东西。你不是往上面挂一个你的博客那种，我认为大概率不是已经会慢会被时代淘汰掉。如果你想建一个博客这种CMS啥的，你可以看到notion或者其实很多这样东西，他会把这些东西完全的抽象化掉。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:08",
      "text": "真正的软件一定是个动态，或者说其实这个软件本身就是你的know how，你需要构建你的bad case，你需要知道你的OK用户会在哪里越界，哪里不会越界。它是一个动态东西，你可以理解为它就是一整套的一个我认为它就是一整套的行为的知识。你对行业的理解，你的know how，其实很多时候都需要通过软件提供出来。这也是社交一个点。就是如果你想要干掉程序员这个代表，就是程序员很多的问号你也有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:30:39",
      "text": "这里涉及一个点，就是说你怎么样用你的语言描述清楚你想要的那个具体的软件。我觉得很多老板会认为这是很简单的事情。但其实我自己过去一年，其实咱们一开始交流过，我过去一年最大成长是我不是学了什么东西，我读了一本哲学家的一些相关的言论和书。那哥们叫维特根斯坦，他有个非常有价值，就是说他成功的告诉你语言的使用成本是很高的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:05",
      "text": "你想的东西和你写出来的东西是不一样的。就是不要觉得你能把问题说的很清楚。如果你有办法用语言把这个问题描述的很清楚的话，你会发现你使用的语言惊人的跟编程很接近。我看到我们的对，因为高级语言，就是如果大家使用过python的话，你会发现当你描述你想描述一些很具体的东西的时候，他已经很接近英语了。Python已经很接近英语了。没错，对，这也就社交。其实我看聊天里面有个同学交流过，我觉得那个想法是非常对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:31:34",
      "text": "就AI编程或者说从原理上来讲，它适合给那些知道自己不知道什么的人用。他知道OK这是一个什么玩意儿，我能够描述清楚他，我知道这个big picture，所以我能够想清具体执行可以交给别人用。但是AI编程它不适合那种不知道自己不知道什么的人用。他完全不知道这是什么玩意儿，可能完全对这个行业一点文化都没有我我觉得那个聊天那个哥们儿讲的非常的有真谛，就是你适合你还是必须得知道是啥，你能够描述构想做什么东西。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:08",
      "text": "对，是的，严是语言，自然语言其实使用门槛非常高。对，如果你有办法用自然语言，然后描述清楚了跟代码一样的东西的话，你其实是个非常强的人。你可能是个非常强的创业者，或者一个非常强的产品经理。就是语言成本是非常高。",
      "speaker": "发言人1"
    },
    {
      "time": "00:32:29",
      "text": "就是思维方式的差异，就是你要把一个需求语言描述成技术语言，这是两种思维方式。就是你技术可以学，知识可以学，思维方式其实很难学。对，这是我遇到的从我一个不会写代码的人来讲，我遇到最困难的一个问题。是的，对，就是我有业务语言或者我有产品语言，但我没办法很准确的把它转化成技术语言。这就是一个非常现实的问题。举个例子，比如说我要这样一个网站，那我要描述我可以描述清楚在业务上的需求，他会遇到什么客人，然后这个客人等到了你要怎么处理。但我很难描述出技术上你要怎么去针对他给出的方案。比如说数据库应该要怎么设计。那代码本身是一个可维护性很差的东西，所以这里面就会造成非常多的gap在里面，导致最后这个东西就是做不出来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:33:30",
      "text": "是的，其实主要还是为什么背锅那么重要？对，因为就是你在写代码的时候，功能只是一方面，边界是很大的一个方面。对，就是你可能写这个东西的时候，你根本不知道这玩意的边界上不是特别好的。那个很很常见的那个笑话，就像刚刚苏也讲到了你业务上面，你是说我希望这个人来了之后干这个事情，然后可以好然后写用AI写完了第二天那个人带着一条狗来了，崩系统就炸了，这很常见的问题。对，就类似就是写代码不光是在实现功能，也在实现边界。对，这个边界就是程序员自己的know how。因为如果你没有技术思维的话，你不知道怎么说清楚边界。说出自己想要的功能是很容易的，说出自己不想要的东西是非常特别的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:34:15",
      "text": "对，就是一个东西它一定有两个面的，我们只能看到一面。比如说我就是看到一本武侠小说，我就知道我拿了九阳神功，我就能变成张无忌。但你真的要去做这个事情的时候，你的师傅告诉你先给我蹲三个月马步，你就崩溃了。",
      "speaker": "发言人2"
    },
    {
      "time": "00:34:33",
      "text": "为什么我要蹲三个月马步再来练九阳神功，对吧？就跟我们小时候玩那个金庸群侠传里面就是那个小虾米一定要打那个野球拳，打到1到9级都是没有什么攻击力，突然第十级攻击力爆棚。这个东西你怎么怎么去讲，就凡事他都有两面。老板就会认为说我只要把业务搞清楚就好了，然后我只要知道怎么练九阳神功就行了。但是技术会说不行，这个马步没没蹲三个月还是搞不了，对吧？这个网站撑不住？高频爸爸来了，你会遇到什么问题你不知道。",
      "speaker": "发言人2"
    },
    {
      "time": "00:35:06",
      "text": "对，是的，所以今天我本来一开始还得有点担心，怕咱们聊这个编程的东西太多，或者聊这个真实的产品东西太多，变成什么呢？变成就是只是有一部分客户会感兴趣，其他人对这个因为觉得跟AI整个创业来讲离得比较远，但是我整个听下来，我觉得还是有很多很多收获的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:35:25",
      "text": "我觉得一个。一个好的AI产品出现，无论它能不能持续很久，未来会不会还存在。但它会让我们带来很多思考，就是到底AI可以做什么，不可以做什么，或者在现阶段，甚至说就像刚才goss我就说了一句话特别打动我，他说会不会在基膜上有一次再一次的涌现，然后如果在我们先假设那个东西还不知道什么时候出现在现阶段？在chat PT比如456，我们还能预见它的在进步的情况下，我们能够看到AI已经能做什么，或者他已经不能做什么。其实这个反思就代表了我们在下面的十年或者五年，或者再短1.3年创业的时候，可以再往哪个方向努力。也就是我们能先确定AI不能做什么了，那我们人家就去做呗，对吧？伴随着AI的能力，可能我们以前可能需要五年实现的东西，可能现在一年能实现了。像刚才老邱说他以前编一个月的东西，有了copy y之后变成一一星期，那这就是3分之1了对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:17",
      "text": "那如果能够利用好现在AI比如说cursor，比如说可拍的或者是其他AI产品纹身图等等的。在你现在领域之中你知道自己不能做什么，而且你又能描述清楚，让他能够帮你去做，或者能找到更熟练的使用AI的人一起去做。效率可能是以前的三倍甚至4倍、五倍，我觉得这个数字是可以预期的，对吧？",
      "speaker": "发言人3"
    },
    {
      "time": "00:36:38",
      "text": "然后刚才你其实gas已经超前的抛出了我想问的一个问题，就是因为我作为一个父亲，我儿子现在正在这个年纪，就是说是否要学编程这个事情。我就想问就是在AI当前，对，比如说一个十二三岁的那个男孩，吧？他对coding他不他他不会有这个抵触，但是他也没有完全没有一个，因为我不能给他任何的建议。那在这个时候，如果你们老修还有这个gas，你们会觉得还要不要像以前那么学编程？还是说会有一条新的路径出现，还是说我们可以完全的抛弃以前的思路，换一条赛道去看这个事情。我想听听就特别想听听你们两位对这个的看法。小朱你来。",
      "speaker": "发言人3"
    },
    {
      "time": "00:37:20",
      "text": "我我我讲一下。因为我昨天真的跟老师讨论过这个问题。因为我用完科室以后，我就跟老师讲说这个东西可能还蛮适合做来来来做教育的那为什么呢？因为他会把以往的我们整个对程序员，会对技术人员培养的方式全部改变掉。",
      "speaker": "发言人2"
    },
    {
      "time": "00:37:37",
      "text": "就以往我们可能要去，我们我们举个例子，我们要去学计算机，学编程，你好比是学数学对吧？那你可能你要去学算数，你要学心算，你要口算对吧？你要你还会验算，然后你要能够徒手把它算出来。现在有有咳嗽以后，你有一个计算器，你可以在手边按，那就原本就是从叫做闭卷考变成开卷考了。如果都变成开卷考了以后，你还有必要去学，就是掌握这种心算口算的能力？其实不是刚需了。反而明白说数学的原理，你知道加减乘除，我觉得这个可能是最更重要。",
      "speaker": "发言人2"
    },
    {
      "time": "00:38:16",
      "text": "就是从教小朋友角度来讲，就是告诉他说怎么去做一个软件，从头开始架构怎么设计，数据库是什么等等这些东西。他反而应该更更有一个全局的视角去学习编程，而不是说去学习写代码本身。这是我我我的一个非常直观感觉，因为我自己是不会写的。然后我昨天整个用下来，其实我是让我的同事先做一遍给我看。然后我看完以后，好了，我知道了，我知道说我要我要准备什么东西，然后我再自己去操作，我就非常快。对，所以我会觉得说昨天让我用这个closer的一个感觉就是整个教育是会需要改的，就培养人才的方式，培养技术人员，程序员的方式可能会重构，这是我一个比较隐约的感觉，但可能更具体的就留给老师跟大家来讲。",
      "speaker": "发言人2"
    },
    {
      "time": "00:39:08",
      "text": "对我也想听听大家我我我补充一下小苏这个场景，你想小苏从教育的角度来讲，它是一个真人copilot t起步的，是我们旁边一个真的程序员帮他起步了，咳嗽的使用。对，真人靠在了，他就坐在旁边帮他告诉他这个东西怎么搞，这样搞起来的。所以这个事情就是说他可能能做。但是我觉得你从家长的角度，你会更倾向于找一个真人帮你起步，还是找一个AI帮你起步。这个我觉得是现阶段你肯定会有疑问的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:39:41",
      "text": "就像刚才小朱说的，我可能是计算机背后的数学，我还是要基本要学会的，就是学编程。学编程我觉得还是要有一个系统的一个东西，学习一下会更好。因为我我的我我从因为我原来也是做编码出来的，我的感觉是这样子。因为现在像科技这样的工具，最终解决的是编码这个环节。那软做软件不是一个一次性的东西，它实际上是一个软件工程，它是一个engineering的事情，是个工程化的事情。编码只是其中的相对比较容易的部分，比较容易的工序。而且还是比如说我们从大的时间时间占比来梳理的话，前面的需求梳理大概一般要占40%到60%的时间。看看不同的项目，那你看接下来差不多编码可能大概是占20%到30%，然后最后收尾上线运维等等占10%到20%，这编码大概只能排到第三，大概是这样子的那因为前面如果需求清楚，然后各种各样的设计也清楚，就是前面的需求可能我们包含了产品需求，还有我们界面的交互UIUX全部都给它放到需求的话，那差不多都能占到60%了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:40:53",
      "text": "那那在这种情况下，如果说编码它实际上是比较清楚的，编码它就会是一件它的输入是清晰的，输出也是清晰的。因为输入的时候有需求和交互已经定义了你要怎么输入你要的东西，输出也定义清楚了你应该拿到什么样范围的结果。在编码这样子的一个输入跟输出相对清楚的情况之下，他解决的问题就会说，那你有一个工具去帮你去完成里面比较琐碎的东西，是很OK的那对于我们小孩子学的话，我会觉得说编码他就不用学那么深的很多细的东西。因为这里面涉及到很有很细的东西，有非常细的东西。那很多细的东西可能你有空拍的学习的，我觉得是很OK的。但是有些系统化的东西还是应该要有真人老师去跟他讲，因为它是一个工程化的东西。就是他要知道做一个软件其实有前面的需求，有前面的UI有后面的这个环境配置上线，后面的运维，有这么多的事情。这些事情才最后构成了你这个软件能叫做可用的软件。",
      "speaker": "发言人4"
    },
    {
      "time": "00:41:57",
      "text": "因为这个东西是而不是一个可能只是可以演示的软件。两个中间落差非常大对，那我相信你的小朋友如果现在正在学，他应该最好是要能学到一个可用的软件。他就真正掌握了像我们说的，他掌握的是一个数学的东西，而不是一个计算器。大概是这样子的，这是我我的观点可能gas看看从你的角度看是怎么样。",
      "speaker": "发言人4"
    },
    {
      "time": "00:42:21",
      "text": "对对对，正好其实学哥刚刚也提到，就是我亲眼看到有个案案例。就是国外有一个相当于是做网站部署的一个公司，然后比较有名叫不是有。然后他其实有做一个类似cursor的事情，就是他做了一个叫v zero，就是这个产品就是说你用自然语言描述，他把你的各种你想要的前端全都给你搞出来，这种代码还是可以直接可分享的，可以直接添加到你的工程里。就v zero v零点def。然后有人说就是用什么v zero加上cursor，然后就可以完全怎么讲叭叭叭叭叭就类似的事情。",
      "speaker": "发言人1"
    },
    {
      "time": "00:42:58",
      "text": "这里确实涉及到一个点，就是说编程的东西你实际想要可用，就或者说你实际想要OK让他真的产生社会价值。你其实是需要除了简单的写代码之外，需要很多附加的东西的。比如说长时间的需求设计UI设计什么前后端联调后端，然后什么地方乱七八糟的东西，这些都需要了。",
      "speaker": "发言人1"
    },
    {
      "time": "00:43:21",
      "text": "但是我觉得这里有一个点，就是说在讲到教育的时候，因为我觉得我经常跟人说，计算机是一个很有魅力的学科。但那是个工程学科。就是在他的学习原理上面，他跟你去他跟你去打胶打腻子是没有区别的。它的学习原理上面，我一直觉得编程学科它的核心的价值永远来自于实践，然后再是理论学习，因为这是工程，它不是一个完美的理论框架，它不是像数学或者什么样东西，我是完全支持。有人可以完全不学数学，但是他可以写出非常漂亮的代码，这是完全有可能完全完全有可能。因为编程需要用到数学知识真的很少，当然除非你是特定的特定领域的程序员。比如说你是写那种举证乘法的，或者你写拍touch那样的人。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:11",
      "text": "我们就再说编程，无论如何它是一个工程学科，就是实践永远大于理论，然后这第一个点。第二点就是说我几乎是我觉得这听起来有点像是一个暴论。但我觉得我几乎100% share的编程里面最好的学习的方法论，就是learning by doing。就是你不要先去学你应该学的东西。不是比如说就像徐哥讲的，就是我的学科应该是科班出来的，所以可能这点观点会更不一样。我不是科班的，对我学物理出来，我所有代码都是自学的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:44:45",
      "text": "你说的我是计算机专业。",
      "speaker": "发言人4"
    },
    {
      "time": "00:44:47",
      "text": "的对对对对对我实践出来就是说当我知道我要做什么的时候，我学东西的效率是最快。而不是说我要学什么东西在做，就是后者的效率是非常低的。比如说我最早学python的时候，我就搞了一本书。然后在那个academic的可汗学院u academic上面找一个paton的课程，我学了两个月来学。然后我拍场上写的巨烂无比。然后我实际拍摄真正进步的时候，就是说OK我有天晚上睡前说我想写个东西，我感觉应该很有意思。然后我就起来我的时候决定我要派人写，然后我一边写一边查，我大概就两三天的时间，我那次写完之后，我的python我几乎没有遇到过任何写作的问题。",
      "speaker": "发言人1"
    },
    {
      "time": "00:45:33",
      "text": "无论如何就是编程到最后它可能对应的是一个实际的社会行动，对吧？比如说团队协同的一部分。但是如果我们讲教育的时候的话，我觉得他作为功能学科一定是learning by doing这个。就是说在实践中学习效率是最高的，也是最应该的。如果我们从这个角度来讲的话，我觉得cursor或者类似curser产品，它的交易上之所有个很大的价值就在于它可以实现非常好的learning by doing这件事情。就是你其实比如说你看国外，当然国内可能咱们的培训班还是比较多一点。其实在国外流量特别高的全都是各大热门框架的tutorial，就是很实际的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:14",
      "text": "就是说OK你要学比如说你要学前端开发，就是react，那read的相关的课程热度是非常高。狼的课程点进去他不会提前告诉你说OK第一步read的发展历史，第二步VI的核心概念，这个是咱们中国人喜欢的教材。对对对，前半本书先告诉你谁干了这件事情，叭叭讲一大堆，就你不知道。为啥要干啥？老老期末考试说请你写出一个网页，就类似这样的事情。但其实这个是很抽象的，就是实际上热门最高interior全都是第一句点击第一句话。OK, today we are going to build web. Today we are going to build APP.",
      "speaker": "发言人1"
    },
    {
      "time": "00:46:54",
      "text": "I'm i'm gonna show you how to make a deep learning, you know deep learning program就是告诉你说你要做什么，然后他告诉你每一步对你干的这件怎么做，最终目的的意义是什么。比如说第一步我们必须先要安装，我们才能够保证你能完成这个目的。第二步我们必须先要正确的引入，才能保证你完成这个目的。这样的tutorial它热度高的一个核心原因，大家都能理解，对吧？比如说就是在座都是有过很多产品经验的，它的转化率远远高于我们刚才讲过那种错的教材。因为你每一步你知道自己在做啥，然后最终那个目标是感兴趣的。学习编程或者说实践，无论如何都是一件称不上有乐趣的事情。所以learning by doing，无论是在学习效率上，还是说在转化率上面，都是远远高于就是我认为的那种成体系的学习这件事情上面。",
      "speaker": "发言人1"
    },
    {
      "time": "00:47:48",
      "text": "所以其实我觉得说如果要学习，这就是有特定的学习目标。比如说我想学习一个框架，我想学习一个语言，我想学习一个东西的使用方法，我想做一个网站，一定是人力百度云。首先所以其实我觉得科是他在这方面缺乏的一个可能就是说OK每个学习者真的有可能上来就是自己给目标。对，就比如说你现在点进去各大网站，各大框架学习，to都是说要做一个他让你做的东西，这样非常好。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:21",
      "text": "但是其实是有可能把这个教程做成完全动态化。我进来之后，假如我们幻想这样产品点我进来之后我知我假如说我现在我要学python，我点进去现在的某个产品，他告诉你说你想你想build什么，我可以用python把它build出来，然后给你几个候选项。当然你也可以自己填，只要他填进去之后的话，其实每一个步骤是可以完全自然语言化，完全动态化。",
      "speaker": "发言人1"
    },
    {
      "time": "00:48:47",
      "text": "这样的好处是什么？就是大家真的在你不需要掌握语言细节情况下，这点其实我非常同意。是不哥跟修哥讲学习细节是非常折磨人的事情。我们应该学习个大纲，但是这就是我觉得科这样产品触发了一个潜在性。什么是真正的大纲？就是你能用话说清楚的东西，你能用文字，无论是英语还是中文讲清楚的东西就是大纲，就是curse或者说AI能触发的一个我觉得一个编程教育的未来，就是完全动态化的learning，by doing进来写清楚到底要做什么。",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:22",
      "text": "然后你告诉我你是个小白OK，我第一步你告诉我，你第一步你说你想达成什么功能，我底下就瞬间动态的告诉你说，为了做成你这样的事情，我必须要在这里加点代码，那里加点代码，然后可能再做一些额外的产品设计。比如说我每个新加代码上面，我可以有个小提示，这边旁边会有AI的解释。这个代码跟你最终的目的的关系是什么？为什么我要这么做？",
      "speaker": "发言人1"
    },
    {
      "time": "00:49:45",
      "text": "Anyway就是你的教程可以或者说编程学习可以变成完全的动态化。你不再需要依赖别人告诉你你要去build什么，然后你就按照他的那个来，当然那个效果已经很好，但其实他有更进一步的空间。对，所以但是我觉得这是一个新的方向。科是也不足以达到这个目的，cursor使用成本还是很高。所以其实你比如说钱哥你的那个问题，我觉得就是AI将来一定会在编程教育上面，咱们也不说很宽泛，整体教在编程教育上面一定会有dominate的产品，这是第一个点。但是现在没有我个人认为现在没有。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:22",
      "text": "我其实说实话现在的话ChatGPT非常棒。就是你让你的孩子问他，就是我要学我学的东西，给我列个步骤，或者说我遇到了某个具体的问题，给我点解决方案，用那种联网版charge proposal。对他也特别适合大纲式的学习。对对对，他擅长把东西结构化。对他也非常适合大纲式的学习，然后列出步骤和具体的引用。对对对，这是我的。对。",
      "speaker": "发言人1"
    },
    {
      "time": "00:50:51",
      "text": "说到这个就是刚才听大家聊的时候，我突然想到前两天我朋友推给我一个东西，就是说可汉学院和微软刚刚推出了一个新产品，叫叫可汗miko。我想试用一下，因为它是可菡的专门结合了AI的一个新的教学平台，然后是由微软和在后面搞的。然后我想试用一下，结果在家还不能试用。现在目前好像只对美国用户开放，然后它里面说的，我看介绍，里面说的一个主要的教学方向就是coding。所以我也很期待看到微软和可汗他到底用什么样的方式coding影像的一个东西。而正好我的孩子这就要开始学这个东西，所以我是很很关注的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:51:32",
      "text": "但当然听了你们两位的想这个说法之后，我是能理解的就是从家长这个层面，或者说从一个完全不学不不没学过口令的人我能理解就是说任何一个真的想去做，你首先得有一个目的，对吧？然后像刚才这个gas一直在强调的learning by doing。所以你就需要有先有一个目的之后，去真正去实践和做。但在做的过程中，你又不会像以前一样，就是完全零基础的，你还是有一个助手的。这时候你心态是不一样的，对吧？然后在整个完成这个过程中有可能你提高会发现你的助手能力达不到，你就是已经超过助手了。或者说那你可能会想有新的冲动去学新的东西。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:10",
      "text": "所以这个过程真的会完全颠覆以前可能科班从计算机科学，先学什么整个的计算机科学的发展史，然后再学软硬件各种东西，最后可能coding上。但是最后在工作中，可能每个人真正去做的事儿，又只是这个计算机科学中的很小的一部分，或者是在整个体大体系之中的一个角色而已。在这一点上可能真的是会有颠覆。那这样讲其实对是不是可以这么讲，就是说我们通过分析curse这个产品，会让觉得现在AI的出现，让创业变得更容易。就回到了我们的母主题，我们一直在谈论这件事情，就是从去年11月份我们跟盖茨说第二大脑对吧？当时说的时候也谈到很多东西，就是大家是不是还坚定这件事情，就是AI的出现会让创业这件事变得更容易。小苏，我记得你之前是有一个完全相反的论点的。",
      "speaker": "发言人3"
    },
    {
      "time": "00:52:58",
      "text": "是吧？对我不太同意。只是让你觉得门槛低了，其实门槛还是非常高的，创业的门槛还是非常高人财务战略这些东西你都需要，你都需要比过往更强。因为入局者的人觉得门槛低，然后入局者的人会比你更就比你想象的更多，所以反而你要比从前更强。",
      "speaker": "发言人2"
    },
    {
      "time": "00:53:18",
      "text": "但是我是觉得curse这个东西给了我一个很好的一个思路上面的验证，我们之前不是评测非常多AI的产品，就非常多搞到钱的AI产品。其实我印象最深的一点就是你要把重跟轻这两个事情统一起来。很多创业者他会找轻的东西，还有一种很还有很多创业者会去找特别重的，就难而正确的事情，我觉得这是不对的。这个东这事情要辩证统一。AI是解决的那个轻的部分，就是像curser这个东西可能就会让我觉得用自然语言我就能够很轻松的写出代码，这是轻的一面。但是他做的好的那一面是他把重的事情也做了，就他把编辑器给做了。对，这个是他做的重的地方，就他重构了这个编辑器，重构了编写代码的工具，加上一个AI的体验，然后让这个事情觉得让你觉得make sense，他对了，他有未来。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:17",
      "text": "让我想到还有一个例子，就是我们之前聊的那个speak对吧？大家都说speak这个AI教练做的特别好，也拿了OpenAI投资对吧？然后那个用户增长特别快。但是你只是看到他用AI做口语教练去改变这个用户体验。但你没有看到他背后做那么多年的教研体系，其实是非常深厚的。以及他对在各个国家不同的这种地面部队教研的能力，这个是你没看到的。所以我是觉得说就cursor跟这个speak这两个例子让我有一个非常深的感触。",
      "speaker": "发言人2"
    },
    {
      "time": "00:54:51",
      "text": "就是创业的轻跟重的部分，就是头跟尾就一定要要去协调起来。很多人他只是做了轻的部分，就是用AI套了一个壳，做了一个AI陪伴对吧？或者做了一个什么AI的什么法律顾问，类似这种一个transports的这个东西它很轻，但是他没有那个重的部分，他就留不下来。你看强到像C点AI这样的公司，他也被对也不行了。对。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:18",
      "text": "然后像我们之前聊到那个final round这个东西，它也是在前端改变了AI对面试者的这个交互体验，但是背后的那一套跟HR相关的流程中的那些东西他没有去做。他我觉得可以预见的是，也在真正讲上面或者在后面会遇到蛮多要补的课。所以这个是科学这个案例给我非常又确定了我的一个观点，就是什么是新的，什么是重的。",
      "speaker": "发言人2"
    },
    {
      "time": "00:55:47",
      "text": "轻的是你可以用AI去改变用户体验，重的是原本的业务流workflow know how你是不能少的，一个都不能少。对甚至我觉得未来做AI最有可能成功的还是那些原本就是在work flow know how，或者原本就在线下有非常强的根基，非常强的这种地面能力的公司，加AI他的成功概率会更高。对，这是我的一点思考。",
      "speaker": "发言人2"
    },
    {
      "time": "00:56:13",
      "text": "对这一点其实科技的团队也是这个情况。因为我们去看了一下他的采访，他很有意思。就是他最开始的时候他做的不是编码这一块，对他做的是CAD图像那一块的对对，他发现做了一年真的是搞不懂这玩意儿他自己也其实不太懂这个行业。然后后面想了一下，我还是得做我自己熟悉的就编码自己真的是程序员，这波人都是顶级的程序员。他们再回来说为程序员做一个这样的工具，那他在这里面的这个know how workflow以及他整个的上下游的这个关系，对吧？就他的最早期的这些种，就是能够体量的这些种子客户，一定都是跟他们类似的人。就像刚才告诉我就很好奇，尬死都会很好奇他们到底是哪拨人呢？对吧？",
      "speaker": "发言人4"
    },
    {
      "time": "00:56:58",
      "text": "我相信是跟他们特别近的那一波程序员，就是他们有非常相似的经历和喜好的一些程序员。他们特别真的是自己做好，服务好自己，也就服务好他们，然后他们有一个很好的体量。再到后面这些程序员可能在引发出相应的，可能一些资本也是对他们特别感兴趣的，就是也很熟悉的，长期在互相了解的一些关系。我觉得才会有现在这样子的一个突然打开了局面。不然的话这个AI创业可能他还困在他原来的CAD不懂的那个地方，可能已经挂掉了。",
      "speaker": "发言人4"
    },
    {
      "time": "00:57:32",
      "text": "对这个我觉得说真的是还是要回到说你去做熟悉的本来的这个行业，把你可能已经积累好多N年的一些东西和关系整个的供应链整整的东西。是啊包括刚才小苏还提到地面的一些销售的一些网络，一些channel这些。如果说你熟悉的东西怎么样去加上AI这个可能是成功率更高的一个创业方式。我觉得看了这么多期的这个我们做了那么多期的拆解，几乎这是一个非常共性的一个点，都是这样子的。",
      "speaker": "发言人4"
    },
    {
      "time": "00:58:05",
      "text": "对，这个其实非常符合逻辑。对，就无论是说像csa其实像之前的话，我觉得有两个特别好的案例。一个是gamma I，还有一个是notion AI。大家最近可能都刷到过个梗图，就是notion特别多国国外的AI6小龙什么留存率巨差。当然可能是那个数据有一点点问题，但是这个趋势是一定是对纯粹的AI产品到目前为止量最大的，肯定都还是chat的新的。",
      "speaker": "发言人1"
    },
    {
      "time": "00:58:34",
      "text": "无论是移动端或者是网页端这样的产品，它无论如何它总体来讲其实都属于我们类似于那种很轻的一个前端。你能把它流程做的很高之后，在特定人群上面流程很高。对，比如说高知识密度很高的群体或者角色，像学生期末考试前的学生，那个流程肯定很高。如果你你考试都是一个月的话，那一个月我的流程能可能有八九十，就是像kimmie或者多宝刹，但在大部分行业里面，它的流程非常低的。因为他他只有一个前面就他只提供了一个可想象的未来，他并不会直接告诉你说OK我能在这沉淀什么，我觉得notion I可能还不太明确，像gamma ai因为其实我是两三个月前我真的实际去用。因为我发现我身边很多人他已经不再给我share一个文件或者一个PPT，他真的给我需要一个no no gamma的立a link，我去用了，用了之后我就很明确的知道一件事情，就是gamma I不是他真正的就是不是gama真正留下用户的原因。他真的留下用户的原因是因为他在前面的2到3年做出一个非常好的一个online build powerpoint这样的一个系统。",
      "speaker": "发言人1"
    },
    {
      "time": "00:59:47",
      "text": "Gamma AI是一个非常好的对于他而言是一个非常好的增长手段。跟大家聊到它是一个很轻的前端，也不知道前端它是一个很轻的一个东西，它切的非常对。他在AI最害怕的时候，他瞬间就告诉你说OK他给了一个大家可以想象的未来，就是你用你的话就可以直接build。但是我并不觉得那个功能是它就比如说真正能够带来增长之后，把那些人留下的核心原因之一。对，确实是这样。对，因为他自己本身他背后都已经做的很好。但是我并不是说这一波AI的，我的观点其实跟所有最核心的不同就是说我觉得AI这一波带来的机会远远大于已有的场景。如果你在特定的场景上面，肯定我觉得一定是原本的大头吃掉这个场景，这是很绝对。因为这不是一个新的终端，它不是一个新的移动设备，你没办法在原来的设备上面抢占更多的时间。所以如果你做的场景是一个原本就有行业大头在做的话，你单纯靠你对AI的了解和你自己所谓的这种脑子里的know how你能干得过别人，我是非常持怀疑的态度。",
      "speaker": "发言人1"
    },
    {
      "time": "01:00:58",
      "text": "就比如说如果有人进来时候看到伽马AI成功了，然后咣一下说我要做一个什么什么G马ai然后他觉得说伽马是因为AI这么成功了之后，他就会面临到很严重的问题。但是如果比如说对，但是我觉得说AI这一波他一定是个非常大的一个。当然这个词用的很烂，我觉得它确实是个范式转移，就是真正的来native的产品，真正的巨大的机会，它的市场是涨出来的。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:31",
      "text": "他不可能说你在你闯进了一个很大的市场，然后说我能靠AI重新做完任何一次创新，都不可能有这样的成果出现。我在一个很大的市场里面，我能干翻原来的人我靠一些心智的生产力能干翻原来。这不存在任何一个任何一次都不会，移动互联网PC都不会这样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:01:51",
      "text": "对真正的市场一定是长出来了，就是在新的技术上面长出来的。所以所所以我觉得这个就是咱们刚刚讨论这东西，他一定是对的。肯定是说在已有的场景里面是有know how的人加上AI的人，他能够做的更好，这一定是对。但是我并不觉得说所有最后AI能够活下来，或者做的特别好的创业公司都是这样。",
      "speaker": "发言人1"
    },
    {
      "time": "01:02:15",
      "text": "就是有些市场它一定是涨出来的，当然就是比较常规，是我也没有办法举出太多的例子。但是我觉得肯定有有每个行业的真正在做这些特定的事情。比如说我自己比较关注的领域里面，其实就是我可能关注的更多是这种infrastructure这一块。确实就是我能够观察到很多其实大家根本不重视的方向。但是他对于新一代的想要去用大模型去构建application或者怎么样的这些人，他们真正需要的一个infrastructure。这些人可能现在还很小，可能都还是一些独立开发者，可能都还是一些这种大家都没人看好的人，他们的市场可能还很小。但是最后这一波人里面一定会有人做出新的创新产品。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:02",
      "text": "等到他们做出来的时候，给这些独立开发者，这些小的这种LM application builder做了这些back这些infrastructure，他们就会起飞。所以就是我觉得话是说做AI创业成功一定是。就是两种方向。一种是说这个场景大家都已经知道，比如说在线做APP，这个场景大家都已经知道了，那你就不要说什么你觉得你能用AI干掉原本的巨头了，那些原本的巨头也知道AI很厉害，但如果你的这个场景是因为AI出现才出现，那确实可以好好聊聊，可以深入的去挖一挖。你觉得这个市场的增速是怎么样？他可能现在就1000个人care，但是有可能他的增速会非常快。",
      "speaker": "发言人1"
    },
    {
      "time": "01:03:48",
      "text": "对，这个其实就是我看了一本书里面，我觉得那个例子说的很对。当然他那个书里具体的数例子都错，就是数据都不太对，就是破坏性就是创新者的困境里面讲的破坏性创新，原本的行业的巨头，并不是因为他们菜或者他们傲慢，所以被创业公司淘汰掉。是因为他们被他们的市场所困，他们被他们的需求方给困住了。那些需求方在他们这个成熟的当前这个成熟的行业里，那些需求方不会想要更新的东西。那个需求方是最大市场，比如说他当时那个数据局就硬盘，硬盘从13英寸到8英寸，到5英寸，到3.5英寸，可能在十年时间内淘汰了四波公司，每四个公司都是那样。我做了13寸英寸的硬盘，我成为红龙龙头老大。",
      "speaker": "发言人1"
    },
    {
      "time": "01:04:36",
      "text": "最后8英寸的出来，我靠13英寸挂掉。8英寸成为老大之后，5英寸的出来，8英寸的挂掉。他们那本书里面讲讲，就是说难道是因为这些公司都很蠢吗？他难道不知道要做新的硬盘吗？其实不是那样，就是比如说8英寸的公司，他当时最成熟的企业就是那种计算机，但不是巨型计算机，而是那种那个时候计算机可能要一个房间的类似那样，那些是最大的客户，能给他们带来最多的钱。那些客户不想要5英寸，所以他们不会花钱去做5英寸。即使他们有技术，有人脉，他们知道会有5英寸的东西，他们不需要，因为他们客户不需要。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:12",
      "text": "那为什么5英寸最后能活下来？因为5英寸当时只有创业公司愿意做，因为创业公司可以做小规模，小规模就是那种所谓的微型计算机。没错，所有人都觉得微型计算机当时就是很小的市场，但是关键是他的客户增速很快，微型计算机很快成为了一个很大的市场。所以8英寸的死掉，5英寸的起来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:05:31",
      "text": "对，这是为什么那本书？我觉得非常有价值一个点就是在我们其实还是处于我觉得AI这一波带来的机会的早期。一定是成熟市场的客户优先，能让这些成熟市场的需求方能够让大家赚到钱。所以一定是已经在做成熟市场的那些人，快速的加上AI build出一个很有害，很多人愿意试的东西。因为大家都愿意试A爱。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:00",
      "text": "这是这一波最最可能是说跟之前我觉得最不一样的事情。在手机刚出来的时候，在什么5英寸硬盘刚出来的时候，很多人不愿意去理他。但是AI这一波所有人都知道是大机会。所以那些成熟的市场方里面，你给这些成熟的需求方加上AI之后，你能快速的获得一个很大的流量。",
      "speaker": "发言人1"
    },
    {
      "time": "01:06:18",
      "text": "我觉得干嘛？比如说盖马AL就是一个很好的例子。他可能之前有点不温不火，但不是因为他的产品做的很烂，或他的idea就是wrong，他也是错。关键是很多人不知道他，或者很多人不愿意adapt他这样的一个工作方式去。你加上AI之后，快速就能有一个很大的一个曝光量和一个宣传量。但是anyway还是那样，就是我觉得AI带来了真正的机会，那些需求方还在成长，它一定不是一个成熟的市场。现在对，除非它真的是一个很烂的机会，但我觉得不是我觉得不是他的需求方一定还在成长。对，之所以他在成长，就代表那些有know how的人，他不是因为自己笨做不了，而是因为他们根本没有想过去做那些人的东西。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:00",
      "text": "好，因为他现在还是个很小的市场。是对我自己观察到了。因为我看还是那句话，我看infrastructure比较多，确实是会有这样的机会慢慢出来。这样的机会完全是为了构建大模型的application而产生出来的一些慢慢的市场和需求。它确实是很小，可能很多人都不care，但是他有可能会有一个很巨大的增速。对所以我觉得这个观点就是我觉得刚刚薛哥或者苏伟讲的观点肯定是非常对。因为我们还处在一个很早期的阶段，能给出钱的，能让你给出很多钱的，一定是个很成熟的需求，是要活下来。",
      "speaker": "发言人1"
    },
    {
      "time": "01:07:36",
      "text": "很多创业者可能要活下来，他会先找到一个成熟的。但是刚才gas讲的那个我觉得特别认可。刚好最近看到山姆奥特曼ONI的这个创始人，他十年前是在做VYC投资。他其实特别讲了一个问题，跟你这个说的真的是一模一样。他就是说投资人会问创业者的一个问题，他觉得特别的笨，就是问你现在这个市场占有率有多高。因为他说一个好他他的观察就是所有好的真正的好的创业公司，他不是现在的市场占有率高，他是把现在一个有潜力的市场占有率做高了。但是现在有潜力的这个市场很小，它会在未来的五年、十年爆发性的增长，这才是一个好的创业公司。但是大部分的创业者就是可能不能这样去想，更多的投资人也不会这么去想，很有意思。",
      "speaker": "发言人4"
    },
    {
      "time": "01:08:28",
      "text": "对，肯定的。商创业和商业毕竟虽然一字之差，但是中间还有很大的gap。我觉得创业者首先富有的是激情，对吧？是要做成一件可能没有人做或者说没有人做好的事情。但商业是真正要实现它的商业价值的，它是要对资本负责的，要对所谓投资人要去实现他的那个回报的。",
      "speaker": "发言人3"
    },
    {
      "time": "01:08:48",
      "text": "今天我刚才听你们三位的发言，我有一个特别深的感触。因为我特意去听了一下咱11月份那一期，就跳着听一听我的感触。就是说咱们有大概这个相隔十个多月没没见了，然后在谈的时候其实对AI的信心更足了。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:04",
      "text": "今天我们谈的时候，我的感受就是咱们在一条新的基准线上再谈一件旧的事情。所谓谈的新的基准线，就是说我们在一年前或者在看这个事情的时候，就觉得AI一定是方向，一定会有很多很多创业机会，一定要但是当时并没有特别清楚的知道OK到底会多快或多慢，或者说到底会是要一个什么样的一个节奏。但今天我们谈到很多具体的案例，其实就是在过去的这个时间内发生的。而且我们可以更清楚的看到三个月、六个月以后的变化了。所以如果有我们的听众或者观众有兴趣的话，真的建议你们关注我们人民公园，说一下这个视频号或者官方号。可以倒回去看一下以前我们的嘉宾的一些发言，尤其是这两期共同使用会有不同的感触。",
      "speaker": "发言人3"
    },
    {
      "time": "01:09:49",
      "text": "然后另外来讲的话，就是我我也是我首先我首先是一个AI技术的信仰派，但是我更多的是说觉得这真的是个创业的好时机。刚才盖茨也说，guss也说了，就是你有know how你可以创业对吧？或者说你你这个A你的AI想法是要新长出来的。在AI这个时代新长出来一个需求，那完全可以一起聊聊。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:10",
      "text": "对，所以gas后面我知道你后面也有很多想法，是你现在你自己也说，你在关注印刷这块东西，但是我想你后面还会有自己很多的idea。然后如果我们听众或者观众对对对我们人民公众说对I感兴趣，或者对gas现在做的事情感兴趣，欢迎欢迎联系我们的客服或者加入我们的社群。我们可以在后面的时候更多的聊一聊，而且以后我们会经常请一些我们之前的嘉宾回来聊一聊在这个过去一年中的一些变化和感受。我相信我相信会有在创业路上会给大家很多启发。这也是我们想办这样的节目的一个最大的初衷。成为大家创业路上的BGM，成为大家的陪伴者。",
      "speaker": "发言人3"
    },
    {
      "time": "01:10:49",
      "text": "好，我们今天就先说到这儿，时间也不短了。感谢guys。好啊，感谢guss拜随时跟我们分享你的进度。好，对，谢谢，期待你更多好消息。好，期待你好消息，拜拜，拜拜。",
      "speaker": "发言人3"
    }
  ],
  "lab_info": {
    "summary": "本次对话深入探讨了创业与商业的区别，着重强调了激情在创业过程中的重要性以及商业对于资本负责和实现商业价值的要求。对话指出，成功的创业公司需专注于在未来五年到十年内大幅提升潜在市场占有率，而不仅仅是当前的市场表现。此外，讨论了AI领域增强的信心及其作为未来发展方向的潜力，并邀请听众关注视频号或官方账号获取更多关于AI和创业的信息。讨论着重分析了AI在软件开发和编程教育领域的应用，包括如何通过AI工具简化软件开发过程，降低编程入门门槛，以及AI对编程教育的深远影响，使学习过程更加直观、互动和个性化。在创业方面，讨论指出了AI带来的新竞争环境，要求创业者具备更强的创新能力、资金管理和市场洞察力，并强调了在AI创业中成功的几个关键因素。最后，对话对未来技术发展，特别是AI如何继续改变软件开发、编程教育和创业格局做出了预测，指出AI的潜力远未完全开发，未来将出现更多创新工具和方法。",
    "qa_pairs": [
      {
        "question": "程序员的核心工作是什么？",
        "answer": "程序员的核心工作是为了确保软件的稳定运行，当出现问题时能够修复，并且在问题解决后继续留任。如果能有效使用语言描述清楚所需软件的具体需求，那么在某种程度上，这个程序员的工作就接近于编写代码。",
        "time": "00:00:00"
      },
      {
        "question": "使用科技和AI时需要具备哪些条件？",
        "answer": "要高效利用科技和AI，首先需要像教练一样清楚自己想要什么，知道如何正确操作以及如何修正错误。对于AI而言，由于其依赖于input与output的过程，若要获得高质量的output，输入的质量必须更高。",
        "time": "00:00:38"
      },
      {
        "question": "MVP（最小可行产品）场景中程序员的角色是什么？",
        "answer": "在MVP场景中，程序员的角色是背锅最少的，即只需关注能够演示给用户或种子用户使用的产品核心功能，不必过于追求完美，即使存在一些问题也能接受，因为用户的实际体验比当前版本的产品更不完美。",
        "time": "00:00:56"
      },
      {
        "question": "curse r火爆的原因是什么？",
        "answer": "curse r火爆的原因有两个方面：一是它利用特定用户案例展示其强大的功能，比如与八岁小女孩相关的内容；二是cloud 3.5版本的代码能力显著提升，这使得curse r能够提供更好的编程体验。",
        "time": "00:01:17"
      },
      {
        "question": "对于创业者选择轻重不同的项目，有何建议？",
        "answer": "创业者不应盲目追求轻或重，而应辩证看待。AI工具如curse r可以解决轻的部分，如通过自然语言编写代码，同时也在编辑器等重的部分重构了编写代码的工具，结合AI提升了用户体验。",
        "time": "00:01:37"
      },
      {
        "question": "curse r是否代表了AI工具在编程领域的方向？",
        "answer": "是的，curse r体现了AI工具在编程领域的发展方向，它不仅提高了轻度使用的便捷性，还通过底层API能力和模型升级提升了整体体验，是AI融入编程环境的一个成功尝试。",
        "time": "00:03:50"
      },
      {
        "question": "curse r团队为何决定做自己的编辑器而非插件？",
        "answer": "curse r团队认识到要提供优秀的编程体验，必须完全掌控编辑器平台，因此他们选择自建一个IDE，尽管这会降低转化率，但为了保证始终提供优质体验，这个决策是必要的。",
        "time": "00:09:12"
      },
      {
        "question": "curse r的独特功能有哪些？",
        "answer": "curse r的一个重要功能是支持在与AI对话时直接merge代码修改，即AI提出的代码改进方案可以以git merge的方式合并回原有代码中，保持代码的一致性和程序员的原有风格，这一特性极大地提高了程序员的工作效率。",
        "time": "00:10:13"
      },
      {
        "question": "AI辅助编程产品的核心用户群体可能是谁？",
        "answer": "核心用户目前特别适合用于编程教育，尤其是对于编程新手。此外，对于想要快速创建新项目的人来说，curse这类产品由于其便捷的项目管理流程，也较为受欢迎。",
        "time": "00:13:43"
      },
      {
        "question": "curse相较于Copilot的优势是什么？",
        "answer": "curse在项目整体流程管理上做得更好，特别适合处理多文件项目，能够实现对项目各个阶段的良好控制。而Copilot虽然依托于庞大的GitHub平台，但作为独立轻量级产品，在项目全流程整合方面存在局限性。",
        "time": "00:14:10"
      },
      {
        "question": "AI辅助编程产品是否会取代现有的程序员工作岗位？AI辅助编程在安全性方面的挑战是什么？",
        "answer": "除非未来模型能力有重大突破，否则不太可能完全取代程序员岗位。因为程序员的核心价值不仅在于编写新代码，还包括解决现有系统问题的能力。并且，使用AI辅助编程需要用户具备较高的编程能力和经验，这意味着AI辅助编程更适合于降低资深程序员的工作负担，而非大幅削减工作岗位。AI在修bug上的安全性是一个重大挑战。软件开发是一个迭代过程，AI需要通过多次迭代来确保修复问题的有效性和准确性，以达到能真正取代人工的程度。",
        "time": "00:15:41"
      },
      {
        "question": "使用AI辅助编程的门槛是否很高？",
        "answer": "是的，AI辅助编程的使用门槛实际上非常高。不仅要求用户具备良好的编程基础和指导他人能力，还要求用户明确自己的需求。目前，真正能够高效利用AI辅助编程完成复杂项目的人才非常稀缺。",
        "time": "00:18:53"
      },
      {
        "question": "前端程序员是否较易受到AI辅助编程的影响？",
        "answer": "是的，前端程序员可能是最先受到AI辅助编程冲击的群体之一，因为前端开发的需求通常更容易被清晰描述，且前端项目对于业务安全事故的承受能力相对较强。不过，AI并不能完全替代前端程序员，而是更多地用于快速生成MVP或demo，降低重做成本。",
        "time": "00:21:21"
      },
      {
        "question": "在AI时代，软件开发中是否存在工程师被替代的可能性，特别是在单元测试和测试用例生成方面？",
        "answer": "不会完全替代工程师，但AI可以在一定程度上帮助节省人力。例如，AI可以辅助程序员编写单元测试，大大节省时间；同时，对于测试工程师或质量保证工程师，AI能够生成测试用例，从而减少他们大量的工作量，提升效率。",
        "time": "00:26:47"
      },
      {
        "question": "AI是否会逐步替代程序员中的某些角色，并且是从背锅最少的场景开始逐渐演进？",
        "answer": "是的，AI的逐步替代是肯定的，会从背锅最少、风险较低的场景和角色开始，逐步向上演进。比如MVP（最小可行产品）阶段，AI可以用来快速构建原型或演示版本。",
        "time": "00:27:45"
      },
      {
        "question": "在AI编程出现后，是否应该像以前那样学习编程，还是有新的学习路径出现？",
        "answer": "这是一个值得讨论的问题。虽然AI编程可以协助一些有基础的程序员更高效地完成工作，但它更适合那些知道自己的目标并能用清晰的语言描述出来的人。对于是否需要像以前那样系统性地学习编程，需要根据个人情况和目标来判断。",
        "time": "00:31:34"
      },
      {
        "question": "对于使用语言工具构建软件的门槛，以及自然语言与技术语言之间的差异，如何看待？",
        "answer": "使用语言工具构建软件的门槛很高，尤其是自然语言与技术语言之间的转换，这是思维方式的差异。很多非技术人员能清晰描述业务需求，但在转化成技术语言（即设计数据库、编写代码等）时会遇到困难，而这正是目前面临的一大挑战。",
        "time": "00:32:29"
      },
      {
        "question": "在编程教育方面，你认为引入类似Closer这样的工具会改变现有的教育方式吗？",
        "answer": "是的，我认为使用这类工具会重构教育培养技术人员和程序员的方式。传统的教育方式可能过于强调手算、验算等基本技能，而在有类似Closer这样的辅助工具后，这些技能的重要性可能会降低，更重要的是理解和掌握数学原理和全局视角去学习编程。",
        "time": "00:37:37"
      },
      {
        "question": "对于小苏这个场景，从家长的角度来看，是倾向于找真人教师起步教学还是利用AI如Closer进行起步教育呢？",
        "answer": "这是一个现阶段值得家长深思的问题。虽然AI可以帮助孩子起步，但系统化、工程化地学习编程仍需专业老师的引导，因为编程不仅仅是编码，还包括需求梳理、设计、UI/UX设计、前后端联调、运维等环节。",
        "time": "00:40:53"
      },
      {
        "question": "编码在软件开发中的占比大概是多少？",
        "answer": "编码在整个软件开发过程中只占大约20%到30%，而需求梳理和设计等前期工作占40%到60%，收尾上线运维占10%到20%。因此，在编码环节，利用工具如AI来完成较为琐碎的任务是可以的，但对于小孩子来说，不必深入学习所有细节，而应更多地掌握软件工程的概念和全流程。",
        "time": "00:39:41"
      },
      {
        "question": "编程学习的最佳方法论是什么？",
        "answer": "学习编程的最佳方法论是\"learning by doing\"，即通过实际动手做项目来学习，而不是先从理论入手。编程作为一门工程学科，实践永远大于理论，高效的学习方式是在明确目标后，边做项目边学习相关知识。",
        "time": "00:47:48"
      },
      {
        "question": "如何看待AI在编程教育中的应用前景？",
        "answer": "AI在未来将在编程教育领域占据主导地位，它能够提供动态化的“learning by doing”体验，根据学习者的具体需求和目标，实时生成个性化的学习路径和提示，从而极大提高学习效率和转化率。尽管目前AI产品还存在成本较高、使用不便等问题，但这一方向具有巨大的发展潜力和创新空间。",
        "time": "00:49:45"
      },
      {
        "question": "ChatGPT在学习中的应用效果如何？",
        "answer": "ChatGPT在学习中表现出色，能够帮助用户结构化信息、解答具体问题，并列出学习步骤和解决方案，非常适合大纲式学习。",
        "time": "00:50:22"
      },
      {
        "question": "可汗学院和微软推出的可汗miko新产品有何特点？",
        "answer": "可汗miko是一个结合了AI的教学平台，目前主要面向美国用户开放，专注于coding教学方向，我很期待看到微软和可汗如何利用AI技术改革编程教育。",
        "time": "00:50:51"
      },
      {
        "question": "对于孩子学习编程时家长的心态变化有何看法？",
        "answer": "家长在孩子学习编程时需要有明确的目的，并理解“学习 by doing”的重要性。在这个过程中，AI助手的存在改变了原有的学习路径，让学习者在遇到困难时有辅助工具，心态也会有所改变，甚至可能激发他们去学习新的知识和技能。",
        "time": "00:51:32"
      },
      {
        "question": "AI的出现是否会让创业变得更易行？",
        "answer": "虽然AI降低了创业门槛，但实际创业的门槛依然很高，包括财务战略等都需要更强的能力。像Cursus这样的产品通过AI重构编辑器，简化编程过程，但真正的成功还需要协调轻重部分，既利用AI改善用户体验，也要掌握核心的业务流程和行业经验。",
        "time": "00:52:58"
      },
      {
        "question": "科技团队如何利用自身优势结合AI进行创业？",
        "answer": "科技团队应选择自己熟悉的领域，利用多年积累的经验、供应链和客户关系，在此基础上加入AI技术，这样的创业方式更有可能取得成功。例如，将AI应用于熟悉的业务场景，而非一开始就试图在全新领域创造全新的终端产品。",
        "time": "00:57:32"
      },
      {
        "question": "AI创业成功的关键是什么？",
        "answer": "成功的AI创业不仅要有轻的部分，即用AI优化用户体验，还要有重的部分，即深入理解并重构原有的业务流程。那些拥有强大行业背景和地面部队能力的公司，在结合AI技术时成功的概率更高。",
        "time": "00:55:47"
      },
      {
        "question": "AI在现有场景中的应用是否能够颠覆传统创业模式？",
        "answer": "AI确实带来巨大机会，可以在特定场景中实现创新和超越，但它不能保证在所有场景下都能取代原有行业大头。真正的市场增长是在新技术基础上产生的，即使在已有场景中，具备行业know how并懂得应用AI的团队也能做得更好。",
        "time": "01:01:51"
      },
      {
        "question": "在AI创业领域，成功的方向有哪些？",
        "answer": "成功的方向有两种。一种是针对已知场景，比如在线APP领域，利用AI技术去挑战现有的行业巨头；另一种是AI带来的新场景，即AI出现后催生的新市场，这类市场增速可能非常快。",
        "time": "01:03:02"
      },
      {
        "question": "破坏性创新中，为什么行业巨头会被创业公司淘汰？5英寸硬盘是如何从8英寸硬盘那里获得市场份额的？",
        "answer": "行业巨头并非因为无能或傲慢被创业公司取代，而是由于他们被成熟市场的客户需求所困。这些需求方倾向于维持现状，不愿意更新换代，即使企业有技术、人脉优势，也无法满足客户的需求变化。5英寸硬盘能活下来是因为当时只有创业公司愿意生产，并且能够针对新兴的微型计算机市场进行小规模定制，满足了增速较快的客户需求，从而逐渐占据了市场。",
        "time": "01:03:48"
      },
      {
        "question": "对于AI创业公司的期望和观察是什么？",
        "answer": "许多有潜力的创业公司在初期市场占有率不高，但它们成功地将一个有巨大增长潜力的市场占有率提升起来。真正的创业成功在于预见未来市场的爆发性增长，而非仅仅关注当前的市场份额。",
        "time": "01:07:36"
      },
      {
        "question": "AI这一波机会中，成熟市场的需求方扮演了什么角色？",
        "answer": "在AI带来的早期机会中，成熟市场的需求方是关键。将AI技术与成熟市场结合，可以快速吸引大量关注和流量，为创业公司提供曝光量和宣传机会。",
        "time": "01:06:00"
      },
      {
        "question": "对于AI领域的创业者来说，现在是一个怎样的时机？",
        "answer": "现在是AI创业的好时机，有大量的AI需求正在形成，尤其是随着技术的发展，新的商业机遇不断涌现。鼓励有志于AI创业的听众关注相关进展，并欢迎加入社群共同探讨和分享。",
        "time": "01:09:49"
      },
      {
        "question": "创业与商业之间的区别是什么？",
        "answer": "创业和商业虽然一字之差，但中间存在较大差距。创业更多源于激情和创新精神，而商业则需要实现商业价值，对资本负责并追求投资回报。",
        "time": "01:08:28"
      }
    ],
    "chapters": [
      {
        "time": "00:00:00",
        "title": "探讨程序员角色、AI技术应用及市场发展",
        "summary": "对话中表达了对程序员核心目的的见解，即在遇到问题时能够及时解决或承担责任。进一步讨论了使用自然语言与AI技术来提升编程效率和质量的可能性，强调了AI在提升代码能力和编辑器重构方面的作用。同时，指出了AI技术应用于成熟市场的巨大潜力，特别是对于已经有强大根基的公司来说，通过AI技术能够快速构建出吸引人尝试的新产品。"
      },
      {
        "time": "00:02:50",
        "title": "探讨编程和AI工具的未来发展",
        "summary": "对话中讨论了对AI工具的依赖程度以及它们在编程领域的应用方向。一位参与者分享了自己在新创业公司工作的经验，专注于微调模型和构建相关平台，强调了AI工具，特别是像curse r这样的产品，虽然受到热捧，但其成功更多来自于模型能力的提升而非产品本身的功能创新。此外，也提到了使用Cloud的代码能力的提升在实践中对程序员的帮助，以及社区对这些工具的看法。整体上，讨论体现了对AI工具在编程中作用的深入理解和对当前技术趋势的观察。"
      },
      {
        "time": "00:06:50",
        "title": "探讨编程工具创新与AI辅助编程的重要性",
        "summary": "对话重点讨论了在编程工具领域内，创新与采纳AI辅助编程的重要性。指出尽管市场上已有成熟的IDE如VS Code，但仍有空间进行创新以改善程序员的体验。特别强调了一个名为curse的编辑器，它不满足于仅仅作为一个插件，而是选择开发一个全新的IDE来更好地整合AI辅助功能，如直接在对话中将代码merge回去的功能，从而提供了更优化的用户体验。此外，讨论还涉及了GitHub Copilot如何通过与VS Code的紧密集成，为开发人员提供更智能的代码补全建议。整体上，这段对话强调了在编程工具开发中，考虑到程序员的细微体验并利用AI技术进行创新的重要性。"
      },
      {
        "time": "00:12:39",
        "title": "探讨AI辅助编程工具的用户群体及影响",
        "summary": "对话集中在AI辅助编程工具的当前用户基础、市场定位及对未来编程领域可能的影响。一方面，讨论了Curse和GitHub Copilot的各自优势，强调了GitHub Copilot依托GitHub平台的强大用户基础和推广能力，而Curse在处理多文件项目方面更胜一筹，特别适合编程新手。另一方面，也提到了AI辅助编程工具可能在编程教育领域有巨大潜力，但同时也存在对高水平开发者实用性不高的问题。此外，还讨论了这类工具是否会对传统编程工作岗位造成威胁，表达了即使AI辅助编程取得进展，人类开发者依然有其不可替代的价值的观点。"
      },
      {
        "time": "00:16:28",
        "title": "探讨AI在程序员工作中的应用与挑战",
        "summary": "讨论集中于程序员的主要职责不是开发新功能而是修复问题，强调修复工作的重要性与挑战。提出AI技术要取代人类程序员，必须能够在修复bug方面达到高度的安全性和准确性，但目前看来，AI的使用存在门槛，真正能有效指导AI进行精确编程的人才很少。此外，也指出了AI在应用中的困难，如高不成低不就的问题，资深开发者和初学者在使用AI时遇到的不同挑战，强调了高质量的输入对于获得高质量的输出至关重要。"
      },
      {
        "time": "00:20:11",
        "title": "AI对前端程序员的影响及应对策略",
        "summary": "前端程序员因任务性质易被理解和描述，遭受AI技术冲击较为严重。AI的运用能快速生成前端代码，降低了开发MVP或demo的门槛，减少了对前端开发人员的依赖。因此，平均意义上的前端程序员面临更大的职业挑战，创业者在初期可能更倾向于使用AI工具而非雇佣前端程序员来快速验证产品概念。此外，AI辅助工具如“screen shot to code”能够基于截图生成前端代码，进一步加速了开发过程。"
      },
      {
        "time": "00:24:00",
        "title": "探讨AI在科技行业食物链中的影响及未来发展趋势",
        "summary": "在科技行业，AI被视为能替代部分工作工序的工具，但整个供应链和know-how未变。AI的进展可能替代部分工序，但掌握整体流程的专家仍然至关重要。AI能辅助完成如编写单元测试等繁琐任务，提高效率但不会立即替代人类工作。未来AI可能首先在背锅最少的项目中得到应用，逐步向更复杂角色延伸。"
      },
      {
        "time": "00:29:24",
        "title": "软件开发中的语言表达与理解成本",
        "summary": "在软件行业中，人们经常低估了语言作为工具的使用门槛。软件开发不是一次性完成的任务，而是一个动态变化的过程，针对的是使用流程而非静态实体。真正的软件开发是动态的，需要不断地构建、理解和调整。维特根斯坦的观点强调了语言使用的高成本，即思维与语言表达之间存在差异。此外，AI编程适合那些能够清晰知道自己需求的人，而不适合那些连自己不知道什么都不知道的人。能用自然语言清晰描述需求的人，通常是强大的创业者或产品经理，这表明语言成本在软件开发中是非常高的。"
      },
      {
        "time": "00:32:29",
        "title": "从非技术角度理解技术实现的挑战",
        "summary": "讨论重点在于非技术人员将业务需求准确转化为技术需求的困难。非技术人员虽能清晰表达业务需求，但难以理解技术实施细节，如数据库设计等，导致与技术实现之间存在巨大差距。此外，讨论还触及了技术边界的设定问题，强调了了解技术边界的重要性，以及如何通过AI工具提升工作效率和创新能力，展望了AI技术在不同领域的应用潜力和对传统工作方式的变革。"
      },
      {
        "time": "00:36:36",
        "title": "探讨AI时代孩子的编程教育",
        "summary": "讨论集中在AI技术如何影响孩子学习编程的方式。一位父亲提出疑问，考虑到AI的进步，是否还应像以往那样教授编程，或者是否应该探索新的教育路径。讨论中提出，AI可能改变编程教育的方法，使学习更加注重理解软件开发的全局视角，而非仅限于编码本身。同时，也强调了基础数学知识和系统性学习的重要性，以及实际软件开发过程中，编码只是其中一部分，真正重要的是从需求分析到软件上线的整个过程。此外，还提到了利用AI工具辅助编程学习的可能性，以及是否应该首选真人教师指导的讨论。"
      },
      {
        "time": "00:42:19",
        "title": "编程学习方法及实践价值",
        "summary": "讨论集中在编程学习的有效方法，强调了实践（learning by doing）的重要性以及如何通过具体项目和工具（如v zero）来提高学习效率。指出编程不仅是一门工程学科，其核心价值来自于实践，且对于非科班出身的学习者来说，明确学习目标并通过实践来达成这些目标是极为有效的。此外，通过案例说明了市面上流行的教程和学习资源如何通过引导学习者实际操作，以提高学习效率和兴趣。"
      },
      {
        "time": "00:48:20",
        "title": "探讨编程教育的未来：动态化学习与AI技术的应用",
        "summary": "讨论集中在如何利用AI技术将编程教育变得更加动态化和个性化。通过假设一个产品，讨论者想象了用户根据自己的学习需求（如学习Python）定制学习路径的可能性。强调了这种学习方式的好处，比如减少对语言细节的依赖，提倡大纲式学习，以及通过AI辅助的自然语言化交互，使编程教育更加直观易懂。同时，讨论还提到了现有的技术和平台（如ChatGPT和可汗学院与微软合作的新产品）在支持这种教育模式上的潜力和当前的局限性。整体上，讨论指向了编程教育未来的一个可能方向，即通过AI技术实现的学习个性化和动态化。"
      },
      {
        "time": "00:51:32",
        "title": "探讨AI对创业的影响及创业成功的关键因素",
        "summary": "对话集中在分析AI如何降低创业门槛，同时强调了即使AI提供了便利，创业依然需要深厚的行业知识、业务流程理解以及强大的财务战略。通过讨论具体的AI产品案例，指出了创业项目中轻重结合的重要性，即利用AI改善用户体验的同时，必须要有扎实的业务流程和行业know-how作为支撑。此外，也提到了创业成功往往源于创业者对自己所熟悉领域的深度理解和利用AI增强的创新能力。"
      },
      {
        "time": "00:58:04",
        "title": "探讨AI创业的机遇与挑战",
        "summary": "对话中讨论了AI在当前行业中的应用和创业机会，特别提到了Gamma AI和Notion AI作为案例，分析了AI产品在特定高知识密度群体中的高留存率和流程效率。强调了AI不仅仅是一个前端轻应用，而是需要有实际的系统支持和应用价值。讨论还涉及了AI技术为传统场景带来的机遇，以及AI创业公司面临的挑战，特别是在已知场景下与行业巨头竞争的可能性。同时，提出了AI创业的两种方向：一是利用AI改善已知场景，二是探索因AI而新兴的市场。最后，指出了基础设施建设对于AI应用开发的重要性，强调了未来AI创业成功的关键在于对新市场的探索和对基础设施的投资。"
      },
      {
        "time": "01:03:47",
        "title": "破坏性创新与市场需求的关联",
        "summary": "讨论强调了破坏性创新理论，特别是如何成熟行业的巨头因市场需求而难以适应新技术变革，导致被新兴企业所超越。以硬盘技术的发展为例，说明了即便原有企业拥有技术与资源，但由于主要客户需求的限制，无法及时转型，最终被能满足新兴市场需求的小规模创业公司所替代。同时，指出了AI技术的广泛应用潜力，认为成熟的市场需求方与AI的结合，能够快速吸引大量关注，强调了处于技术变革早期阶段的重要性以及对新兴市场机会的认识。"
      },
      {
        "time": "01:07:36",
        "title": "探讨创业公司成长与AI技术的未来",
        "summary": "对话集中于创业公司的成长方式和AI技术的潜力，强调真正的创业公司不应仅关注当前的市场占有率，而应着眼于有潜力市场的长期增长。讨论还触及了创业者与投资人间的常见误区，以及对AI技术的坚定信心和其在创业领域中的应用前景。此外，也提到了创业者应具备的激情和对商业价值实现的责任。最后，鼓励听众关注节目，以获取关于AI和创业的更多洞见和启发。"
      }
    ],
    "mindmap": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "提高编程学习效率"
                },
                {
                  "children": [],
                  "content": "实践性学习的推动"
                }
              ],
              "content": "AI辅助编程教育的潜力"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "通过实际项目学习"
                },
                {
                  "children": [],
                  "content": "动态化的学习路径"
                }
              ],
              "content": "学习编程的新方法"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "编程教育需要重构"
                },
                {
                  "children": [],
                  "content": "从传统到AI辅助的转变"
                }
              ],
              "content": "对编程教育的挑战"
            }
          ],
          "content": "AI技术在编程教育中的应用"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "需求方的快速增长"
                },
                {
                  "children": [],
                  "content": "新技术引发的市场扩张"
                }
              ],
              "content": "AI带来的新市场"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "重与轻的辩证统一"
                },
                {
                  "children": [],
                  "content": "原有行业知识与AI技术的结合"
                }
              ],
              "content": "成功的要素"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "理解AI技术的潜力"
                },
                {
                  "children": [],
                  "content": "寻找并满足新兴需求"
                }
              ],
              "content": "创业者的角色"
            }
          ],
          "content": "AI创业的机会与挑战"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "降低门槛与提高效率"
                },
                {
                  "children": [],
                  "content": "对传统编程人员的挑战"
                }
              ],
              "content": "AI技术的双面性"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "前端编程受影响较大"
                },
                {
                  "children": [],
                  "content": "AI辅助编程工具的普及"
                }
              ],
              "content": "对传统编程的冲击"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "新的编程教育模式"
                },
                {
                  "children": [],
                  "content": "预计未来技术将聚焦于高价值问题解决"
                }
              ],
              "content": "AI技术发展的预测"
            }
          ],
          "content": "AI技术的现状与未来"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "技术与非技术能力互补"
                },
                {
                  "children": [],
                  "content": "共同推动项目发展"
                }
              ],
              "content": "合作的重要性"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "沟通与理解的障碍"
                },
                {
                  "children": [],
                  "content": "通过合作探索新的商业模式"
                }
              ],
              "content": "挑战与机遇"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "利用各自优势共创价值"
                },
                {
                  "children": [],
                  "content": "案例分析带来的启示"
                }
              ],
              "content": "成功案例分析"
            }
          ],
          "content": "技术与非技术创业者的合作模式"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "content": "对AI技术的适应与学习"
                },
                {
                  "children": [],
                  "content": "专注于更复杂问题的解决"
                }
              ],
              "content": "编程人员的技能转变"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "AI辅助工具的开发与优化"
                },
                {
                  "children": [],
                  "content": "新兴技术领域的探索与应用"
                }
              ],
              "content": "职业发展的新方向"
            },
            {
              "children": [
                {
                  "children": [],
                  "content": "AI技术在教育中的深度融合"
                },
                {
                  "children": [],
                  "content": "培养具备未来技术能力的编程人才"
                }
              ],
              "content": "对编程教育的长远影响"
            }
          ],
          "content": "AI技术对编程人员的未来影响"
        }
      ],
      "content": "对话脑图摘要"
    }
  }
}