name: Podcast2RSS
description: 一个将小宇宙播客转换为RSS的工具，集成通义听悟实现音频转文字功能。

guidelines:
  - 使用中文回答问题
  - 自上而下思考问题，采用第一性原理
  - 处理问题时，先思考问题的根源是什么？这个问题应该在哪个层面解决？而不是直接开始改代码。
  - 在分析和修改代码时，需要考虑整个项目的结构和其他模块的影响
  - 确保完整阅读相关文件后再做决策

project_structure: |
  Podcast2RSS/
  ├── src/                          # 源代码目录
  │   ├── core/                     # 核心功能模块
  │   │   ├── __init__.py
  │   │   ├── podcast.py           # 播客数据获取模块
  │   │   ├── transcription.py    # 音频转写处理模块
  │   │   ├── tongyi_client.py    # 通义API服务接口
  │   │   ├── rss.py               # RSS生成模块
  │   │   └── storage.py           # 数据存储管理
  │   ├── config/                   # 模块配置目录
  │   ├── utils/                    # 工具函数目录
  │   ├── scripts/                  # 脚本工具目录
  │   └── main.py                   # 主程序入口
  │
  ├── data/                         # 数据存储目录
  │   ├── podcasts/                 # 播客元数据
  │   ├── episodes/                 # 单集信息
  │   ├── transcripts/              # 转写内容
  │   └── rss/                      # 生成的RSS文件
  │
  ├── config/                       # 全局配置目录
  │   └── settings.yaml            # 全局配置文件
  │
  ├── tests/                        # 测试用例目录
  ├── logs/                         # 日志文件目录
  ├── static/                       # 静态资源目录
  │
  ├── requirements.txt              # 项目依赖
  ├── README.md                     # 项目说明文档
  └── .env                          # 环境变量配置

## 项目运行流程
1. **播客数据获取** (`podcast.py`)
   - 通过小宇宙API获取订阅的播客列表
   - 获取每个播客的最新所有单集信息
   - 将播客和单集信息保存到本地数据目录

2. **音频转写处理** (`podcast_transcription.py`)
   - 剧集收集（EpisodeCollector）
     1. 扫描本地剧集目录
     2. 过滤条件检查：
        - 验证剧集数据完整性
        - 检查音频时长（跳过超过5小时的音频）
        - 确认未转写状态
     3. 生成待处理剧集列表
   
   - 转写处理（TranscriptionProcessor）
     1. 任务准备
        - 解析音频URL，获取任务ID
        - 获取并验证任务内容
        - 构建有效任务列表
     2. 批量转写
        - 提交转写任务（默认每批10个）
        - 定期检查任务状态（30秒间隔）
        - 记录任务完成情况（完成/失败/运行中）
        - 超时控制（1小时）
     3. 任务清理
        - 清理未完成任务
        - 清理失败任务
     4. 结果处理
        - 获取转写文本
        - 保存转写结果
   
   - 数据存储
     - 保存完整的转写文本

3. **RSS生成** (`rss.py`)
   - 整合播客信息、单集数据和转写内容
   - 生成标准的RSS Feed格式

数据流：小宇宙API → 本地数据存储 → 通义听悟转写 → RSS Feed生成，实现了从播客订阅到RSS生成的完整自动化流程。


备注；
 - 涉及到调用通义API时，需要先从TongyiClient类创建一个客户端实例。