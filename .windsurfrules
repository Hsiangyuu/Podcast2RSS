name: Podcast2RSS
description: 一个将小宇宙播客转换为RSS的工具，集成通义听悟实现音频转文字功能。

guidelines:
  - 使用中文回答问题
  - 自上而下思考问题，采用第一性原理
  - 处理问题时，先思考问题的根源是什么？这个问题应该在哪个层面解决？而不是直接开始改代码。
  - 在分析和修改代码时，需要考虑整个项目的结构和其他模块的影响
  - 确保完整阅读相关文件后再做决策

project_structure: |
Podcast2RSS/
├── src/                          # 源代码目录
│   ├── core/                     # 核心功能模块
│   │   ├── __init__.py
│   │   ├── podcast.py           # 播客数据获取模块
│   │   ├── transcription.py     # 音频转写处理模块
│   │   ├── tongyi_client.py     # 通义API服务接口
│   │   ├── rss.py              # RSS生成模块
│   │   └── storage.py          # 数据存储管理
│   ├── config/                  # 模块配置目录
│   ├── utils/                   # 工具函数目录
│   ├── scripts/                 # 脚本工具目录
│   └── main.py                  # 主程序入口
│
├── data/                        # 数据存储目录
│   ├── podcasts/               # 播客元数据
│   │   └── [pid].json         # 每个播客一个文件
│   ├── episodes/               # 单集信息
│   │   └── [pid].json         # 每个播客的所有单集
│   ├── transcripts/            # 转写内容
│   │   └── [pid]/             # 每个播客一个目录
│   │       └── [episode_id].json # 单集的转写结果
│   └── rss/                    # 生成的RSS文件
│       └── [pid].xml          # 每个播客的RSS文件
│
├── config/                      # 全局配置目录
│   └── podcasts.yml           # 播客配置文件
│
├── tests/                       # 测试用例目录
├── logs/                       # 日志文件目录
├── static/                     # 静态资源目录
│
├── requirements.txt            # 项目依赖
└── .env                       # 环境变量配置


## 运行流程

1. **配置加载**
   - 从 `config/podcasts.yml` 读取需要处理的播客列表
   - 每个播客包含 `pid` 和 `name` 信息

2. **逐个播客处理**
   对每个播客执行以下完整流程：

   a. **播客数据获取** (`podcast.py`)
      - 获取播客的元数据信息
      - 获取所有单集信息
      - 保存到 `data/podcasts/[pid].json` 和 `data/episodes/[pid].json`

   b. **音频转写处理** (`transcription.py`)
      - 检查未转写的单集
      - 提交音频转写任务
      - 监控转写状态
      - 保存转写结果到 `data/transcripts/[pid]/`

   c. **RSS生成** (`rss.py`)
      - 读取播客元数据
      - 读取单集信息
      - 读取转写内容
      - 生成RSS并保存到 `data/rss/[pid].xml`

3. **数据存储结构**
   ```
   data/
   ├── podcasts/                 # 播客元数据
   │   └── [pid].json           # 每个播客一个文件
   ├── episodes/                 # 单集信息
   │   └── [pid].json           # 每个播客的所有单集
   ├── transcripts/             # 转写内容
   │   └── [pid]/               # 每个播客一个目录
   │       └── [episode_id].json # 单集的转写结果
   └── rss/                     # 生成的RSS文件
       └── [pid].xml            # 每个播客的RSS文件
   ```

## 数据流
小宇宙API → 本地数据存储 → 通义听悟转写 → RSS Feed生成
